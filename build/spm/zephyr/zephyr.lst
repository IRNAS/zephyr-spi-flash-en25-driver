
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000c70 	.word	0x20000c70
}
   4:	000015d9 	.word	0x000015d9
   8:	0000493b 	.word	0x0000493b
   c:	00001609 	.word	0x00001609
  10:	00001609 	.word	0x00001609
  14:	00001609 	.word	0x00001609
  18:	00001609 	.word	0x00001609
  1c:	00001609 	.word	0x00001609
	...
  2c:	000013e9 	.word	0x000013e9
  30:	00001609 	.word	0x00001609
  34:	00000000 	.word	0x00000000
  38:	00001391 	.word	0x00001391
  3c:	00004821 	.word	0x00004821

00000040 <_irq_vector_table>:
  40:	00001599 00001599 00001599 00001599     ................
  50:	00001599 00001599 00001599 00001599     ................
  60:	00001599 00001599 00001599 00001599     ................
  70:	00001599 00001599 00001599 00001599     ................
  80:	00001599 00001599 00001599 00001599     ................
  90:	00001599 00001599 00001599 00001599     ................
  a0:	00001599 00001599 00001599 00001599     ................
  b0:	00001599 00001599 00001599 00001599     ................
  c0:	00001599 00001599 00001599 00001599     ................
  d0:	00001599 00001599 00001599 00001599     ................
  e0:	00001599 00001599 00001599 00001599     ................
  f0:	00001599 00001599 00001599 00001599     ................
 100:	00001599 00001599 00001599 00001599     ................
 110:	00001599 00001599 00001599 00001599     ................
 120:	00001599 00001599 00001599 00001599     ................
 130:	00001599 00001599 00001599 00001599     ................
 140:	00001599                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00008000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9e09      	ldr	r6, [sp, #36]	; 0x24
     272:	4604      	mov	r4, r0
     274:	4689      	mov	r9, r1
     276:	2b00      	cmp	r3, #0
     278:	f040 8083 	bne.w	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     27c:	428a      	cmp	r2, r1
     27e:	4615      	mov	r5, r2
     280:	d945      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0720 	rsb	r7, r2, #32
     28c:	fa01 f302 	lsl.w	r3, r1, r2
     290:	4095      	lsls	r5, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f707 	lsr.w	r7, r0, r7
     298:	ea47 0903 	orr.w	r9, r7, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a0:	0c23      	lsrs	r3, r4, #16
     2a2:	fa1f f885 	uxth.w	r8, r5
     2a6:	fbb9 fcfe 	udiv	ip, r9, lr
     2aa:	fb0e 991c 	mls	r9, lr, ip, r9
     2ae:	fb0c f108 	mul.w	r1, ip, r8
     2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     2b6:	4299      	cmp	r1, r3
     2b8:	d90a      	bls.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     2ba:	18eb      	adds	r3, r5, r3
     2bc:	bf2c      	ite	cs
     2be:	2001      	movcs	r0, #1
     2c0:	2000      	movcc	r0, #0
     2c2:	4299      	cmp	r1, r3
     2c4:	d902      	bls.n	2cc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4c>
     2c6:	2800      	cmp	r0, #0
     2c8:	f000 811d 	beq.w	506 <CONFIG_FLASH_SIZE+0x106>
     2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2d0:	1a59      	subs	r1, r3, r1
     2d2:	b2a3      	uxth	r3, r4
     2d4:	fbb1 f0fe 	udiv	r0, r1, lr
     2d8:	fb0e 1110 	mls	r1, lr, r0, r1
     2dc:	fb00 f808 	mul.w	r8, r0, r8
     2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2e4:	45a0      	cmp	r8, r4
     2e6:	d905      	bls.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     2e8:	192c      	adds	r4, r5, r4
     2ea:	d202      	bcs.n	2f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x72>
     2ec:	45a0      	cmp	r8, r4
     2ee:	f200 810e 	bhi.w	50e <CONFIG_FLASH_SIZE+0x10e>
     2f2:	3801      	subs	r0, #1
     2f4:	eba4 0408 	sub.w	r4, r4, r8
     2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2fc:	2700      	movs	r7, #0
     2fe:	b11e      	cbz	r6, 308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     300:	40d4      	lsrs	r4, r2
     302:	2300      	movs	r3, #0
     304:	e9c6 4300 	strd	r4, r3, [r6]
     308:	4639      	mov	r1, r7
     30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     30e:	2a00      	cmp	r2, #0
     310:	d051      	beq.n	3b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x136>
     312:	fab2 f282 	clz	r2, r2
     316:	2a00      	cmp	r2, #0
     318:	f040 80af 	bne.w	47a <CONFIG_FLASH_SIZE+0x7a>
     31c:	1b49      	subs	r1, r1, r5
     31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     322:	fa1f f885 	uxth.w	r8, r5
     326:	2701      	movs	r7, #1
     328:	0c23      	lsrs	r3, r4, #16
     32a:	fbb1 fcfe 	udiv	ip, r1, lr
     32e:	fb0e 111c 	mls	r1, lr, ip, r1
     332:	fb08 f00c 	mul.w	r0, r8, ip
     336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     33a:	4298      	cmp	r0, r3
     33c:	d90a      	bls.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     33e:	18eb      	adds	r3, r5, r3
     340:	bf2c      	ite	cs
     342:	2101      	movcs	r1, #1
     344:	2100      	movcc	r1, #0
     346:	4298      	cmp	r0, r3
     348:	d902      	bls.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     34a:	2900      	cmp	r1, #0
     34c:	f000 80d7 	beq.w	4fe <CONFIG_FLASH_SIZE+0xfe>
     350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     354:	1a19      	subs	r1, r3, r0
     356:	b2a3      	uxth	r3, r4
     358:	fbb1 f0fe 	udiv	r0, r1, lr
     35c:	fb0e 1110 	mls	r1, lr, r0, r1
     360:	fb08 f800 	mul.w	r8, r8, r0
     364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     368:	45a0      	cmp	r8, r4
     36a:	d905      	bls.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     36c:	192c      	adds	r4, r5, r4
     36e:	d202      	bcs.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     370:	45a0      	cmp	r8, r4
     372:	f200 80c1 	bhi.w	4f8 <CONFIG_FLASH_SIZE+0xf8>
     376:	3801      	subs	r0, #1
     378:	eba4 0408 	sub.w	r4, r4, r8
     37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     380:	e7bd      	b.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     382:	428b      	cmp	r3, r1
     384:	d908      	bls.n	398 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x118>
     386:	2e00      	cmp	r6, #0
     388:	d074      	beq.n	474 <CONFIG_FLASH_SIZE+0x74>
     38a:	2700      	movs	r7, #0
     38c:	e9c6 0100 	strd	r0, r1, [r6]
     390:	4638      	mov	r0, r7
     392:	4639      	mov	r1, r7
     394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     398:	fab3 f783 	clz	r7, r3
     39c:	b967      	cbnz	r7, 3b8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x138>
     39e:	428b      	cmp	r3, r1
     3a0:	f0c0 80a4 	bcc.w	4ec <CONFIG_FLASH_SIZE+0xec>
     3a4:	4282      	cmp	r2, r0
     3a6:	f240 80a1 	bls.w	4ec <CONFIG_FLASH_SIZE+0xec>
     3aa:	4638      	mov	r0, r7
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0ab      	beq.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     3b0:	e9c6 4900 	strd	r4, r9, [r6]
     3b4:	e7a8      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     3b6:	deff      	udf	#255	; 0xff
     3b8:	f1c7 0520 	rsb	r5, r7, #32
     3bc:	40bb      	lsls	r3, r7
     3be:	fa02 fc07 	lsl.w	ip, r2, r7
     3c2:	fa01 f407 	lsl.w	r4, r1, r7
     3c6:	40ea      	lsrs	r2, r5
     3c8:	fa20 f805 	lsr.w	r8, r0, r5
     3cc:	40e9      	lsrs	r1, r5
     3ce:	fa00 fe07 	lsl.w	lr, r0, r7
     3d2:	431a      	orrs	r2, r3
     3d4:	ea48 0404 	orr.w	r4, r8, r4
     3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
     3dc:	0c20      	lsrs	r0, r4, #16
     3de:	fa1f f982 	uxth.w	r9, r2
     3e2:	fbb1 faf8 	udiv	sl, r1, r8
     3e6:	fb08 111a 	mls	r1, r8, sl, r1
     3ea:	fb0a fb09 	mul.w	fp, sl, r9
     3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3f2:	458b      	cmp	fp, r1
     3f4:	d90a      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     3f6:	1851      	adds	r1, r2, r1
     3f8:	bf2c      	ite	cs
     3fa:	2301      	movcs	r3, #1
     3fc:	2300      	movcc	r3, #0
     3fe:	458b      	cmp	fp, r1
     400:	d902      	bls.n	408 <CONFIG_FLASH_SIZE+0x8>
     402:	2b00      	cmp	r3, #0
     404:	f000 8088 	beq.w	518 <CONFIG_FLASH_SIZE+0x118>
     408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     40c:	eba1 010b 	sub.w	r1, r1, fp
     410:	b2a4      	uxth	r4, r4
     412:	fbb1 f0f8 	udiv	r0, r1, r8
     416:	fb08 1110 	mls	r1, r8, r0, r1
     41a:	fb00 f909 	mul.w	r9, r0, r9
     41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     422:	4589      	cmp	r9, r1
     424:	d904      	bls.n	430 <CONFIG_FLASH_SIZE+0x30>
     426:	1851      	adds	r1, r2, r1
     428:	d201      	bcs.n	42e <CONFIG_FLASH_SIZE+0x2e>
     42a:	4589      	cmp	r9, r1
     42c:	d87b      	bhi.n	526 <CONFIG_FLASH_SIZE+0x126>
     42e:	3801      	subs	r0, #1
     430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     434:	eba1 0109 	sub.w	r1, r1, r9
     438:	fba0 890c 	umull	r8, r9, r0, ip
     43c:	4549      	cmp	r1, r9
     43e:	4644      	mov	r4, r8
     440:	464b      	mov	r3, r9
     442:	d302      	bcc.n	44a <CONFIG_FLASH_SIZE+0x4a>
     444:	d106      	bne.n	454 <CONFIG_FLASH_SIZE+0x54>
     446:	45c6      	cmp	lr, r8
     448:	d204      	bcs.n	454 <CONFIG_FLASH_SIZE+0x54>
     44a:	3801      	subs	r0, #1
     44c:	ebb8 040c 	subs.w	r4, r8, ip
     450:	eb69 0302 	sbc.w	r3, r9, r2
     454:	2e00      	cmp	r6, #0
     456:	d05d      	beq.n	514 <CONFIG_FLASH_SIZE+0x114>
     458:	ebbe 0204 	subs.w	r2, lr, r4
     45c:	eb61 0103 	sbc.w	r1, r1, r3
     460:	fa01 f505 	lsl.w	r5, r1, r5
     464:	fa22 f307 	lsr.w	r3, r2, r7
     468:	40f9      	lsrs	r1, r7
     46a:	2700      	movs	r7, #0
     46c:	431d      	orrs	r5, r3
     46e:	e9c6 5100 	strd	r5, r1, [r6]
     472:	e749      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     474:	4637      	mov	r7, r6
     476:	4630      	mov	r0, r6
     478:	e746      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     47a:	f1c2 0020 	rsb	r0, r2, #32
     47e:	4095      	lsls	r5, r2
     480:	fa01 f702 	lsl.w	r7, r1, r2
     484:	fa21 f300 	lsr.w	r3, r1, r0
     488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     48c:	fa24 f100 	lsr.w	r1, r4, r0
     490:	fa1f f885 	uxth.w	r8, r5
     494:	4094      	lsls	r4, r2
     496:	4339      	orrs	r1, r7
     498:	fbb3 f0fe 	udiv	r0, r3, lr
     49c:	0c0f      	lsrs	r7, r1, #16
     49e:	fb0e 3310 	mls	r3, lr, r0, r3
     4a2:	fb00 fc08 	mul.w	ip, r0, r8
     4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     4aa:	459c      	cmp	ip, r3
     4ac:	d907      	bls.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4ae:	18eb      	adds	r3, r5, r3
     4b0:	bf2c      	ite	cs
     4b2:	2701      	movcs	r7, #1
     4b4:	2700      	movcc	r7, #0
     4b6:	459c      	cmp	ip, r3
     4b8:	d900      	bls.n	4bc <CONFIG_FLASH_SIZE+0xbc>
     4ba:	b38f      	cbz	r7, 520 <CONFIG_FLASH_SIZE+0x120>
     4bc:	3801      	subs	r0, #1
     4be:	eba3 030c 	sub.w	r3, r3, ip
     4c2:	b289      	uxth	r1, r1
     4c4:	fbb3 f7fe 	udiv	r7, r3, lr
     4c8:	fb0e 3317 	mls	r3, lr, r7, r3
     4cc:	fb07 fc08 	mul.w	ip, r7, r8
     4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4d4:	458c      	cmp	ip, r1
     4d6:	d904      	bls.n	4e2 <CONFIG_FLASH_SIZE+0xe2>
     4d8:	1869      	adds	r1, r5, r1
     4da:	d201      	bcs.n	4e0 <CONFIG_FLASH_SIZE+0xe0>
     4dc:	458c      	cmp	ip, r1
     4de:	d825      	bhi.n	52c <CONFIG_FLASH_SIZE+0x12c>
     4e0:	3f01      	subs	r7, #1
     4e2:	eba1 010c 	sub.w	r1, r1, ip
     4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     4ea:	e71d      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     4ec:	1a84      	subs	r4, r0, r2
     4ee:	eb61 0303 	sbc.w	r3, r1, r3
     4f2:	2001      	movs	r0, #1
     4f4:	4699      	mov	r9, r3
     4f6:	e759      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     4f8:	3802      	subs	r0, #2
     4fa:	442c      	add	r4, r5
     4fc:	e73c      	b.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     4fe:	f1ac 0c02 	sub.w	ip, ip, #2
     502:	442b      	add	r3, r5
     504:	e726      	b.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     506:	f1ac 0c02 	sub.w	ip, ip, #2
     50a:	442b      	add	r3, r5
     50c:	e6e0      	b.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     50e:	3802      	subs	r0, #2
     510:	442c      	add	r4, r5
     512:	e6ef      	b.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     514:	4637      	mov	r7, r6
     516:	e6f7      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     518:	f1aa 0a02 	sub.w	sl, sl, #2
     51c:	4411      	add	r1, r2
     51e:	e775      	b.n	40c <CONFIG_FLASH_SIZE+0xc>
     520:	3802      	subs	r0, #2
     522:	442b      	add	r3, r5
     524:	e7cb      	b.n	4be <CONFIG_FLASH_SIZE+0xbe>
     526:	3802      	subs	r0, #2
     528:	4411      	add	r1, r2
     52a:	e781      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
     52c:	3f02      	subs	r7, #2
     52e:	4429      	add	r1, r5
     530:	e7d7      	b.n	4e2 <CONFIG_FLASH_SIZE+0xe2>
     532:	bf00      	nop

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	ed2d 8b10 	vpush	{d8-d15}
     54c:	f04f 0500 	mov.w	r5, #0
     550:	ec45 5b18 	vmov	d8, r5, r5
     554:	ec45 5a19 	vmov	s18, s19, r5, r5
     558:	ec45 5a1a 	vmov	s20, s21, r5, r5
     55c:	ec45 5a1b 	vmov	s22, s23, r5, r5
     560:	ec45 5a1c 	vmov	s24, s25, r5, r5
     564:	ec45 5a1d 	vmov	s26, s27, r5, r5
     568:	ec45 5a1e 	vmov	s28, s29, r5, r5
     56c:	ec45 5a1f 	vmov	s30, s31, r5, r5
     570:	eef1 5a10 	vmrs	r5, fpscr
     574:	f64f 7660 	movw	r6, #65376	; 0xff60
     578:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     57c:	4035      	ands	r5, r6
     57e:	eee1 5a10 	vmsr	fpscr, r5
     582:	f384 8800 	msr	CPSR_f, r4
     586:	4625      	mov	r5, r4
     588:	4626      	mov	r6, r4
     58a:	47a4      	blxns	r4
     58c:	ecbd 8b10 	vpop	{d8-d15}
     590:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000594 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     594:	680b      	ldr	r3, [r1, #0]
     596:	3301      	adds	r3, #1
     598:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     59a:	4b01      	ldr	r3, [pc, #4]	; (5a0 <char_out+0xc>)
     59c:	681b      	ldr	r3, [r3, #0]
     59e:	4718      	bx	r3
     5a0:	20000000 	.word	0x20000000

000005a4 <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
     5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	b087      	sub	sp, #28
     5aa:	460f      	mov	r7, r1
     5ac:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
     5ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
     5b0:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     5b2:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
     5b4:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
     5b6:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
     5b8:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
     5bc:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
     5c0:	4c1c      	ldr	r4, [pc, #112]	; (634 <print_digits.part.0+0x90>)
     5c2:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     5c6:	ea50 0301 	orrs.w	r3, r0, r1
     5ca:	d11a      	bne.n	602 <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
     5cc:	2d14      	cmp	r5, #20
		buf[i] = '0';
     5ce:	bf08      	it	eq
     5d0:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     5d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
     5d4:	bf18      	it	ne
     5d6:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     5d8:	442c      	add	r4, r5
		buf[i] = '0';
     5da:	bf08      	it	eq
     5dc:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     5e0:	2c15      	cmp	r4, #21
     5e2:	d017      	beq.n	614 <print_digits.part.0+0x70>
     5e4:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
     5e6:	2c00      	cmp	r4, #0
     5e8:	dc16      	bgt.n	618 <print_digits.part.0+0x74>
		out(buf[i], ctx);
     5ea:	f81d 0005 	ldrb.w	r0, [sp, r5]
     5ee:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
     5f0:	3501      	adds	r5, #1
		out(buf[i], ctx);
     5f2:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
     5f4:	2d15      	cmp	r5, #21
     5f6:	d1f8      	bne.n	5ea <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
     5f8:	2c00      	cmp	r4, #0
     5fa:	dc15      	bgt.n	628 <print_digits.part.0+0x84>
}
     5fc:	b007      	add	sp, #28
     5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
     602:	4642      	mov	r2, r8
     604:	464b      	mov	r3, r9
     606:	f7ff fe19 	bl	23c <__aeabi_uldivmod>
     60a:	5ca3      	ldrb	r3, [r4, r2]
     60c:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     610:	3d01      	subs	r5, #1
     612:	e7d8      	b.n	5c6 <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     614:	2400      	movs	r4, #0
     616:	e7e8      	b.n	5ea <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
     618:	f1bb 0f00 	cmp.w	fp, #0
     61c:	d0e5      	beq.n	5ea <print_digits.part.0+0x46>
		out(pad_char, ctx);
     61e:	4639      	mov	r1, r7
     620:	4650      	mov	r0, sl
     622:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
     624:	3c01      	subs	r4, #1
     626:	e7de      	b.n	5e6 <print_digits.part.0+0x42>
		out(pad_char, ctx);
     628:	4639      	mov	r1, r7
     62a:	4650      	mov	r0, sl
     62c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
     62e:	3c01      	subs	r4, #1
     630:	e7e2      	b.n	5f8 <print_digits.part.0+0x54>
     632:	bf00      	nop
     634:	00005374 	.word	0x00005374

00000638 <__printk_hook_install>:
	_char_out = fn;
     638:	4b01      	ldr	r3, [pc, #4]	; (640 <__printk_hook_install+0x8>)
     63a:	6018      	str	r0, [r3, #0]
}
     63c:	4770      	bx	lr
     63e:	bf00      	nop
     640:	20000000 	.word	0x20000000

00000644 <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
     644:	2300      	movs	r3, #0
{
     646:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
     648:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     64a:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     64c:	4803      	ldr	r0, [pc, #12]	; (65c <vprintk+0x18>)
     64e:	460b      	mov	r3, r1
     650:	a901      	add	r1, sp, #4
     652:	f003 fd98 	bl	4186 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     656:	b003      	add	sp, #12
     658:	f85d fb04 	ldr.w	pc, [sp], #4
     65c:	00000595 	.word	0x00000595

00000660 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     664:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     668:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     66a:	f019 0808 	ands.w	r8, r9, #8
     66e:	d00d      	beq.n	68c <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
     670:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     672:	bf0c      	ite	eq
     674:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     678:	f049 0920 	orrne.w	r9, r9, #32
     67c:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     680:	f382 8811 	msr	BASEPRI, r2
     684:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     68c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     690:	2902      	cmp	r1, #2
     692:	d107      	bne.n	6a4 <process_event+0x44>
			evt = process_recheck(mgr);
     694:	4620      	mov	r0, r4
     696:	f003 fe97 	bl	43c8 <process_recheck>
		if (evt == EVT_NOP) {
     69a:	2800      	cmp	r0, #0
     69c:	d0f0      	beq.n	680 <process_event+0x20>
		if (evt == EVT_COMPLETE) {
     69e:	2801      	cmp	r0, #1
     6a0:	8b23      	ldrh	r3, [r4, #24]
     6a2:	d14a      	bne.n	73a <process_event+0xda>
			res = mgr->last_res;
     6a4:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6a6:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
     6a8:	2f00      	cmp	r7, #0
     6aa:	da15      	bge.n	6d8 <process_event+0x78>
		*clients = mgr->clients;
     6ac:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     6ae:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b2:	f023 0307 	bic.w	r3, r3, #7
     6b6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     6ba:	8323      	strh	r3, [r4, #24]
		onoff_transition_fn transit = NULL;
     6bc:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6be:	8b23      	ldrh	r3, [r4, #24]
     6c0:	f003 0a07 	and.w	sl, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6c4:	45ca      	cmp	sl, r9
     6c6:	d002      	beq.n	6ce <process_event+0x6e>
		if (do_monitors
     6c8:	68a1      	ldr	r1, [r4, #8]
     6ca:	2900      	cmp	r1, #0
     6cc:	d156      	bne.n	77c <process_event+0x11c>
		    || !sys_slist_is_empty(&clients)
     6ce:	b90d      	cbnz	r5, 6d4 <process_event+0x74>
		    || (transit != NULL)) {
     6d0:	2e00      	cmp	r6, #0
     6d2:	d06d      	beq.n	7b0 <process_event+0x150>
     6d4:	2100      	movs	r1, #0
     6d6:	e052      	b.n	77e <process_event+0x11e>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6d8:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     6dc:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     6de:	2801      	cmp	r0, #1
     6e0:	d81c      	bhi.n	71c <process_event+0xbc>
		*clients = mgr->clients;
     6e2:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     6e6:	2906      	cmp	r1, #6
		*clients = mgr->clients;
     6e8:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     6ea:	b29b      	uxth	r3, r3
	list->tail = NULL;
     6ec:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     6f0:	d10a      	bne.n	708 <process_event+0xa8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6f2:	b13d      	cbz	r5, 704 <process_event+0xa4>
     6f4:	4628      	mov	r0, r5
     6f6:	8b61      	ldrh	r1, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     6f8:	6800      	ldr	r0, [r0, #0]
				mgr->refs += 1U;
     6fa:	3101      	adds	r1, #1
     6fc:	b289      	uxth	r1, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6fe:	2800      	cmp	r0, #0
     700:	d1fa      	bne.n	6f8 <process_event+0x98>
     702:	8361      	strh	r1, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     704:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     708:	8323      	strh	r3, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     70a:	4620      	mov	r0, r4
     70c:	f003 fe5c 	bl	43c8 <process_recheck>
     710:	2800      	cmp	r0, #0
     712:	d0d3      	beq.n	6bc <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     714:	8b23      	ldrh	r3, [r4, #24]
     716:	f043 0320 	orr.w	r3, r3, #32
     71a:	e7ce      	b.n	6ba <process_event+0x5a>
	} else if (state == ONOFF_STATE_TO_OFF) {
     71c:	2904      	cmp	r1, #4
     71e:	d10a      	bne.n	736 <process_event+0xd6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     720:	f023 0307 	bic.w	r3, r3, #7
     724:	b299      	uxth	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     726:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     728:	4620      	mov	r0, r4
     72a:	f003 fe4d 	bl	43c8 <process_recheck>
     72e:	b110      	cbz	r0, 736 <process_event+0xd6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     730:	f041 0120 	orr.w	r1, r1, #32
     734:	8321      	strh	r1, [r4, #24]
     736:	2500      	movs	r5, #0
     738:	e7c0      	b.n	6bc <process_event+0x5c>
		} else if (evt == EVT_START) {
     73a:	2803      	cmp	r0, #3
     73c:	d109      	bne.n	752 <process_event+0xf2>
			transit = mgr->transitions->start;
     73e:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     740:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     744:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     746:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     74a:	2500      	movs	r5, #0
     74c:	8323      	strh	r3, [r4, #24]
		res = 0;
     74e:	462f      	mov	r7, r5
     750:	e7b5      	b.n	6be <process_event+0x5e>
		} else if (evt == EVT_STOP) {
     752:	2804      	cmp	r0, #4
     754:	d106      	bne.n	764 <process_event+0x104>
			transit = mgr->transitions->stop;
     756:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     758:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     75c:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     75e:	f043 0304 	orr.w	r3, r3, #4
     762:	e7f2      	b.n	74a <process_event+0xea>
		} else if (evt == EVT_RESET) {
     764:	2805      	cmp	r0, #5
     766:	d106      	bne.n	776 <process_event+0x116>
			transit = mgr->transitions->reset;
     768:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     76a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     76e:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     770:	f043 0305 	orr.w	r3, r3, #5
     774:	e7e9      	b.n	74a <process_event+0xea>
     776:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     778:	462e      	mov	r6, r5
     77a:	e7e8      	b.n	74e <process_event+0xee>
				   && !sys_slist_is_empty(&mgr->monitors);
     77c:	2101      	movs	r1, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     77e:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     782:	8323      	strh	r3, [r4, #24]
     784:	f382 8811 	msr	BASEPRI, r2
     788:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     78c:	b9f9      	cbnz	r1, 7ce <process_event+0x16e>
	while (!sys_slist_is_empty(list)) {
     78e:	bb85      	cbnz	r5, 7f2 <process_event+0x192>
			if (transit != NULL) {
     790:	b116      	cbz	r6, 798 <process_event+0x138>
				transit(mgr, transition_complete);
     792:	4921      	ldr	r1, [pc, #132]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     794:	4620      	mov	r0, r4
     796:	47b0      	blx	r6
	__asm__ volatile(
     798:	f04f 0320 	mov.w	r3, #32
     79c:	f3ef 8211 	mrs	r2, BASEPRI
     7a0:	f383 8811 	msr	BASEPRI, r3
     7a4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     7a8:	8b23      	ldrh	r3, [r4, #24]
     7aa:	f023 0308 	bic.w	r3, r3, #8
     7ae:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     7b0:	8b23      	ldrh	r3, [r4, #24]
     7b2:	06d9      	lsls	r1, r3, #27
     7b4:	d527      	bpl.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
			evt = EVT_COMPLETE;
     7b6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     7b8:	f023 0310 	bic.w	r3, r3, #16
     7bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     7be:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     7c2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     7c6:	2900      	cmp	r1, #0
     7c8:	f47f af62 	bne.w	690 <process_event+0x30>
out:
     7cc:	e758      	b.n	680 <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7ce:	68a1      	ldr	r1, [r4, #8]
     7d0:	2900      	cmp	r1, #0
     7d2:	d0dc      	beq.n	78e <process_event+0x12e>
     7d4:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     7d8:	f8d1 b004 	ldr.w	fp, [r1, #4]
     7dc:	463b      	mov	r3, r7
     7de:	4652      	mov	r2, sl
     7e0:	4620      	mov	r0, r4
     7e2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7e4:	f1b9 0f00 	cmp.w	r9, #0
     7e8:	d0d1      	beq.n	78e <process_event+0x12e>
     7ea:	4649      	mov	r1, r9
     7ec:	f8d9 9000 	ldr.w	r9, [r9]
     7f0:	e7f2      	b.n	7d8 <process_event+0x178>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     7f2:	f8d5 9000 	ldr.w	r9, [r5]
		notify_one(mgr, cli, state, res);
     7f6:	4629      	mov	r1, r5
     7f8:	463b      	mov	r3, r7
     7fa:	4652      	mov	r2, sl
     7fc:	4620      	mov	r0, r4
     7fe:	f003 fdff 	bl	4400 <notify_one>
	while (!sys_slist_is_empty(list)) {
     802:	464d      	mov	r5, r9
     804:	e7c3      	b.n	78e <process_event+0x12e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     806:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     80a:	bf1e      	ittt	ne
     80c:	f023 0320 	bicne.w	r3, r3, #32
     810:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     812:	2102      	movne	r1, #2
     814:	e7d3      	b.n	7be <process_event+0x15e>
     816:	bf00      	nop
     818:	0000442d 	.word	0x0000442d

0000081c <nordicsemi_nrf91_init>:
     81c:	f04f 0220 	mov.w	r2, #32
     820:	f3ef 8311 	mrs	r3, BASEPRI
     824:	f382 8811 	msr	BASEPRI, r2
     828:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     82c:	2101      	movs	r1, #1
     82e:	4a04      	ldr	r2, [pc, #16]	; (840 <nordicsemi_nrf91_init+0x24>)
     830:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
     834:	f383 8811 	msr	BASEPRI, r3
     838:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     83c:	2000      	movs	r0, #0
     83e:	4770      	bx	lr
     840:	50039000 	.word	0x50039000

00000844 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     844:	b120      	cbz	r0, 850 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     846:	4b03      	ldr	r3, [pc, #12]	; (854 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     848:	0180      	lsls	r0, r0, #6
     84a:	f043 0301 	orr.w	r3, r3, #1
     84e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     850:	4770      	bx	lr
     852:	bf00      	nop
     854:	000050d0 	.word	0x000050d0

00000858 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     858:	b508      	push	{r3, lr}
     85a:	4604      	mov	r4, r0
	__asm__ volatile(
     85c:	f04f 0220 	mov.w	r2, #32
     860:	f3ef 8311 	mrs	r3, BASEPRI
     864:	f382 8811 	msr	BASEPRI, r2
     868:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     86c:	f003 ffda 	bl	4824 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     870:	4620      	mov	r0, r4
     872:	f000 ffe7 	bl	1844 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     876:	4803      	ldr	r0, [pc, #12]	; (884 <sys_reboot+0x2c>)
     878:	f003 fd99 	bl	43ae <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     87c:	f000 fe3a 	bl	14f4 <arch_cpu_idle>
     880:	e7fc      	b.n	87c <sys_reboot+0x24>
     882:	bf00      	nop
     884:	00005385 	.word	0x00005385

00000888 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     888:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     88a:	4807      	ldr	r0, [pc, #28]	; (8a8 <uart_console_init+0x20>)
     88c:	f001 fd4c 	bl	2328 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
     890:	4c06      	ldr	r4, [pc, #24]	; (8ac <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     892:	4b07      	ldr	r3, [pc, #28]	; (8b0 <uart_console_init+0x28>)
     894:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     896:	4620      	mov	r0, r4
     898:	f001 fa06 	bl	1ca8 <__stdout_hook_install>
	__printk_hook_install(console_out);
     89c:	4620      	mov	r0, r4
     89e:	f7ff fecb 	bl	638 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     8a2:	2000      	movs	r0, #0
     8a4:	bd10      	pop	{r4, pc}
     8a6:	bf00      	nop
     8a8:	000053ae 	.word	0x000053ae
     8ac:	000008b5 	.word	0x000008b5
     8b0:	20000268 	.word	0x20000268

000008b4 <console_out>:
	if ('\n' == c) {
     8b4:	280a      	cmp	r0, #10
{
     8b6:	b538      	push	{r3, r4, r5, lr}
     8b8:	4604      	mov	r4, r0
     8ba:	4d07      	ldr	r5, [pc, #28]	; (8d8 <console_out+0x24>)
	if ('\n' == c) {
     8bc:	d104      	bne.n	8c8 <console_out+0x14>
     8be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     8c0:	6883      	ldr	r3, [r0, #8]
     8c2:	210d      	movs	r1, #13
     8c4:	685b      	ldr	r3, [r3, #4]
     8c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     8c8:	6828      	ldr	r0, [r5, #0]
     8ca:	6883      	ldr	r3, [r0, #8]
     8cc:	b2e1      	uxtb	r1, r4
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	4798      	blx	r3
}
     8d2:	4620      	mov	r0, r4
     8d4:	bd38      	pop	{r3, r4, r5, pc}
     8d6:	bf00      	nop
     8d8:	20000268 	.word	0x20000268

000008dc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
     8dc:	4a0e      	ldr	r2, [pc, #56]	; (918 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     8de:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     8e0:	1a84      	subs	r4, r0, r2
{
     8e2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
     8e4:	200c      	movs	r0, #12
{
     8e6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     8e8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
     8ea:	10a3      	asrs	r3, r4, #2
     8ec:	4c0b      	ldr	r4, [pc, #44]	; (91c <onoff_stop+0x40>)
     8ee:	435c      	muls	r4, r3
     8f0:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     8f2:	fb00 2004 	mla	r0, r0, r4, r2
     8f6:	4408      	add	r0, r1
     8f8:	f003 ff03 	bl	4702 <set_off_state>
	if (err < 0) {
     8fc:	1e01      	subs	r1, r0, #0
     8fe:	db05      	blt.n	90c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
     900:	4b07      	ldr	r3, [pc, #28]	; (920 <onoff_stop+0x44>)
     902:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     906:	6863      	ldr	r3, [r4, #4]
     908:	4798      	blx	r3
	return 0;
     90a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     90c:	4628      	mov	r0, r5
     90e:	4633      	mov	r3, r6
}
     910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     914:	4718      	bx	r3
     916:	bf00      	nop
     918:	2000027c 	.word	0x2000027c
     91c:	b6db6db7 	.word	0xb6db6db7
     920:	000050ec 	.word	0x000050ec

00000924 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
     928:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
     92a:	4e10      	ldr	r6, [pc, #64]	; (96c <onoff_start+0x48>)
{
     92c:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
     92e:	1b84      	subs	r4, r0, r6
     930:	10a3      	asrs	r3, r4, #2
     932:	4c0f      	ldr	r4, [pc, #60]	; (970 <onoff_start+0x4c>)
{
     934:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
     936:	435c      	muls	r4, r3
     938:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     93a:	4365      	muls	r5, r4
     93c:	f105 0040 	add.w	r0, r5, #64	; 0x40
     940:	2140      	movs	r1, #64	; 0x40
     942:	4430      	add	r0, r6
     944:	f003 fef6 	bl	4734 <set_starting_state>
	if (err < 0) {
     948:	1e01      	subs	r1, r0, #0
     94a:	db09      	blt.n	960 <onoff_start+0x3c>
	subdata->cb = data->cb;
     94c:	4a09      	ldr	r2, [pc, #36]	; (974 <onoff_start+0x50>)
     94e:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
     950:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     954:	4b08      	ldr	r3, [pc, #32]	; (978 <onoff_start+0x54>)
     956:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
     95e:	4718      	bx	r3
		notify(mgr, err);
     960:	4640      	mov	r0, r8
     962:	463b      	mov	r3, r7
}
     964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
     968:	4718      	bx	r3
     96a:	bf00      	nop
     96c:	2000027c 	.word	0x2000027c
     970:	b6db6db7 	.word	0xb6db6db7
     974:	00004797 	.word	0x00004797
     978:	000050ec 	.word	0x000050ec

0000097c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
     97c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     97e:	2200      	movs	r2, #0
     980:	2101      	movs	r1, #1
{
     982:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     984:	2005      	movs	r0, #5
     986:	f000 fd5d 	bl	1444 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     98a:	2005      	movs	r0, #5
     98c:	f000 fd3c 	bl	1408 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
     990:	480f      	ldr	r0, [pc, #60]	; (9d0 <clk_init+0x54>)
     992:	f001 fbd3 	bl	213c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     996:	4b0f      	ldr	r3, [pc, #60]	; (9d4 <clk_init+0x58>)
     998:	4298      	cmp	r0, r3
     99a:	d115      	bne.n	9c8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     99c:	f004 f8f5 	bl	4b8a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     9a0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     9a2:	490d      	ldr	r1, [pc, #52]	; (9d8 <clk_init+0x5c>)
     9a4:	4630      	mov	r0, r6
     9a6:	f003 fd5f 	bl	4468 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     9aa:	2800      	cmp	r0, #0
     9ac:	db0b      	blt.n	9c6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     9ae:	2501      	movs	r5, #1
     9b0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     9b2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     9b4:	4908      	ldr	r1, [pc, #32]	; (9d8 <clk_init+0x5c>)
     9b6:	f104 001c 	add.w	r0, r4, #28
     9ba:	f003 fd55 	bl	4468 <onoff_manager_init>
		if (err < 0) {
     9be:	2800      	cmp	r0, #0
     9c0:	db01      	blt.n	9c6 <clk_init+0x4a>
	}

	return 0;
     9c2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     9c4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
     9c6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     9c8:	f06f 0004 	mvn.w	r0, #4
     9cc:	e7fb      	b.n	9c6 <clk_init+0x4a>
     9ce:	bf00      	nop
     9d0:	00000a75 	.word	0x00000a75
     9d4:	0bad0000 	.word	0x0bad0000
     9d8:	000050fc 	.word	0x000050fc

000009dc <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
     9dc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     9de:	230c      	movs	r3, #12
	sub_data->cb = NULL;
     9e0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
     9e2:	434b      	muls	r3, r1
     9e4:	4808      	ldr	r0, [pc, #32]	; (a08 <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
     9e6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
     9e8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
     9ea:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
     9ec:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     9f0:	4418      	add	r0, r3
	sub_data->cb = NULL;
     9f2:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     9f4:	f003 febc 	bl	4770 <set_on_state>
	if (callback) {
     9f8:	b12d      	cbz	r5, a06 <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
     9fa:	4632      	mov	r2, r6
     9fc:	462b      	mov	r3, r5
}
     9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     a02:	4802      	ldr	r0, [pc, #8]	; (a0c <clkstarted_handle.constprop.10+0x30>)
     a04:	4718      	bx	r3
}
     a06:	bd70      	pop	{r4, r5, r6, pc}
     a08:	2000027c 	.word	0x2000027c
     a0c:	200000bc 	.word	0x200000bc

00000a10 <generic_hfclk_start>:
{
     a10:	b508      	push	{r3, lr}
     a12:	f04f 0320 	mov.w	r3, #32
     a16:	f3ef 8111 	mrs	r1, BASEPRI
     a1a:	f383 8811 	msr	BASEPRI, r3
     a1e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
     a22:	4a12      	ldr	r2, [pc, #72]	; (a6c <generic_hfclk_start+0x5c>)
     a24:	6813      	ldr	r3, [r2, #0]
     a26:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
     a2a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
     a2e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
     a30:	d00c      	beq.n	a4c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
     a32:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     a36:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
     a3a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
     a3e:	f013 0301 	ands.w	r3, r3, #1
     a42:	d003      	beq.n	a4c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
     a44:	480a      	ldr	r0, [pc, #40]	; (a70 <generic_hfclk_start+0x60>)
     a46:	f003 fe93 	bl	4770 <set_on_state>
			already_started = true;
     a4a:	2301      	movs	r3, #1
	__asm__ volatile(
     a4c:	f381 8811 	msr	BASEPRI, r1
     a50:	f3bf 8f6f 	isb	sy
	if (already_started) {
     a54:	b123      	cbz	r3, a60 <generic_hfclk_start+0x50>
}
     a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
     a5a:	2000      	movs	r0, #0
     a5c:	f7ff bfbe 	b.w	9dc <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
     a60:	2001      	movs	r0, #1
}
     a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     a66:	f001 bb79 	b.w	215c <nrfx_clock_start>
     a6a:	bf00      	nop
     a6c:	200002cc 	.word	0x200002cc
     a70:	200002bc 	.word	0x200002bc

00000a74 <clock_event_handler>:
	switch (event) {
     a74:	b110      	cbz	r0, a7c <clock_event_handler+0x8>
     a76:	2801      	cmp	r0, #1
     a78:	d004      	beq.n	a84 <clock_event_handler+0x10>
     a7a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
     a7c:	4b03      	ldr	r3, [pc, #12]	; (a8c <clock_event_handler+0x18>)
     a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a80:	075b      	lsls	r3, r3, #29
     a82:	d101      	bne.n	a88 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     a84:	f7ff bfaa 	b.w	9dc <clkstarted_handle.constprop.10>
}
     a88:	4770      	bx	lr
     a8a:	bf00      	nop
     a8c:	2000027c 	.word	0x2000027c

00000a90 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <generic_hfclk_stop+0x20>)
     a92:	e8d3 2fef 	ldaex	r2, [r3]
     a96:	f022 0102 	bic.w	r1, r2, #2
     a9a:	e8c3 1fe0 	stlex	r0, r1, [r3]
     a9e:	2800      	cmp	r0, #0
     aa0:	d1f7      	bne.n	a92 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
     aa2:	07d3      	lsls	r3, r2, #31
     aa4:	d402      	bmi.n	aac <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
     aa6:	2001      	movs	r0, #1
     aa8:	f001 bb8a 	b.w	21c0 <nrfx_clock_stop>
}
     aac:	4770      	bx	lr
     aae:	bf00      	nop
     ab0:	200002cc 	.word	0x200002cc

00000ab4 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     ab4:	2300      	movs	r3, #0
     ab6:	2201      	movs	r2, #1
{
     ab8:	b510      	push	{r4, lr}
     aba:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     abc:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
     ac0:	9301      	str	r3, [sp, #4]
     ac2:	4b09      	ldr	r3, [pc, #36]	; (ae8 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     ac4:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
     ac6:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     ac8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
     acc:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
     ad0:	f003 fe88 	bl	47e4 <api_start>
	if (err < 0) {
     ad4:	2800      	cmp	r0, #0
     ad6:	db05      	blt.n	ae4 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     adc:	2300      	movs	r3, #0
     ade:	4620      	mov	r0, r4
     ae0:	f002 f9ea 	bl	2eb8 <z_impl_k_sem_take>
}
     ae4:	b008      	add	sp, #32
     ae6:	bd10      	pop	{r4, pc}
     ae8:	000047ab 	.word	0x000047ab

00000aec <z_nrf_clock_control_lf_on>:
{
     aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     af0:	2201      	movs	r2, #1
     af2:	4605      	mov	r5, r0
     af4:	4938      	ldr	r1, [pc, #224]	; (bd8 <z_nrf_clock_control_lf_on+0xec>)
     af6:	e8d1 3fef 	ldaex	r3, [r1]
     afa:	e8c1 2fe0 	stlex	r0, r2, [r1]
     afe:	2800      	cmp	r0, #0
     b00:	d1f9      	bne.n	af6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
     b02:	b933      	cbnz	r3, b12 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     b04:	4935      	ldr	r1, [pc, #212]	; (bdc <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
     b06:	4836      	ldr	r0, [pc, #216]	; (be0 <z_nrf_clock_control_lf_on+0xf4>)
     b08:	604b      	str	r3, [r1, #4]
     b0a:	60cb      	str	r3, [r1, #12]
     b0c:	608a      	str	r2, [r1, #8]
     b0e:	f003 fcbe 	bl	448e <onoff_request>
	switch (start_mode) {
     b12:	1e6b      	subs	r3, r5, #1
     b14:	2b01      	cmp	r3, #1
     b16:	d830      	bhi.n	b7a <z_nrf_clock_control_lf_on+0x8e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
     b18:	2d01      	cmp	r5, #1
     b1a:	d107      	bne.n	b2c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
     b1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     b20:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
     b24:	f003 0303 	and.w	r3, r3, #3
     b28:	2b02      	cmp	r3, #2
     b2a:	d026      	beq.n	b7a <z_nrf_clock_control_lf_on+0x8e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
     b2c:	f004 f91d 	bl	4d6a <k_is_in_isr>
     b30:	b918      	cbnz	r0, b3a <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
     b32:	4b2c      	ldr	r3, [pc, #176]	; (be4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	2b00      	cmp	r3, #0
     b38:	d146      	bne.n	bc8 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
     b3a:	f04f 0320 	mov.w	r3, #32
     b3e:	f3ef 8911 	mrs	r9, BASEPRI
     b42:	f383 8811 	msr	BASEPRI, r3
     b46:	f3bf 8f6f 	isb	sy
     b4a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     b4c:	4e26      	ldr	r6, [pc, #152]	; (be8 <z_nrf_clock_control_lf_on+0xfc>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b4e:	4f27      	ldr	r7, [pc, #156]	; (bec <z_nrf_clock_control_lf_on+0x100>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     b50:	f8df 809c 	ldr.w	r8, [pc, #156]	; bf0 <z_nrf_clock_control_lf_on+0x104>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
     b54:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     b58:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
     b5c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
     b60:	03d2      	lsls	r2, r2, #15
     b62:	d50c      	bpl.n	b7e <z_nrf_clock_control_lf_on+0x92>
	while (!(nrfx_clock_is_running(d, (void *)&type)
     b64:	f003 0303 	and.w	r3, r3, #3
     b68:	2b02      	cmp	r3, #2
     b6a:	d001      	beq.n	b70 <z_nrf_clock_control_lf_on+0x84>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
     b6c:	2d01      	cmp	r5, #1
     b6e:	d106      	bne.n	b7e <z_nrf_clock_control_lf_on+0x92>
	if (isr_mode) {
     b70:	b324      	cbz	r4, bbc <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
     b72:	f389 8811 	msr	BASEPRI, r9
     b76:	f3bf 8f6f 	isb	sy
}
     b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
     b7e:	b1c4      	cbz	r4, bb2 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
     b80:	4648      	mov	r0, r9
     b82:	f000 fcc5 	bl	1510 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
     b86:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     b8a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
     b8e:	b2db      	uxtb	r3, r3
     b90:	2b01      	cmp	r3, #1
     b92:	d1df      	bne.n	b54 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     b94:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
     b96:	2900      	cmp	r1, #0
     b98:	d0dc      	beq.n	b54 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     b9a:	2100      	movs	r1, #0
     b9c:	6031      	str	r1, [r6, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     b9e:	6831      	ldr	r1, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
     ba0:	2102      	movs	r1, #2
     ba2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
     ba6:	2220      	movs	r2, #32
     ba8:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     bac:	f8c8 3000 	str.w	r3, [r8]
     bb0:	e7d0      	b.n	b54 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
     bb2:	2100      	movs	r1, #0
     bb4:	2021      	movs	r0, #33	; 0x21
     bb6:	f002 f939 	bl	2e2c <z_impl_k_sleep>
     bba:	e7e4      	b.n	b86 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENSET = mask;
     bbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     bc0:	2202      	movs	r2, #2
     bc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		__ASSERT_NO_MSG(false);
     bc6:	e7d8      	b.n	b7a <z_nrf_clock_control_lf_on+0x8e>
    p_reg->INTENCLR = mask;
     bc8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     bcc:	2202      	movs	r2, #2
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
     bce:	4604      	mov	r4, r0
     bd0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
     bd4:	4681      	mov	r9, r0
     bd6:	e7b9      	b.n	b4c <z_nrf_clock_control_lf_on+0x60>
     bd8:	200002d0 	.word	0x200002d0
     bdc:	2000026c 	.word	0x2000026c
     be0:	20000298 	.word	0x20000298
     be4:	2000086d 	.word	0x2000086d
     be8:	50005104 	.word	0x50005104
     bec:	e000e100 	.word	0xe000e100
     bf0:	50005008 	.word	0x50005008

00000bf4 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
     bf4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     bf6:	4b08      	ldr	r3, [pc, #32]	; (c18 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bf8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     bfc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     c00:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     c04:	4290      	cmp	r0, r2
     c06:	d100      	bne.n	c0a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     c08:	4770      	bx	lr
     c0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     c0e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     c10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     c14:	e7f2      	b.n	bfc <handle_next_cycle_case+0x8>
     c16:	bf00      	nop
     c18:	50015000 	.word	0x50015000

00000c1c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c1c:	2200      	movs	r2, #0
     c1e:	4b07      	ldr	r3, [pc, #28]	; (c3c <rtc_nrf_isr+0x20>)
     c20:	601a      	str	r2, [r3, #0]
     c22:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     c24:	4a06      	ldr	r2, [pc, #24]	; (c40 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <rtc_nrf_isr+0x28>)
     c28:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
     c2c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     c2e:	1ac0      	subs	r0, r0, r3
     c30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     c34:	4403      	add	r3, r0
     c36:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
     c38:	f002 baca 	b.w	31d0 <z_clock_announce>
     c3c:	50015140 	.word	0x50015140
     c40:	200002d4 	.word	0x200002d4
     c44:	50015000 	.word	0x50015000

00000c48 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
     c48:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     c4a:	2400      	movs	r4, #0
     c4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     c50:	4d0e      	ldr	r5, [pc, #56]	; (c8c <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c52:	4b0f      	ldr	r3, [pc, #60]	; (c90 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
     c54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c58:	601c      	str	r4, [r3, #0]
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	4b0d      	ldr	r3, [pc, #52]	; (c94 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
     c5e:	2101      	movs	r1, #1
     c60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     c68:	4622      	mov	r2, r4
     c6a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     c6e:	2015      	movs	r0, #21
     c70:	f000 fbe8 	bl	1444 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
     c74:	2015      	movs	r0, #21
     c76:	f000 fbc7 	bl	1408 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     c7a:	2301      	movs	r3, #1
     c7c:	4a06      	ldr	r2, [pc, #24]	; (c98 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
     c7e:	2002      	movs	r0, #2
     c80:	6013      	str	r3, [r2, #0]
     c82:	602b      	str	r3, [r5, #0]
     c84:	f7ff ff32 	bl	aec <z_nrf_clock_control_lf_on>

	return 0;
}
     c88:	4620      	mov	r0, r4
     c8a:	bd38      	pop	{r3, r4, r5, pc}
     c8c:	50015000 	.word	0x50015000
     c90:	50015140 	.word	0x50015140
     c94:	e000e100 	.word	0xe000e100
     c98:	50015008 	.word	0x50015008

00000c9c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     c9e:	4b2d      	ldr	r3, [pc, #180]	; (d54 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     ca0:	4c2d      	ldr	r4, [pc, #180]	; (d58 <z_clock_set_timeout+0xbc>)
     ca2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
     ca6:	4b2d      	ldr	r3, [pc, #180]	; (d5c <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     ca8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     cac:	bf08      	it	eq
     cae:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
     cb0:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     cb2:	1a52      	subs	r2, r2, r1
     cb4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     cb8:	0212      	lsls	r2, r2, #8
     cba:	d438      	bmi.n	d2e <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
     cbc:	3801      	subs	r0, #1
     cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     cc2:	42a0      	cmp	r0, r4
     cc4:	bfa8      	it	ge
     cc6:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     cc8:	3301      	adds	r3, #1
     cca:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     ccc:	42a0      	cmp	r0, r4
     cce:	bf94      	ite	ls
     cd0:	180c      	addls	r4, r1, r0
     cd2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     cd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     cd8:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
     cda:	4a1e      	ldr	r2, [pc, #120]	; (d54 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     cdc:	4d20      	ldr	r5, [pc, #128]	; (d60 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
     cde:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
     ce2:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
     ce6:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     cea:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
     cec:	1a5b      	subs	r3, r3, r1
     cee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     cf2:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
     cf4:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     cf6:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     cfa:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     cfe:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
     d02:	d104      	bne.n	d0e <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
     d04:	200f      	movs	r0, #15
     d06:	f004 f836 	bl	4d76 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     d0a:	602e      	str	r6, [r5, #0]
     d0c:	682b      	ldr	r3, [r5, #0]
     d0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     d12:	4b14      	ldr	r3, [pc, #80]	; (d64 <z_clock_set_timeout+0xc8>)
     d14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     d18:	4b0e      	ldr	r3, [pc, #56]	; (d54 <z_clock_set_timeout+0xb8>)
     d1a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     d1e:	1a22      	subs	r2, r4, r0
     d20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
     d24:	2a01      	cmp	r2, #1
     d26:	d104      	bne.n	d32 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
     d28:	f7ff ff64 	bl	bf4 <handle_next_cycle_case>
     d2c:	e00b      	b.n	d46 <z_clock_set_timeout+0xaa>
		ticks = 0;
     d2e:	2000      	movs	r0, #0
     d30:	e7ca      	b.n	cc8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     d32:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     d36:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
     d3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     d3e:	1a24      	subs	r4, r4, r0
     d40:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
     d42:	0223      	lsls	r3, r4, #8
     d44:	d4f0      	bmi.n	d28 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
     d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     d4a:	4b02      	ldr	r3, [pc, #8]	; (d54 <z_clock_set_timeout+0xb8>)
     d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
     d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d52:	bf00      	nop
     d54:	50015000 	.word	0x50015000
     d58:	007fffff 	.word	0x007fffff
     d5c:	200002d4 	.word	0x200002d4
     d60:	50015140 	.word	0x50015140
     d64:	e000e100 	.word	0xe000e100

00000d68 <z_clock_elapsed>:
	__asm__ volatile(
     d68:	f04f 0220 	mov.w	r2, #32
     d6c:	f3ef 8311 	mrs	r3, BASEPRI
     d70:	f382 8811 	msr	BASEPRI, r2
     d74:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     d78:	4a06      	ldr	r2, [pc, #24]	; (d94 <z_clock_elapsed+0x2c>)
     d7a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     d7e:	4a06      	ldr	r2, [pc, #24]	; (d98 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     d80:	6812      	ldr	r2, [r2, #0]
     d82:	1a80      	subs	r0, r0, r2
     d84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     d88:	f383 8811 	msr	BASEPRI, r3
     d8c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     d90:	4770      	bx	lr
     d92:	bf00      	nop
     d94:	50015000 	.word	0x50015000
     d98:	200002d4 	.word	0x200002d4

00000d9c <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
     d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     d9e:	2800      	cmp	r0, #0
{
     da0:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
     da2:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     da4:	bf14      	ite	ne
     da6:	f44f 5300 	movne.w	r3, #8192	; 0x2000
     daa:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
     dae:	4e20      	ldr	r6, [pc, #128]	; (e30 <config_regions+0x94>)
     db0:	4295      	cmp	r5, r2
     db2:	d332      	bcc.n	e1a <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
     db4:	fb02 f003 	mul.w	r0, r2, r3
     db8:	3a01      	subs	r2, #1
     dba:	9000      	str	r0, [sp, #0]
     dbc:	434b      	muls	r3, r1
     dbe:	481d      	ldr	r0, [pc, #116]	; (e34 <config_regions+0x98>)
     dc0:	f003 faf5 	bl	43ae <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
     dc4:	4b1c      	ldr	r3, [pc, #112]	; (e38 <config_regions+0x9c>)
     dc6:	f014 0f10 	tst.w	r4, #16
     dca:	491c      	ldr	r1, [pc, #112]	; (e3c <config_regions+0xa0>)
     dcc:	481c      	ldr	r0, [pc, #112]	; (e40 <config_regions+0xa4>)
     dce:	bf08      	it	eq
     dd0:	4619      	moveq	r1, r3
     dd2:	f003 faec 	bl	43ae <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
     dd6:	f014 0f04 	tst.w	r4, #4
     dda:	bf14      	ite	ne
     ddc:	2172      	movne	r1, #114	; 0x72
     dde:	212d      	moveq	r1, #45	; 0x2d
     de0:	4818      	ldr	r0, [pc, #96]	; (e44 <config_regions+0xa8>)
     de2:	f003 fae4 	bl	43ae <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
     de6:	f014 0f02 	tst.w	r4, #2
     dea:	bf14      	ite	ne
     dec:	2177      	movne	r1, #119	; 0x77
     dee:	212d      	moveq	r1, #45	; 0x2d
     df0:	4814      	ldr	r0, [pc, #80]	; (e44 <config_regions+0xa8>)
     df2:	f003 fadc 	bl	43ae <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
     df6:	f014 0f01 	tst.w	r4, #1
     dfa:	bf0c      	ite	eq
     dfc:	212d      	moveq	r1, #45	; 0x2d
     dfe:	2178      	movne	r1, #120	; 0x78
     e00:	4810      	ldr	r0, [pc, #64]	; (e44 <config_regions+0xa8>)
     e02:	f003 fad4 	bl	43ae <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
     e06:	216c      	movs	r1, #108	; 0x6c
     e08:	480e      	ldr	r0, [pc, #56]	; (e44 <config_regions+0xa8>)
     e0a:	f003 fad0 	bl	43ae <printk>
	PRINT("\n");
     e0e:	480e      	ldr	r0, [pc, #56]	; (e48 <config_regions+0xac>)
}
     e10:	b003      	add	sp, #12
     e12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
     e16:	f003 baca 	b.w	43ae <printk>
		if (ram) {
     e1a:	b128      	cbz	r0, e28 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
     e1c:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
     e20:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
     e24:	3501      	adds	r5, #1
     e26:	e7c3      	b.n	db0 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
     e28:	f505 77c0 	add.w	r7, r5, #384	; 0x180
     e2c:	e7f8      	b.n	e20 <config_regions+0x84>
     e2e:	bf00      	nop
     e30:	50003000 	.word	0x50003000
     e34:	000053d4 	.word	0x000053d4
     e38:	000053c8 	.word	0x000053c8
     e3c:	000053bf 	.word	0x000053bf
     e40:	000054de 	.word	0x000054de
     e44:	000053ee 	.word	0x000053ee
     e48:	00005729 	.word	0x00005729

00000e4c <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
     e4c:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     e4e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     e50:	2b00      	cmp	r3, #0
     e52:	db0c      	blt.n	e6e <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e54:	2201      	movs	r2, #1
     e56:	f000 011f 	and.w	r1, r0, #31
     e5a:	408a      	lsls	r2, r1
     e5c:	095b      	lsrs	r3, r3, #5
     e5e:	4910      	ldr	r1, [pc, #64]	; (ea0 <spm_config_peripheral.constprop.1+0x54>)
     e60:	3320      	adds	r3, #32
     e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     e66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e6a:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
     e6e:	0083      	lsls	r3, r0, #2
     e70:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     e74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     e78:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
     e7a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     e7e:	d006      	beq.n	e8e <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     e80:	2a00      	cmp	r2, #0
     e82:	da07      	bge.n	e94 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     e84:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     e88:	3a02      	subs	r2, #2
     e8a:	2a01      	cmp	r2, #1
     e8c:	d802      	bhi.n	e94 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     e8e:	4a05      	ldr	r2, [pc, #20]	; (ea4 <spm_config_peripheral.constprop.1+0x58>)
     e90:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
     e94:	2101      	movs	r1, #1
     e96:	f003 fd18 	bl	48ca <irq_target_state_set>
	return 0;
}
     e9a:	2000      	movs	r0, #0
     e9c:	bd08      	pop	{r3, pc}
     e9e:	bf00      	nop
     ea0:	e000e100 	.word	0xe000e100
     ea4:	80000100 	.word	0x80000100

00000ea8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     ea8:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     eaa:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     eae:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     eb2:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
     eb4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     eb8:	482c      	ldr	r0, [pc, #176]	; (f6c <spm_jump+0xc4>)
     eba:	f003 fa78 	bl	43ae <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     ebe:	6821      	ldr	r1, [r4, #0]
     ec0:	482b      	ldr	r0, [pc, #172]	; (f70 <spm_jump+0xc8>)
     ec2:	f003 fa74 	bl	43ae <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     ec6:	6829      	ldr	r1, [r5, #0]
     ec8:	482a      	ldr	r0, [pc, #168]	; (f74 <spm_jump+0xcc>)
     eca:	f003 fa70 	bl	43ae <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     ece:	2210      	movs	r2, #16
     ed0:	2100      	movs	r1, #0
     ed2:	4668      	mov	r0, sp
     ed4:	f003 fdc0 	bl	4a58 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     ed8:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     eda:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     edc:	9300      	str	r3, [sp, #0]
     ede:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     ee0:	f000 fe6c 	bl	1bbc <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     ee4:	2001      	movs	r0, #1
     ee6:	f000 fe99 	bl	1c1c <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     eea:	2000      	movs	r0, #0
     eec:	f000 fe82 	bl	1bf4 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     ef0:	2000      	movs	r0, #0
     ef2:	f000 fea7 	bl	1c44 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     ef6:	2101      	movs	r1, #1
     ef8:	2000      	movs	r0, #0
     efa:	f000 fec1 	bl	1c80 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     efe:	f000 feb5 	bl	1c6c <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     f02:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     f04:	481c      	ldr	r0, [pc, #112]	; (f78 <spm_jump+0xd0>)
     f06:	f003 fa52 	bl	43ae <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     f0a:	2008      	movs	r0, #8
     f0c:	f7ff ff9e 	bl	e4c <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     f10:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     f14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f18:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     f1c:	0864      	lsrs	r4, r4, #1
     f1e:	0064      	lsls	r4, r4, #1
     f20:	4620      	mov	r0, r4
     f22:	4621      	mov	r1, r4
     f24:	4622      	mov	r2, r4
     f26:	4623      	mov	r3, r4
     f28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     f2c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     f30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     f34:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     f38:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     f3c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     f40:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     f44:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     f48:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     f4c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     f50:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     f54:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     f58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     f64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     f68:	f7ff fae6 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     f6c:	000054f5 	.word	0x000054f5
     f70:	0000550c 	.word	0x0000550c
     f74:	00005521 	.word	0x00005521
     f78:	0000553f 	.word	0x0000553f

00000f7c <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
     f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
     f80:	483b      	ldr	r0, [pc, #236]	; (1070 <spm_config+0xf4>)
     f82:	f003 fa14 	bl	43ae <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
     f86:	2100      	movs	r1, #0
     f88:	f240 1317 	movw	r3, #279	; 0x117
     f8c:	4608      	mov	r0, r1
     f8e:	2201      	movs	r2, #1
     f90:	f7ff ff04 	bl	d9c <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
     f94:	f240 1307 	movw	r3, #263	; 0x107
     f98:	2220      	movs	r2, #32
     f9a:	2101      	movs	r1, #1
     f9c:	2000      	movs	r0, #0
     f9e:	f7ff fefd 	bl	d9c <config_regions>
	PRINT("\n");
     fa2:	4834      	ldr	r0, [pc, #208]	; (1074 <spm_config+0xf8>)
     fa4:	f003 fa03 	bl	43ae <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     fa8:	4b33      	ldr	r3, [pc, #204]	; (1078 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     faa:	4a34      	ldr	r2, [pc, #208]	; (107c <spm_config+0x100>)
     fac:	f3c3 31c4 	ubfx	r1, r3, #15, #5
     fb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
     fb4:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     fb8:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     fbc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     fc0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     fc4:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     fc8:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     fcc:	482c      	ldr	r0, [pc, #176]	; (1080 <spm_config+0x104>)
     fce:	0152      	lsls	r2, r2, #5
     fd0:	f003 f9ed 	bl	43ae <printk>
	PRINT("\n");
     fd4:	4827      	ldr	r0, [pc, #156]	; (1074 <spm_config+0xf8>)
     fd6:	f003 f9ea 	bl	43ae <printk>
	int err = spm_secure_services_init();
     fda:	f003 fc24 	bl	4826 <spm_secure_services_init>
	if (err != 0) {
     fde:	4601      	mov	r1, r0
     fe0:	b110      	cbz	r0, fe8 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
     fe2:	4828      	ldr	r0, [pc, #160]	; (1084 <spm_config+0x108>)
     fe4:	f003 f9e3 	bl	43ae <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     fe8:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     fea:	4827      	ldr	r0, [pc, #156]	; (1088 <spm_config+0x10c>)
     fec:	f003 f9df 	bl	43ae <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
     ff0:	f240 1317 	movw	r3, #279	; 0x117
     ff4:	2208      	movs	r2, #8
     ff6:	2100      	movs	r1, #0
     ff8:	2001      	movs	r0, #1
     ffa:	f7ff fecf 	bl	d9c <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
     ffe:	4d1f      	ldr	r5, [pc, #124]	; (107c <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1000:	f240 1307 	movw	r3, #263	; 0x107
    1004:	2220      	movs	r2, #32
    1006:	2108      	movs	r1, #8
    1008:	2001      	movs	r0, #1
    100a:	f7ff fec7 	bl	d9c <config_regions>
	PRINT("\n");
    100e:	4819      	ldr	r0, [pc, #100]	; (1074 <spm_config+0xf8>)
    1010:	f003 f9cd 	bl	43ae <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1014:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    1018:	481c      	ldr	r0, [pc, #112]	; (108c <spm_config+0x110>)
    101a:	f003 f9c8 	bl	43ae <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    101e:	4f1c      	ldr	r7, [pc, #112]	; (1090 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1020:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    1024:	f8df 807c 	ldr.w	r8, [pc, #124]	; 10a4 <spm_config+0x128>
    1028:	4d1a      	ldr	r5, [pc, #104]	; (1094 <spm_config+0x118>)
    102a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 10a8 <spm_config+0x12c>
    102e:	796e      	ldrb	r6, [r5, #5]
    1030:	682a      	ldr	r2, [r5, #0]
    1032:	2e00      	cmp	r6, #0
    1034:	bf14      	ite	ne
    1036:	463b      	movne	r3, r7
    1038:	4643      	moveq	r3, r8
    103a:	4621      	mov	r1, r4
    103c:	4648      	mov	r0, r9
    103e:	f003 f9b6 	bl	43ae <printk>
		if (!periph[i].nonsecure) {
    1042:	b966      	cbnz	r6, 105e <spm_config+0xe2>
			PRINT("\tSKIP\n");
    1044:	4814      	ldr	r0, [pc, #80]	; (1098 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1046:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    1048:	f003 f9b1 	bl	43ae <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    104c:	2c1a      	cmp	r4, #26
    104e:	f105 0508 	add.w	r5, r5, #8
    1052:	d1ec      	bne.n	102e <spm_config+0xb2>
	PRINT("\n");
    1054:	4807      	ldr	r0, [pc, #28]	; (1074 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    1056:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    105a:	f003 b9a8 	b.w	43ae <printk>
		err = spm_config_peripheral(periph[i].id, false);
    105e:	7928      	ldrb	r0, [r5, #4]
    1060:	f7ff fef4 	bl	e4c <spm_config_peripheral.constprop.1>
		if (err) {
    1064:	b108      	cbz	r0, 106a <spm_config+0xee>
			PRINT("\tERROR\n");
    1066:	480d      	ldr	r0, [pc, #52]	; (109c <spm_config+0x120>)
    1068:	e7ed      	b.n	1046 <spm_config+0xca>
			PRINT("\tOK\n");
    106a:	480d      	ldr	r0, [pc, #52]	; (10a0 <spm_config+0x124>)
    106c:	e7eb      	b.n	1046 <spm_config+0xca>
    106e:	bf00      	nop
    1070:	000053fc 	.word	0x000053fc
    1074:	00005729 	.word	0x00005729
    1078:	00007fe0 	.word	0x00007fe0
    107c:	50003000 	.word	0x50003000
    1080:	00005420 	.word	0x00005420
    1084:	00005466 	.word	0x00005466
    1088:	00005496 	.word	0x00005496
    108c:	000054b8 	.word	0x000054b8
    1090:	000053f1 	.word	0x000053f1
    1094:	00005108 	.word	0x00005108
    1098:	000054e1 	.word	0x000054e1
    109c:	000054e8 	.word	0x000054e8
    10a0:	000054f0 	.word	0x000054f0
    10a4:	000053cc 	.word	0x000053cc
    10a8:	000054d4 	.word	0x000054d4

000010ac <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    10ac:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    10ae:	2800      	cmp	r0, #0
    10b0:	d04b      	beq.n	114a <__acle_se_spm_request_read_nse+0x9e>
    10b2:	2a00      	cmp	r2, #0
    10b4:	d049      	beq.n	114a <__acle_se_spm_request_read_nse+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		uint32_t start = ranges[i].start;
		uint32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
    10b6:	4b26      	ldr	r3, [pc, #152]	; (1150 <__acle_se_spm_request_read_nse+0xa4>)
    10b8:	4299      	cmp	r1, r3
    10ba:	d93c      	bls.n	1136 <__acle_se_spm_request_read_nse+0x8a>
    10bc:	1854      	adds	r4, r2, r1
    10be:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    10c2:	429c      	cmp	r4, r3
    10c4:	d83a      	bhi.n	113c <__acle_se_spm_request_read_nse+0x90>
			memcpy(destination, (const void *)addr, len);
    10c6:	f003 fc9d 	bl	4a04 <memcpy>
			return 0;
    10ca:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
    10cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    10d0:	4671      	mov	r1, lr
    10d2:	4672      	mov	r2, lr
    10d4:	4673      	mov	r3, lr
    10d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    10da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    10de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    10e2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    10e6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    10ea:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    10ee:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    10f2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    10f6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    10fa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    10fe:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    1102:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1106:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    110a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    110e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1112:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1116:	f38e 8c00 	msr	CPSR_fs, lr
    111a:	b410      	push	{r4}
    111c:	eef1 ca10 	vmrs	ip, fpscr
    1120:	f64f 7460 	movw	r4, #65376	; 0xff60
    1124:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1128:	ea0c 0c04 	and.w	ip, ip, r4
    112c:	eee1 ca10 	vmsr	fpscr, ip
    1130:	bc10      	pop	{r4}
    1132:	46f4      	mov	ip, lr
    1134:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
    1136:	4b07      	ldr	r3, [pc, #28]	; (1154 <__acle_se_spm_request_read_nse+0xa8>)
    1138:	4299      	cmp	r1, r3
    113a:	d903      	bls.n	1144 <__acle_se_spm_request_read_nse+0x98>
    113c:	4b06      	ldr	r3, [pc, #24]	; (1158 <__acle_se_spm_request_read_nse+0xac>)
    113e:	1854      	adds	r4, r2, r1
    1140:	429c      	cmp	r4, r3
    1142:	d9c0      	bls.n	10c6 <__acle_se_spm_request_read_nse+0x1a>
	return -EPERM;
    1144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1148:	e7c0      	b.n	10cc <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    114a:	f06f 0015 	mvn.w	r0, #21
    114e:	e7bd      	b.n	10cc <__acle_se_spm_request_read_nse+0x20>
    1150:	00ff0203 	.word	0x00ff0203
    1154:	00ff012f 	.word	0x00ff012f
    1158:	00ff0138 	.word	0x00ff0138

0000115c <__acle_se_spm_firmware_info_nse>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1160:	4683      	mov	fp, r0
    1162:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1164:	4689      	mov	r9, r1
    1166:	2900      	cmp	r1, #0
    1168:	d051      	beq.n	120e <__acle_se_spm_firmware_info_nse+0xb2>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    116a:	2700      	movs	r7, #0
    116c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1220 <__acle_se_spm_firmware_info_nse+0xc4>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1170:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1224 <__acle_se_spm_firmware_info_nse+0xc8>
    1174:	ae01      	add	r6, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1176:	f85a 4b04 	ldr.w	r4, [sl], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    117a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    117e:	445c      	add	r4, fp
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1180:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1184:	220c      	movs	r2, #12
    1186:	4631      	mov	r1, r6
    1188:	4620      	mov	r0, r4
    118a:	f003 fc14 	bl	49b6 <memcmp>
    118e:	4605      	mov	r5, r0
    1190:	b908      	cbnz	r0, 1196 <__acle_se_spm_firmware_info_nse+0x3a>
		if (finfo) {
    1192:	2c00      	cmp	r4, #0
    1194:	d13e      	bne.n	1214 <__acle_se_spm_firmware_info_nse+0xb8>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1196:	3701      	adds	r7, #1
    1198:	2f05      	cmp	r7, #5
    119a:	d1ec      	bne.n	1176 <__acle_se_spm_firmware_info_nse+0x1a>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    119c:	f06f 050d 	mvn.w	r5, #13
}
    11a0:	4628      	mov	r0, r5
    11a2:	b005      	add	sp, #20
    11a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    11a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    11ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    11b0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    11b4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    11b8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    11bc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    11c0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    11c4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    11c8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    11cc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    11d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    11d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    11d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    11dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    11e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11e4:	4671      	mov	r1, lr
    11e6:	4672      	mov	r2, lr
    11e8:	4673      	mov	r3, lr
    11ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    11ee:	f38e 8c00 	msr	CPSR_fs, lr
    11f2:	b410      	push	{r4}
    11f4:	eef1 ca10 	vmrs	ip, fpscr
    11f8:	f64f 7460 	movw	r4, #65376	; 0xff60
    11fc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1200:	ea0c 0c04 	and.w	ip, ip, r4
    1204:	eee1 ca10 	vmsr	fpscr, ip
    1208:	bc10      	pop	{r4}
    120a:	46f4      	mov	ip, lr
    120c:	4774      	bxns	lr
		return -EINVAL;
    120e:	f06f 0515 	mvn.w	r5, #21
    1212:	e7c5      	b.n	11a0 <__acle_se_spm_firmware_info_nse+0x44>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    1214:	223c      	movs	r2, #60	; 0x3c
    1216:	4621      	mov	r1, r4
    1218:	4648      	mov	r0, r9
    121a:	f003 fbf3 	bl	4a04 <memcpy>
		return 0;
    121e:	e7bf      	b.n	11a0 <__acle_se_spm_firmware_info_nse+0x44>
    1220:	000051d8 	.word	0x000051d8
    1224:	00005080 	.word	0x00005080

00001228 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1228:	4801      	ldr	r0, [pc, #4]	; (1230 <nrf_cc3xx_platform_abort_init+0x8>)
    122a:	f002 ba71 	b.w	3710 <nrf_cc3xx_platform_set_abort>
    122e:	bf00      	nop
    1230:	000051ec 	.word	0x000051ec

00001234 <mutex_unlock_platform>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1234:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1236:	b130      	cbz	r0, 1246 <mutex_unlock_platform+0x12>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1238:	6843      	ldr	r3, [r0, #4]
    123a:	b13b      	cbz	r3, 124c <mutex_unlock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    123c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    123e:	f001 fa79 	bl	2734 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC3XX_PLATFORM_SUCCESS;
    1242:	2000      	movs	r0, #0
}
    1244:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1246:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    124a:	e7fb      	b.n	1244 <mutex_unlock_platform+0x10>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    124c:	4800      	ldr	r0, [pc, #0]	; (1250 <mutex_unlock_platform+0x1c>)
    124e:	e7f9      	b.n	1244 <mutex_unlock_platform+0x10>
    1250:	ffff8fea 	.word	0xffff8fea

00001254 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1254:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1256:	4604      	mov	r4, r0
    1258:	b918      	cbnz	r0, 1262 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    125a:	4b0b      	ldr	r3, [pc, #44]	; (1288 <mutex_free_platform+0x34>)
    125c:	480b      	ldr	r0, [pc, #44]	; (128c <mutex_free_platform+0x38>)
    125e:	685b      	ldr	r3, [r3, #4]
    1260:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1262:	6861      	ldr	r1, [r4, #4]
    1264:	b159      	cbz	r1, 127e <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1266:	f011 0102 	ands.w	r1, r1, #2
    126a:	6820      	ldr	r0, [r4, #0]
    126c:	d008      	beq.n	1280 <mutex_free_platform+0x2c>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    126e:	4601      	mov	r1, r0
    1270:	4807      	ldr	r0, [pc, #28]	; (1290 <mutex_free_platform+0x3c>)
    1272:	f001 f9bd 	bl	25f0 <k_mem_slab_free>
        mutex->mutex = NULL;
    1276:	2300      	movs	r3, #0
    1278:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    127a:	2300      	movs	r3, #0
    127c:	6063      	str	r3, [r4, #4]
}
    127e:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1280:	2214      	movs	r2, #20
    1282:	f003 fbe9 	bl	4a58 <memset>
    1286:	e7f8      	b.n	127a <mutex_free_platform+0x26>
    1288:	20000070 	.word	0x20000070
    128c:	00005666 	.word	0x00005666
    1290:	200002d8 	.word	0x200002d8

00001294 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1294:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1296:	4604      	mov	r4, r0
    1298:	b918      	cbnz	r0, 12a2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    129a:	4b14      	ldr	r3, [pc, #80]	; (12ec <mutex_init_platform+0x58>)
    129c:	4814      	ldr	r0, [pc, #80]	; (12f0 <mutex_init_platform+0x5c>)
    129e:	685b      	ldr	r3, [r3, #4]
    12a0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    12a2:	6863      	ldr	r3, [r4, #4]
    12a4:	b9cb      	cbnz	r3, 12da <mutex_init_platform+0x46>
    12a6:	6823      	ldr	r3, [r4, #0]
    12a8:	b9bb      	cbnz	r3, 12da <mutex_init_platform+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    12aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12b2:	4621      	mov	r1, r4
    12b4:	480f      	ldr	r0, [pc, #60]	; (12f4 <mutex_init_platform+0x60>)
    12b6:	f001 f969 	bl	258c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    12ba:	b908      	cbnz	r0, 12c0 <mutex_init_platform+0x2c>
    12bc:	6823      	ldr	r3, [r4, #0]
    12be:	b91b      	cbnz	r3, 12c8 <mutex_init_platform+0x34>
            platform_abort_apis.abort_fn(
    12c0:	4b0a      	ldr	r3, [pc, #40]	; (12ec <mutex_init_platform+0x58>)
    12c2:	480d      	ldr	r0, [pc, #52]	; (12f8 <mutex_init_platform+0x64>)
    12c4:	685b      	ldr	r3, [r3, #4]
    12c6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12c8:	2214      	movs	r2, #20
    12ca:	2100      	movs	r1, #0
    12cc:	6820      	ldr	r0, [r4, #0]
    12ce:	f003 fbc3 	bl	4a58 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    12d2:	6863      	ldr	r3, [r4, #4]
    12d4:	f043 0302 	orr.w	r3, r3, #2
    12d8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    12da:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    12dc:	f003 fc98 	bl	4c10 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    12e0:	6863      	ldr	r3, [r4, #4]
    12e2:	f043 0301 	orr.w	r3, r3, #1
    12e6:	6063      	str	r3, [r4, #4]
}
    12e8:	bd10      	pop	{r4, pc}
    12ea:	bf00      	nop
    12ec:	20000070 	.word	0x20000070
    12f0:	00005666 	.word	0x00005666
    12f4:	200002d8 	.word	0x200002d8
    12f8:	0000568c 	.word	0x0000568c

000012fc <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12fc:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    12fe:	b168      	cbz	r0, 131c <mutex_lock_platform+0x20>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1300:	6843      	ldr	r3, [r0, #4]
    1302:	b173      	cbz	r3, 1322 <mutex_lock_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1304:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    130a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    130e:	f001 f999 	bl	2644 <z_impl_k_mutex_lock>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <mutex_lock_platform+0x2c>)
    if (ret == 0) {
    1314:	2800      	cmp	r0, #0
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1316:	bf18      	it	ne
    1318:	4618      	movne	r0, r3
}
    131a:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    131c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1320:	e7fb      	b.n	131a <mutex_lock_platform+0x1e>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1322:	4802      	ldr	r0, [pc, #8]	; (132c <mutex_lock_platform+0x30>)
    1324:	e7f9      	b.n	131a <mutex_lock_platform+0x1e>
    1326:	bf00      	nop
    1328:	ffff8fe9 	.word	0xffff8fe9
    132c:	ffff8fea 	.word	0xffff8fea

00001330 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1330:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1332:	4906      	ldr	r1, [pc, #24]	; (134c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1334:	2340      	movs	r3, #64	; 0x40
    1336:	2214      	movs	r2, #20
    1338:	4805      	ldr	r0, [pc, #20]	; (1350 <nrf_cc3xx_platform_mutex_init+0x20>)
    133a:	f003 fc4e 	bl	4bda <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    133e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1342:	4904      	ldr	r1, [pc, #16]	; (1354 <nrf_cc3xx_platform_mutex_init+0x24>)
    1344:	4804      	ldr	r0, [pc, #16]	; (1358 <nrf_cc3xx_platform_mutex_init+0x28>)
    1346:	f002 ba35 	b.w	37b4 <nrf_cc3xx_platform_set_mutexes>
    134a:	bf00      	nop
    134c:	200002f4 	.word	0x200002f4
    1350:	200002d8 	.word	0x200002d8
    1354:	00005204 	.word	0x00005204
    1358:	000051f4 	.word	0x000051f4

0000135c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    135c:	4a09      	ldr	r2, [pc, #36]	; (1384 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    135e:	490a      	ldr	r1, [pc, #40]	; (1388 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1360:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1362:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1364:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    1366:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1368:	4908      	ldr	r1, [pc, #32]	; (138c <arch_swap+0x30>)
    136a:	684b      	ldr	r3, [r1, #4]
    136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1370:	604b      	str	r3, [r1, #4]
    1372:	2300      	movs	r3, #0
    1374:	f383 8811 	msr	BASEPRI, r3
    1378:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    137c:	6893      	ldr	r3, [r2, #8]
}
    137e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1380:	4770      	bx	lr
    1382:	bf00      	nop
    1384:	20000810 	.word	0x20000810
    1388:	00005278 	.word	0x00005278
    138c:	e000ed00 	.word	0xe000ed00

00001390 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1390:	4913      	ldr	r1, [pc, #76]	; (13e0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1392:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1394:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    1398:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    139a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    139e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    13a4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    13a8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    13ac:	4f0d      	ldr	r7, [pc, #52]	; (13e4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    13ae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    13b2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    13b4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    13b6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    13b8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    13ba:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    13bc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    13be:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    13c2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    13c6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    13ca:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    13ce:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    13d2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    13d4:	f003 faa7 	bl	4926 <configure_builtin_stack_guard>
    pop {r2, lr}
    13d8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    13dc:	4770      	bx	lr
    13de:	0000      	.short	0x0000
    ldr r1, =_kernel
    13e0:	20000810 	.word	0x20000810
    ldr v4, =_SCS_ICSR
    13e4:	e000ed04 	.word	0xe000ed04

000013e8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    13e8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    13ec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    13ee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    13f2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    13f6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    13f8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    13fc:	2902      	cmp	r1, #2
    beq _oops
    13fe:	d0ff      	beq.n	1400 <_oops>

00001400 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1400:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1402:	f003 fa96 	bl	4932 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1406:	bd01      	pop	{r0, pc}

00001408 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1408:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    140a:	2b00      	cmp	r3, #0
    140c:	db08      	blt.n	1420 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    140e:	2201      	movs	r2, #1
    1410:	f000 001f 	and.w	r0, r0, #31
    1414:	fa02 f000 	lsl.w	r0, r2, r0
    1418:	4a02      	ldr	r2, [pc, #8]	; (1424 <arch_irq_enable+0x1c>)
    141a:	095b      	lsrs	r3, r3, #5
    141c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1420:	4770      	bx	lr
    1422:	bf00      	nop
    1424:	e000e100 	.word	0xe000e100

00001428 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1428:	4b05      	ldr	r3, [pc, #20]	; (1440 <arch_irq_is_enabled+0x18>)
    142a:	0942      	lsrs	r2, r0, #5
    142c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1430:	2301      	movs	r3, #1
    1432:	f000 001f 	and.w	r0, r0, #31
    1436:	fa03 f000 	lsl.w	r0, r3, r0
}
    143a:	4010      	ands	r0, r2
    143c:	4770      	bx	lr
    143e:	bf00      	nop
    1440:	e000e100 	.word	0xe000e100

00001444 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1444:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1446:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1448:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    144c:	bfa8      	it	ge
    144e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    1452:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1456:	bfb8      	it	lt
    1458:	4b05      	ldrlt	r3, [pc, #20]	; (1470 <z_arm_irq_priority_set+0x2c>)
    145a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    145c:	bfab      	itete	ge
    145e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1462:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1466:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    146a:	5419      	strblt	r1, [r3, r0]
}
    146c:	4770      	bx	lr
    146e:	bf00      	nop
    1470:	e000ed14 	.word	0xe000ed14

00001474 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1474:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1478:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    147a:	490b      	ldr	r1, [pc, #44]	; (14a8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    147c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1480:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1482:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1486:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    148a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    148c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1490:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1498:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    149c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    149e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    14a0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    14a2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop
    14a8:	00004521 	.word	0x00004521

000014ac <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    14ac:	b508      	push	{r3, lr}
    14ae:	4604      	mov	r4, r0
    14b0:	460e      	mov	r6, r1
    14b2:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    14b4:	2300      	movs	r3, #0
    14b6:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
    14ba:	f000 fa0d 	bl	18d8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14be:	4b09      	ldr	r3, [pc, #36]	; (14e4 <arch_switch_to_main_thread+0x38>)
    14c0:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    14c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    14c4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14c8:	4628      	mov	r0, r5
    14ca:	f386 8809 	msr	PSP, r6
    14ce:	2100      	movs	r1, #0
    14d0:	b663      	cpsie	if
    14d2:	f381 8811 	msr	BASEPRI, r1
    14d6:	f3bf 8f6f 	isb	sy
    14da:	2200      	movs	r2, #0
    14dc:	2300      	movs	r3, #0
    14de:	f003 f81f 	bl	4520 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14e2:	bf00      	nop
    14e4:	20000810 	.word	0x20000810

000014e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    14e8:	4901      	ldr	r1, [pc, #4]	; (14f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    14ea:	2210      	movs	r2, #16
	str	r2, [r1]
    14ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    14ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    14f0:	e000ed10 	.word	0xe000ed10

000014f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    14f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    14f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    14f8:	f380 8811 	msr	BASEPRI, r0
	isb
    14fc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1500:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1504:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1506:	b662      	cpsie	i
	isb
    1508:	f3bf 8f6f 	isb	sy

	bx	lr
    150c:	4770      	bx	lr
    150e:	bf00      	nop

00001510 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1510:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1512:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1514:	f381 8811 	msr	BASEPRI, r1

	wfe
    1518:	bf20      	wfe

	msr	BASEPRI, r0
    151a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    151e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1520:	4770      	bx	lr
    1522:	bf00      	nop

00001524 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1524:	bf30      	wfi
    b z_SysNmiOnReset
    1526:	f7ff bffd 	b.w	1524 <z_SysNmiOnReset>
    152a:	bf00      	nop

0000152c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    152c:	4a17      	ldr	r2, [pc, #92]	; (158c <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    152e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1530:	4b17      	ldr	r3, [pc, #92]	; (1590 <z_arm_prep_c+0x64>)
    1532:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1536:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    153c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1544:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    154c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1550:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    1558:	4a0e      	ldr	r2, [pc, #56]	; (1594 <z_arm_prep_c+0x68>)
    155a:	6853      	ldr	r3, [r2, #4]
    155c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    1560:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1566:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    156a:	2300      	movs	r3, #0
    156c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1570:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1574:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1578:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    157c:	f000 ff16 	bl	23ac <z_bss_zero>
	z_data_copy();
    1580:	f000 ff1e 	bl	23c0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1584:	f000 f970 	bl	1868 <z_arm_interrupt_init>
	z_cstart();
    1588:	f000 ff58 	bl	243c <z_cstart>
    158c:	00000000 	.word	0x00000000
    1590:	e000ed00 	.word	0xe000ed00
    1594:	e000ef30 	.word	0xe000ef30

00001598 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1598:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    159a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    159c:	4a0b      	ldr	r2, [pc, #44]	; (15cc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    159e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    15a0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    15a2:	bf1e      	ittt	ne
	movne	r1, #0
    15a4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    15a6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    15a8:	f003 fb15 	blne	4bd6 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    15ac:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    15ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    15b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    15b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    15ba:	4905      	ldr	r1, [pc, #20]	; (15d0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    15bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    15be:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    15c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    15c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    15c6:	4903      	ldr	r1, [pc, #12]	; (15d4 <_isr_wrapper+0x3c>)
	bx r1
    15c8:	4708      	bx	r1
    15ca:	0000      	.short	0x0000
	ldr r2, =_kernel
    15cc:	20000810 	.word	0x20000810
	ldr r1, =_sw_isr_table
    15d0:	00004e78 	.word	0x00004e78
	ldr r1, =z_arm_int_exit
    15d4:	00001829 	.word	0x00001829

000015d8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    15d8:	f003 f888 	bl	46ec <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    15de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    15e2:	4808      	ldr	r0, [pc, #32]	; (1604 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    15e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    15e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    15ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    15ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    15f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    15f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    15f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    15fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    15fe:	f7ff ff95 	bl	152c <z_arm_prep_c>
    1602:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1604:	20000db0 	.word	0x20000db0

00001608 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1608:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    160c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1610:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1612:	4672      	mov	r2, lr
	bl z_arm_fault
    1614:	f000 f870 	bl	16f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1618:	bd01      	pop	{r0, pc}
    161a:	bf00      	nop

0000161c <mem_manage_fault.isra.2>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    161c:	4b0c      	ldr	r3, [pc, #48]	; (1650 <mem_manage_fault.isra.2+0x34>)
    161e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1624:	0792      	lsls	r2, r2, #30
    1626:	d508      	bpl.n	163a <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1628:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    162a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    162c:	0612      	lsls	r2, r2, #24
    162e:	d504      	bpl.n	163a <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1630:	b118      	cbz	r0, 163a <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1638:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    163a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <mem_manage_fault.isra.2+0x34>)
    163e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1646:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    164a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    164c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    164e:	4770      	bx	lr
    1650:	e000ed00 	.word	0xe000ed00

00001654 <bus_fault.isra.3>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1654:	4b0d      	ldr	r3, [pc, #52]	; (168c <bus_fault.isra.3+0x38>)
    1656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    165a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    165c:	0592      	lsls	r2, r2, #22
    165e:	d508      	bpl.n	1672 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1660:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1664:	0412      	lsls	r2, r2, #16
    1666:	d504      	bpl.n	1672 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1668:	b118      	cbz	r0, 1672 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    166a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    166c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    1672:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1674:	4b05      	ldr	r3, [pc, #20]	; (168c <bus_fault.isra.3+0x38>)
    1676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    167a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    167c:	bf58      	it	pl
    167e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1682:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1686:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1688:	7008      	strb	r0, [r1, #0]

	return reason;
}
    168a:	4770      	bx	lr
    168c:	e000ed00 	.word	0xe000ed00

00001690 <usage_fault.isra.4>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1690:	4b09      	ldr	r3, [pc, #36]	; (16b8 <usage_fault.isra.4+0x28>)
    1692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1696:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    169c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    169e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    16a2:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16a6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16aa:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    16ae:	bf18      	it	ne
    16b0:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16b2:	629a      	str	r2, [r3, #40]	; 0x28
}
    16b4:	4770      	bx	lr
    16b6:	bf00      	nop
    16b8:	e000ed00 	.word	0xe000ed00

000016bc <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <secure_fault.isra.5+0x38>)
    16be:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    16c0:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    16c2:	695a      	ldr	r2, [r3, #20]
    16c4:	07d0      	lsls	r0, r2, #31
    16c6:	d40f      	bmi.n	16e8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    16c8:	695a      	ldr	r2, [r3, #20]
    16ca:	0791      	lsls	r1, r2, #30
    16cc:	d40c      	bmi.n	16e8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    16ce:	695a      	ldr	r2, [r3, #20]
    16d0:	0752      	lsls	r2, r2, #29
    16d2:	d409      	bmi.n	16e8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    16d4:	695a      	ldr	r2, [r3, #20]
    16d6:	0710      	lsls	r0, r2, #28
    16d8:	d406      	bmi.n	16e8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    16da:	695a      	ldr	r2, [r3, #20]
    16dc:	06d1      	lsls	r1, r2, #27
    16de:	d403      	bmi.n	16e8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    16e0:	695a      	ldr	r2, [r3, #20]
    16e2:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    16e4:	bf58      	it	pl
    16e6:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    16e8:	695a      	ldr	r2, [r3, #20]
    16ea:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    16ee:	615a      	str	r2, [r3, #20]
}
    16f0:	4770      	bx	lr
    16f2:	bf00      	nop
    16f4:	e000edd0 	.word	0xe000edd0

000016f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    16f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16fa:	4b41      	ldr	r3, [pc, #260]	; (1800 <z_arm_fault+0x108>)
{
    16fc:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16fe:	685b      	ldr	r3, [r3, #4]
    1700:	2500      	movs	r5, #0
    1702:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1706:	f385 8811 	msr	BASEPRI, r5
    170a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    170e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    1712:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    1716:	d11e      	bne.n	1756 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1718:	f012 0401 	ands.w	r4, r2, #1
    171c:	d01a      	beq.n	1754 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    171e:	0656      	lsls	r6, r2, #25
    1720:	f002 0408 	and.w	r4, r2, #8
    1724:	d467      	bmi.n	17f6 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1726:	f082 0204 	eor.w	r2, r2, #4
    172a:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    172e:	b164      	cbz	r4, 174a <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1730:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    1734:	2200      	movs	r2, #0
	switch (fault) {
    1736:	3b03      	subs	r3, #3
	*recoverable = false;
    1738:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    173c:	2b04      	cmp	r3, #4
    173e:	d84b      	bhi.n	17d8 <z_arm_fault+0xe0>
    1740:	e8df f003 	tbb	[pc, r3]
    1744:	41504c0b 	.word	0x41504c0b
    1748:	48          	.byte	0x48
    1749:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    174a:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    174e:	e7f1      	b.n	1734 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    1750:	460e      	mov	r6, r1
    1752:	e7ef      	b.n	1734 <z_arm_fault+0x3c>
	*nested_exc = false;
    1754:	4625      	mov	r5, r4
		return NULL;
    1756:	462e      	mov	r6, r5
    1758:	e7ec      	b.n	1734 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    175a:	4b29      	ldr	r3, [pc, #164]	; (1800 <z_arm_fault+0x108>)
    175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    175e:	0792      	lsls	r2, r2, #30
    1760:	d43a      	bmi.n	17d8 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1762:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1764:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1768:	d008      	beq.n	177c <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    176a:	3328      	adds	r3, #40	; 0x28
    176c:	781b      	ldrb	r3, [r3, #0]
    176e:	b1eb      	cbz	r3, 17ac <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1770:	2001      	movs	r0, #1
    1772:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1776:	f7ff ff51 	bl	161c <mem_manage_fault.isra.2>
    177a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    177c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1780:	b993      	cbnz	r3, 17a8 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1782:	2220      	movs	r2, #32
    1784:	4631      	mov	r1, r6
    1786:	a802      	add	r0, sp, #8
    1788:	f003 f93c 	bl	4a04 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    178c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    178e:	b36d      	cbz	r5, 17ec <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1790:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1794:	b922      	cbnz	r2, 17a0 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1796:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    179a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    179e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    17a0:	a902      	add	r1, sp, #8
    17a2:	4620      	mov	r0, r4
    17a4:	f003 f8c3 	bl	492e <z_arm_fatal_error>
}
    17a8:	b00b      	add	sp, #44	; 0x2c
    17aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    17ac:	4b15      	ldr	r3, [pc, #84]	; (1804 <z_arm_fault+0x10c>)
    17ae:	781b      	ldrb	r3, [r3, #0]
    17b0:	b12b      	cbz	r3, 17be <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    17b2:	2001      	movs	r0, #1
    17b4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    17b8:	f7ff ff4c 	bl	1654 <bus_fault.isra.3>
    17bc:	e7dd      	b.n	177a <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    17be:	4b12      	ldr	r3, [pc, #72]	; (1808 <z_arm_fault+0x110>)
    17c0:	881f      	ldrh	r7, [r3, #0]
    17c2:	b2bf      	uxth	r7, r7
    17c4:	b117      	cbz	r7, 17cc <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    17c6:	f7ff ff63 	bl	1690 <usage_fault.isra.4>
    17ca:	e7d6      	b.n	177a <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    17cc:	4b0f      	ldr	r3, [pc, #60]	; (180c <z_arm_fault+0x114>)
    17ce:	695c      	ldr	r4, [r3, #20]
    17d0:	2c00      	cmp	r4, #0
    17d2:	d0d3      	beq.n	177c <z_arm_fault+0x84>
		secure_fault(esf);
    17d4:	f7ff ff72 	bl	16bc <secure_fault.isra.5>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17d8:	2400      	movs	r4, #0
    17da:	e7cf      	b.n	177c <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    17dc:	f10d 0107 	add.w	r1, sp, #7
    17e0:	2000      	movs	r0, #0
    17e2:	e7c8      	b.n	1776 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    17e4:	f10d 0107 	add.w	r1, sp, #7
    17e8:	2000      	movs	r0, #0
    17ea:	e7e5      	b.n	17b8 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    17ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    17f0:	f023 0301 	bic.w	r3, r3, #1
    17f4:	e7d3      	b.n	179e <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    17f6:	2c00      	cmp	r4, #0
    17f8:	d1aa      	bne.n	1750 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    17fa:	4606      	mov	r6, r0
			*nested_exc = true;
    17fc:	2501      	movs	r5, #1
    17fe:	e799      	b.n	1734 <z_arm_fault+0x3c>
    1800:	e000ed00 	.word	0xe000ed00
    1804:	e000ed29 	.word	0xe000ed29
    1808:	e000ed2a 	.word	0xe000ed2a
    180c:	e000edd0 	.word	0xe000edd0

00001810 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1810:	4b04      	ldr	r3, [pc, #16]	; (1824 <z_arm_fault_init+0x14>)
    1812:	695a      	ldr	r2, [r3, #20]
    1814:	f042 0210 	orr.w	r2, r2, #16
    1818:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    181a:	695a      	ldr	r2, [r3, #20]
    181c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1820:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1822:	4770      	bx	lr
    1824:	e000ed00 	.word	0xe000ed00

00001828 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1828:	4b04      	ldr	r3, [pc, #16]	; (183c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    182a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    182c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    182e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1830:	d003      	beq.n	183a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1832:	4903      	ldr	r1, [pc, #12]	; (1840 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1838:	600a      	str	r2, [r1, #0]

0000183a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    183a:	4770      	bx	lr
	ldr r3, =_kernel
    183c:	20000810 	.word	0x20000810
	ldr r1, =_SCS_ICSR
    1840:	e000ed04 	.word	0xe000ed04

00001844 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1844:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1848:	4905      	ldr	r1, [pc, #20]	; (1860 <sys_arch_reboot+0x1c>)
    184a:	4b06      	ldr	r3, [pc, #24]	; (1864 <sys_arch_reboot+0x20>)
    184c:	68ca      	ldr	r2, [r1, #12]
    184e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1852:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1854:	60cb      	str	r3, [r1, #12]
    1856:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    185a:	bf00      	nop
    185c:	e7fd      	b.n	185a <sys_arch_reboot+0x16>
    185e:	bf00      	nop
    1860:	e000ed00 	.word	0xe000ed00
    1864:	05fa0004 	.word	0x05fa0004

00001868 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1868:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    186a:	2120      	movs	r1, #32
    186c:	4803      	ldr	r0, [pc, #12]	; (187c <z_arm_interrupt_init+0x14>)
    186e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1870:	3301      	adds	r3, #1
    1872:	2b41      	cmp	r3, #65	; 0x41
    1874:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1878:	d1f9      	bne.n	186e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    187a:	4770      	bx	lr
    187c:	e000e100 	.word	0xe000e100

00001880 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1880:	b510      	push	{r4, lr}
    1882:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    1884:	f001 f956 	bl	2b34 <z_thread_single_abort>

	if (_current == thread) {
    1888:	4b11      	ldr	r3, [pc, #68]	; (18d0 <z_impl_k_thread_abort+0x50>)
    188a:	689b      	ldr	r3, [r3, #8]
    188c:	42a3      	cmp	r3, r4
    188e:	d107      	bne.n	18a0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1890:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1894:	b183      	cbz	r3, 18b8 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1896:	4a0f      	ldr	r2, [pc, #60]	; (18d4 <z_impl_k_thread_abort+0x54>)
    1898:	6853      	ldr	r3, [r2, #4]
    189a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    189e:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    18a0:	f04f 0320 	mov.w	r3, #32
    18a4:	f3ef 8011 	mrs	r0, BASEPRI
    18a8:	f383 8811 	msr	BASEPRI, r3
    18ac:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    18b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    18b4:	f003 b9b3 	b.w	4c1e <z_reschedule_irqlock>
    18b8:	f04f 0320 	mov.w	r3, #32
    18bc:	f3ef 8011 	mrs	r0, BASEPRI
    18c0:	f383 8811 	msr	BASEPRI, r3
    18c4:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    18c8:	f7ff fd48 	bl	135c <arch_swap>
	return ret;
    18cc:	e7e8      	b.n	18a0 <z_impl_k_thread_abort+0x20>
    18ce:	bf00      	nop
    18d0:	20000810 	.word	0x20000810
    18d4:	e000ed00 	.word	0xe000ed00

000018d8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    18d8:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    18da:	4b0e      	ldr	r3, [pc, #56]	; (1914 <z_arm_configure_static_mpu_regions+0x3c>)
{
    18dc:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    18de:	9302      	str	r3, [sp, #8]
    18e0:	4b0d      	ldr	r3, [pc, #52]	; (1918 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    18e2:	4c0e      	ldr	r4, [pc, #56]	; (191c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    18e4:	9303      	str	r3, [sp, #12]
    18e6:	4b0e      	ldr	r3, [pc, #56]	; (1920 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    18e8:	4a0e      	ldr	r2, [pc, #56]	; (1924 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    18ea:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    18ec:	ab02      	add	r3, sp, #8
    18ee:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    18f0:	a801      	add	r0, sp, #4
    18f2:	4623      	mov	r3, r4
    18f4:	2101      	movs	r1, #1
    18f6:	f000 f903 	bl	1b00 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    18fa:	2300      	movs	r3, #0
    18fc:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    18fe:	4b0a      	ldr	r3, [pc, #40]	; (1928 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1900:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1902:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1904:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1906:	9305      	str	r3, [sp, #20]
    1908:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    190a:	f000 f903 	bl	1b14 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    190e:	b008      	add	sp, #32
    1910:	bd10      	pop	{r4, pc}
    1912:	bf00      	nop
    1914:	20000000 	.word	0x20000000
    1918:	00000000 	.word	0x00000000
    191c:	20010000 	.word	0x20010000
    1920:	00010006 	.word	0x00010006
    1924:	20000000 	.word	0x20000000
    1928:	20000160 	.word	0x20000160

0000192c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    192c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    192e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1930:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1932:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1936:	f004 031f 	and.w	r3, r4, #31
    193a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    193c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    193e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1940:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1944:	4904      	ldr	r1, [pc, #16]	; (1958 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1946:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    194a:	f043 0301 	orr.w	r3, r3, #1
    194e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1950:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    1952:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1954:	bd10      	pop	{r4, pc}
    1956:	bf00      	nop
    1958:	e000ed90 	.word	0xe000ed90

0000195c <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    195c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1960:	4680      	mov	r8, r0
    1962:	4689      	mov	r9, r1
    1964:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1966:	2700      	movs	r7, #0
	MPU->RNR = index;
    1968:	4d48      	ldr	r5, [pc, #288]	; (1a8c <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    196a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    196c:	454f      	cmp	r7, r9
    196e:	da07      	bge.n	1980 <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    1970:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    1974:	685e      	ldr	r6, [r3, #4]
    1976:	b3c6      	cbz	r6, 19ea <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
    1978:	2e1f      	cmp	r6, #31
    197a:	d805      	bhi.n	1988 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    197c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1980:	4620      	mov	r0, r4
    1982:	b005      	add	sp, #20
    1984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1988:	06f2      	lsls	r2, r6, #27
    198a:	d1f7      	bne.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
    198c:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    1990:	f01a 0f1f 	tst.w	sl, #31
    1994:	d1f2      	bne.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1996:	4650      	mov	r0, sl
    1998:	f002 fff8 	bl	498c <arm_cmse_mpu_region_get>
    199c:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    199e:	eb06 000a 	add.w	r0, r6, sl
    19a2:	3801      	subs	r0, #1
    19a4:	f002 fff2 	bl	498c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    19a8:	4583      	cmp	fp, r0
    19aa:	d1e7      	bne.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    19ac:	f11b 0f16 	cmn.w	fp, #22
    19b0:	d0e4      	beq.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    19b2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    19b4:	455b      	cmp	r3, fp
    19b6:	dbe1      	blt.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    19b8:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    19bc:	68e8      	ldr	r0, [r5, #12]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    19be:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    19c2:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    19c6:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    19c8:	f020 001f 	bic.w	r0, r0, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    19cc:	e9d1 3200 	ldrd	r3, r2, [r1]
    19d0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    19d2:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    19d4:	f046 061f 	orr.w	r6, r6, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    19d8:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    19dc:	d118      	bne.n	1a10 <mpu_configure_regions_and_partition.constprop.1+0xb4>
    19de:	4556      	cmp	r6, sl
    19e0:	d105      	bne.n	19ee <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    19e2:	fa5f f08b 	uxtb.w	r0, fp
    19e6:	f002 ffaf 	bl	4948 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    19ea:	3701      	adds	r7, #1
    19ec:	e7be      	b.n	196c <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    19ee:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    19f2:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    19f4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    19f8:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    19fc:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    19fe:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    1a00:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    1a02:	f002 ffa1 	bl	4948 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1a06:	f110 0f16 	cmn.w	r0, #22
    1a0a:	d0b7      	beq.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
    1a0c:	1c44      	adds	r4, r0, #1
    1a0e:	e7ec      	b.n	19ea <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
    1a10:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a14:	692a      	ldr	r2, [r5, #16]
    1a16:	3b01      	subs	r3, #1
    1a18:	f023 031f 	bic.w	r3, r3, #31
    1a1c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1a20:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1a22:	4556      	cmp	r6, sl
    1a24:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a26:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    1a28:	d0eb      	beq.n	1a02 <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    1a2a:	f002 ff8d 	bl	4948 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1a2e:	f110 0f16 	cmn.w	r0, #22
    1a32:	d0a3      	beq.n	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    1a34:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1a38:	68ea      	ldr	r2, [r5, #12]
    1a3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    1a3e:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    1a40:	f362 0304 	bfi	r3, r2, #0, #5
    1a44:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1a48:	692b      	ldr	r3, [r5, #16]
    1a4a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1a4e:	085b      	lsrs	r3, r3, #1
    1a50:	f363 1247 	bfi	r2, r3, #5, #3
    1a54:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    1a58:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    1a5c:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    1a5e:	e9d2 3200 	ldrd	r3, r2, [r2]
    1a62:	4413      	add	r3, r2
    1a64:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    1a66:	f023 031f 	bic.w	r3, r3, #31
    1a6a:	441e      	add	r6, r3
    1a6c:	eba6 060a 	sub.w	r6, r6, sl
    1a70:	b2c4      	uxtb	r4, r0
    1a72:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    1a76:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    1a78:	9603      	str	r6, [sp, #12]
    1a7a:	f63f af7f 	bhi.w	197c <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1a7e:	4620      	mov	r0, r4
    1a80:	4669      	mov	r1, sp
    1a82:	f7ff ff53 	bl	192c <region_init>
			reg_index++;
    1a86:	3401      	adds	r4, #1
    1a88:	e7af      	b.n	19ea <mpu_configure_regions_and_partition.constprop.1+0x8e>
    1a8a:	bf00      	nop
    1a8c:	e000ed90 	.word	0xe000ed90

00001a90 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a90:	2205      	movs	r2, #5
    1a92:	4b03      	ldr	r3, [pc, #12]	; (1aa0 <arm_core_mpu_enable+0x10>)
    1a94:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a9a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a9e:	4770      	bx	lr
    1aa0:	e000ed90 	.word	0xe000ed90

00001aa4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1aa4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1aa8:	2200      	movs	r2, #0
    1aaa:	4b01      	ldr	r3, [pc, #4]	; (1ab0 <arm_core_mpu_disable+0xc>)
    1aac:	605a      	str	r2, [r3, #4]
}
    1aae:	4770      	bx	lr
    1ab0:	e000ed90 	.word	0xe000ed90

00001ab4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    1ab4:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1ab6:	4d0e      	ldr	r5, [pc, #56]	; (1af0 <arm_mpu_init+0x3c>)
    1ab8:	682e      	ldr	r6, [r5, #0]
    1aba:	2e10      	cmp	r6, #16
    1abc:	d815      	bhi.n	1aea <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1abe:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    1ac0:	f7ff fff0 	bl	1aa4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    1ac4:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <arm_mpu_init+0x40>)
    1ac6:	4a0c      	ldr	r2, [pc, #48]	; (1af8 <arm_mpu_init+0x44>)
    1ac8:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1aca:	42a6      	cmp	r6, r4
    1acc:	d105      	bne.n	1ada <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1ace:	4b0b      	ldr	r3, [pc, #44]	; (1afc <arm_mpu_init+0x48>)
    1ad0:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    1ad2:	f7ff ffdd 	bl	1a90 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1ad6:	2000      	movs	r0, #0
}
    1ad8:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1ada:	6869      	ldr	r1, [r5, #4]
    1adc:	4620      	mov	r0, r4
    1ade:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1ae2:	f7ff ff23 	bl	192c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1ae6:	3401      	adds	r4, #1
    1ae8:	e7ef      	b.n	1aca <arm_mpu_init+0x16>
		return -1;
    1aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1aee:	e7f3      	b.n	1ad8 <arm_mpu_init+0x24>
    1af0:	00005218 	.word	0x00005218
    1af4:	e000ed90 	.word	0xe000ed90
    1af8:	0044ffaa 	.word	0x0044ffaa
    1afc:	2000086c 	.word	0x2000086c

00001b00 <arm_core_mpu_configure_static_mpu_regions>:
{
    1b00:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1b02:	4c03      	ldr	r4, [pc, #12]	; (1b10 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1b04:	7822      	ldrb	r2, [r4, #0]
    1b06:	f7ff ff29 	bl	195c <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1b0a:	7020      	strb	r0, [r4, #0]
}
    1b0c:	bd10      	pop	{r4, pc}
    1b0e:	bf00      	nop
    1b10:	2000086c 	.word	0x2000086c

00001b14 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b18:	4c25      	ldr	r4, [pc, #148]	; (1bb0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    1b1a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b1c:	4680      	mov	r8, r0
    1b1e:	2700      	movs	r7, #0
    1b20:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    1b22:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    1b26:	4d23      	ldr	r5, [pc, #140]	; (1bb4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b28:	4557      	cmp	r7, sl
    1b2a:	da1a      	bge.n	1b62 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1b2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1b30:	9301      	str	r3, [sp, #4]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d036      	beq.n	1ba4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1b36:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b3a:	4608      	mov	r0, r1
    1b3c:	9100      	str	r1, [sp, #0]
    1b3e:	f002 ff25 	bl	498c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b42:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b46:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b48:	1858      	adds	r0, r3, r1
    1b4a:	3801      	subs	r0, #1
    1b4c:	f002 ff1e 	bl	498c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1b50:	4286      	cmp	r6, r0
    1b52:	4a19      	ldr	r2, [pc, #100]	; (1bb8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    1b54:	d008      	beq.n	1b68 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1b56:	2314      	movs	r3, #20
    1b58:	435f      	muls	r7, r3
    1b5a:	f06f 0315 	mvn.w	r3, #21
    1b5e:	f849 3007 	str.w	r3, [r9, r7]
}
    1b62:	b003      	add	sp, #12
    1b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1b68:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    1b6c:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1b6e:	d0f8      	beq.n	1b62 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1b70:	7813      	ldrb	r3, [r2, #0]
    1b72:	42b3      	cmp	r3, r6
    1b74:	ddf5      	ble.n	1b62 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1b76:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    1b7a:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    1b7c:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    1b7e:	68e8      	ldr	r0, [r5, #12]
    1b80:	7b19      	ldrb	r1, [r3, #12]
    1b82:	f360 0104 	bfi	r1, r0, #0, #5
    1b86:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1b88:	6929      	ldr	r1, [r5, #16]
    1b8a:	7b18      	ldrb	r0, [r3, #12]
    1b8c:	0849      	lsrs	r1, r1, #1
    1b8e:	f361 1047 	bfi	r0, r1, #5, #3
    1b92:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1b94:	68eb      	ldr	r3, [r5, #12]
    1b96:	f023 031f 	bic.w	r3, r3, #31
    1b9a:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1b9c:	692b      	ldr	r3, [r5, #16]
    1b9e:	f023 031f 	bic.w	r3, r3, #31
    1ba2:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1ba4:	3701      	adds	r7, #1
    1ba6:	3414      	adds	r4, #20
    1ba8:	f108 080c 	add.w	r8, r8, #12
    1bac:	e7bc      	b.n	1b28 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    1bae:	bf00      	nop
    1bb0:	200007f4 	.word	0x200007f4
    1bb4:	e000ed90 	.word	0xe000ed90
    1bb8:	2000086c 	.word	0x2000086c

00001bbc <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1bbc:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1bbe:	4b0c      	ldr	r3, [pc, #48]	; (1bf0 <tz_nonsecure_state_setup+0x34>)
    1bc0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1bc2:	6803      	ldr	r3, [r0, #0]
    1bc4:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1bc8:	6843      	ldr	r3, [r0, #4]
    1bca:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1bce:	7b02      	ldrb	r2, [r0, #12]
    1bd0:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1bd4:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1bd8:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1bdc:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1bde:	bf48      	it	mi
    1be0:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1be4:	b109      	cbz	r1, 1bea <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1be6:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1bea:	f383 8894 	msr	CONTROL_NS, r3
}
    1bee:	4770      	bx	lr
    1bf0:	e002ed00 	.word	0xe002ed00

00001bf4 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1bf4:	4a08      	ldr	r2, [pc, #32]	; (1c18 <tz_nbanked_exception_target_state_set+0x24>)
    1bf6:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1bf8:	b148      	cbz	r0, 1c0e <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1bfe:	041b      	lsls	r3, r3, #16
    1c00:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1c02:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1c0a:	60d3      	str	r3, [r2, #12]
}
    1c0c:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1c0e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1c10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1c14:	e7f5      	b.n	1c02 <tz_nbanked_exception_target_state_set+0xe>
    1c16:	bf00      	nop
    1c18:	e000ed00 	.word	0xe000ed00

00001c1c <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1c1c:	4a08      	ldr	r2, [pc, #32]	; (1c40 <tz_nonsecure_exception_prio_config+0x24>)
    1c1e:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1c20:	b140      	cbz	r0, 1c34 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1c22:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1c30:	60d3      	str	r3, [r2, #12]
}
    1c32:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1c38:	041b      	lsls	r3, r3, #16
    1c3a:	0c1b      	lsrs	r3, r3, #16
    1c3c:	e7f4      	b.n	1c28 <tz_nonsecure_exception_prio_config+0xc>
    1c3e:	bf00      	nop
    1c40:	e000ed00 	.word	0xe000ed00

00001c44 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1c44:	4a08      	ldr	r2, [pc, #32]	; (1c68 <tz_nonsecure_system_reset_req_block+0x24>)
    1c46:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1c48:	b140      	cbz	r0, 1c5c <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1c4a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1c4c:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1c58:	60d3      	str	r3, [r2, #12]
}
    1c5a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1c5c:	f023 0308 	bic.w	r3, r3, #8
    1c60:	041b      	lsls	r3, r3, #16
    1c62:	0c1b      	lsrs	r3, r3, #16
    1c64:	e7f4      	b.n	1c50 <tz_nonsecure_system_reset_req_block+0xc>
    1c66:	bf00      	nop
    1c68:	e000ed00 	.word	0xe000ed00

00001c6c <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    1c6c:	4a03      	ldr	r2, [pc, #12]	; (1c7c <tz_nonsecure_fpu_access_enable+0x10>)
    1c6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    1c72:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1c76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    1c7a:	4770      	bx	lr
    1c7c:	e000ed00 	.word	0xe000ed00

00001c80 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    1c80:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    1c82:	681a      	ldr	r2, [r3, #0]
    1c84:	b118      	cbz	r0, 1c8e <tz_sau_configure+0xe>
    1c86:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1c8a:	601a      	str	r2, [r3, #0]
		}
	}
}
    1c8c:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    1c8e:	f022 0201 	bic.w	r2, r2, #1
    1c92:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1c94:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    1c96:	b111      	cbz	r1, 1c9e <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1c98:	f042 0202 	orr.w	r2, r2, #2
    1c9c:	e7f5      	b.n	1c8a <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1c9e:	f022 0202 	bic.w	r2, r2, #2
    1ca2:	e7f2      	b.n	1c8a <tz_sau_configure+0xa>
    1ca4:	e000edd0 	.word	0xe000edd0

00001ca8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1ca8:	4b01      	ldr	r3, [pc, #4]	; (1cb0 <__stdout_hook_install+0x8>)
    1caa:	6018      	str	r0, [r3, #0]
}
    1cac:	4770      	bx	lr
    1cae:	bf00      	nop
    1cb0:	20000024 	.word	0x20000024

00001cb4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1cb6:	794b      	ldrb	r3, [r1, #5]
    1cb8:	2b01      	cmp	r3, #1
    1cba:	d027      	beq.n	1d0c <uarte_nrfx_configure+0x58>
    1cbc:	2b03      	cmp	r3, #3
    1cbe:	d122      	bne.n	1d06 <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1cc0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1cc2:	798b      	ldrb	r3, [r1, #6]
    1cc4:	2b03      	cmp	r3, #3
    1cc6:	d11e      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1cc8:	79cc      	ldrb	r4, [r1, #7]
    1cca:	b124      	cbz	r4, 1cd6 <uarte_nrfx_configure+0x22>
    1ccc:	2c01      	cmp	r4, #1
    1cce:	d11a      	bne.n	1d06 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1cd0:	6843      	ldr	r3, [r0, #4]
    1cd2:	791b      	ldrb	r3, [r3, #4]
    1cd4:	b1bb      	cbz	r3, 1d06 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1cd6:	790a      	ldrb	r2, [r1, #4]
    1cd8:	b112      	cbz	r2, 1ce0 <uarte_nrfx_configure+0x2c>
    1cda:	2a02      	cmp	r2, #2
    1cdc:	d113      	bne.n	1d06 <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1cde:	220e      	movs	r2, #14
	switch (baudrate) {
    1ce0:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1ce4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1ce6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1ce8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    1cea:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1cec:	d063      	beq.n	1db6 <uarte_nrfx_configure+0x102>
    1cee:	d829      	bhi.n	1d44 <uarte_nrfx_configure+0x90>
    1cf0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1cf4:	d062      	beq.n	1dbc <uarte_nrfx_configure+0x108>
    1cf6:	d814      	bhi.n	1d22 <uarte_nrfx_configure+0x6e>
    1cf8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1cfc:	d060      	beq.n	1dc0 <uarte_nrfx_configure+0x10c>
    1cfe:	d807      	bhi.n	1d10 <uarte_nrfx_configure+0x5c>
    1d00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1d04:	d05f      	beq.n	1dc6 <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
    1d06:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1d0a:	e053      	b.n	1db4 <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    1d0c:	2600      	movs	r6, #0
    1d0e:	e7d8      	b.n	1cc2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1d10:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1d14:	d05a      	beq.n	1dcc <uarte_nrfx_configure+0x118>
    1d16:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1d1a:	d1f4      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1d1c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1d20:	e03c      	b.n	1d9c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1d22:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1d26:	d054      	beq.n	1dd2 <uarte_nrfx_configure+0x11e>
    1d28:	d804      	bhi.n	1d34 <uarte_nrfx_configure+0x80>
    1d2a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1d2e:	d1ea      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1d30:	4b33      	ldr	r3, [pc, #204]	; (1e00 <uarte_nrfx_configure+0x14c>)
    1d32:	e033      	b.n	1d9c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1d34:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1d38:	d04d      	beq.n	1dd6 <uarte_nrfx_configure+0x122>
    1d3a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1d3e:	d1e2      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1d40:	4b30      	ldr	r3, [pc, #192]	; (1e04 <uarte_nrfx_configure+0x150>)
    1d42:	e02b      	b.n	1d9c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1d44:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1d48:	d047      	beq.n	1dda <uarte_nrfx_configure+0x126>
    1d4a:	d812      	bhi.n	1d72 <uarte_nrfx_configure+0xbe>
    1d4c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1d50:	42bb      	cmp	r3, r7
    1d52:	d045      	beq.n	1de0 <uarte_nrfx_configure+0x12c>
    1d54:	d805      	bhi.n	1d62 <uarte_nrfx_configure+0xae>
    1d56:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1d5a:	d1d4      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1d5c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1d60:	e01c      	b.n	1d9c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1d62:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1d66:	d03e      	beq.n	1de6 <uarte_nrfx_configure+0x132>
    1d68:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1d6c:	d1cb      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1d6e:	4b26      	ldr	r3, [pc, #152]	; (1e08 <uarte_nrfx_configure+0x154>)
    1d70:	e014      	b.n	1d9c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1d72:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1d76:	d039      	beq.n	1dec <uarte_nrfx_configure+0x138>
    1d78:	d808      	bhi.n	1d8c <uarte_nrfx_configure+0xd8>
    1d7a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1d7e:	d038      	beq.n	1df2 <uarte_nrfx_configure+0x13e>
    1d80:	4f22      	ldr	r7, [pc, #136]	; (1e0c <uarte_nrfx_configure+0x158>)
    1d82:	42bb      	cmp	r3, r7
    1d84:	d1bf      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1d86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1d8a:	e007      	b.n	1d9c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1d8c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1d90:	d032      	beq.n	1df8 <uarte_nrfx_configure+0x144>
    1d92:	4f1f      	ldr	r7, [pc, #124]	; (1e10 <uarte_nrfx_configure+0x15c>)
    1d94:	42bb      	cmp	r3, r7
    1d96:	d1b6      	bne.n	1d06 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1d9c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1da0:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    1da2:	4334      	orrs	r4, r6
    1da4:	4322      	orrs	r2, r4
    1da6:	3304      	adds	r3, #4
    1da8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1daa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1dae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1db2:	2000      	movs	r0, #0
}
    1db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1db6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1dba:	e7ef      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1dbc:	4b15      	ldr	r3, [pc, #84]	; (1e14 <uarte_nrfx_configure+0x160>)
    1dbe:	e7ed      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    1dc0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1dc4:	e7ea      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    1dc6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1dca:	e7e7      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1dcc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1dd0:	e7e4      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1dd2:	4b11      	ldr	r3, [pc, #68]	; (1e18 <uarte_nrfx_configure+0x164>)
    1dd4:	e7e2      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1dd6:	4b11      	ldr	r3, [pc, #68]	; (1e1c <uarte_nrfx_configure+0x168>)
    1dd8:	e7e0      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1dda:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1dde:	e7dd      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1de0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1de4:	e7da      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1de6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1dea:	e7d7      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1dec:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1df0:	e7d4      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1df2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1df6:	e7d1      	b.n	1d9c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1df8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1dfc:	e7ce      	b.n	1d9c <uarte_nrfx_configure+0xe8>
    1dfe:	bf00      	nop
    1e00:	00275000 	.word	0x00275000
    1e04:	0075c000 	.word	0x0075c000
    1e08:	013a9000 	.word	0x013a9000
    1e0c:	0003d090 	.word	0x0003d090
    1e10:	000f4240 	.word	0x000f4240
    1e14:	0013b000 	.word	0x0013b000
    1e18:	003af000 	.word	0x003af000
    1e1c:	004ea000 	.word	0x004ea000

00001e20 <uarte_instance_init.isra.2>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
    1e22:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
    1e24:	460d      	mov	r5, r1

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1e26:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1e28:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    1e2c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1e2e:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    1e30:	681c      	ldr	r4, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1e32:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
    1e36:	4b25      	ldr	r3, [pc, #148]	; (1ecc <uarte_instance_init.isra.2+0xac>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1e38:	4091      	lsls	r1, r2
    1e3a:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
    1e3e:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
    1e40:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e42:	2103      	movs	r1, #3
    1e44:	3280      	adds	r2, #128	; 0x80
    1e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    1e4a:	686a      	ldr	r2, [r5, #4]
    1e4c:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    1e4e:	bf1e      	ittt	ne
    1e50:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e54:	3180      	addne	r1, #128	; 0x80
    1e56:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    1e5a:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
    1e5c:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    1e60:	1c4f      	adds	r7, r1, #1
    1e62:	bf18      	it	ne
    1e64:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
    1e66:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    1e6a:	bf1e      	ittt	ne
    1e6c:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e70:	3280      	addne	r2, #128	; 0x80
    1e72:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    1e76:	68ef      	ldr	r7, [r5, #12]
    1e78:	1c7a      	adds	r2, r7, #1
    1e7a:	d00c      	beq.n	1e96 <uarte_instance_init.isra.2+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1e7c:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    1e80:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1e84:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    1e88:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1e8c:	f04f 0c03 	mov.w	ip, #3
    1e90:	3280      	adds	r2, #128	; 0x80
    1e92:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    1e96:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1e9a:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1e9e:	68c1      	ldr	r1, [r0, #12]
    1ea0:	3104      	adds	r1, #4
    1ea2:	f7ff ff07 	bl	1cb4 <uarte_nrfx_configure>
	if (err) {
    1ea6:	b980      	cbnz	r0, 1eca <uarte_instance_init.isra.2+0xaa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1ea8:	2308      	movs	r3, #8
    1eaa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    1eae:	686b      	ldr	r3, [r5, #4]
    1eb0:	3301      	adds	r3, #1
    1eb2:	d00a      	beq.n	1eca <uarte_instance_init.isra.2+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1eb4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    1eb8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1ebc:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1ebe:	3610      	adds	r6, #16
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1ec0:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1ec4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1ec8:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    1eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ecc:	50842500 	.word	0x50842500

00001ed0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1ed0:	b530      	push	{r4, r5, lr}
    1ed2:	b085      	sub	sp, #20
    1ed4:	4605      	mov	r5, r0
    1ed6:	466c      	mov	r4, sp
    1ed8:	4b04      	ldr	r3, [pc, #16]	; (1eec <uarte_0_init+0x1c>)
    1eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1ee0:	4621      	mov	r1, r4
    1ee2:	4628      	mov	r0, r5
    1ee4:	f7ff ff9c 	bl	1e20 <uarte_instance_init.isra.2>
    1ee8:	b005      	add	sp, #20
    1eea:	bd30      	pop	{r4, r5, pc}
    1eec:	0000508c 	.word	0x0000508c

00001ef0 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1ef0:	b530      	push	{r4, r5, lr}
    1ef2:	b085      	sub	sp, #20
    1ef4:	4605      	mov	r5, r0
    1ef6:	466c      	mov	r4, sp
    1ef8:	4b04      	ldr	r3, [pc, #16]	; (1f0c <uarte_1_init+0x1c>)
    1efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1f00:	4621      	mov	r1, r4
    1f02:	4628      	mov	r0, r5
    1f04:	f7ff ff8c 	bl	1e20 <uarte_instance_init.isra.2>
    1f08:	b005      	add	sp, #20
    1f0a:	bd30      	pop	{r4, r5, pc}
    1f0c:	0000509c 	.word	0x0000509c

00001f10 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    1f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1f14:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    1f16:	4c21      	ldr	r4, [pc, #132]	; (1f9c <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    1f18:	4e21      	ldr	r6, [pc, #132]	; (1fa0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1f1a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    1f1e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1fa8 <check_ext_api_requests+0x98>
{
    1f22:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1f24:	45a8      	cmp	r8, r5
    1f26:	d803      	bhi.n	1f30 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    1f28:	2000      	movs	r0, #0
    1f2a:	b005      	add	sp, #20
    1f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    1f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f32:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1f36:	681f      	ldr	r7, [r3, #0]
    1f38:	ab01      	add	r3, sp, #4
    1f3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1f3e:	220c      	movs	r2, #12
    1f40:	4619      	mov	r1, r3
    1f42:	4638      	mov	r0, r7
    1f44:	f002 fd37 	bl	49b6 <memcmp>
    1f48:	b990      	cbnz	r0, 1f70 <check_ext_api_requests+0x60>
    1f4a:	b18f      	cbz	r7, 1f70 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    1f4e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1f50:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    1f52:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1f54:	4291      	cmp	r1, r2
    1f56:	d10b      	bne.n	1f70 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    1f58:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    1f5a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    1f5c:	4291      	cmp	r1, r2
    1f5e:	d807      	bhi.n	1f70 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    1f60:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    1f62:	4291      	cmp	r1, r2
    1f64:	d904      	bls.n	1f70 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    1f66:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1f68:	695b      	ldr	r3, [r3, #20]
    1f6a:	ea32 0303 	bics.w	r3, r2, r3
    1f6e:	d00a      	beq.n	1f86 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    1f70:	6a27      	ldr	r7, [r4, #32]
    1f72:	b167      	cbz	r7, 1f8e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    1f74:	480b      	ldr	r0, [pc, #44]	; (1fa4 <check_ext_api_requests+0x94>)
    1f76:	f002 fa1a 	bl	43ae <printk>
			k_panic();
    1f7a:	4040      	eors	r0, r0
    1f7c:	f380 8811 	msr	BASEPRI, r0
    1f80:	f04f 0004 	mov.w	r0, #4
    1f84:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    1f86:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1f88:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    1f8a:	441c      	add	r4, r3
    1f8c:	e7ca      	b.n	1f24 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    1f8e:	4648      	mov	r0, r9
    1f90:	f002 fa0d 	bl	43ae <printk>
			*ext_api_req->ext_api = NULL;
    1f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f96:	601f      	str	r7, [r3, #0]
    1f98:	e7f5      	b.n	1f86 <check_ext_api_requests+0x76>
    1f9a:	bf00      	nop
    1f9c:	0000023c 	.word	0x0000023c
    1fa0:	000050ac 	.word	0x000050ac
    1fa4:	000056cf 	.word	0x000056cf
    1fa8:	000056f8 	.word	0x000056f8

00001fac <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1fac:	4b05      	ldr	r3, [pc, #20]	; (1fc4 <nrf91_errata_14+0x18>)
    1fae:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1fb0:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	2b09      	cmp	r3, #9
    1fb6:	d103      	bne.n	1fc0 <nrf91_errata_14+0x14>
            {
                switch(var2)
    1fb8:	1e43      	subs	r3, r0, #1
    1fba:	4258      	negs	r0, r3
    1fbc:	4158      	adcs	r0, r3
    1fbe:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    1fc0:	2000      	movs	r0, #0
    #endif
}
    1fc2:	4770      	bx	lr
    1fc4:	00ff0134 	.word	0x00ff0134

00001fc8 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1fc8:	4a4f      	ldr	r2, [pc, #316]	; (2108 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x108>)
{
    1fca:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1fcc:	6813      	ldr	r3, [r2, #0]
    1fce:	f043 0302 	orr.w	r3, r3, #2
    1fd2:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1fd4:	4b4d      	ldr	r3, [pc, #308]	; (210c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10c>)
            if (var1 == 0x09)
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1fda:	bf01      	itttt	eq
    1fdc:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    1fe0:	2200      	moveq	r2, #0
    1fe2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1fe6:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    1fea:	f7ff ffdf 	bl	1fac <nrf91_errata_14>
    1fee:	b130      	cbz	r0, 1ffe <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1ff0:	2301      	movs	r3, #1
    1ff2:	4a47      	ldr	r2, [pc, #284]	; (2110 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x110>)
    1ff4:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1ff6:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1ffa:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1ffe:	4b43      	ldr	r3, [pc, #268]	; (210c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10c>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	2b09      	cmp	r3, #9
    2004:	d107      	bne.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    2006:	4b43      	ldr	r3, [pc, #268]	; (2114 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x114>)
            {
                switch(var2)
    2008:	681b      	ldr	r3, [r3, #0]
    200a:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    200c:	bf1e      	ittt	ne
    200e:	2201      	movne	r2, #1
    2010:	4b41      	ldrne	r3, [pc, #260]	; (2118 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x118>)
    2012:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    2016:	f7ff ffc9 	bl	1fac <nrf91_errata_14>
    201a:	b110      	cbz	r0, 2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    201c:	220e      	movs	r2, #14
    201e:	4b3f      	ldr	r3, [pc, #252]	; (211c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11c>)
    2020:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2022:	4b3a      	ldr	r3, [pc, #232]	; (210c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10c>)
            if (var1 == 0x09)
    2024:	681b      	ldr	r3, [r3, #0]
    2026:	2b09      	cmp	r3, #9
    2028:	d104      	bne.n	2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    202a:	2200      	movs	r2, #0
    202c:	4b3c      	ldr	r3, [pc, #240]	; (2120 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x120>)
    202e:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    2030:	2201      	movs	r2, #1
    2032:	605a      	str	r2, [r3, #4]
{
    2034:	2200      	movs	r2, #0
    2036:	00d3      	lsls	r3, r2, #3
    2038:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    203c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2040:	3101      	adds	r1, #1
    2042:	d008      	beq.n	2056 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2044:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2048:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    204a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    204e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2052:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2054:	d1ef      	bne.n	2036 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x36>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    2056:	4b33      	ldr	r3, [pc, #204]	; (2124 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x124>)
    2058:	69da      	ldr	r2, [r3, #28]
    205a:	07d1      	lsls	r1, r2, #31
    205c:	d53b      	bpl.n	20d6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd6>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    205e:	4b32      	ldr	r3, [pc, #200]	; (2128 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x128>)
    2060:	4619      	mov	r1, r3
    2062:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2066:	2a01      	cmp	r2, #1
    2068:	d1fb      	bne.n	2062 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    206a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    206e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    2072:	2b01      	cmp	r3, #1
    2074:	d1fb      	bne.n	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    2076:	4b2b      	ldr	r3, [pc, #172]	; (2124 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x124>)
    2078:	69da      	ldr	r2, [r3, #28]
    207a:	07d2      	lsls	r2, r2, #31
    207c:	d508      	bpl.n	2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    207e:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2080:	4929      	ldr	r1, [pc, #164]	; (2128 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x128>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    2082:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    2086:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2088:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    208c:	2a01      	cmp	r2, #1
    208e:	d1fb      	bne.n	2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    2090:	6a1a      	ldr	r2, [r3, #32]
    2092:	3201      	adds	r2, #1
    2094:	d10a      	bne.n	20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    2096:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2098:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    209c:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    20a0:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    20a2:	4a21      	ldr	r2, [pc, #132]	; (2128 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x128>)
    20a4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    20a8:	2b01      	cmp	r3, #1
    20aa:	d1fb      	bne.n	20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    20ac:	2200      	movs	r2, #0
    20ae:	4b1e      	ldr	r3, [pc, #120]	; (2128 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x128>)
    20b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    20b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    20b8:	2a01      	cmp	r2, #1
    20ba:	d1fb      	bne.n	20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>
  __ASM volatile ("dsb 0xF":::"memory");
    20bc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    20c0:	491a      	ldr	r1, [pc, #104]	; (212c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12c>)
    20c2:	4b1b      	ldr	r3, [pc, #108]	; (2130 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x130>)
    20c4:	68ca      	ldr	r2, [r1, #12]
    20c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    20ca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    20cc:	60cb      	str	r3, [r1, #12]
    20ce:	f3bf 8f4f 	dsb	sy
    __NOP();
    20d2:	bf00      	nop
    20d4:	e7fd      	b.n	20d2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd2>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    20d6:	6a1b      	ldr	r3, [r3, #32]
    20d8:	3301      	adds	r3, #1
    20da:	d0c0      	beq.n	205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
        SCB->NSACR |= (3UL << 10);
    20dc:	4b13      	ldr	r3, [pc, #76]	; (212c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12c>)
    20de:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    20e2:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    20e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    20ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    20ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    20f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    20f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20fa:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    20fe:	4b0d      	ldr	r3, [pc, #52]	; (2134 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x134>)
    2100:	4a0d      	ldr	r2, [pc, #52]	; (2138 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x138>)
    2102:	601a      	str	r2, [r3, #0]
}
    2104:	bd08      	pop	{r3, pc}
    2106:	bf00      	nop
    2108:	e000edd0 	.word	0xe000edd0
    210c:	00ff0130 	.word	0x00ff0130
    2110:	50004a38 	.word	0x50004a38
    2114:	00ff0134 	.word	0x00ff0134
    2118:	50004000 	.word	0x50004000
    211c:	5003aee4 	.word	0x5003aee4
    2120:	5000470c 	.word	0x5000470c
    2124:	00ff8000 	.word	0x00ff8000
    2128:	50039000 	.word	0x50039000
    212c:	e000ed00 	.word	0xe000ed00
    2130:	05fa0004 	.word	0x05fa0004
    2134:	20000050 	.word	0x20000050
    2138:	03d09000 	.word	0x03d09000

0000213c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    213c:	4b04      	ldr	r3, [pc, #16]	; (2150 <nrfx_clock_init+0x14>)
    213e:	791a      	ldrb	r2, [r3, #4]
    2140:	b922      	cbnz	r2, 214c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2142:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2144:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2146:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2148:	4802      	ldr	r0, [pc, #8]	; (2154 <nrfx_clock_init+0x18>)
    214a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    214c:	4802      	ldr	r0, [pc, #8]	; (2158 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    214e:	4770      	bx	lr
    2150:	20000808 	.word	0x20000808
    2154:	0bad0000 	.word	0x0bad0000
    2158:	0bad000c 	.word	0x0bad000c

0000215c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    215c:	b110      	cbz	r0, 2164 <nrfx_clock_start+0x8>
    215e:	2801      	cmp	r0, #1
    2160:	d020      	beq.n	21a4 <nrfx_clock_start+0x48>
    2162:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2164:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2168:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    216c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2170:	03c9      	lsls	r1, r1, #15
    2172:	d511      	bpl.n	2198 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2174:	f003 0303 	and.w	r3, r3, #3
    2178:	2b02      	cmp	r3, #2
    217a:	d10d      	bne.n	2198 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    217c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2180:	2200      	movs	r2, #0
    2182:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <nrfx_clock_start+0x5c>)
    2184:	601a      	str	r2, [r3, #0]
    2186:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2188:	2202      	movs	r2, #2
    218a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    218e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2192:	2201      	movs	r2, #1
    2194:	609a      	str	r2, [r3, #8]
    2196:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    2198:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    219c:	2201      	movs	r2, #1
    219e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    21a2:	e7ed      	b.n	2180 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21a4:	2200      	movs	r2, #0
    21a6:	4b05      	ldr	r3, [pc, #20]	; (21bc <nrfx_clock_start+0x60>)
    21a8:	601a      	str	r2, [r3, #0]
    21aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    21ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21b0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21b4:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    21b6:	4770      	bx	lr
    21b8:	50005104 	.word	0x50005104
    21bc:	50005100 	.word	0x50005100

000021c0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    21c0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    21c2:	b110      	cbz	r0, 21ca <nrfx_clock_stop+0xa>
    21c4:	2801      	cmp	r0, #1
    21c6:	d018      	beq.n	21fa <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    21c8:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    21ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21ce:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21d0:	2101      	movs	r1, #1
    21d2:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    21d6:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    21d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21dc:	4a15      	ldr	r2, [pc, #84]	; (2234 <nrfx_clock_stop+0x74>)
    21de:	6010      	str	r0, [r2, #0]
    21e0:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21e2:	4a15      	ldr	r2, [pc, #84]	; (2238 <nrfx_clock_stop+0x78>)
    21e4:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    21e6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    21ea:	03db      	lsls	r3, r3, #15
    21ec:	d5ec      	bpl.n	21c8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    21ee:	2001      	movs	r0, #1
    21f0:	f002 fcc9 	bl	4b86 <nrfx_busy_wait>
    21f4:	3d01      	subs	r5, #1
    21f6:	d1f6      	bne.n	21e6 <nrfx_clock_stop+0x26>
    21f8:	e7e6      	b.n	21c8 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    21fa:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21fe:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2200:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2204:	4b0d      	ldr	r3, [pc, #52]	; (223c <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    2206:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    220a:	601a      	str	r2, [r3, #0]
    220c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    220e:	4b0c      	ldr	r3, [pc, #48]	; (2240 <nrfx_clock_stop+0x80>)
    2210:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2212:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2216:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    221a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    221e:	03d2      	lsls	r2, r2, #15
    2220:	d5d2      	bpl.n	21c8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    2222:	2b00      	cmp	r3, #0
    2224:	d0d0      	beq.n	21c8 <nrfx_clock_stop+0x8>
    2226:	2001      	movs	r0, #1
    2228:	f002 fcad 	bl	4b86 <nrfx_busy_wait>
    222c:	3d01      	subs	r5, #1
    222e:	d1f0      	bne.n	2212 <nrfx_clock_stop+0x52>
    2230:	e7ca      	b.n	21c8 <nrfx_clock_stop+0x8>
    2232:	bf00      	nop
    2234:	50005104 	.word	0x50005104
    2238:	5000500c 	.word	0x5000500c
    223c:	50005100 	.word	0x50005100
    2240:	50005004 	.word	0x50005004

00002244 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2244:	4b16      	ldr	r3, [pc, #88]	; (22a0 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2246:	b510      	push	{r4, lr}
    2248:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    224a:	b152      	cbz	r2, 2262 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    224c:	2000      	movs	r0, #0
    224e:	6018      	str	r0, [r3, #0]
    2250:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2252:	2201      	movs	r2, #1
    2254:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2258:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    225c:	4b11      	ldr	r3, [pc, #68]	; (22a4 <nrfx_power_clock_irq_handler+0x60>)
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2262:	4b11      	ldr	r3, [pc, #68]	; (22a8 <nrfx_power_clock_irq_handler+0x64>)
    2264:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2266:	b18a      	cbz	r2, 228c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2268:	2200      	movs	r2, #0
    226a:	601a      	str	r2, [r3, #0]
    226c:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    226e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2272:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2276:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    227a:	f002 0203 	and.w	r2, r2, #3
    227e:	2a01      	cmp	r2, #1
    2280:	f04f 0102 	mov.w	r1, #2
    2284:	d103      	bne.n	228e <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2286:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    228a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    228c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    228e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2292:	4b04      	ldr	r3, [pc, #16]	; (22a4 <nrfx_power_clock_irq_handler+0x60>)
    2294:	2001      	movs	r0, #1
}
    2296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	4718      	bx	r3
    229e:	bf00      	nop
    22a0:	50005100 	.word	0x50005100
    22a4:	20000808 	.word	0x20000808
    22a8:	50005104 	.word	0x50005104

000022ac <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    22ae:	4b10      	ldr	r3, [pc, #64]	; (22f0 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    22b0:	4f10      	ldr	r7, [pc, #64]	; (22f4 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    22b2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    22b6:	3001      	adds	r0, #1
    22b8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    22bc:	42ae      	cmp	r6, r5
    22be:	d800      	bhi.n	22c2 <z_sys_init_run_level+0x16>
		}
	}
}
    22c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    22c2:	e9d5 3400 	ldrd	r3, r4, [r5]
    22c6:	4620      	mov	r0, r4
    22c8:	4798      	blx	r3
    22ca:	b170      	cbz	r0, 22ea <z_sys_init_run_level+0x3e>
    22cc:	b16c      	cbz	r4, 22ea <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    22ce:	2301      	movs	r3, #1
				(dev - __device_start));
    22d0:	1be4      	subs	r4, r4, r7
    22d2:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    22d4:	4a08      	ldr	r2, [pc, #32]	; (22f8 <z_sys_init_run_level+0x4c>)
    22d6:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    22d8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    22dc:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    22e0:	fa03 f404 	lsl.w	r4, r3, r4
    22e4:	4304      	orrs	r4, r0
    22e6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    22ea:	3508      	adds	r5, #8
    22ec:	e7e6      	b.n	22bc <z_sys_init_run_level+0x10>
    22ee:	bf00      	nop
    22f0:	00005264 	.word	0x00005264
    22f4:	200000bc 	.word	0x200000bc
    22f8:	2000010c 	.word	0x2000010c

000022fc <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    22fc:	4b08      	ldr	r3, [pc, #32]	; (2320 <z_device_ready+0x24>)
    22fe:	1ac0      	subs	r0, r0, r3
    2300:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2302:	4b08      	ldr	r3, [pc, #32]	; (2324 <z_device_ready+0x28>)
    2304:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    2306:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    230a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    230c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    2310:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    2314:	4210      	tst	r0, r2
}
    2316:	bf0c      	ite	eq
    2318:	4618      	moveq	r0, r3
    231a:	2000      	movne	r0, #0
    231c:	4770      	bx	lr
    231e:	bf00      	nop
    2320:	200000bc 	.word	0x200000bc
    2324:	2000010c 	.word	0x2000010c

00002328 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    2328:	4911      	ldr	r1, [pc, #68]	; (2370 <z_impl_device_get_binding+0x48>)
{
    232a:	b570      	push	{r4, r5, r6, lr}
    232c:	4605      	mov	r5, r0
    232e:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    2330:	4c10      	ldr	r4, [pc, #64]	; (2374 <z_impl_device_get_binding+0x4c>)
    2332:	428c      	cmp	r4, r1
    2334:	d104      	bne.n	2340 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    2336:	4c0f      	ldr	r4, [pc, #60]	; (2374 <z_impl_device_get_binding+0x4c>)
    2338:	42b4      	cmp	r4, r6
    233a:	d10a      	bne.n	2352 <z_impl_device_get_binding+0x2a>
	return NULL;
    233c:	2400      	movs	r4, #0
    233e:	e014      	b.n	236a <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    2340:	4620      	mov	r0, r4
    2342:	f7ff ffdb 	bl	22fc <z_device_ready>
    2346:	b110      	cbz	r0, 234e <z_impl_device_get_binding+0x26>
    2348:	6823      	ldr	r3, [r4, #0]
    234a:	42ab      	cmp	r3, r5
    234c:	d00d      	beq.n	236a <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    234e:	3410      	adds	r4, #16
    2350:	e7ef      	b.n	2332 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2352:	4620      	mov	r0, r4
    2354:	f7ff ffd2 	bl	22fc <z_device_ready>
    2358:	b908      	cbnz	r0, 235e <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    235a:	3410      	adds	r4, #16
    235c:	e7ec      	b.n	2338 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    235e:	6821      	ldr	r1, [r4, #0]
    2360:	4628      	mov	r0, r5
    2362:	f002 fb1c 	bl	499e <strcmp>
    2366:	2800      	cmp	r0, #0
    2368:	d1f7      	bne.n	235a <z_impl_device_get_binding+0x32>
}
    236a:	4620      	mov	r0, r4
    236c:	bd70      	pop	{r4, r5, r6, pc}
    236e:	bf00      	nop
    2370:	2000010c 	.word	0x2000010c
    2374:	200000bc 	.word	0x200000bc

00002378 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    2378:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    237a:	4d0b      	ldr	r5, [pc, #44]	; (23a8 <idle+0x30>)
    237c:	f04f 0220 	mov.w	r2, #32
    2380:	f3ef 8311 	mrs	r3, BASEPRI
    2384:	f382 8811 	msr	BASEPRI, r2
    2388:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    238c:	f002 fd0b 	bl	4da6 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2390:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
    2392:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2394:	2802      	cmp	r0, #2
    2396:	bfd8      	it	le
    2398:	4608      	movle	r0, r1
    239a:	f002 fd14 	bl	4dc6 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    239e:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
    23a0:	f7ff f8a8 	bl	14f4 <arch_cpu_idle>
    23a4:	e7ea      	b.n	237c <idle+0x4>
    23a6:	bf00      	nop
    23a8:	20000810 	.word	0x20000810

000023ac <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    23ac:	4802      	ldr	r0, [pc, #8]	; (23b8 <z_bss_zero+0xc>)
    23ae:	4a03      	ldr	r2, [pc, #12]	; (23bc <z_bss_zero+0x10>)
    23b0:	2100      	movs	r1, #0
    23b2:	1a12      	subs	r2, r2, r0
    23b4:	f002 bb50 	b.w	4a58 <memset>
    23b8:	20000160 	.word	0x20000160
    23bc:	20000870 	.word	0x20000870

000023c0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    23c0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    23c2:	4806      	ldr	r0, [pc, #24]	; (23dc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    23c4:	4a06      	ldr	r2, [pc, #24]	; (23e0 <z_data_copy+0x20>)
    23c6:	4907      	ldr	r1, [pc, #28]	; (23e4 <z_data_copy+0x24>)
    23c8:	1a12      	subs	r2, r2, r0
    23ca:	f002 fb1b 	bl	4a04 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    23ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    23d2:	4a05      	ldr	r2, [pc, #20]	; (23e8 <z_data_copy+0x28>)
    23d4:	4905      	ldr	r1, [pc, #20]	; (23ec <z_data_copy+0x2c>)
    23d6:	4806      	ldr	r0, [pc, #24]	; (23f0 <z_data_copy+0x30>)
    23d8:	f002 bb14 	b.w	4a04 <memcpy>
    23dc:	20000000 	.word	0x20000000
    23e0:	20000160 	.word	0x20000160
    23e4:	00005774 	.word	0x00005774
    23e8:	00000000 	.word	0x00000000
    23ec:	00005774 	.word	0x00005774
    23f0:	20000000 	.word	0x20000000

000023f4 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    23f4:	2201      	movs	r2, #1
{
    23f6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    23f8:	4b0b      	ldr	r3, [pc, #44]	; (2428 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    23fa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    23fc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    23fe:	f7ff ff55 	bl	22ac <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    2402:	4a0a      	ldr	r2, [pc, #40]	; (242c <bg_thread_main+0x38>)
    2404:	490a      	ldr	r1, [pc, #40]	; (2430 <bg_thread_main+0x3c>)
    2406:	480b      	ldr	r0, [pc, #44]	; (2434 <bg_thread_main+0x40>)
    2408:	f001 ffd1 	bl	43ae <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    240c:	2003      	movs	r0, #3
    240e:	f7ff ff4d 	bl	22ac <z_sys_init_run_level>

	z_init_static_threads();
    2412:	f000 fda9 	bl	2f68 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    2416:	f001 fe8f 	bl	4138 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    241a:	4a07      	ldr	r2, [pc, #28]	; (2438 <bg_thread_main+0x44>)
    241c:	7b13      	ldrb	r3, [r2, #12]
    241e:	f023 0301 	bic.w	r3, r3, #1
    2422:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2424:	bd08      	pop	{r3, pc}
    2426:	bf00      	nop
    2428:	2000086d 	.word	0x2000086d
    242c:	000053c7 	.word	0x000053c7
    2430:	00005736 	.word	0x00005736
    2434:	00005742 	.word	0x00005742
    2438:	200001e0 	.word	0x200001e0

0000243c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    243c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    2440:	4b37      	ldr	r3, [pc, #220]	; (2520 <z_cstart+0xe4>)
    2442:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    2444:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2448:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    244c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2450:	2400      	movs	r4, #0
    2452:	23e0      	movs	r3, #224	; 0xe0
    2454:	4d33      	ldr	r5, [pc, #204]	; (2524 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2456:	f04f 0b01 	mov.w	fp, #1
    245a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    245e:	77ec      	strb	r4, [r5, #31]
    2460:	762c      	strb	r4, [r5, #24]
    2462:	766c      	strb	r4, [r5, #25]
    2464:	76ac      	strb	r4, [r5, #26]
    2466:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2468:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    246a:	4e2f      	ldr	r6, [pc, #188]	; (2528 <z_cstart+0xec>)
    246c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2470:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    2472:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2474:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 2544 <z_cstart+0x108>
    2478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    247c:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    247e:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2480:	f7ff f9c6 	bl	1810 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2484:	f7ff f830 	bl	14e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    248c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    248e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    2490:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    2494:	4d25      	ldr	r5, [pc, #148]	; (252c <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    2496:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    249a:	ab06      	add	r3, sp, #24
    249c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    249e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    24a0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    24a4:	f7ff ff02 	bl	22ac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    24a8:	2001      	movs	r0, #1
    24aa:	f7ff feff 	bl	22ac <z_sys_init_run_level>
	z_sched_init();
    24ae:	f000 fc65 	bl	2d7c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    24b2:	4b1f      	ldr	r3, [pc, #124]	; (2530 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    24b4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    24b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    24ba:	491e      	ldr	r1, [pc, #120]	; (2534 <z_cstart+0xf8>)
    24bc:	9305      	str	r3, [sp, #20]
    24be:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    24c2:	4643      	mov	r3, r8
    24c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    24c8:	9400      	str	r4, [sp, #0]
    24ca:	4630      	mov	r0, r6
    24cc:	f000 fd1e 	bl	2f0c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    24d0:	7b73      	ldrb	r3, [r6, #13]
    24d2:	4682      	mov	sl, r0
    24d4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    24d8:	4630      	mov	r0, r6
    24da:	7373      	strb	r3, [r6, #13]
    24dc:	f002 fbc8 	bl	4c70 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    24e0:	230f      	movs	r3, #15
    24e2:	4f15      	ldr	r7, [pc, #84]	; (2538 <z_cstart+0xfc>)
    24e4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    24e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    24ec:	4b13      	ldr	r3, [pc, #76]	; (253c <z_cstart+0x100>)
    24ee:	4914      	ldr	r1, [pc, #80]	; (2540 <z_cstart+0x104>)
    24f0:	e9cd b404 	strd	fp, r4, [sp, #16]
    24f4:	e9cd 4400 	strd	r4, r4, [sp]
    24f8:	4638      	mov	r0, r7
    24fa:	f000 fd07 	bl	2f0c <z_setup_new_thread>
    24fe:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2500:	60ef      	str	r7, [r5, #12]
    2502:	f023 0304 	bic.w	r3, r3, #4
    2506:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2508:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
    250c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    250e:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
    2512:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2516:	4642      	mov	r2, r8
    2518:	4651      	mov	r1, sl
    251a:	4630      	mov	r0, r6
    251c:	f7fe ffc6 	bl	14ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2520:	20000db0 	.word	0x20000db0
    2524:	e000ed00 	.word	0xe000ed00
    2528:	200001e0 	.word	0x200001e0
    252c:	20000810 	.word	0x20000810
    2530:	00005769 	.word	0x00005769
    2534:	20000870 	.word	0x20000870
    2538:	20000160 	.word	0x20000160
    253c:	00002379 	.word	0x00002379
    2540:	20000c70 	.word	0x20000c70
    2544:	000023f5 	.word	0x000023f5

00002548 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    2548:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    254a:	4b0e      	ldr	r3, [pc, #56]	; (2584 <init_mem_slab_module+0x3c>)
    254c:	4c0e      	ldr	r4, [pc, #56]	; (2588 <init_mem_slab_module+0x40>)
    254e:	42a3      	cmp	r3, r4
    2550:	d301      	bcc.n	2556 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    2552:	2000      	movs	r0, #0
	return rc;
}
    2554:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    2556:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    255a:	ea41 0200 	orr.w	r2, r1, r0
    255e:	f012 0203 	ands.w	r2, r2, #3
    2562:	d10b      	bne.n	257c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    2564:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    2566:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2568:	42aa      	cmp	r2, r5
    256a:	d101      	bne.n	2570 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    256c:	331c      	adds	r3, #28
    256e:	e7ee      	b.n	254e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2570:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2572:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    2574:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    2576:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    2578:	4401      	add	r1, r0
    257a:	e7f5      	b.n	2568 <init_mem_slab_module+0x20>
		return -EINVAL;
    257c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2580:	e7e8      	b.n	2554 <init_mem_slab_module+0xc>
    2582:	bf00      	nop
    2584:	20000110 	.word	0x20000110
    2588:	20000110 	.word	0x20000110

0000258c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    258c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    258e:	460c      	mov	r4, r1
    2590:	4616      	mov	r6, r2
    2592:	461f      	mov	r7, r3
    2594:	f04f 0320 	mov.w	r3, #32
    2598:	f3ef 8111 	mrs	r1, BASEPRI
    259c:	f383 8811 	msr	BASEPRI, r3
    25a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    25a4:	6943      	ldr	r3, [r0, #20]
    25a6:	b15b      	cbz	r3, 25c0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    25a8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    25aa:	681b      	ldr	r3, [r3, #0]
    25ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    25ae:	6983      	ldr	r3, [r0, #24]
    25b0:	3301      	adds	r3, #1
    25b2:	6183      	str	r3, [r0, #24]
		result = 0;
    25b4:	2000      	movs	r0, #0
	__asm__ volatile(
    25b6:	f381 8811 	msr	BASEPRI, r1
    25ba:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    25be:	e011      	b.n	25e4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    25c0:	ea56 0207 	orrs.w	r2, r6, r7
    25c4:	d103      	bne.n	25ce <k_mem_slab_alloc+0x42>
		*mem = NULL;
    25c6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    25c8:	f06f 000b 	mvn.w	r0, #11
    25cc:	e7f3      	b.n	25b6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    25ce:	4602      	mov	r2, r0
    25d0:	e9cd 6700 	strd	r6, r7, [sp]
    25d4:	4804      	ldr	r0, [pc, #16]	; (25e8 <k_mem_slab_alloc+0x5c>)
    25d6:	f000 fb4b 	bl	2c70 <z_pend_curr>
		if (result == 0) {
    25da:	b918      	cbnz	r0, 25e4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <k_mem_slab_alloc+0x60>)
    25de:	689b      	ldr	r3, [r3, #8]
    25e0:	695b      	ldr	r3, [r3, #20]
    25e2:	6023      	str	r3, [r4, #0]
}
    25e4:	b002      	add	sp, #8
    25e6:	bdd0      	pop	{r4, r6, r7, pc}
    25e8:	2000086e 	.word	0x2000086e
    25ec:	20000810 	.word	0x20000810

000025f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    25f0:	b570      	push	{r4, r5, r6, lr}
    25f2:	4604      	mov	r4, r0
    25f4:	460d      	mov	r5, r1
	__asm__ volatile(
    25f6:	f04f 0320 	mov.w	r3, #32
    25fa:	f3ef 8611 	mrs	r6, BASEPRI
    25fe:	f383 8811 	msr	BASEPRI, r3
    2602:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    2606:	f002 fb8b 	bl	4d20 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    260a:	b158      	cbz	r0, 2624 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    260c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    260e:	682a      	ldr	r2, [r5, #0]
    2610:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    2612:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    2614:	f002 fb2c 	bl	4c70 <z_ready_thread>
		z_reschedule(&lock, key);
    2618:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    261a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    261e:	4808      	ldr	r0, [pc, #32]	; (2640 <k_mem_slab_free+0x50>)
    2620:	f000 b910 	b.w	2844 <z_reschedule>
		**(char ***)mem = slab->free_list;
    2624:	682b      	ldr	r3, [r5, #0]
    2626:	6962      	ldr	r2, [r4, #20]
    2628:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    262a:	682b      	ldr	r3, [r5, #0]
    262c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    262e:	69a3      	ldr	r3, [r4, #24]
    2630:	3b01      	subs	r3, #1
    2632:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    2634:	f386 8811 	msr	BASEPRI, r6
    2638:	f3bf 8f6f 	isb	sy
}
    263c:	bd70      	pop	{r4, r5, r6, pc}
    263e:	bf00      	nop
    2640:	2000086e 	.word	0x2000086e

00002644 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2648:	4604      	mov	r4, r0
    264a:	4616      	mov	r6, r2
    264c:	461f      	mov	r7, r3
	__asm__ volatile(
    264e:	f04f 0320 	mov.w	r3, #32
    2652:	f3ef 8811 	mrs	r8, BASEPRI
    2656:	f383 8811 	msr	BASEPRI, r3
    265a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    265e:	68c3      	ldr	r3, [r0, #12]
    2660:	4a32      	ldr	r2, [pc, #200]	; (272c <z_impl_k_mutex_lock+0xe8>)
    2662:	b16b      	cbz	r3, 2680 <z_impl_k_mutex_lock+0x3c>
    2664:	6880      	ldr	r0, [r0, #8]
    2666:	6891      	ldr	r1, [r2, #8]
    2668:	4288      	cmp	r0, r1
    266a:	d019      	beq.n	26a0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    266c:	ea56 0307 	orrs.w	r3, r6, r7
    2670:	d118      	bne.n	26a4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    2672:	f388 8811 	msr	BASEPRI, r8
    2676:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    267a:	f06f 000f 	mvn.w	r0, #15
    267e:	e00c      	b.n	269a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2680:	6891      	ldr	r1, [r2, #8]
    2682:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    2686:	3301      	adds	r3, #1
    2688:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    268a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    268c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    268e:	60a3      	str	r3, [r4, #8]
    2690:	f388 8811 	msr	BASEPRI, r8
    2694:	f3bf 8f6f 	isb	sy
		return 0;
    2698:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    269a:	b002      	add	sp, #8
    269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    26a0:	6921      	ldr	r1, [r4, #16]
    26a2:	e7f0      	b.n	2686 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    26a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    26a8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    26ac:	4299      	cmp	r1, r3
    26ae:	bfa8      	it	ge
    26b0:	4619      	movge	r1, r3
    26b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    26b6:	4299      	cmp	r1, r3
    26b8:	da2c      	bge.n	2714 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    26ba:	f000 fb1b 	bl	2cf4 <z_set_prio>
    26be:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    26c0:	e9cd 6700 	strd	r6, r7, [sp]
    26c4:	4622      	mov	r2, r4
    26c6:	4641      	mov	r1, r8
    26c8:	4819      	ldr	r0, [pc, #100]	; (2730 <z_impl_k_mutex_lock+0xec>)
    26ca:	f000 fad1 	bl	2c70 <z_pend_curr>
	if (got_mutex == 0) {
    26ce:	2800      	cmp	r0, #0
    26d0:	d0e3      	beq.n	269a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    26d2:	f04f 0320 	mov.w	r3, #32
    26d6:	f3ef 8611 	mrs	r6, BASEPRI
    26da:	f383 8811 	msr	BASEPRI, r3
    26de:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    26e2:	6823      	ldr	r3, [r4, #0]
    26e4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26e6:	42a3      	cmp	r3, r4
    26e8:	d007      	beq.n	26fa <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    26ea:	b133      	cbz	r3, 26fa <z_impl_k_mutex_lock+0xb6>
    26ec:	f993 300e 	ldrsb.w	r3, [r3, #14]
    26f0:	4299      	cmp	r1, r3
    26f2:	bfa8      	it	ge
    26f4:	4619      	movge	r1, r3
    26f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    26fa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    26fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2700:	4299      	cmp	r1, r3
    2702:	d109      	bne.n	2718 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    2704:	b16d      	cbz	r5, 2722 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    2706:	4631      	mov	r1, r6
    2708:	4809      	ldr	r0, [pc, #36]	; (2730 <z_impl_k_mutex_lock+0xec>)
    270a:	f000 f89b 	bl	2844 <z_reschedule>
	return -EAGAIN;
    270e:	f06f 000a 	mvn.w	r0, #10
    2712:	e7c2      	b.n	269a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    2714:	2500      	movs	r5, #0
    2716:	e7d3      	b.n	26c0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    2718:	f000 faec 	bl	2cf4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    271c:	2800      	cmp	r0, #0
    271e:	d1f2      	bne.n	2706 <z_impl_k_mutex_lock+0xc2>
    2720:	e7f0      	b.n	2704 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    2722:	f386 8811 	msr	BASEPRI, r6
    2726:	f3bf 8f6f 	isb	sy
    272a:	e7f0      	b.n	270e <z_impl_k_mutex_lock+0xca>
    272c:	20000810 	.word	0x20000810
    2730:	2000086e 	.word	0x2000086e

00002734 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    2734:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    2736:	6883      	ldr	r3, [r0, #8]
{
    2738:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    273a:	2b00      	cmp	r3, #0
    273c:	d036      	beq.n	27ac <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    273e:	4a1e      	ldr	r2, [pc, #120]	; (27b8 <z_impl_k_mutex_unlock+0x84>)
    2740:	6892      	ldr	r2, [r2, #8]
    2742:	4293      	cmp	r3, r2
    2744:	d135      	bne.n	27b2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2746:	7bda      	ldrb	r2, [r3, #15]
    2748:	3a01      	subs	r2, #1
    274a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    274c:	68c3      	ldr	r3, [r0, #12]
    274e:	2b01      	cmp	r3, #1
    2750:	d005      	beq.n	275e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2752:	3b01      	subs	r3, #1
    2754:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    2756:	f000 f8d5 	bl	2904 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    275a:	2000      	movs	r0, #0
}
    275c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    275e:	f04f 0320 	mov.w	r3, #32
    2762:	f3ef 8511 	mrs	r5, BASEPRI
    2766:	f383 8811 	msr	BASEPRI, r3
    276a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    276e:	6901      	ldr	r1, [r0, #16]
    2770:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2772:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2776:	4299      	cmp	r1, r3
    2778:	d001      	beq.n	277e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    277a:	f000 fabb 	bl	2cf4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    277e:	4620      	mov	r0, r4
    2780:	f002 face 	bl	4d20 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2784:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2786:	b158      	cbz	r0, 27a0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    2788:	f990 200e 	ldrsb.w	r2, [r0, #14]
    278c:	6122      	str	r2, [r4, #16]
    278e:	2200      	movs	r2, #0
    2790:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    2792:	f002 fa6d 	bl	4c70 <z_ready_thread>
		z_reschedule(&lock, key);
    2796:	4629      	mov	r1, r5
    2798:	4808      	ldr	r0, [pc, #32]	; (27bc <z_impl_k_mutex_unlock+0x88>)
    279a:	f000 f853 	bl	2844 <z_reschedule>
    279e:	e7da      	b.n	2756 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    27a0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    27a2:	f385 8811 	msr	BASEPRI, r5
    27a6:	f3bf 8f6f 	isb	sy
    27aa:	e7d4      	b.n	2756 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    27ac:	f06f 0015 	mvn.w	r0, #21
    27b0:	e7d4      	b.n	275c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    27b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27b6:	e7d1      	b.n	275c <z_impl_k_mutex_unlock+0x28>
    27b8:	20000810 	.word	0x20000810
    27bc:	2000086e 	.word	0x2000086e

000027c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    27c0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    27c2:	4c08      	ldr	r4, [pc, #32]	; (27e4 <z_reset_time_slice+0x24>)
    27c4:	6823      	ldr	r3, [r4, #0]
    27c6:	b15b      	cbz	r3, 27e0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    27c8:	f7fe face 	bl	d68 <z_clock_elapsed>
    27cc:	6823      	ldr	r3, [r4, #0]
    27ce:	4a06      	ldr	r2, [pc, #24]	; (27e8 <z_reset_time_slice+0x28>)
    27d0:	4418      	add	r0, r3
    27d2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    27d4:	2100      	movs	r1, #0
	}
}
    27d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    27da:	4618      	mov	r0, r3
    27dc:	f002 baf3 	b.w	4dc6 <z_set_timeout_expiry>
}
    27e0:	bd10      	pop	{r4, pc}
    27e2:	bf00      	nop
    27e4:	20000848 	.word	0x20000848
    27e8:	20000810 	.word	0x20000810

000027ec <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    27ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ee:	460d      	mov	r5, r1
	__asm__ volatile(
    27f0:	f04f 0320 	mov.w	r3, #32
    27f4:	f3ef 8411 	mrs	r4, BASEPRI
    27f8:	f383 8811 	msr	BASEPRI, r3
    27fc:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2804:	f240 36e7 	movw	r6, #999	; 0x3e7
    2808:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    280a:	2200      	movs	r2, #0
    280c:	fbe1 6700 	umlal	r6, r7, r1, r0
    2810:	4b09      	ldr	r3, [pc, #36]	; (2838 <k_sched_time_slice_set+0x4c>)
    2812:	4630      	mov	r0, r6
    2814:	611a      	str	r2, [r3, #16]
    2816:	4639      	mov	r1, r7
    2818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    281c:	2300      	movs	r3, #0
    281e:	f7fd fd0d 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2822:	4b06      	ldr	r3, [pc, #24]	; (283c <k_sched_time_slice_set+0x50>)
    2824:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2826:	4b06      	ldr	r3, [pc, #24]	; (2840 <k_sched_time_slice_set+0x54>)
    2828:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    282a:	f7ff ffc9 	bl	27c0 <z_reset_time_slice>
	__asm__ volatile(
    282e:	f384 8811 	msr	BASEPRI, r4
    2832:	f3bf 8f6f 	isb	sy
	}
}
    2836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2838:	20000810 	.word	0x20000810
    283c:	20000848 	.word	0x20000848
    2840:	20000844 	.word	0x20000844

00002844 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2844:	b949      	cbnz	r1, 285a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2846:	f3ef 8005 	mrs	r0, IPSR
    284a:	b930      	cbnz	r0, 285a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    284c:	4b05      	ldr	r3, [pc, #20]	; (2864 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    284e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2850:	689b      	ldr	r3, [r3, #8]
    2852:	429a      	cmp	r2, r3
    2854:	d001      	beq.n	285a <z_reschedule+0x16>
	ret = arch_swap(key);
    2856:	f7fe bd81 	b.w	135c <arch_swap>
    285a:	f381 8811 	msr	BASEPRI, r1
    285e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    2862:	4770      	bx	lr
    2864:	20000810 	.word	0x20000810

00002868 <k_sched_lock>:
	__asm__ volatile(
    2868:	f04f 0320 	mov.w	r3, #32
    286c:	f3ef 8111 	mrs	r1, BASEPRI
    2870:	f383 8811 	msr	BASEPRI, r3
    2874:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    2878:	4b04      	ldr	r3, [pc, #16]	; (288c <k_sched_lock+0x24>)
    287a:	689a      	ldr	r2, [r3, #8]
    287c:	7bd3      	ldrb	r3, [r2, #15]
    287e:	3b01      	subs	r3, #1
    2880:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2882:	f381 8811 	msr	BASEPRI, r1
    2886:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    288a:	4770      	bx	lr
    288c:	20000810 	.word	0x20000810

00002890 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2890:	4b09      	ldr	r3, [pc, #36]	; (28b8 <z_priq_dumb_remove+0x28>)
    2892:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2896:	4282      	cmp	r2, r0
    2898:	d105      	bne.n	28a6 <z_priq_dumb_remove+0x16>
    289a:	689b      	ldr	r3, [r3, #8]
    289c:	428b      	cmp	r3, r1
    289e:	d102      	bne.n	28a6 <z_priq_dumb_remove+0x16>
    28a0:	7b4b      	ldrb	r3, [r1, #13]
    28a2:	06db      	lsls	r3, r3, #27
    28a4:	d106      	bne.n	28b4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    28a6:	e9d1 3200 	ldrd	r3, r2, [r1]
    28aa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    28ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    28ae:	2300      	movs	r3, #0
	node->prev = NULL;
    28b0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    28b4:	4770      	bx	lr
    28b6:	bf00      	nop
    28b8:	20000810 	.word	0x20000810

000028bc <update_cache>:
{
    28bc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    28be:	4c10      	ldr	r4, [pc, #64]	; (2900 <update_cache+0x44>)
{
    28c0:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    28c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    28c6:	f002 f9cd 	bl	4c64 <z_priq_dumb_best>
    28ca:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    28cc:	68a3      	ldr	r3, [r4, #8]
    28ce:	7b59      	ldrb	r1, [r3, #13]
    28d0:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    28d2:	bf44      	itt	mi
    28d4:	f041 0108 	orrmi.w	r1, r1, #8
    28d8:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    28da:	b905      	cbnz	r5, 28de <update_cache+0x22>
    28dc:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    28de:	b94e      	cbnz	r6, 28f4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    28e0:	7b5a      	ldrb	r2, [r3, #13]
    28e2:	06d2      	lsls	r2, r2, #27
    28e4:	d106      	bne.n	28f4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    28e6:	69aa      	ldr	r2, [r5, #24]
    28e8:	b922      	cbnz	r2, 28f4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    28ea:	89da      	ldrh	r2, [r3, #14]
    28ec:	2a7f      	cmp	r2, #127	; 0x7f
    28ee:	d901      	bls.n	28f4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    28f0:	6263      	str	r3, [r4, #36]	; 0x24
}
    28f2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    28f4:	42ab      	cmp	r3, r5
    28f6:	d001      	beq.n	28fc <update_cache+0x40>
			z_reset_time_slice();
    28f8:	f7ff ff62 	bl	27c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    28fc:	6265      	str	r5, [r4, #36]	; 0x24
}
    28fe:	e7f8      	b.n	28f2 <update_cache+0x36>
    2900:	20000810 	.word	0x20000810

00002904 <k_sched_unlock>:
{
    2904:	b510      	push	{r4, lr}
	__asm__ volatile(
    2906:	f04f 0320 	mov.w	r3, #32
    290a:	f3ef 8411 	mrs	r4, BASEPRI
    290e:	f383 8811 	msr	BASEPRI, r3
    2912:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2916:	4b08      	ldr	r3, [pc, #32]	; (2938 <k_sched_unlock+0x34>)
		update_cache(0);
    2918:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    291a:	689a      	ldr	r2, [r3, #8]
    291c:	7bd3      	ldrb	r3, [r2, #15]
    291e:	3301      	adds	r3, #1
    2920:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2922:	f7ff ffcb 	bl	28bc <update_cache>
	__asm__ volatile(
    2926:	f384 8811 	msr	BASEPRI, r4
    292a:	f3bf 8f6f 	isb	sy
}
    292e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2932:	f002 b980 	b.w	4c36 <z_reschedule_unlocked>
    2936:	bf00      	nop
    2938:	20000810 	.word	0x20000810

0000293c <ready_thread>:
{
    293c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    293e:	7b43      	ldrb	r3, [r0, #13]
    2940:	06db      	lsls	r3, r3, #27
    2942:	d127      	bne.n	2994 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    2944:	6983      	ldr	r3, [r0, #24]
    2946:	bb2b      	cbnz	r3, 2994 <ready_thread+0x58>
	return list->head == list;
    2948:	4a13      	ldr	r2, [pc, #76]	; (2998 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    294a:	f102 0128 	add.w	r1, r2, #40	; 0x28
    294e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    2952:	428b      	cmp	r3, r1
    2954:	d018      	beq.n	2988 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2956:	b1bb      	cbz	r3, 2988 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    2958:	f990 500e 	ldrsb.w	r5, [r0, #14]
    295c:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2960:	42ae      	cmp	r6, r5
    2962:	dd0c      	ble.n	297e <ready_thread+0x42>
	node->prev = successor->prev;
    2964:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2966:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    296a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    296c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    296e:	7b43      	ldrb	r3, [r0, #13]
    2970:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2974:	7343      	strb	r3, [r0, #13]
}
    2976:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2978:	2000      	movs	r0, #0
    297a:	f7ff bf9f 	b.w	28bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    297e:	429c      	cmp	r4, r3
    2980:	d002      	beq.n	2988 <ready_thread+0x4c>
    2982:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2984:	2b00      	cmp	r3, #0
    2986:	d1e9      	bne.n	295c <ready_thread+0x20>
	node->prev = list->tail;
    2988:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    298c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    298e:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2990:	62d0      	str	r0, [r2, #44]	; 0x2c
    2992:	e7ec      	b.n	296e <ready_thread+0x32>
}
    2994:	bc70      	pop	{r4, r5, r6}
    2996:	4770      	bx	lr
    2998:	20000810 	.word	0x20000810

0000299c <z_sched_start>:
{
    299c:	b510      	push	{r4, lr}
	__asm__ volatile(
    299e:	f04f 0320 	mov.w	r3, #32
    29a2:	f3ef 8411 	mrs	r4, BASEPRI
    29a6:	f383 8811 	msr	BASEPRI, r3
    29aa:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    29ae:	7b43      	ldrb	r3, [r0, #13]
    29b0:	0759      	lsls	r1, r3, #29
    29b2:	d404      	bmi.n	29be <z_sched_start+0x22>
	__asm__ volatile(
    29b4:	f384 8811 	msr	BASEPRI, r4
    29b8:	f3bf 8f6f 	isb	sy
}
    29bc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    29be:	f023 0304 	bic.w	r3, r3, #4
    29c2:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    29c4:	f7ff ffba 	bl	293c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    29c8:	4621      	mov	r1, r4
}
    29ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    29ce:	4801      	ldr	r0, [pc, #4]	; (29d4 <z_sched_start+0x38>)
    29d0:	f7ff bf38 	b.w	2844 <z_reschedule>
    29d4:	2000086e 	.word	0x2000086e

000029d8 <move_thread_to_end_of_prio_q>:
{
    29d8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    29da:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    29de:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    29e0:	2b00      	cmp	r3, #0
    29e2:	da03      	bge.n	29ec <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    29e4:	4601      	mov	r1, r0
    29e6:	4816      	ldr	r0, [pc, #88]	; (2a40 <move_thread_to_end_of_prio_q+0x68>)
    29e8:	f7ff ff52 	bl	2890 <z_priq_dumb_remove>
	return list->head == list;
    29ec:	4a15      	ldr	r2, [pc, #84]	; (2a44 <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    29ee:	f102 0128 	add.w	r1, r2, #40	; 0x28
    29f2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    29f6:	428b      	cmp	r3, r1
    29f8:	d01c      	beq.n	2a34 <move_thread_to_end_of_prio_q+0x5c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    29fa:	b1db      	cbz	r3, 2a34 <move_thread_to_end_of_prio_q+0x5c>
	if (thread_1->base.prio < thread_2->base.prio) {
    29fc:	f994 500e 	ldrsb.w	r5, [r4, #14]
    2a00:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2a04:	42ae      	cmp	r6, r5
    2a06:	dd10      	ble.n	2a2a <move_thread_to_end_of_prio_q+0x52>
	node->prev = successor->prev;
    2a08:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2a0a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    2a0e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2a10:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    2a12:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
    2a14:	6890      	ldr	r0, [r2, #8]
    2a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a1a:	7363      	strb	r3, [r4, #13]
    2a1c:	1b03      	subs	r3, r0, r4
    2a1e:	4258      	negs	r0, r3
    2a20:	4158      	adcs	r0, r3
}
    2a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    2a26:	f7ff bf49 	b.w	28bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2a2a:	4298      	cmp	r0, r3
    2a2c:	d002      	beq.n	2a34 <move_thread_to_end_of_prio_q+0x5c>
    2a2e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a30:	2b00      	cmp	r3, #0
    2a32:	d1e5      	bne.n	2a00 <move_thread_to_end_of_prio_q+0x28>
	node->prev = list->tail;
    2a34:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    2a38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2a3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2a3c:	62d4      	str	r4, [r2, #44]	; 0x2c
    2a3e:	e7e8      	b.n	2a12 <move_thread_to_end_of_prio_q+0x3a>
    2a40:	20000838 	.word	0x20000838
    2a44:	20000810 	.word	0x20000810

00002a48 <z_time_slice>:
{
    2a48:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    2a4a:	f04f 0320 	mov.w	r3, #32
    2a4e:	f3ef 8411 	mrs	r4, BASEPRI
    2a52:	f383 8811 	msr	BASEPRI, r3
    2a56:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2a5a:	4a17      	ldr	r2, [pc, #92]	; (2ab8 <z_time_slice+0x70>)
    2a5c:	4917      	ldr	r1, [pc, #92]	; (2abc <z_time_slice+0x74>)
    2a5e:	6893      	ldr	r3, [r2, #8]
    2a60:	680d      	ldr	r5, [r1, #0]
    2a62:	42ab      	cmp	r3, r5
    2a64:	4615      	mov	r5, r2
    2a66:	d106      	bne.n	2a76 <z_time_slice+0x2e>
			z_reset_time_slice();
    2a68:	f7ff feaa 	bl	27c0 <z_reset_time_slice>
	__asm__ volatile(
    2a6c:	f384 8811 	msr	BASEPRI, r4
    2a70:	f3bf 8f6f 	isb	sy
}
    2a74:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    2a76:	2600      	movs	r6, #0
    2a78:	600e      	str	r6, [r1, #0]
	if (slice_time && sliceable(_current)) {
    2a7a:	4911      	ldr	r1, [pc, #68]	; (2ac0 <z_time_slice+0x78>)
    2a7c:	6809      	ldr	r1, [r1, #0]
    2a7e:	b1c1      	cbz	r1, 2ab2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2a80:	89d9      	ldrh	r1, [r3, #14]
    2a82:	297f      	cmp	r1, #127	; 0x7f
    2a84:	d815      	bhi.n	2ab2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    2a86:	7b59      	ldrb	r1, [r3, #13]
    2a88:	06c9      	lsls	r1, r1, #27
    2a8a:	d112      	bne.n	2ab2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2a8c:	490d      	ldr	r1, [pc, #52]	; (2ac4 <z_time_slice+0x7c>)
    2a8e:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2a92:	6809      	ldr	r1, [r1, #0]
    2a94:	428e      	cmp	r6, r1
    2a96:	db0c      	blt.n	2ab2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2a98:	490b      	ldr	r1, [pc, #44]	; (2ac8 <z_time_slice+0x80>)
    2a9a:	428b      	cmp	r3, r1
    2a9c:	d009      	beq.n	2ab2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    2a9e:	6911      	ldr	r1, [r2, #16]
    2aa0:	4281      	cmp	r1, r0
    2aa2:	dc03      	bgt.n	2aac <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    2aa4:	4618      	mov	r0, r3
    2aa6:	f7ff ff97 	bl	29d8 <move_thread_to_end_of_prio_q>
    2aaa:	e7dd      	b.n	2a68 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    2aac:	1a09      	subs	r1, r1, r0
    2aae:	6111      	str	r1, [r2, #16]
    2ab0:	e7dc      	b.n	2a6c <z_time_slice+0x24>
		_current_cpu->slice_ticks = 0;
    2ab2:	2300      	movs	r3, #0
    2ab4:	612b      	str	r3, [r5, #16]
    2ab6:	e7d9      	b.n	2a6c <z_time_slice+0x24>
    2ab8:	20000810 	.word	0x20000810
    2abc:	20000840 	.word	0x20000840
    2ac0:	20000848 	.word	0x20000848
    2ac4:	20000844 	.word	0x20000844
    2ac8:	20000160 	.word	0x20000160

00002acc <z_impl_k_thread_suspend>:
{
    2acc:	b570      	push	{r4, r5, r6, lr}
    2ace:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2ad0:	3018      	adds	r0, #24
    2ad2:	f002 f952 	bl	4d7a <z_abort_timeout>
	__asm__ volatile(
    2ad6:	f04f 0320 	mov.w	r3, #32
    2ada:	f3ef 8611 	mrs	r6, BASEPRI
    2ade:	f383 8811 	msr	BASEPRI, r3
    2ae2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2ae6:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2aea:	2b00      	cmp	r3, #0
    2aec:	da07      	bge.n	2afe <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2aee:	4621      	mov	r1, r4
    2af0:	480e      	ldr	r0, [pc, #56]	; (2b2c <z_impl_k_thread_suspend+0x60>)
    2af2:	f7ff fecd 	bl	2890 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2af6:	7b63      	ldrb	r3, [r4, #13]
    2af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2afc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2afe:	4d0c      	ldr	r5, [pc, #48]	; (2b30 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2b00:	7b63      	ldrb	r3, [r4, #13]
    2b02:	68a8      	ldr	r0, [r5, #8]
    2b04:	f043 0310 	orr.w	r3, r3, #16
    2b08:	7363      	strb	r3, [r4, #13]
    2b0a:	1b03      	subs	r3, r0, r4
    2b0c:	4258      	negs	r0, r3
    2b0e:	4158      	adcs	r0, r3
    2b10:	f7ff fed4 	bl	28bc <update_cache>
	__asm__ volatile(
    2b14:	f386 8811 	msr	BASEPRI, r6
    2b18:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2b1c:	68ab      	ldr	r3, [r5, #8]
    2b1e:	42a3      	cmp	r3, r4
    2b20:	d103      	bne.n	2b2a <z_impl_k_thread_suspend+0x5e>
}
    2b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2b26:	f002 b886 	b.w	4c36 <z_reschedule_unlocked>
}
    2b2a:	bd70      	pop	{r4, r5, r6, pc}
    2b2c:	20000838 	.word	0x20000838
    2b30:	20000810 	.word	0x20000810

00002b34 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2b34:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
    2b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b3a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2b3c:	b103      	cbz	r3, 2b40 <z_thread_single_abort+0xc>
		thread->fn_abort();
    2b3e:	4798      	blx	r3
    2b40:	f104 0018 	add.w	r0, r4, #24
    2b44:	f002 f919 	bl	4d7a <z_abort_timeout>
	__asm__ volatile(
    2b48:	f04f 0320 	mov.w	r3, #32
    2b4c:	f3ef 8611 	mrs	r6, BASEPRI
    2b50:	f383 8811 	msr	BASEPRI, r3
    2b54:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2b58:	7b63      	ldrb	r3, [r4, #13]
    2b5a:	06d8      	lsls	r0, r3, #27
    2b5c:	d123      	bne.n	2ba6 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    2b5e:	69a2      	ldr	r2, [r4, #24]
    2b60:	bb0a      	cbnz	r2, 2ba6 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    2b62:	0619      	lsls	r1, r3, #24
    2b64:	d507      	bpl.n	2b76 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2b66:	4621      	mov	r1, r4
    2b68:	481e      	ldr	r0, [pc, #120]	; (2be4 <z_thread_single_abort+0xb0>)
    2b6a:	f7ff fe91 	bl	2890 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2b6e:	7b63      	ldrb	r3, [r4, #13]
    2b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b74:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2b76:	4b1c      	ldr	r3, [pc, #112]	; (2be8 <z_thread_single_abort+0xb4>)
    2b78:	6898      	ldr	r0, [r3, #8]
    2b7a:	1b02      	subs	r2, r0, r4
    2b7c:	4250      	negs	r0, r2
    2b7e:	4150      	adcs	r0, r2
    2b80:	f7ff fe9c 	bl	28bc <update_cache>
			waiter->base.pended_on = NULL;
    2b84:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    2b86:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2b88:	f104 0830 	add.w	r8, r4, #48	; 0x30
    2b8c:	f043 0308 	orr.w	r3, r3, #8
    2b90:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    2b92:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b94:	4545      	cmp	r5, r8
    2b96:	d000      	beq.n	2b9a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2b98:	b995      	cbnz	r5, 2bc0 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    2b9a:	f386 8811 	msr	BASEPRI, r6
    2b9e:	f3bf 8f6f 	isb	sy
}
    2ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2ba6:	079b      	lsls	r3, r3, #30
    2ba8:	d5ec      	bpl.n	2b84 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2baa:	4621      	mov	r1, r4
    2bac:	68a0      	ldr	r0, [r4, #8]
    2bae:	f7ff fe6f 	bl	2890 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2bb2:	7b63      	ldrb	r3, [r4, #13]
    2bb4:	f023 0302 	bic.w	r3, r3, #2
    2bb8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2bba:	2300      	movs	r3, #0
    2bbc:	60a3      	str	r3, [r4, #8]
    2bbe:	e7e1      	b.n	2b84 <z_thread_single_abort+0x50>
    2bc0:	f105 0018 	add.w	r0, r5, #24
    2bc4:	f002 f8d9 	bl	4d7a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2bc8:	68a8      	ldr	r0, [r5, #8]
    2bca:	4629      	mov	r1, r5
    2bcc:	f7ff fe60 	bl	2890 <z_priq_dumb_remove>
    2bd0:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2bd2:	60af      	str	r7, [r5, #8]
    2bd4:	f023 0302 	bic.w	r3, r3, #2
    2bd8:	736b      	strb	r3, [r5, #13]
    2bda:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    2bdc:	4628      	mov	r0, r5
    2bde:	f7ff fead 	bl	293c <ready_thread>
    2be2:	e7d6      	b.n	2b92 <z_thread_single_abort+0x5e>
    2be4:	20000838 	.word	0x20000838
    2be8:	20000810 	.word	0x20000810

00002bec <unready_thread>:
{
    2bec:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    2bee:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    2bf2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	da07      	bge.n	2c08 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2bf8:	4601      	mov	r1, r0
    2bfa:	4808      	ldr	r0, [pc, #32]	; (2c1c <unready_thread+0x30>)
    2bfc:	f7ff fe48 	bl	2890 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2c00:	7b63      	ldrb	r3, [r4, #13]
    2c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c06:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    2c08:	4b05      	ldr	r3, [pc, #20]	; (2c20 <unready_thread+0x34>)
    2c0a:	6898      	ldr	r0, [r3, #8]
    2c0c:	1b03      	subs	r3, r0, r4
    2c0e:	4258      	negs	r0, r3
    2c10:	4158      	adcs	r0, r3
}
    2c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    2c16:	f7ff be51 	b.w	28bc <update_cache>
    2c1a:	bf00      	nop
    2c1c:	20000838 	.word	0x20000838
    2c20:	20000810 	.word	0x20000810

00002c24 <pend>:
{
    2c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c28:	4606      	mov	r6, r0
    2c2a:	4614      	mov	r4, r2
    2c2c:	461d      	mov	r5, r3
	__asm__ volatile(
    2c2e:	f04f 0320 	mov.w	r3, #32
    2c32:	f3ef 8711 	mrs	r7, BASEPRI
    2c36:	f383 8811 	msr	BASEPRI, r3
    2c3a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2c3e:	f002 f847 	bl	4cd0 <add_to_waitq_locked>
	__asm__ volatile(
    2c42:	f387 8811 	msr	BASEPRI, r7
    2c46:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2c4a:	1c6b      	adds	r3, r5, #1
    2c4c:	bf08      	it	eq
    2c4e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    2c52:	d008      	beq.n	2c66 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2c54:	4622      	mov	r2, r4
    2c56:	462b      	mov	r3, r5
    2c58:	f106 0018 	add.w	r0, r6, #24
    2c5c:	4903      	ldr	r1, [pc, #12]	; (2c6c <pend+0x48>)
}
    2c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2c62:	f000 ba2b 	b.w	30bc <z_add_timeout>
    2c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c6a:	bf00      	nop
    2c6c:	00004c91 	.word	0x00004c91

00002c70 <z_pend_curr>:
{
    2c70:	b510      	push	{r4, lr}
    2c72:	460c      	mov	r4, r1
	pending_current = _current;
    2c74:	4b06      	ldr	r3, [pc, #24]	; (2c90 <z_pend_curr+0x20>)
{
    2c76:	4611      	mov	r1, r2
	pending_current = _current;
    2c78:	6898      	ldr	r0, [r3, #8]
    2c7a:	4b06      	ldr	r3, [pc, #24]	; (2c94 <z_pend_curr+0x24>)
    2c7c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2c82:	f7ff ffcf 	bl	2c24 <pend>
    2c86:	4620      	mov	r0, r4
}
    2c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c8c:	f7fe bb66 	b.w	135c <arch_swap>
    2c90:	20000810 	.word	0x20000810
    2c94:	20000840 	.word	0x20000840

00002c98 <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    2c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c9a:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    2c9c:	f002 f8ad 	bl	4dfa <z_tick_get_32>
    2ca0:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    2ca2:	f04f 0320 	mov.w	r3, #32
    2ca6:	f3ef 8711 	mrs	r7, BASEPRI
    2caa:	f383 8811 	msr	BASEPRI, r3
    2cae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    2cb2:	4d0d      	ldr	r5, [pc, #52]	; (2ce8 <z_tick_sleep.part.21+0x50>)
    2cb4:	4b0d      	ldr	r3, [pc, #52]	; (2cec <z_tick_sleep.part.21+0x54>)
    2cb6:	68a8      	ldr	r0, [r5, #8]
    2cb8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    2cba:	f7ff ff97 	bl	2bec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    2cbe:	68a8      	ldr	r0, [r5, #8]
    2cc0:	490b      	ldr	r1, [pc, #44]	; (2cf0 <z_tick_sleep.part.21+0x58>)
    2cc2:	4632      	mov	r2, r6
    2cc4:	17f3      	asrs	r3, r6, #31
    2cc6:	3018      	adds	r0, #24
    2cc8:	f000 f9f8 	bl	30bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2ccc:	68aa      	ldr	r2, [r5, #8]
    2cce:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2cd0:	7b53      	ldrb	r3, [r2, #13]
    2cd2:	f043 0310 	orr.w	r3, r3, #16
    2cd6:	7353      	strb	r3, [r2, #13]
    2cd8:	f7fe fb40 	bl	135c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2cdc:	f002 f88d 	bl	4dfa <z_tick_get_32>
    2ce0:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    2ce2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ce8:	20000810 	.word	0x20000810
    2cec:	20000840 	.word	0x20000840
    2cf0:	00004c91 	.word	0x00004c91

00002cf4 <z_set_prio>:
{
    2cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cf8:	4604      	mov	r4, r0
    2cfa:	f04f 0320 	mov.w	r3, #32
    2cfe:	f3ef 8811 	mrs	r8, BASEPRI
    2d02:	f383 8811 	msr	BASEPRI, r3
    2d06:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2d0a:	7b43      	ldrb	r3, [r0, #13]
    2d0c:	b24e      	sxtb	r6, r1
    2d0e:	06db      	lsls	r3, r3, #27
    2d10:	d12e      	bne.n	2d70 <z_set_prio+0x7c>
		if (need_sched) {
    2d12:	6983      	ldr	r3, [r0, #24]
    2d14:	bb63      	cbnz	r3, 2d70 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2d16:	4d18      	ldr	r5, [pc, #96]	; (2d78 <z_set_prio+0x84>)
    2d18:	4601      	mov	r1, r0
    2d1a:	f105 0728 	add.w	r7, r5, #40	; 0x28
    2d1e:	4638      	mov	r0, r7
    2d20:	f7ff fdb6 	bl	2890 <z_priq_dumb_remove>
	return list->head == list;
    2d24:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    2d26:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d28:	42bb      	cmp	r3, r7
    2d2a:	462a      	mov	r2, r5
    2d2c:	d019      	beq.n	2d62 <z_set_prio+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2d2e:	b1c3      	cbz	r3, 2d62 <z_set_prio+0x6e>
    2d30:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2d32:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2d36:	42b0      	cmp	r0, r6
    2d38:	dd0e      	ble.n	2d58 <z_set_prio+0x64>
	node->prev = successor->prev;
    2d3a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2d3c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2d40:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2d42:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2d44:	2001      	movs	r0, #1
    2d46:	f7ff fdb9 	bl	28bc <update_cache>
    2d4a:	2001      	movs	r0, #1
	__asm__ volatile(
    2d4c:	f388 8811 	msr	BASEPRI, r8
    2d50:	f3bf 8f6f 	isb	sy
}
    2d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (node == list->tail) ? NULL : node->next;
    2d58:	4299      	cmp	r1, r3
    2d5a:	d002      	beq.n	2d62 <z_set_prio+0x6e>
    2d5c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d1e7      	bne.n	2d32 <z_set_prio+0x3e>
	node->prev = list->tail;
    2d62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2d64:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    2d66:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2d68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2d6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2d6c:	62d4      	str	r4, [r2, #44]	; 0x2c
    2d6e:	e7e9      	b.n	2d44 <z_set_prio+0x50>
			thread->base.prio = prio;
    2d70:	73a6      	strb	r6, [r4, #14]
    2d72:	2000      	movs	r0, #0
    2d74:	e7ea      	b.n	2d4c <z_set_prio+0x58>
    2d76:	bf00      	nop
    2d78:	20000810 	.word	0x20000810

00002d7c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2d7c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2d7e:	4b04      	ldr	r3, [pc, #16]	; (2d90 <z_sched_init+0x14>)
    2d80:	4608      	mov	r0, r1
    2d82:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2d86:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2d8a:	f7ff bd2f 	b.w	27ec <k_sched_time_slice_set>
    2d8e:	bf00      	nop
    2d90:	20000810 	.word	0x20000810

00002d94 <z_impl_k_yield>:
{
    2d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2d96:	4c23      	ldr	r4, [pc, #140]	; (2e24 <z_impl_k_yield+0x90>)
    2d98:	4b23      	ldr	r3, [pc, #140]	; (2e28 <z_impl_k_yield+0x94>)
    2d9a:	68a2      	ldr	r2, [r4, #8]
    2d9c:	429a      	cmp	r2, r3
    2d9e:	d029      	beq.n	2df4 <z_impl_k_yield+0x60>
	__asm__ volatile(
    2da0:	f04f 0320 	mov.w	r3, #32
    2da4:	f3ef 8611 	mrs	r6, BASEPRI
    2da8:	f383 8811 	msr	BASEPRI, r3
    2dac:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2db0:	f104 0528 	add.w	r5, r4, #40	; 0x28
    2db4:	68a1      	ldr	r1, [r4, #8]
    2db6:	4628      	mov	r0, r5
    2db8:	f7ff fd6a 	bl	2890 <z_priq_dumb_remove>
	return list->head == list;
    2dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2dbe:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2dc0:	42aa      	cmp	r2, r5
    2dc2:	d028      	beq.n	2e16 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2dc4:	b33a      	cbz	r2, 2e16 <z_impl_k_yield+0x82>
    2dc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2dc8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2dcc:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2dd0:	428f      	cmp	r7, r1
    2dd2:	dd1b      	ble.n	2e0c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    2dd4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2dd6:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    2dda:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    2ddc:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    2dde:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    2de0:	2001      	movs	r0, #1
    2de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2de6:	735a      	strb	r2, [r3, #13]
    2de8:	f7ff fd68 	bl	28bc <update_cache>
	__asm__ volatile(
    2dec:	f386 8811 	msr	BASEPRI, r6
    2df0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2df4:	f04f 0320 	mov.w	r3, #32
    2df8:	f3ef 8011 	mrs	r0, BASEPRI
    2dfc:	f383 8811 	msr	BASEPRI, r3
    2e00:	f3bf 8f6f 	isb	sy
}
    2e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2e08:	f7fe baa8 	b.w	135c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    2e0c:	4282      	cmp	r2, r0
    2e0e:	d002      	beq.n	2e16 <z_impl_k_yield+0x82>
    2e10:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2e12:	2a00      	cmp	r2, #0
    2e14:	d1da      	bne.n	2dcc <z_impl_k_yield+0x38>
	node->prev = list->tail;
    2e16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    2e18:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
    2e1a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    2e1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e1e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2e20:	62e3      	str	r3, [r4, #44]	; 0x2c
    2e22:	e7dc      	b.n	2dde <z_impl_k_yield+0x4a>
    2e24:	20000810 	.word	0x20000810
    2e28:	20000160 	.word	0x20000160

00002e2c <z_impl_k_sleep>:
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2e2c:	3101      	adds	r1, #1
    2e2e:	bf08      	it	eq
    2e30:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    2e34:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2e36:	d106      	bne.n	2e46 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    2e38:	4b0b      	ldr	r3, [pc, #44]	; (2e68 <z_impl_k_sleep+0x3c>)
    2e3a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2e3c:	f7ff fe46 	bl	2acc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    2e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    2e44:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    2e46:	4604      	mov	r4, r0
	if (ticks == 0) {
    2e48:	b948      	cbnz	r0, 2e5e <z_impl_k_sleep+0x32>
	z_impl_k_yield();
    2e4a:	f7ff ffa3 	bl	2d94 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    2e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2e52:	fb84 3400 	smull	r3, r4, r4, r0
    2e56:	0bd8      	lsrs	r0, r3, #15
    2e58:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2e5c:	e7f2      	b.n	2e44 <z_impl_k_sleep+0x18>
    2e5e:	f7ff ff1b 	bl	2c98 <z_tick_sleep.part.21>
    2e62:	4604      	mov	r4, r0
    2e64:	e7f3      	b.n	2e4e <z_impl_k_sleep+0x22>
    2e66:	bf00      	nop
    2e68:	20000810 	.word	0x20000810

00002e6c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2e6c:	4b01      	ldr	r3, [pc, #4]	; (2e74 <z_impl_k_current_get+0x8>)
    2e6e:	6898      	ldr	r0, [r3, #8]
    2e70:	4770      	bx	lr
    2e72:	bf00      	nop
    2e74:	20000810 	.word	0x20000810

00002e78 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2e78:	b538      	push	{r3, r4, r5, lr}
    2e7a:	4604      	mov	r4, r0
    2e7c:	f04f 0320 	mov.w	r3, #32
    2e80:	f3ef 8511 	mrs	r5, BASEPRI
    2e84:	f383 8811 	msr	BASEPRI, r3
    2e88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    2e8c:	f001 ff48 	bl	4d20 <z_unpend_first_thread>

	if (thread != NULL) {
    2e90:	b148      	cbz	r0, 2ea6 <z_impl_k_sem_give+0x2e>
    2e92:	2200      	movs	r2, #0
    2e94:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2e96:	f001 feeb 	bl	4c70 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2e9a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    2e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2ea0:	4804      	ldr	r0, [pc, #16]	; (2eb4 <z_impl_k_sem_give+0x3c>)
    2ea2:	f7ff bccf 	b.w	2844 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2ea6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2eaa:	429a      	cmp	r2, r3
    2eac:	bf18      	it	ne
    2eae:	3301      	addne	r3, #1
    2eb0:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    2eb2:	e7f2      	b.n	2e9a <z_impl_k_sem_give+0x22>
    2eb4:	2000086e 	.word	0x2000086e

00002eb8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2eba:	4614      	mov	r4, r2
    2ebc:	461d      	mov	r5, r3
    2ebe:	f04f 0320 	mov.w	r3, #32
    2ec2:	f3ef 8111 	mrs	r1, BASEPRI
    2ec6:	f383 8811 	msr	BASEPRI, r3
    2eca:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    2ece:	6883      	ldr	r3, [r0, #8]
    2ed0:	b143      	cbz	r3, 2ee4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    2ed2:	3b01      	subs	r3, #1
    2ed4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    2ed6:	f381 8811 	msr	BASEPRI, r1
    2eda:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2ede:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2ee0:	b003      	add	sp, #12
    2ee2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2ee4:	ea54 0305 	orrs.w	r3, r4, r5
    2ee8:	d106      	bne.n	2ef8 <z_impl_k_sem_take+0x40>
    2eea:	f381 8811 	msr	BASEPRI, r1
    2eee:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2ef2:	f06f 000f 	mvn.w	r0, #15
		goto out;
    2ef6:	e7f3      	b.n	2ee0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2ef8:	4602      	mov	r2, r0
    2efa:	e9cd 4500 	strd	r4, r5, [sp]
    2efe:	4802      	ldr	r0, [pc, #8]	; (2f08 <z_impl_k_sem_take+0x50>)
    2f00:	f7ff feb6 	bl	2c70 <z_pend_curr>
	return ret;
    2f04:	e7ec      	b.n	2ee0 <z_impl_k_sem_take+0x28>
    2f06:	bf00      	nop
    2f08:	2000086e 	.word	0x2000086e

00002f0c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    2f0e:	f100 0530 	add.w	r5, r0, #48	; 0x30
    2f12:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
    2f14:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    2f18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    2f1a:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    2f1c:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2f1e:	2504      	movs	r5, #4
    2f20:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    2f22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2f24:	3207      	adds	r2, #7
	thread_base->prio = priority;
    2f26:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    2f28:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2f2a:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    2f2e:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
    2f32:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    2f36:	73c5      	strb	r5, [r0, #15]
	node->prev = NULL;
    2f38:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.delta = delta;
    2f3c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f3e:	9202      	str	r2, [sp, #8]
    2f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2f42:	9201      	str	r2, [sp, #4]
    2f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f46:	9200      	str	r2, [sp, #0]
    2f48:	4632      	mov	r2, r6
    2f4a:	f7fe fa93 	bl	1474 <arch_new_thread>
	if (!_current) {
    2f4e:	4b05      	ldr	r3, [pc, #20]	; (2f64 <z_setup_new_thread+0x58>)
	new_thread->fn_abort = NULL;
    2f50:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    2f54:	689b      	ldr	r3, [r3, #8]
    2f56:	b103      	cbz	r3, 2f5a <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
    2f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    2f5a:	4630      	mov	r0, r6
    2f5c:	6763      	str	r3, [r4, #116]	; 0x74
    2f5e:	b005      	add	sp, #20
    2f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f62:	bf00      	nop
    2f64:	20000810 	.word	0x20000810

00002f68 <z_init_static_threads>:
{
    2f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2f6c:	4e2a      	ldr	r6, [pc, #168]	; (3018 <z_init_static_threads+0xb0>)
    2f6e:	4d2b      	ldr	r5, [pc, #172]	; (301c <z_init_static_threads+0xb4>)
    2f70:	46b0      	mov	r8, r6
{
    2f72:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    2f74:	42b5      	cmp	r5, r6
    2f76:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2f7a:	d310      	bcc.n	2f9e <z_init_static_threads+0x36>
	k_sched_lock();
    2f7c:	f7ff fc74 	bl	2868 <k_sched_lock>
    2f80:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2f84:	f240 36e7 	movw	r6, #999	; 0x3e7
    2f88:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    2f8a:	4c24      	ldr	r4, [pc, #144]	; (301c <z_init_static_threads+0xb4>)
    2f8c:	f8df a090 	ldr.w	sl, [pc, #144]	; 3020 <z_init_static_threads+0xb8>
    2f90:	4544      	cmp	r4, r8
    2f92:	d321      	bcc.n	2fd8 <z_init_static_threads+0x70>
}
    2f94:	b006      	add	sp, #24
    2f96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    2f9a:	f7ff bcb3 	b.w	2904 <k_sched_unlock>
		z_setup_new_thread(
    2f9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2fa2:	9305      	str	r3, [sp, #20]
    2fa4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2fa8:	9304      	str	r3, [sp, #16]
    2faa:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2fae:	9303      	str	r3, [sp, #12]
    2fb0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2fb4:	9302      	str	r3, [sp, #8]
    2fb6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2fba:	9301      	str	r3, [sp, #4]
    2fbc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2fc0:	9300      	str	r3, [sp, #0]
    2fc2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2fc6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2fca:	f7ff ff9f 	bl	2f0c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2fce:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2fd2:	65dd      	str	r5, [r3, #92]	; 0x5c
    2fd4:	4625      	mov	r5, r4
    2fd6:	e7cd      	b.n	2f74 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2fda:	1c5a      	adds	r2, r3, #1
    2fdc:	d00d      	beq.n	2ffa <z_init_static_threads+0x92>
    2fde:	4630      	mov	r0, r6
    2fe0:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    2fe2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2fe6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2fea:	42b9      	cmp	r1, r7
    2fec:	bf08      	it	eq
    2fee:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    2ff0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2ff2:	d104      	bne.n	2ffe <z_init_static_threads+0x96>
	z_sched_start(thread);
    2ff4:	4628      	mov	r0, r5
    2ff6:	f7ff fcd1 	bl	299c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2ffa:	3430      	adds	r4, #48	; 0x30
    2ffc:	e7c8      	b.n	2f90 <z_init_static_threads+0x28>
    2ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3002:	2300      	movs	r3, #0
    3004:	f7fd f91a 	bl	23c <__aeabi_uldivmod>
    3008:	4602      	mov	r2, r0
    300a:	460b      	mov	r3, r1
    300c:	f105 0018 	add.w	r0, r5, #24
    3010:	4651      	mov	r1, sl
    3012:	f000 f853 	bl	30bc <z_add_timeout>
    3016:	e7f0      	b.n	2ffa <z_init_static_threads+0x92>
    3018:	20000110 	.word	0x20000110
    301c:	20000110 	.word	0x20000110
    3020:	00004c91 	.word	0x00004c91

00003024 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    3024:	4b03      	ldr	r3, [pc, #12]	; (3034 <elapsed+0x10>)
    3026:	681b      	ldr	r3, [r3, #0]
    3028:	b90b      	cbnz	r3, 302e <elapsed+0xa>
    302a:	f7fd be9d 	b.w	d68 <z_clock_elapsed>
}
    302e:	2000      	movs	r0, #0
    3030:	4770      	bx	lr
    3032:	bf00      	nop
    3034:	2000084c 	.word	0x2000084c

00003038 <remove_timeout>:
{
    3038:	b530      	push	{r4, r5, lr}
    303a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    303c:	b168      	cbz	r0, 305a <remove_timeout+0x22>
    303e:	4a0a      	ldr	r2, [pc, #40]	; (3068 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    3040:	6852      	ldr	r2, [r2, #4]
    3042:	4290      	cmp	r0, r2
    3044:	d009      	beq.n	305a <remove_timeout+0x22>
	if (next(t) != NULL) {
    3046:	b143      	cbz	r3, 305a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3048:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    304c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3050:	1912      	adds	r2, r2, r4
    3052:	eb45 0101 	adc.w	r1, r5, r1
    3056:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    305a:	6842      	ldr	r2, [r0, #4]
    305c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    305e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3060:	2300      	movs	r3, #0
	node->prev = NULL;
    3062:	e9c0 3300 	strd	r3, r3, [r0]
}
    3066:	bd30      	pop	{r4, r5, pc}
    3068:	20000054 	.word	0x20000054

0000306c <next_timeout>:

static int32_t next_timeout(void)
{
    306c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    306e:	4b11      	ldr	r3, [pc, #68]	; (30b4 <next_timeout+0x48>)
    3070:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3072:	429c      	cmp	r4, r3
    3074:	bf08      	it	eq
    3076:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3078:	f7ff ffd4 	bl	3024 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    307c:	b1b4      	cbz	r4, 30ac <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    307e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3082:	1a14      	subs	r4, r2, r0
    3084:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3088:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    308c:	f175 0300 	sbcs.w	r3, r5, #0
    3090:	da0c      	bge.n	30ac <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    3092:	2c00      	cmp	r4, #0
    3094:	f175 0300 	sbcs.w	r3, r5, #0
    3098:	4620      	mov	r0, r4
    309a:	da00      	bge.n	309e <next_timeout+0x32>
    309c:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    309e:	4b06      	ldr	r3, [pc, #24]	; (30b8 <next_timeout+0x4c>)
    30a0:	691b      	ldr	r3, [r3, #16]
    30a2:	b113      	cbz	r3, 30aa <next_timeout+0x3e>
    30a4:	4298      	cmp	r0, r3
    30a6:	bfa8      	it	ge
    30a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    30aa:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    30ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    30b0:	e7f5      	b.n	309e <next_timeout+0x32>
    30b2:	bf00      	nop
    30b4:	20000054 	.word	0x20000054
    30b8:	20000810 	.word	0x20000810

000030bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    30bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30c0:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    30c2:	1c59      	adds	r1, r3, #1
    30c4:	bf08      	it	eq
    30c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    30ca:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    30cc:	d06e      	beq.n	31ac <z_add_timeout+0xf0>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    30ce:	1c54      	adds	r4, r2, #1
    30d0:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    30d4:	f06f 0301 	mvn.w	r3, #1
    30d8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    30dc:	ebb3 0804 	subs.w	r8, r3, r4
    30e0:	eb6b 0905 	sbc.w	r9, fp, r5
    30e4:	f1b8 0f00 	cmp.w	r8, #0
    30e8:	f179 0300 	sbcs.w	r3, r9, #0
    30ec:	db0f      	blt.n	310e <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    30ee:	f7ff ff99 	bl	3024 <elapsed>
    30f2:	f06f 0301 	mvn.w	r3, #1
    30f6:	4a34      	ldr	r2, [pc, #208]	; (31c8 <z_add_timeout+0x10c>)
    30f8:	e9d2 1c00 	ldrd	r1, ip, [r2]
    30fc:	1a5b      	subs	r3, r3, r1
    30fe:	eb6b 020c 	sbc.w	r2, fp, ip
    3102:	1b1e      	subs	r6, r3, r4
    3104:	eb62 0705 	sbc.w	r7, r2, r5
    3108:	1a34      	subs	r4, r6, r0
    310a:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    310e:	9b01      	ldr	r3, [sp, #4]
    3110:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    3114:	f04f 0320 	mov.w	r3, #32
    3118:	f3ef 8611 	mrs	r6, BASEPRI
    311c:	f383 8811 	msr	BASEPRI, r3
    3120:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3124:	f7ff ff7e 	bl	3024 <elapsed>
	ticks = MAX(1, ticks);
    3128:	2c01      	cmp	r4, #1
    312a:	f175 0300 	sbcs.w	r3, r5, #0
    312e:	4621      	mov	r1, r4
    3130:	bfb8      	it	lt
    3132:	2101      	movlt	r1, #1
    3134:	462a      	mov	r2, r5
    3136:	bfb8      	it	lt
    3138:	2200      	movlt	r2, #0
	return list->head == list;
    313a:	4b24      	ldr	r3, [pc, #144]	; (31cc <z_add_timeout+0x110>)
		to->dticks = ticks + elapsed();
    313c:	180c      	adds	r4, r1, r0
    313e:	eb42 75e0 	adc.w	r5, r2, r0, asr #31
    3142:	681a      	ldr	r2, [r3, #0]
    3144:	e9ca 4504 	strd	r4, r5, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3148:	429a      	cmp	r2, r3
    314a:	d001      	beq.n	3150 <z_add_timeout+0x94>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    314c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    314e:	b952      	cbnz	r2, 3166 <z_add_timeout+0xaa>
	node->prev = list->tail;
    3150:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3152:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    3156:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    315a:	685a      	ldr	r2, [r3, #4]
    315c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    3160:	f8c3 a004 	str.w	sl, [r3, #4]
    3164:	e014      	b.n	3190 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
    3166:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    316a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    316e:	4544      	cmp	r4, r8
    3170:	eb75 0109 	sbcs.w	r1, r5, r9
    3174:	da1d      	bge.n	31b2 <z_add_timeout+0xf6>
				t->dticks -= to->dticks;
    3176:	ebb8 0004 	subs.w	r0, r8, r4
    317a:	eb69 0105 	sbc.w	r1, r9, r5
    317e:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    3182:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3184:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    3188:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    318c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    3190:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3192:	429a      	cmp	r2, r3
    3194:	d006      	beq.n	31a4 <z_add_timeout+0xe8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3196:	4592      	cmp	sl, r2
    3198:	d104      	bne.n	31a4 <z_add_timeout+0xe8>
			z_clock_set_timeout(next_timeout(), false);
    319a:	f7ff ff67 	bl	306c <next_timeout>
    319e:	2100      	movs	r1, #0
    31a0:	f7fd fd7c 	bl	c9c <z_clock_set_timeout>
	__asm__ volatile(
    31a4:	f386 8811 	msr	BASEPRI, r6
    31a8:	f3bf 8f6f 	isb	sy
		}
	}
}
    31ac:	b003      	add	sp, #12
    31ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    31b2:	ebb4 0008 	subs.w	r0, r4, r8
    31b6:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    31ba:	42ba      	cmp	r2, r7
    31bc:	e9ca 0104 	strd	r0, r1, [sl, #16]
    31c0:	d0c6      	beq.n	3150 <z_add_timeout+0x94>
    31c2:	6812      	ldr	r2, [r2, #0]
    31c4:	e7c3      	b.n	314e <z_add_timeout+0x92>
    31c6:	bf00      	nop
    31c8:	20000260 	.word	0x20000260
    31cc:	20000054 	.word	0x20000054

000031d0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    31d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31d4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    31d6:	f7ff fc37 	bl	2a48 <z_time_slice>
	__asm__ volatile(
    31da:	f04f 0320 	mov.w	r3, #32
    31de:	f3ef 8511 	mrs	r5, BASEPRI
    31e2:	f383 8811 	msr	BASEPRI, r3
    31e6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    31ea:	4b2c      	ldr	r3, [pc, #176]	; (329c <z_clock_announce+0xcc>)
    31ec:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 32a0 <z_clock_announce+0xd0>
    31f0:	4698      	mov	r8, r3
    31f2:	46cb      	mov	fp, r9
	return list->head == list;
    31f4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 32a4 <z_clock_announce+0xd4>
    31f8:	601c      	str	r4, [r3, #0]
    31fa:	f8d8 c000 	ldr.w	ip, [r8]
    31fe:	f8da 4000 	ldr.w	r4, [sl]
    3202:	4666      	mov	r6, ip
    3204:	e9d9 2300 	ldrd	r2, r3, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3208:	4554      	cmp	r4, sl
    320a:	e9cd 2300 	strd	r2, r3, [sp]
    320e:	ea4f 77e6 	mov.w	r7, r6, asr #31
    3212:	d00c      	beq.n	322e <z_clock_announce+0x5e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    3214:	b15c      	cbz	r4, 322e <z_clock_announce+0x5e>
    3216:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    321a:	458c      	cmp	ip, r1
    321c:	eb77 0302 	sbcs.w	r3, r7, r2
    3220:	da1b      	bge.n	325a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3222:	ebb1 000c 	subs.w	r0, r1, ip
    3226:	eb62 0107 	sbc.w	r1, r2, r7
    322a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    322e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3230:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    3232:	f8c8 4000 	str.w	r4, [r8]
	curr_tick += announce_remaining;
    3236:	18f2      	adds	r2, r6, r3
    3238:	9b01      	ldr	r3, [sp, #4]
    323a:	eb47 0303 	adc.w	r3, r7, r3
    323e:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
    3242:	f7ff ff13 	bl	306c <next_timeout>
    3246:	4621      	mov	r1, r4
    3248:	f7fd fd28 	bl	c9c <z_clock_set_timeout>
	__asm__ volatile(
    324c:	f385 8811 	msr	BASEPRI, r5
    3250:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3254:	b003      	add	sp, #12
    3256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    325a:	2200      	movs	r2, #0
		curr_tick += dt;
    325c:	e9dd 6700 	ldrd	r6, r7, [sp]
		t->dticks = 0;
    3260:	2300      	movs	r3, #0
		curr_tick += dt;
    3262:	1876      	adds	r6, r6, r1
		announce_remaining -= dt;
    3264:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    3268:	eb47 77e1 	adc.w	r7, r7, r1, asr #31
		announce_remaining -= dt;
    326c:	f8c8 0000 	str.w	r0, [r8]
		t->dticks = 0;
    3270:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    3274:	4620      	mov	r0, r4
		curr_tick += dt;
    3276:	e9c9 6700 	strd	r6, r7, [r9]
		remove_timeout(t);
    327a:	f7ff fedd 	bl	3038 <remove_timeout>
    327e:	f385 8811 	msr	BASEPRI, r5
    3282:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3286:	68a3      	ldr	r3, [r4, #8]
    3288:	4798      	blx	r3
	__asm__ volatile(
    328a:	f04f 0320 	mov.w	r3, #32
    328e:	f3ef 8511 	mrs	r5, BASEPRI
    3292:	f383 8811 	msr	BASEPRI, r3
    3296:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    329a:	e7ae      	b.n	31fa <z_clock_announce+0x2a>
    329c:	2000084c 	.word	0x2000084c
    32a0:	20000260 	.word	0x20000260
    32a4:	20000054 	.word	0x20000054

000032a8 <z_tick_get>:

int64_t z_tick_get(void)
{
    32a8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    32ac:	f04f 0320 	mov.w	r3, #32
    32b0:	f3ef 8411 	mrs	r4, BASEPRI
    32b4:	f383 8811 	msr	BASEPRI, r3
    32b8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    32bc:	f7fd fd54 	bl	d68 <z_clock_elapsed>
    32c0:	4b07      	ldr	r3, [pc, #28]	; (32e0 <z_tick_get+0x38>)
    32c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c6:	eb12 0b00 	adds.w	fp, r2, r0
    32ca:	f143 0c00 	adc.w	ip, r3, #0
    32ce:	4658      	mov	r0, fp
    32d0:	4661      	mov	r1, ip
	__asm__ volatile(
    32d2:	f384 8811 	msr	BASEPRI, r4
    32d6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    32da:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    32de:	bf00      	nop
    32e0:	20000260 	.word	0x20000260

000032e4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    32e4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    32e6:	4c06      	ldr	r4, [pc, #24]	; (3300 <statics_init+0x1c>)
    32e8:	4d06      	ldr	r5, [pc, #24]	; (3304 <statics_init+0x20>)
    32ea:	42ac      	cmp	r4, r5
    32ec:	d301      	bcc.n	32f2 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    32ee:	2000      	movs	r0, #0
    32f0:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    32f2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    32f6:	4620      	mov	r0, r4
    32f8:	f001 fd83 	bl	4e02 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    32fc:	3414      	adds	r4, #20
    32fe:	e7f4      	b.n	32ea <statics_init+0x6>
    3300:	20000110 	.word	0x20000110
    3304:	20000110 	.word	0x20000110

00003308 <CC_PalMemCopyPlat>:
    3308:	f001 bb65 	b.w	49d6 <memmove>

0000330c <CC_PalMemSetZeroPlat>:
    330c:	460a      	mov	r2, r1
    330e:	2100      	movs	r1, #0
    3310:	f001 bba2 	b.w	4a58 <memset>

00003314 <CC_PalInit>:
    3314:	b510      	push	{r4, lr}
    3316:	4811      	ldr	r0, [pc, #68]	; (335c <CC_PalInit+0x48>)
    3318:	f000 f848 	bl	33ac <CC_PalMutexCreate>
    331c:	b100      	cbz	r0, 3320 <CC_PalInit+0xc>
    331e:	bd10      	pop	{r4, pc}
    3320:	480f      	ldr	r0, [pc, #60]	; (3360 <CC_PalInit+0x4c>)
    3322:	f000 f843 	bl	33ac <CC_PalMutexCreate>
    3326:	2800      	cmp	r0, #0
    3328:	d1f9      	bne.n	331e <CC_PalInit+0xa>
    332a:	4c0e      	ldr	r4, [pc, #56]	; (3364 <CC_PalInit+0x50>)
    332c:	4620      	mov	r0, r4
    332e:	f000 f83d 	bl	33ac <CC_PalMutexCreate>
    3332:	2800      	cmp	r0, #0
    3334:	d1f3      	bne.n	331e <CC_PalInit+0xa>
    3336:	4b0c      	ldr	r3, [pc, #48]	; (3368 <CC_PalInit+0x54>)
    3338:	480c      	ldr	r0, [pc, #48]	; (336c <CC_PalInit+0x58>)
    333a:	601c      	str	r4, [r3, #0]
    333c:	f000 f836 	bl	33ac <CC_PalMutexCreate>
    3340:	4601      	mov	r1, r0
    3342:	2800      	cmp	r0, #0
    3344:	d1eb      	bne.n	331e <CC_PalInit+0xa>
    3346:	f000 f82d 	bl	33a4 <CC_PalDmaInit>
    334a:	4604      	mov	r4, r0
    334c:	b108      	cbz	r0, 3352 <CC_PalInit+0x3e>
    334e:	4620      	mov	r0, r4
    3350:	bd10      	pop	{r4, pc}
    3352:	f000 f851 	bl	33f8 <CC_PalPowerSaveModeInit>
    3356:	4620      	mov	r0, r4
    3358:	e7fa      	b.n	3350 <CC_PalInit+0x3c>
    335a:	bf00      	nop
    335c:	20000068 	.word	0x20000068
    3360:	2000005c 	.word	0x2000005c
    3364:	20000064 	.word	0x20000064
    3368:	2000006c 	.word	0x2000006c
    336c:	20000060 	.word	0x20000060

00003370 <CC_PalTerminate>:
    3370:	b508      	push	{r3, lr}
    3372:	4808      	ldr	r0, [pc, #32]	; (3394 <CC_PalTerminate+0x24>)
    3374:	f000 f824 	bl	33c0 <CC_PalMutexDestroy>
    3378:	4807      	ldr	r0, [pc, #28]	; (3398 <CC_PalTerminate+0x28>)
    337a:	f000 f821 	bl	33c0 <CC_PalMutexDestroy>
    337e:	4807      	ldr	r0, [pc, #28]	; (339c <CC_PalTerminate+0x2c>)
    3380:	f000 f81e 	bl	33c0 <CC_PalMutexDestroy>
    3384:	4806      	ldr	r0, [pc, #24]	; (33a0 <CC_PalTerminate+0x30>)
    3386:	f000 f81b 	bl	33c0 <CC_PalMutexDestroy>
    338a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    338e:	f000 b80b 	b.w	33a8 <CC_PalDmaTerminate>
    3392:	bf00      	nop
    3394:	20000068 	.word	0x20000068
    3398:	2000005c 	.word	0x2000005c
    339c:	20000064 	.word	0x20000064
    33a0:	20000060 	.word	0x20000060

000033a4 <CC_PalDmaInit>:
    33a4:	2000      	movs	r0, #0
    33a6:	4770      	bx	lr

000033a8 <CC_PalDmaTerminate>:
    33a8:	4770      	bx	lr
    33aa:	bf00      	nop

000033ac <CC_PalMutexCreate>:
    33ac:	b508      	push	{r3, lr}
    33ae:	4b03      	ldr	r3, [pc, #12]	; (33bc <CC_PalMutexCreate+0x10>)
    33b0:	6802      	ldr	r2, [r0, #0]
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	6810      	ldr	r0, [r2, #0]
    33b6:	4798      	blx	r3
    33b8:	2000      	movs	r0, #0
    33ba:	bd08      	pop	{r3, pc}
    33bc:	20000080 	.word	0x20000080

000033c0 <CC_PalMutexDestroy>:
    33c0:	b508      	push	{r3, lr}
    33c2:	4b03      	ldr	r3, [pc, #12]	; (33d0 <CC_PalMutexDestroy+0x10>)
    33c4:	6802      	ldr	r2, [r0, #0]
    33c6:	685b      	ldr	r3, [r3, #4]
    33c8:	6810      	ldr	r0, [r2, #0]
    33ca:	4798      	blx	r3
    33cc:	2000      	movs	r0, #0
    33ce:	bd08      	pop	{r3, pc}
    33d0:	20000080 	.word	0x20000080

000033d4 <CC_PalMutexLock>:
    33d4:	4b02      	ldr	r3, [pc, #8]	; (33e0 <CC_PalMutexLock+0xc>)
    33d6:	6802      	ldr	r2, [r0, #0]
    33d8:	689b      	ldr	r3, [r3, #8]
    33da:	6810      	ldr	r0, [r2, #0]
    33dc:	4718      	bx	r3
    33de:	bf00      	nop
    33e0:	20000080 	.word	0x20000080

000033e4 <CC_PalMutexUnlock>:
    33e4:	b508      	push	{r3, lr}
    33e6:	4b03      	ldr	r3, [pc, #12]	; (33f4 <CC_PalMutexUnlock+0x10>)
    33e8:	6802      	ldr	r2, [r0, #0]
    33ea:	68db      	ldr	r3, [r3, #12]
    33ec:	6810      	ldr	r0, [r2, #0]
    33ee:	4798      	blx	r3
    33f0:	2000      	movs	r0, #0
    33f2:	bd08      	pop	{r3, pc}
    33f4:	20000080 	.word	0x20000080

000033f8 <CC_PalPowerSaveModeInit>:
    33f8:	b570      	push	{r4, r5, r6, lr}
    33fa:	4c09      	ldr	r4, [pc, #36]	; (3420 <CC_PalPowerSaveModeInit+0x28>)
    33fc:	4d09      	ldr	r5, [pc, #36]	; (3424 <CC_PalPowerSaveModeInit+0x2c>)
    33fe:	6920      	ldr	r0, [r4, #16]
    3400:	68ab      	ldr	r3, [r5, #8]
    3402:	4798      	blx	r3
    3404:	b118      	cbz	r0, 340e <CC_PalPowerSaveModeInit+0x16>
    3406:	4b08      	ldr	r3, [pc, #32]	; (3428 <CC_PalPowerSaveModeInit+0x30>)
    3408:	4808      	ldr	r0, [pc, #32]	; (342c <CC_PalPowerSaveModeInit+0x34>)
    340a:	685b      	ldr	r3, [r3, #4]
    340c:	4798      	blx	r3
    340e:	2100      	movs	r1, #0
    3410:	4a07      	ldr	r2, [pc, #28]	; (3430 <CC_PalPowerSaveModeInit+0x38>)
    3412:	68eb      	ldr	r3, [r5, #12]
    3414:	6011      	str	r1, [r2, #0]
    3416:	6920      	ldr	r0, [r4, #16]
    3418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    341c:	4718      	bx	r3
    341e:	bf00      	nop
    3420:	20000090 	.word	0x20000090
    3424:	20000080 	.word	0x20000080
    3428:	20000070 	.word	0x20000070
    342c:	0000527c 	.word	0x0000527c
    3430:	20000850 	.word	0x20000850

00003434 <CC_PalPowerSaveModeSelect>:
    3434:	b570      	push	{r4, r5, r6, lr}
    3436:	4d1a      	ldr	r5, [pc, #104]	; (34a0 <CC_PalPowerSaveModeSelect+0x6c>)
    3438:	4e1a      	ldr	r6, [pc, #104]	; (34a4 <CC_PalPowerSaveModeSelect+0x70>)
    343a:	4604      	mov	r4, r0
    343c:	68b2      	ldr	r2, [r6, #8]
    343e:	6928      	ldr	r0, [r5, #16]
    3440:	4790      	blx	r2
    3442:	b9f0      	cbnz	r0, 3482 <CC_PalPowerSaveModeSelect+0x4e>
    3444:	b15c      	cbz	r4, 345e <CC_PalPowerSaveModeSelect+0x2a>
    3446:	4c18      	ldr	r4, [pc, #96]	; (34a8 <CC_PalPowerSaveModeSelect+0x74>)
    3448:	6823      	ldr	r3, [r4, #0]
    344a:	b1ab      	cbz	r3, 3478 <CC_PalPowerSaveModeSelect+0x44>
    344c:	2b01      	cmp	r3, #1
    344e:	d01a      	beq.n	3486 <CC_PalPowerSaveModeSelect+0x52>
    3450:	3b01      	subs	r3, #1
    3452:	6023      	str	r3, [r4, #0]
    3454:	6928      	ldr	r0, [r5, #16]
    3456:	68f3      	ldr	r3, [r6, #12]
    3458:	4798      	blx	r3
    345a:	2000      	movs	r0, #0
    345c:	bd70      	pop	{r4, r5, r6, pc}
    345e:	4c12      	ldr	r4, [pc, #72]	; (34a8 <CC_PalPowerSaveModeSelect+0x74>)
    3460:	6821      	ldr	r1, [r4, #0]
    3462:	b939      	cbnz	r1, 3474 <CC_PalPowerSaveModeSelect+0x40>
    3464:	2001      	movs	r0, #1
    3466:	4b11      	ldr	r3, [pc, #68]	; (34ac <CC_PalPowerSaveModeSelect+0x78>)
    3468:	4a11      	ldr	r2, [pc, #68]	; (34b0 <CC_PalPowerSaveModeSelect+0x7c>)
    346a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    346e:	6813      	ldr	r3, [r2, #0]
    3470:	2b00      	cmp	r3, #0
    3472:	d1fc      	bne.n	346e <CC_PalPowerSaveModeSelect+0x3a>
    3474:	3101      	adds	r1, #1
    3476:	6021      	str	r1, [r4, #0]
    3478:	68f3      	ldr	r3, [r6, #12]
    347a:	6928      	ldr	r0, [r5, #16]
    347c:	4798      	blx	r3
    347e:	2000      	movs	r0, #0
    3480:	bd70      	pop	{r4, r5, r6, pc}
    3482:	480c      	ldr	r0, [pc, #48]	; (34b4 <CC_PalPowerSaveModeSelect+0x80>)
    3484:	bd70      	pop	{r4, r5, r6, pc}
    3486:	4a0a      	ldr	r2, [pc, #40]	; (34b0 <CC_PalPowerSaveModeSelect+0x7c>)
    3488:	6813      	ldr	r3, [r2, #0]
    348a:	2b00      	cmp	r3, #0
    348c:	d1fc      	bne.n	3488 <CC_PalPowerSaveModeSelect+0x54>
    348e:	4a07      	ldr	r2, [pc, #28]	; (34ac <CC_PalPowerSaveModeSelect+0x78>)
    3490:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3494:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3498:	f000 f820 	bl	34dc <CC_HalMaskInterrupt>
    349c:	6823      	ldr	r3, [r4, #0]
    349e:	e7d7      	b.n	3450 <CC_PalPowerSaveModeSelect+0x1c>
    34a0:	20000090 	.word	0x20000090
    34a4:	20000080 	.word	0x20000080
    34a8:	20000850 	.word	0x20000850
    34ac:	50840000 	.word	0x50840000
    34b0:	50841910 	.word	0x50841910
    34b4:	ffff8fe9 	.word	0xffff8fe9

000034b8 <CC_HalInit>:
    34b8:	2000      	movs	r0, #0
    34ba:	4770      	bx	lr

000034bc <CC_HalTerminate>:
    34bc:	2000      	movs	r0, #0
    34be:	4770      	bx	lr

000034c0 <CC_HalClearInterruptBit>:
    34c0:	0543      	lsls	r3, r0, #21
    34c2:	d503      	bpl.n	34cc <CC_HalClearInterruptBit+0xc>
    34c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34c8:	4b02      	ldr	r3, [pc, #8]	; (34d4 <CC_HalClearInterruptBit+0x14>)
    34ca:	601a      	str	r2, [r3, #0]
    34cc:	4b02      	ldr	r3, [pc, #8]	; (34d8 <CC_HalClearInterruptBit+0x18>)
    34ce:	6018      	str	r0, [r3, #0]
    34d0:	4770      	bx	lr
    34d2:	bf00      	nop
    34d4:	50841108 	.word	0x50841108
    34d8:	50841a08 	.word	0x50841a08

000034dc <CC_HalMaskInterrupt>:
    34dc:	4b01      	ldr	r3, [pc, #4]	; (34e4 <CC_HalMaskInterrupt+0x8>)
    34de:	6018      	str	r0, [r3, #0]
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	50841a04 	.word	0x50841a04

000034e8 <CC_HalWaitInterruptRND>:
    34e8:	b108      	cbz	r0, 34ee <CC_HalWaitInterruptRND+0x6>
    34ea:	f000 b803 	b.w	34f4 <CC_PalWaitInterruptRND>
    34ee:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    34f2:	4770      	bx	lr

000034f4 <CC_PalWaitInterruptRND>:
    34f4:	4602      	mov	r2, r0
    34f6:	4807      	ldr	r0, [pc, #28]	; (3514 <CC_PalWaitInterruptRND+0x20>)
    34f8:	6803      	ldr	r3, [r0, #0]
    34fa:	4213      	tst	r3, r2
    34fc:	d0fc      	beq.n	34f8 <CC_PalWaitInterruptRND+0x4>
    34fe:	b121      	cbz	r1, 350a <CC_PalWaitInterruptRND+0x16>
    3500:	4b05      	ldr	r3, [pc, #20]	; (3518 <CC_PalWaitInterruptRND+0x24>)
    3502:	4806      	ldr	r0, [pc, #24]	; (351c <CC_PalWaitInterruptRND+0x28>)
    3504:	681b      	ldr	r3, [r3, #0]
    3506:	600b      	str	r3, [r1, #0]
    3508:	6003      	str	r3, [r0, #0]
    350a:	4b05      	ldr	r3, [pc, #20]	; (3520 <CC_PalWaitInterruptRND+0x2c>)
    350c:	2000      	movs	r0, #0
    350e:	601a      	str	r2, [r3, #0]
    3510:	4770      	bx	lr
    3512:	bf00      	nop
    3514:	50841a00 	.word	0x50841a00
    3518:	50841104 	.word	0x50841104
    351c:	50841108 	.word	0x50841108
    3520:	50841a08 	.word	0x50841a08

00003524 <mbedtls_platform_setup>:
    3524:	f000 b89e 	b.w	3664 <nrf_cc3xx_platform_init>

00003528 <mbedtls_platform_zeroize>:
    3528:	b138      	cbz	r0, 353a <mbedtls_platform_zeroize+0x12>
    352a:	b131      	cbz	r1, 353a <mbedtls_platform_zeroize+0x12>
    352c:	2200      	movs	r2, #0
    352e:	4401      	add	r1, r0
    3530:	4603      	mov	r3, r0
    3532:	3001      	adds	r0, #1
    3534:	4281      	cmp	r1, r0
    3536:	701a      	strb	r2, [r3, #0]
    3538:	d1fa      	bne.n	3530 <mbedtls_platform_zeroize+0x8>
    353a:	4770      	bx	lr

0000353c <mbedtls_hardware_poll>:
    353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3540:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    3544:	460e      	mov	r6, r1
    3546:	9205      	str	r2, [sp, #20]
    3548:	2100      	movs	r1, #0
    354a:	4614      	mov	r4, r2
    354c:	a812      	add	r0, sp, #72	; 0x48
    354e:	f44f 7208 	mov.w	r2, #544	; 0x220
    3552:	461d      	mov	r5, r3
    3554:	f001 fa80 	bl	4a58 <memset>
    3558:	2100      	movs	r1, #0
    355a:	2228      	movs	r2, #40	; 0x28
    355c:	a808      	add	r0, sp, #32
    355e:	9106      	str	r1, [sp, #24]
    3560:	f001 fa7a 	bl	4a58 <memset>
    3564:	2e00      	cmp	r6, #0
    3566:	d03c      	beq.n	35e2 <mbedtls_hardware_poll+0xa6>
    3568:	2d00      	cmp	r5, #0
    356a:	d03a      	beq.n	35e2 <mbedtls_hardware_poll+0xa6>
    356c:	2c00      	cmp	r4, #0
    356e:	d038      	beq.n	35e2 <mbedtls_hardware_poll+0xa6>
    3570:	2104      	movs	r1, #4
    3572:	a806      	add	r0, sp, #24
    3574:	f7ff feca 	bl	330c <CC_PalMemSetZeroPlat>
    3578:	a808      	add	r0, sp, #32
    357a:	2128      	movs	r1, #40	; 0x28
    357c:	f7ff fec6 	bl	330c <CC_PalMemSetZeroPlat>
    3580:	a808      	add	r0, sp, #32
    3582:	f000 f831 	bl	35e8 <RNG_PLAT_SetUserRngParameters>
    3586:	b178      	cbz	r0, 35a8 <mbedtls_hardware_poll+0x6c>
    3588:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    358c:	f44f 7108 	mov.w	r1, #544	; 0x220
    3590:	a812      	add	r0, sp, #72	; 0x48
    3592:	f7ff ffc9 	bl	3528 <mbedtls_platform_zeroize>
    3596:	2104      	movs	r1, #4
    3598:	a806      	add	r0, sp, #24
    359a:	f7ff ffc5 	bl	3528 <mbedtls_platform_zeroize>
    359e:	4638      	mov	r0, r7
    35a0:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    35a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35a8:	ab12      	add	r3, sp, #72	; 0x48
    35aa:	f10d 081c 	add.w	r8, sp, #28
    35ae:	4602      	mov	r2, r0
    35b0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    35b4:	9003      	str	r0, [sp, #12]
    35b6:	ab05      	add	r3, sp, #20
    35b8:	a908      	add	r1, sp, #32
    35ba:	f8cd 8000 	str.w	r8, [sp]
    35be:	a806      	add	r0, sp, #24
    35c0:	f000 fd14 	bl	3fec <LLF_RND_GetTrngSource>
    35c4:	2800      	cmp	r0, #0
    35c6:	d1df      	bne.n	3588 <mbedtls_hardware_poll+0x4c>
    35c8:	682b      	ldr	r3, [r5, #0]
    35ca:	42a3      	cmp	r3, r4
    35cc:	d3dc      	bcc.n	3588 <mbedtls_hardware_poll+0x4c>
    35ce:	f8d8 1000 	ldr.w	r1, [r8]
    35d2:	4607      	mov	r7, r0
    35d4:	4622      	mov	r2, r4
    35d6:	4630      	mov	r0, r6
    35d8:	3108      	adds	r1, #8
    35da:	f7ff fe95 	bl	3308 <CC_PalMemCopyPlat>
    35de:	602c      	str	r4, [r5, #0]
    35e0:	e7d4      	b.n	358c <mbedtls_hardware_poll+0x50>
    35e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    35e6:	e7da      	b.n	359e <mbedtls_hardware_poll+0x62>

000035e8 <RNG_PLAT_SetUserRngParameters>:
    35e8:	231c      	movs	r3, #28
    35ea:	b530      	push	{r4, r5, lr}
    35ec:	b083      	sub	sp, #12
    35ee:	a901      	add	r1, sp, #4
    35f0:	4604      	mov	r4, r0
    35f2:	9301      	str	r3, [sp, #4]
    35f4:	f000 f9ce 	bl	3994 <CC_PalTrngParamGet>
    35f8:	4605      	mov	r5, r0
    35fa:	b938      	cbnz	r0, 360c <RNG_PLAT_SetUserRngParameters+0x24>
    35fc:	9b01      	ldr	r3, [sp, #4]
    35fe:	2b1c      	cmp	r3, #28
    3600:	d007      	beq.n	3612 <RNG_PLAT_SetUserRngParameters+0x2a>
    3602:	4d16      	ldr	r5, [pc, #88]	; (365c <RNG_PLAT_SetUserRngParameters+0x74>)
    3604:	4620      	mov	r0, r4
    3606:	211c      	movs	r1, #28
    3608:	f7ff fe80 	bl	330c <CC_PalMemSetZeroPlat>
    360c:	4628      	mov	r0, r5
    360e:	b003      	add	sp, #12
    3610:	bd30      	pop	{r4, r5, pc}
    3612:	2101      	movs	r1, #1
    3614:	e9d4 3200 	ldrd	r3, r2, [r4]
    3618:	3b00      	subs	r3, #0
    361a:	bf18      	it	ne
    361c:	2301      	movne	r3, #1
    361e:	61e1      	str	r1, [r4, #28]
    3620:	b10a      	cbz	r2, 3626 <RNG_PLAT_SetUserRngParameters+0x3e>
    3622:	f043 0302 	orr.w	r3, r3, #2
    3626:	68a2      	ldr	r2, [r4, #8]
    3628:	b932      	cbnz	r2, 3638 <RNG_PLAT_SetUserRngParameters+0x50>
    362a:	68e2      	ldr	r2, [r4, #12]
    362c:	b942      	cbnz	r2, 3640 <RNG_PLAT_SetUserRngParameters+0x58>
    362e:	e9c4 3208 	strd	r3, r2, [r4, #32]
    3632:	b98b      	cbnz	r3, 3658 <RNG_PLAT_SetUserRngParameters+0x70>
    3634:	4d0a      	ldr	r5, [pc, #40]	; (3660 <RNG_PLAT_SetUserRngParameters+0x78>)
    3636:	e7e5      	b.n	3604 <RNG_PLAT_SetUserRngParameters+0x1c>
    3638:	68e2      	ldr	r2, [r4, #12]
    363a:	f043 0304 	orr.w	r3, r3, #4
    363e:	b13a      	cbz	r2, 3650 <RNG_PLAT_SetUserRngParameters+0x68>
    3640:	2200      	movs	r2, #0
    3642:	4628      	mov	r0, r5
    3644:	f043 0308 	orr.w	r3, r3, #8
    3648:	e9c4 3208 	strd	r3, r2, [r4, #32]
    364c:	b003      	add	sp, #12
    364e:	bd30      	pop	{r4, r5, pc}
    3650:	4615      	mov	r5, r2
    3652:	e9c4 3208 	strd	r3, r2, [r4, #32]
    3656:	e7d9      	b.n	360c <RNG_PLAT_SetUserRngParameters+0x24>
    3658:	4615      	mov	r5, r2
    365a:	e7d7      	b.n	360c <RNG_PLAT_SetUserRngParameters+0x24>
    365c:	00f00c37 	.word	0x00f00c37
    3660:	00f00c0e 	.word	0x00f00c0e

00003664 <nrf_cc3xx_platform_init>:
    3664:	b510      	push	{r4, lr}
    3666:	4c0c      	ldr	r4, [pc, #48]	; (3698 <nrf_cc3xx_platform_init+0x34>)
    3668:	6823      	ldr	r3, [r4, #0]
    366a:	b113      	cbz	r3, 3672 <nrf_cc3xx_platform_init+0xe>
    366c:	4b0b      	ldr	r3, [pc, #44]	; (369c <nrf_cc3xx_platform_init+0x38>)
    366e:	681b      	ldr	r3, [r3, #0]
    3670:	b92b      	cbnz	r3, 367e <nrf_cc3xx_platform_init+0x1a>
    3672:	f000 f94f 	bl	3914 <CC_LibInit>
    3676:	b930      	cbnz	r0, 3686 <nrf_cc3xx_platform_init+0x22>
    3678:	2201      	movs	r2, #1
    367a:	4b08      	ldr	r3, [pc, #32]	; (369c <nrf_cc3xx_platform_init+0x38>)
    367c:	601a      	str	r2, [r3, #0]
    367e:	2301      	movs	r3, #1
    3680:	2000      	movs	r0, #0
    3682:	6023      	str	r3, [r4, #0]
    3684:	bd10      	pop	{r4, pc}
    3686:	3801      	subs	r0, #1
    3688:	2806      	cmp	r0, #6
    368a:	d901      	bls.n	3690 <nrf_cc3xx_platform_init+0x2c>
    368c:	4804      	ldr	r0, [pc, #16]	; (36a0 <nrf_cc3xx_platform_init+0x3c>)
    368e:	bd10      	pop	{r4, pc}
    3690:	4b04      	ldr	r3, [pc, #16]	; (36a4 <nrf_cc3xx_platform_init+0x40>)
    3692:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3696:	bd10      	pop	{r4, pc}
    3698:	20000854 	.word	0x20000854
    369c:	20000858 	.word	0x20000858
    36a0:	ffff8ffe 	.word	0xffff8ffe
    36a4:	0000529c 	.word	0x0000529c

000036a8 <nrf_cc3xx_platform_init_no_rng>:
    36a8:	b510      	push	{r4, lr}
    36aa:	4c0a      	ldr	r4, [pc, #40]	; (36d4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    36ac:	6823      	ldr	r3, [r4, #0]
    36ae:	b11b      	cbz	r3, 36b8 <nrf_cc3xx_platform_init_no_rng+0x10>
    36b0:	2301      	movs	r3, #1
    36b2:	2000      	movs	r0, #0
    36b4:	6023      	str	r3, [r4, #0]
    36b6:	bd10      	pop	{r4, pc}
    36b8:	f000 f898 	bl	37ec <CC_LibInitNoRng>
    36bc:	2800      	cmp	r0, #0
    36be:	d0f7      	beq.n	36b0 <nrf_cc3xx_platform_init_no_rng+0x8>
    36c0:	3801      	subs	r0, #1
    36c2:	2806      	cmp	r0, #6
    36c4:	d803      	bhi.n	36ce <nrf_cc3xx_platform_init_no_rng+0x26>
    36c6:	4b04      	ldr	r3, [pc, #16]	; (36d8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    36c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    36cc:	bd10      	pop	{r4, pc}
    36ce:	4803      	ldr	r0, [pc, #12]	; (36dc <nrf_cc3xx_platform_init_no_rng+0x34>)
    36d0:	bd10      	pop	{r4, pc}
    36d2:	bf00      	nop
    36d4:	20000854 	.word	0x20000854
    36d8:	0000529c 	.word	0x0000529c
    36dc:	ffff8ffe 	.word	0xffff8ffe

000036e0 <nrf_cc3xx_platform_abort>:
    36e0:	f3bf 8f4f 	dsb	sy
    36e4:	4905      	ldr	r1, [pc, #20]	; (36fc <nrf_cc3xx_platform_abort+0x1c>)
    36e6:	4b06      	ldr	r3, [pc, #24]	; (3700 <nrf_cc3xx_platform_abort+0x20>)
    36e8:	68ca      	ldr	r2, [r1, #12]
    36ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    36ee:	4313      	orrs	r3, r2
    36f0:	60cb      	str	r3, [r1, #12]
    36f2:	f3bf 8f4f 	dsb	sy
    36f6:	bf00      	nop
    36f8:	e7fd      	b.n	36f6 <nrf_cc3xx_platform_abort+0x16>
    36fa:	bf00      	nop
    36fc:	e000ed00 	.word	0xe000ed00
    3700:	05fa0004 	.word	0x05fa0004

00003704 <CC_PalAbort>:
    3704:	4b01      	ldr	r3, [pc, #4]	; (370c <CC_PalAbort+0x8>)
    3706:	685b      	ldr	r3, [r3, #4]
    3708:	4718      	bx	r3
    370a:	bf00      	nop
    370c:	20000070 	.word	0x20000070

00003710 <nrf_cc3xx_platform_set_abort>:
    3710:	4b02      	ldr	r3, [pc, #8]	; (371c <nrf_cc3xx_platform_set_abort+0xc>)
    3712:	e9d0 1200 	ldrd	r1, r2, [r0]
    3716:	e9c3 1200 	strd	r1, r2, [r3]
    371a:	4770      	bx	lr
    371c:	20000070 	.word	0x20000070

00003720 <mutex_unlock>:
    3720:	b148      	cbz	r0, 3736 <mutex_unlock+0x16>
    3722:	6843      	ldr	r3, [r0, #4]
    3724:	b12b      	cbz	r3, 3732 <mutex_unlock+0x12>
    3726:	f3bf 8f5f 	dmb	sy
    372a:	2300      	movs	r3, #0
    372c:	6003      	str	r3, [r0, #0]
    372e:	4618      	mov	r0, r3
    3730:	4770      	bx	lr
    3732:	4802      	ldr	r0, [pc, #8]	; (373c <mutex_unlock+0x1c>)
    3734:	4770      	bx	lr
    3736:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    373a:	4770      	bx	lr
    373c:	ffff8fea 	.word	0xffff8fea

00003740 <mutex_free>:
    3740:	b510      	push	{r4, lr}
    3742:	4604      	mov	r4, r0
    3744:	b128      	cbz	r0, 3752 <mutex_free+0x12>
    3746:	6863      	ldr	r3, [r4, #4]
    3748:	b113      	cbz	r3, 3750 <mutex_free+0x10>
    374a:	2300      	movs	r3, #0
    374c:	6023      	str	r3, [r4, #0]
    374e:	6063      	str	r3, [r4, #4]
    3750:	bd10      	pop	{r4, pc}
    3752:	4b02      	ldr	r3, [pc, #8]	; (375c <mutex_free+0x1c>)
    3754:	4802      	ldr	r0, [pc, #8]	; (3760 <mutex_free+0x20>)
    3756:	685b      	ldr	r3, [r3, #4]
    3758:	4798      	blx	r3
    375a:	e7f4      	b.n	3746 <mutex_free+0x6>
    375c:	20000070 	.word	0x20000070
    3760:	000052b8 	.word	0x000052b8

00003764 <mutex_init>:
    3764:	b510      	push	{r4, lr}
    3766:	4604      	mov	r4, r0
    3768:	b130      	cbz	r0, 3778 <mutex_init+0x14>
    376a:	2200      	movs	r2, #0
    376c:	6863      	ldr	r3, [r4, #4]
    376e:	6022      	str	r2, [r4, #0]
    3770:	f043 0301 	orr.w	r3, r3, #1
    3774:	6063      	str	r3, [r4, #4]
    3776:	bd10      	pop	{r4, pc}
    3778:	4801      	ldr	r0, [pc, #4]	; (3780 <mutex_init+0x1c>)
    377a:	f7ff ffc3 	bl	3704 <CC_PalAbort>
    377e:	e7f4      	b.n	376a <mutex_init+0x6>
    3780:	000052e0 	.word	0x000052e0

00003784 <mutex_lock>:
    3784:	b180      	cbz	r0, 37a8 <mutex_lock+0x24>
    3786:	6843      	ldr	r3, [r0, #4]
    3788:	b163      	cbz	r3, 37a4 <mutex_lock+0x20>
    378a:	2201      	movs	r2, #1
    378c:	e8d0 3fef 	ldaex	r3, [r0]
    3790:	e8c0 2fe1 	stlex	r1, r2, [r0]
    3794:	2900      	cmp	r1, #0
    3796:	d1f9      	bne.n	378c <mutex_lock+0x8>
    3798:	2b01      	cmp	r3, #1
    379a:	d0f7      	beq.n	378c <mutex_lock+0x8>
    379c:	f3bf 8f5f 	dmb	sy
    37a0:	2000      	movs	r0, #0
    37a2:	4770      	bx	lr
    37a4:	4802      	ldr	r0, [pc, #8]	; (37b0 <mutex_lock+0x2c>)
    37a6:	4770      	bx	lr
    37a8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop
    37b0:	ffff8fea 	.word	0xffff8fea

000037b4 <nrf_cc3xx_platform_set_mutexes>:
    37b4:	b470      	push	{r4, r5, r6}
    37b6:	4b0b      	ldr	r3, [pc, #44]	; (37e4 <nrf_cc3xx_platform_set_mutexes+0x30>)
    37b8:	6806      	ldr	r6, [r0, #0]
    37ba:	68c2      	ldr	r2, [r0, #12]
    37bc:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    37c0:	e9c3 4202 	strd	r4, r2, [r3, #8]
    37c4:	e9c3 6500 	strd	r6, r5, [r3]
    37c8:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    37cc:	680e      	ldr	r6, [r1, #0]
    37ce:	4b06      	ldr	r3, [pc, #24]	; (37e8 <nrf_cc3xx_platform_set_mutexes+0x34>)
    37d0:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    37d4:	e9c3 6500 	strd	r6, r5, [r3]
    37d8:	e9c3 4002 	strd	r4, r0, [r3, #8]
    37dc:	611a      	str	r2, [r3, #16]
    37de:	bc70      	pop	{r4, r5, r6}
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	20000080 	.word	0x20000080
    37e8:	20000090 	.word	0x20000090

000037ec <CC_LibInitNoRng>:
    37ec:	b510      	push	{r4, lr}
    37ee:	f7ff fe63 	bl	34b8 <CC_HalInit>
    37f2:	b120      	cbz	r0, 37fe <CC_LibInitNoRng+0x12>
    37f4:	2403      	movs	r4, #3
    37f6:	f7ff fdbb 	bl	3370 <CC_PalTerminate>
    37fa:	4620      	mov	r0, r4
    37fc:	bd10      	pop	{r4, pc}
    37fe:	f7ff fd89 	bl	3314 <CC_PalInit>
    3802:	b990      	cbnz	r0, 382a <CC_LibInitNoRng+0x3e>
    3804:	f7ff fe16 	bl	3434 <CC_PalPowerSaveModeSelect>
    3808:	b990      	cbnz	r0, 3830 <CC_LibInitNoRng+0x44>
    380a:	4b0f      	ldr	r3, [pc, #60]	; (3848 <CC_LibInitNoRng+0x5c>)
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	0e1b      	lsrs	r3, r3, #24
    3810:	2bf0      	cmp	r3, #240	; 0xf0
    3812:	d108      	bne.n	3826 <CC_LibInitNoRng+0x3a>
    3814:	4a0d      	ldr	r2, [pc, #52]	; (384c <CC_LibInitNoRng+0x60>)
    3816:	4b0e      	ldr	r3, [pc, #56]	; (3850 <CC_LibInitNoRng+0x64>)
    3818:	6812      	ldr	r2, [r2, #0]
    381a:	429a      	cmp	r2, r3
    381c:	d00a      	beq.n	3834 <CC_LibInitNoRng+0x48>
    381e:	2407      	movs	r4, #7
    3820:	f7ff fe4c 	bl	34bc <CC_HalTerminate>
    3824:	e7e7      	b.n	37f6 <CC_LibInitNoRng+0xa>
    3826:	2406      	movs	r4, #6
    3828:	e7fa      	b.n	3820 <CC_LibInitNoRng+0x34>
    382a:	2404      	movs	r4, #4
    382c:	4620      	mov	r0, r4
    382e:	bd10      	pop	{r4, pc}
    3830:	2400      	movs	r4, #0
    3832:	e7f5      	b.n	3820 <CC_LibInitNoRng+0x34>
    3834:	2001      	movs	r0, #1
    3836:	f7ff fdfd 	bl	3434 <CC_PalPowerSaveModeSelect>
    383a:	4604      	mov	r4, r0
    383c:	2800      	cmp	r0, #0
    383e:	d1f7      	bne.n	3830 <CC_LibInitNoRng+0x44>
    3840:	4b04      	ldr	r3, [pc, #16]	; (3854 <CC_LibInitNoRng+0x68>)
    3842:	6018      	str	r0, [r3, #0]
    3844:	e7d9      	b.n	37fa <CC_LibInitNoRng+0xe>
    3846:	bf00      	nop
    3848:	50841928 	.word	0x50841928
    384c:	50841a24 	.word	0x50841a24
    3850:	20e00000 	.word	0x20e00000
    3854:	50841a0c 	.word	0x50841a0c

00003858 <CC_LibInitRngModule>:
    3858:	b530      	push	{r4, r5, lr}
    385a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    385e:	f44f 7208 	mov.w	r2, #544	; 0x220
    3862:	2100      	movs	r1, #0
    3864:	a80c      	add	r0, sp, #48	; 0x30
    3866:	f001 f8f7 	bl	4a58 <memset>
    386a:	2100      	movs	r1, #0
    386c:	2228      	movs	r2, #40	; 0x28
    386e:	a802      	add	r0, sp, #8
    3870:	9101      	str	r1, [sp, #4]
    3872:	f001 f8f1 	bl	4a58 <memset>
    3876:	a802      	add	r0, sp, #8
    3878:	f7ff feb6 	bl	35e8 <RNG_PLAT_SetUserRngParameters>
    387c:	b120      	cbz	r0, 3888 <CC_LibInitRngModule+0x30>
    387e:	2405      	movs	r4, #5
    3880:	4620      	mov	r0, r4
    3882:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    3886:	bd30      	pop	{r4, r5, pc}
    3888:	4d1d      	ldr	r5, [pc, #116]	; (3900 <CC_LibInitRngModule+0xa8>)
    388a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    388e:	6828      	ldr	r0, [r5, #0]
    3890:	f7ff fda0 	bl	33d4 <CC_PalMutexLock>
    3894:	4604      	mov	r4, r0
    3896:	b9e8      	cbnz	r0, 38d4 <CC_LibInitRngModule+0x7c>
    3898:	2000      	movs	r0, #0
    389a:	f7ff fdcb 	bl	3434 <CC_PalPowerSaveModeSelect>
    389e:	bb58      	cbnz	r0, 38f8 <CC_LibInitRngModule+0xa0>
    38a0:	aa0c      	add	r2, sp, #48	; 0x30
    38a2:	a902      	add	r1, sp, #8
    38a4:	a801      	add	r0, sp, #4
    38a6:	f000 fbed 	bl	4084 <LLF_RND_RunTrngStartupTest>
    38aa:	4604      	mov	r4, r0
    38ac:	2001      	movs	r0, #1
    38ae:	f7ff fdc1 	bl	3434 <CC_PalPowerSaveModeSelect>
    38b2:	b9e8      	cbnz	r0, 38f0 <CC_LibInitRngModule+0x98>
    38b4:	6828      	ldr	r0, [r5, #0]
    38b6:	f7ff fd95 	bl	33e4 <CC_PalMutexUnlock>
    38ba:	b928      	cbnz	r0, 38c8 <CC_LibInitRngModule+0x70>
    38bc:	2c00      	cmp	r4, #0
    38be:	d1de      	bne.n	387e <CC_LibInitRngModule+0x26>
    38c0:	4620      	mov	r0, r4
    38c2:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    38c6:	bd30      	pop	{r4, r5, pc}
    38c8:	480e      	ldr	r0, [pc, #56]	; (3904 <CC_LibInitRngModule+0xac>)
    38ca:	f7ff ff1b 	bl	3704 <CC_PalAbort>
    38ce:	2c00      	cmp	r4, #0
    38d0:	d0f6      	beq.n	38c0 <CC_LibInitRngModule+0x68>
    38d2:	e7d4      	b.n	387e <CC_LibInitRngModule+0x26>
    38d4:	480c      	ldr	r0, [pc, #48]	; (3908 <CC_LibInitRngModule+0xb0>)
    38d6:	f7ff ff15 	bl	3704 <CC_PalAbort>
    38da:	2c01      	cmp	r4, #1
    38dc:	d1dc      	bne.n	3898 <CC_LibInitRngModule+0x40>
    38de:	6828      	ldr	r0, [r5, #0]
    38e0:	f7ff fd80 	bl	33e4 <CC_PalMutexUnlock>
    38e4:	2800      	cmp	r0, #0
    38e6:	d0ca      	beq.n	387e <CC_LibInitRngModule+0x26>
    38e8:	4806      	ldr	r0, [pc, #24]	; (3904 <CC_LibInitRngModule+0xac>)
    38ea:	f7ff ff0b 	bl	3704 <CC_PalAbort>
    38ee:	e7c6      	b.n	387e <CC_LibInitRngModule+0x26>
    38f0:	4806      	ldr	r0, [pc, #24]	; (390c <CC_LibInitRngModule+0xb4>)
    38f2:	f7ff ff07 	bl	3704 <CC_PalAbort>
    38f6:	e7dd      	b.n	38b4 <CC_LibInitRngModule+0x5c>
    38f8:	4805      	ldr	r0, [pc, #20]	; (3910 <CC_LibInitRngModule+0xb8>)
    38fa:	f7ff ff03 	bl	3704 <CC_PalAbort>
    38fe:	e7cf      	b.n	38a0 <CC_LibInitRngModule+0x48>
    3900:	2000006c 	.word	0x2000006c
    3904:	0000531c 	.word	0x0000531c
    3908:	00005304 	.word	0x00005304
    390c:	00005354 	.word	0x00005354
    3910:	00005334 	.word	0x00005334

00003914 <CC_LibInit>:
    3914:	b508      	push	{r3, lr}
    3916:	f7ff fdcf 	bl	34b8 <CC_HalInit>
    391a:	b118      	cbz	r0, 3924 <CC_LibInit+0x10>
    391c:	f7ff fd28 	bl	3370 <CC_PalTerminate>
    3920:	2003      	movs	r0, #3
    3922:	bd08      	pop	{r3, pc}
    3924:	f7ff fcf6 	bl	3314 <CC_PalInit>
    3928:	b9c0      	cbnz	r0, 395c <CC_LibInit+0x48>
    392a:	f7ff fd83 	bl	3434 <CC_PalPowerSaveModeSelect>
    392e:	b9b8      	cbnz	r0, 3960 <CC_LibInit+0x4c>
    3930:	4b14      	ldr	r3, [pc, #80]	; (3984 <CC_LibInit+0x70>)
    3932:	681b      	ldr	r3, [r3, #0]
    3934:	0e1b      	lsrs	r3, r3, #24
    3936:	2bf0      	cmp	r3, #240	; 0xf0
    3938:	d10a      	bne.n	3950 <CC_LibInit+0x3c>
    393a:	4a13      	ldr	r2, [pc, #76]	; (3988 <CC_LibInit+0x74>)
    393c:	4b13      	ldr	r3, [pc, #76]	; (398c <CC_LibInit+0x78>)
    393e:	6812      	ldr	r2, [r2, #0]
    3940:	429a      	cmp	r2, r3
    3942:	d017      	beq.n	3974 <CC_LibInit+0x60>
    3944:	f7ff fdba 	bl	34bc <CC_HalTerminate>
    3948:	f7ff fd12 	bl	3370 <CC_PalTerminate>
    394c:	2007      	movs	r0, #7
    394e:	bd08      	pop	{r3, pc}
    3950:	f7ff fdb4 	bl	34bc <CC_HalTerminate>
    3954:	f7ff fd0c 	bl	3370 <CC_PalTerminate>
    3958:	2006      	movs	r0, #6
    395a:	bd08      	pop	{r3, pc}
    395c:	2004      	movs	r0, #4
    395e:	bd08      	pop	{r3, pc}
    3960:	f7ff fdac 	bl	34bc <CC_HalTerminate>
    3964:	f7ff fd04 	bl	3370 <CC_PalTerminate>
    3968:	f7ff ff76 	bl	3858 <CC_LibInitRngModule>
    396c:	2800      	cmp	r0, #0
    396e:	bf18      	it	ne
    3970:	2005      	movne	r0, #5
    3972:	bd08      	pop	{r3, pc}
    3974:	2001      	movs	r0, #1
    3976:	f7ff fd5d 	bl	3434 <CC_PalPowerSaveModeSelect>
    397a:	2800      	cmp	r0, #0
    397c:	d1f0      	bne.n	3960 <CC_LibInit+0x4c>
    397e:	4b04      	ldr	r3, [pc, #16]	; (3990 <CC_LibInit+0x7c>)
    3980:	6018      	str	r0, [r3, #0]
    3982:	e7f1      	b.n	3968 <CC_LibInit+0x54>
    3984:	50841928 	.word	0x50841928
    3988:	50841a24 	.word	0x50841a24
    398c:	20e00000 	.word	0x20e00000
    3990:	50841a0c 	.word	0x50841a0c

00003994 <CC_PalTrngParamGet>:
    3994:	2800      	cmp	r0, #0
    3996:	d066      	beq.n	3a66 <CC_PalTrngParamGet+0xd2>
    3998:	2900      	cmp	r1, #0
    399a:	d064      	beq.n	3a66 <CC_PalTrngParamGet+0xd2>
    399c:	680b      	ldr	r3, [r1, #0]
    399e:	2b1c      	cmp	r3, #28
    39a0:	d161      	bne.n	3a66 <CC_PalTrngParamGet+0xd2>
    39a2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39a6:	4a3b      	ldr	r2, [pc, #236]	; (3a94 <CC_PalTrngParamGet+0x100>)
    39a8:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    39ac:	4291      	cmp	r1, r2
    39ae:	d05c      	beq.n	3a6a <CC_PalTrngParamGet+0xd6>
    39b0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    39b4:	3201      	adds	r2, #1
    39b6:	d058      	beq.n	3a6a <CC_PalTrngParamGet+0xd6>
    39b8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    39bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39c0:	6002      	str	r2, [r0, #0]
    39c2:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    39c6:	4a34      	ldr	r2, [pc, #208]	; (3a98 <CC_PalTrngParamGet+0x104>)
    39c8:	4291      	cmp	r1, r2
    39ca:	d060      	beq.n	3a8e <CC_PalTrngParamGet+0xfa>
    39cc:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    39d0:	3201      	adds	r2, #1
    39d2:	d05c      	beq.n	3a8e <CC_PalTrngParamGet+0xfa>
    39d4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    39d8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39dc:	6042      	str	r2, [r0, #4]
    39de:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    39e2:	f512 7f94 	cmn.w	r2, #296	; 0x128
    39e6:	d04f      	beq.n	3a88 <CC_PalTrngParamGet+0xf4>
    39e8:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    39ec:	3201      	adds	r2, #1
    39ee:	d04b      	beq.n	3a88 <CC_PalTrngParamGet+0xf4>
    39f0:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    39f4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39f8:	6082      	str	r2, [r0, #8]
    39fa:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    39fe:	4a27      	ldr	r2, [pc, #156]	; (3a9c <CC_PalTrngParamGet+0x108>)
    3a00:	4291      	cmp	r1, r2
    3a02:	d03e      	beq.n	3a82 <CC_PalTrngParamGet+0xee>
    3a04:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3a08:	3201      	adds	r2, #1
    3a0a:	d03a      	beq.n	3a82 <CC_PalTrngParamGet+0xee>
    3a0c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3a10:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a14:	60c2      	str	r2, [r0, #12]
    3a16:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3a1a:	3270      	adds	r2, #112	; 0x70
    3a1c:	d02f      	beq.n	3a7e <CC_PalTrngParamGet+0xea>
    3a1e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3a22:	3201      	adds	r2, #1
    3a24:	d02b      	beq.n	3a7e <CC_PalTrngParamGet+0xea>
    3a26:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3a2a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a2e:	6102      	str	r2, [r0, #16]
    3a30:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3a34:	32af      	adds	r2, #175	; 0xaf
    3a36:	d020      	beq.n	3a7a <CC_PalTrngParamGet+0xe6>
    3a38:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3a3c:	3201      	adds	r2, #1
    3a3e:	d01c      	beq.n	3a7a <CC_PalTrngParamGet+0xe6>
    3a40:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3a44:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a48:	6142      	str	r2, [r0, #20]
    3a4a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    3a4e:	4a14      	ldr	r2, [pc, #80]	; (3aa0 <CC_PalTrngParamGet+0x10c>)
    3a50:	4291      	cmp	r1, r2
    3a52:	d00d      	beq.n	3a70 <CC_PalTrngParamGet+0xdc>
    3a54:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    3a58:	3201      	adds	r2, #1
    3a5a:	d009      	beq.n	3a70 <CC_PalTrngParamGet+0xdc>
    3a5c:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    3a60:	6183      	str	r3, [r0, #24]
    3a62:	2000      	movs	r0, #0
    3a64:	4770      	bx	lr
    3a66:	2001      	movs	r0, #1
    3a68:	4770      	bx	lr
    3a6a:	f640 02fc 	movw	r2, #2300	; 0x8fc
    3a6e:	e7a5      	b.n	39bc <CC_PalTrngParamGet+0x28>
    3a70:	f240 3337 	movw	r3, #823	; 0x337
    3a74:	6183      	str	r3, [r0, #24]
    3a76:	2000      	movs	r0, #0
    3a78:	4770      	bx	lr
    3a7a:	2251      	movs	r2, #81	; 0x51
    3a7c:	e7e2      	b.n	3a44 <CC_PalTrngParamGet+0xb0>
    3a7e:	2290      	movs	r2, #144	; 0x90
    3a80:	e7d3      	b.n	3a2a <CC_PalTrngParamGet+0x96>
    3a82:	f642 1204 	movw	r2, #10500	; 0x2904
    3a86:	e7c3      	b.n	3a10 <CC_PalTrngParamGet+0x7c>
    3a88:	f640 62d8 	movw	r2, #3800	; 0xed8
    3a8c:	e7b2      	b.n	39f4 <CC_PalTrngParamGet+0x60>
    3a8e:	f242 02d0 	movw	r2, #8400	; 0x20d0
    3a92:	e7a1      	b.n	39d8 <CC_PalTrngParamGet+0x44>
    3a94:	fffff8fc 	.word	0xfffff8fc
    3a98:	ffff20d0 	.word	0xffff20d0
    3a9c:	ffff2904 	.word	0xffff2904
    3aa0:	fffff337 	.word	0xfffff337

00003aa4 <startTrngHW>:
    3aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3aa8:	2800      	cmp	r0, #0
    3aaa:	d077      	beq.n	3b9c <startTrngHW+0xf8>
    3aac:	460c      	mov	r4, r1
    3aae:	2900      	cmp	r1, #0
    3ab0:	d074      	beq.n	3b9c <startTrngHW+0xf8>
    3ab2:	461d      	mov	r5, r3
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d071      	beq.n	3b9c <startTrngHW+0xf8>
    3ab8:	4606      	mov	r6, r0
    3aba:	b11a      	cbz	r2, 3ac4 <startTrngHW+0x20>
    3abc:	2201      	movs	r2, #1
    3abe:	2300      	movs	r3, #0
    3ac0:	602a      	str	r2, [r5, #0]
    3ac2:	6003      	str	r3, [r0, #0]
    3ac4:	682b      	ldr	r3, [r5, #0]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d064      	beq.n	3b94 <startTrngHW+0xf0>
    3aca:	4629      	mov	r1, r5
    3acc:	4620      	mov	r0, r4
    3ace:	f000 fb15 	bl	40fc <LLF_RND_GetFastestRosc>
    3ad2:	4607      	mov	r7, r0
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d15e      	bne.n	3b96 <startTrngHW+0xf2>
    3ad8:	4621      	mov	r1, r4
    3ada:	6828      	ldr	r0, [r5, #0]
    3adc:	f000 faf0 	bl	40c0 <LLF_RND_GetRoscSampleCnt>
    3ae0:	4607      	mov	r7, r0
    3ae2:	2800      	cmp	r0, #0
    3ae4:	d157      	bne.n	3b96 <startTrngHW+0xf2>
    3ae6:	682b      	ldr	r3, [r5, #0]
    3ae8:	2b08      	cmp	r3, #8
    3aea:	d066      	beq.n	3bba <startTrngHW+0x116>
    3aec:	2b04      	cmp	r3, #4
    3aee:	d067      	beq.n	3bc0 <startTrngHW+0x11c>
    3af0:	f1a3 0802 	sub.w	r8, r3, #2
    3af4:	fab8 f888 	clz	r8, r8
    3af8:	ea4f 1858 	mov.w	r8, r8, lsr #5
    3afc:	2301      	movs	r3, #1
    3afe:	469c      	mov	ip, r3
    3b00:	4a31      	ldr	r2, [pc, #196]	; (3bc8 <startTrngHW+0x124>)
    3b02:	4932      	ldr	r1, [pc, #200]	; (3bcc <startTrngHW+0x128>)
    3b04:	6013      	str	r3, [r2, #0]
    3b06:	4610      	mov	r0, r2
    3b08:	600b      	str	r3, [r1, #0]
    3b0a:	3a94      	subs	r2, #148	; 0x94
    3b0c:	f8c0 c000 	str.w	ip, [r0]
    3b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b12:	6013      	str	r3, [r2, #0]
    3b14:	6811      	ldr	r1, [r2, #0]
    3b16:	428b      	cmp	r3, r1
    3b18:	d1f8      	bne.n	3b0c <startTrngHW+0x68>
    3b1a:	f04f 0900 	mov.w	r9, #0
    3b1e:	4b2c      	ldr	r3, [pc, #176]	; (3bd0 <startTrngHW+0x12c>)
    3b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b24:	f8c3 9000 	str.w	r9, [r3]
    3b28:	f7ff fcca 	bl	34c0 <CC_HalClearInterruptBit>
    3b2c:	4b29      	ldr	r3, [pc, #164]	; (3bd4 <startTrngHW+0x130>)
    3b2e:	4a2a      	ldr	r2, [pc, #168]	; (3bd8 <startTrngHW+0x134>)
    3b30:	4648      	mov	r0, r9
    3b32:	601a      	str	r2, [r3, #0]
    3b34:	f7ff fcd2 	bl	34dc <CC_HalMaskInterrupt>
    3b38:	4a28      	ldr	r2, [pc, #160]	; (3bdc <startTrngHW+0x138>)
    3b3a:	4b29      	ldr	r3, [pc, #164]	; (3be0 <startTrngHW+0x13c>)
    3b3c:	f8c2 8000 	str.w	r8, [r2]
    3b40:	6818      	ldr	r0, [r3, #0]
    3b42:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    3b46:	f7ff fcc9 	bl	34dc <CC_HalMaskInterrupt>
    3b4a:	220a      	movs	r2, #10
    3b4c:	4b25      	ldr	r3, [pc, #148]	; (3be4 <startTrngHW+0x140>)
    3b4e:	601a      	str	r2, [r3, #0]
    3b50:	9a08      	ldr	r2, [sp, #32]
    3b52:	6923      	ldr	r3, [r4, #16]
    3b54:	2a01      	cmp	r2, #1
    3b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3b58:	d024      	beq.n	3ba4 <startTrngHW+0x100>
    3b5a:	4a23      	ldr	r2, [pc, #140]	; (3be8 <startTrngHW+0x144>)
    3b5c:	fba2 2303 	umull	r2, r3, r2, r3
    3b60:	091b      	lsrs	r3, r3, #4
    3b62:	2201      	movs	r2, #1
    3b64:	fb03 f301 	mul.w	r3, r3, r1
    3b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b6c:	491f      	ldr	r1, [pc, #124]	; (3bec <startTrngHW+0x148>)
    3b6e:	03db      	lsls	r3, r3, #15
    3b70:	099b      	lsrs	r3, r3, #6
    3b72:	600b      	str	r3, [r1, #0]
    3b74:	4b16      	ldr	r3, [pc, #88]	; (3bd0 <startTrngHW+0x12c>)
    3b76:	4638      	mov	r0, r7
    3b78:	601a      	str	r2, [r3, #0]
    3b7a:	6833      	ldr	r3, [r6, #0]
    3b7c:	682a      	ldr	r2, [r5, #0]
    3b7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3b82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    3b86:	6033      	str	r3, [r6, #0]
    3b88:	682a      	ldr	r2, [r5, #0]
    3b8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b8e:	6033      	str	r3, [r6, #0]
    3b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b94:	4f16      	ldr	r7, [pc, #88]	; (3bf0 <startTrngHW+0x14c>)
    3b96:	4638      	mov	r0, r7
    3b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b9c:	4f15      	ldr	r7, [pc, #84]	; (3bf4 <startTrngHW+0x150>)
    3b9e:	4638      	mov	r0, r7
    3ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ba4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3ba8:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    3bac:	3201      	adds	r2, #1
    3bae:	d002      	beq.n	3bb6 <startTrngHW+0x112>
    3bb0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    3bb4:	e7d1      	b.n	3b5a <startTrngHW+0xb6>
    3bb6:	2316      	movs	r3, #22
    3bb8:	e7d3      	b.n	3b62 <startTrngHW+0xbe>
    3bba:	f04f 0803 	mov.w	r8, #3
    3bbe:	e79d      	b.n	3afc <startTrngHW+0x58>
    3bc0:	f04f 0802 	mov.w	r8, #2
    3bc4:	e79a      	b.n	3afc <startTrngHW+0x58>
    3bc6:	bf00      	nop
    3bc8:	508411c4 	.word	0x508411c4
    3bcc:	50841140 	.word	0x50841140
    3bd0:	5084112c 	.word	0x5084112c
    3bd4:	50841100 	.word	0x50841100
    3bd8:	0ffffffe 	.word	0x0ffffffe
    3bdc:	5084110c 	.word	0x5084110c
    3be0:	50841a04 	.word	0x50841a04
    3be4:	50841138 	.word	0x50841138
    3be8:	aaaaaaab 	.word	0xaaaaaaab
    3bec:	508411d8 	.word	0x508411d8
    3bf0:	00f10c31 	.word	0x00f10c31
    3bf4:	00f10c35 	.word	0x00f10c35

00003bf8 <LLF_RND_RepetitionCounterTest.part.0>:
    3bf8:	b4f0      	push	{r4, r5, r6, r7}
    3bfa:	2400      	movs	r4, #0
    3bfc:	00c9      	lsls	r1, r1, #3
    3bfe:	4626      	mov	r6, r4
    3c00:	4627      	mov	r7, r4
    3c02:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    3c06:	e006      	b.n	3c16 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    3c08:	429f      	cmp	r7, r3
    3c0a:	d015      	beq.n	3c38 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    3c0c:	2601      	movs	r6, #1
    3c0e:	4565      	cmp	r5, ip
    3c10:	d818      	bhi.n	3c44 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    3c12:	462c      	mov	r4, r5
    3c14:	461f      	mov	r7, r3
    3c16:	0963      	lsrs	r3, r4, #5
    3c18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3c1c:	f004 011f 	and.w	r1, r4, #31
    3c20:	40cb      	lsrs	r3, r1
    3c22:	291f      	cmp	r1, #31
    3c24:	f104 0501 	add.w	r5, r4, #1
    3c28:	bf18      	it	ne
    3c2a:	f003 0301 	andne.w	r3, r3, #1
    3c2e:	2c00      	cmp	r4, #0
    3c30:	d1ea      	bne.n	3c08 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    3c32:	2601      	movs	r6, #1
    3c34:	4635      	mov	r5, r6
    3c36:	e7ec      	b.n	3c12 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    3c38:	3601      	adds	r6, #1
    3c3a:	4296      	cmp	r6, r2
    3c3c:	d1e7      	bne.n	3c0e <LLF_RND_RepetitionCounterTest.part.0+0x16>
    3c3e:	4803      	ldr	r0, [pc, #12]	; (3c4c <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    3c40:	bcf0      	pop	{r4, r5, r6, r7}
    3c42:	4770      	bx	lr
    3c44:	2000      	movs	r0, #0
    3c46:	bcf0      	pop	{r4, r5, r6, r7}
    3c48:	4770      	bx	lr
    3c4a:	bf00      	nop
    3c4c:	00f10c36 	.word	0x00f10c36

00003c50 <LLF_RND_AdaptiveProportionTest>:
    3c50:	2800      	cmp	r0, #0
    3c52:	d05f      	beq.n	3d14 <LLF_RND_AdaptiveProportionTest+0xc4>
    3c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c58:	1e4c      	subs	r4, r1, #1
    3c5a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    3c5e:	d226      	bcs.n	3cae <LLF_RND_AdaptiveProportionTest+0x5e>
    3c60:	b32b      	cbz	r3, 3cae <LLF_RND_AdaptiveProportionTest+0x5e>
    3c62:	b322      	cbz	r2, 3cae <LLF_RND_AdaptiveProportionTest+0x5e>
    3c64:	00cc      	lsls	r4, r1, #3
    3c66:	2b01      	cmp	r3, #1
    3c68:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
    3c6c:	d02f      	beq.n	3cce <LLF_RND_AdaptiveProportionTest+0x7e>
    3c6e:	2100      	movs	r1, #0
    3c70:	468c      	mov	ip, r1
    3c72:	460f      	mov	r7, r1
    3c74:	460d      	mov	r5, r1
    3c76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3c7a:	094c      	lsrs	r4, r1, #5
    3c7c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    3c80:	f001 061f 	and.w	r6, r1, #31
    3c84:	40f4      	lsrs	r4, r6
    3c86:	2e1f      	cmp	r6, #31
    3c88:	bf18      	it	ne
    3c8a:	f004 0401 	andne.w	r4, r4, #1
    3c8e:	b921      	cbnz	r1, 3c9a <LLF_RND_AdaptiveProportionTest+0x4a>
    3c90:	2501      	movs	r5, #1
    3c92:	46ac      	mov	ip, r5
    3c94:	4629      	mov	r1, r5
    3c96:	4627      	mov	r7, r4
    3c98:	e7ef      	b.n	3c7a <LLF_RND_AdaptiveProportionTest+0x2a>
    3c9a:	42ab      	cmp	r3, r5
    3c9c:	d013      	beq.n	3cc6 <LLF_RND_AdaptiveProportionTest+0x76>
    3c9e:	42a7      	cmp	r7, r4
    3ca0:	d101      	bne.n	3ca6 <LLF_RND_AdaptiveProportionTest+0x56>
    3ca2:	f10c 0c01 	add.w	ip, ip, #1
    3ca6:	4545      	cmp	r5, r8
    3ca8:	d104      	bne.n	3cb4 <LLF_RND_AdaptiveProportionTest+0x64>
    3caa:	4562      	cmp	r2, ip
    3cac:	d202      	bcs.n	3cb4 <LLF_RND_AdaptiveProportionTest+0x64>
    3cae:	481a      	ldr	r0, [pc, #104]	; (3d18 <LLF_RND_AdaptiveProportionTest+0xc8>)
    3cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cb4:	463c      	mov	r4, r7
    3cb6:	3101      	adds	r1, #1
    3cb8:	458e      	cmp	lr, r1
    3cba:	f105 0501 	add.w	r5, r5, #1
    3cbe:	d2ea      	bcs.n	3c96 <LLF_RND_AdaptiveProportionTest+0x46>
    3cc0:	2000      	movs	r0, #0
    3cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc6:	2500      	movs	r5, #0
    3cc8:	f04f 0c01 	mov.w	ip, #1
    3ccc:	e7f3      	b.n	3cb6 <LLF_RND_AdaptiveProportionTest+0x66>
    3cce:	2600      	movs	r6, #0
    3cd0:	46b4      	mov	ip, r6
    3cd2:	4637      	mov	r7, r6
    3cd4:	4631      	mov	r1, r6
    3cd6:	094b      	lsrs	r3, r1, #5
    3cd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3cdc:	f001 051f 	and.w	r5, r1, #31
    3ce0:	40eb      	lsrs	r3, r5
    3ce2:	2d1f      	cmp	r5, #31
    3ce4:	bf18      	it	ne
    3ce6:	f003 0301 	andne.w	r3, r3, #1
    3cea:	b139      	cbz	r1, 3cfc <LLF_RND_AdaptiveProportionTest+0xac>
    3cec:	b95f      	cbnz	r7, 3d06 <LLF_RND_AdaptiveProportionTest+0xb6>
    3cee:	459c      	cmp	ip, r3
    3cf0:	d001      	beq.n	3cf6 <LLF_RND_AdaptiveProportionTest+0xa6>
    3cf2:	4663      	mov	r3, ip
    3cf4:	e008      	b.n	3d08 <LLF_RND_AdaptiveProportionTest+0xb8>
    3cf6:	4663      	mov	r3, ip
    3cf8:	3601      	adds	r6, #1
    3cfa:	e005      	b.n	3d08 <LLF_RND_AdaptiveProportionTest+0xb8>
    3cfc:	2601      	movs	r6, #1
    3cfe:	4631      	mov	r1, r6
    3d00:	469c      	mov	ip, r3
    3d02:	2701      	movs	r7, #1
    3d04:	e7e7      	b.n	3cd6 <LLF_RND_AdaptiveProportionTest+0x86>
    3d06:	463e      	mov	r6, r7
    3d08:	42b2      	cmp	r2, r6
    3d0a:	d3d0      	bcc.n	3cae <LLF_RND_AdaptiveProportionTest+0x5e>
    3d0c:	3101      	adds	r1, #1
    3d0e:	42a1      	cmp	r1, r4
    3d10:	d1f6      	bne.n	3d00 <LLF_RND_AdaptiveProportionTest+0xb0>
    3d12:	e7d5      	b.n	3cc0 <LLF_RND_AdaptiveProportionTest+0x70>
    3d14:	4800      	ldr	r0, [pc, #0]	; (3d18 <LLF_RND_AdaptiveProportionTest+0xc8>)
    3d16:	4770      	bx	lr
    3d18:	00f10c37 	.word	0x00f10c37

00003d1c <getTrngSource>:
    3d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d20:	b08d      	sub	sp, #52	; 0x34
    3d22:	9e18      	ldr	r6, [sp, #96]	; 0x60
    3d24:	4607      	mov	r7, r0
    3d26:	460c      	mov	r4, r1
    3d28:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    3d2a:	2e00      	cmp	r6, #0
    3d2c:	d14c      	bne.n	3dc8 <getTrngSource+0xac>
    3d2e:	f8d1 b010 	ldr.w	fp, [r1, #16]
    3d32:	2100      	movs	r1, #0
    3d34:	601d      	str	r5, [r3, #0]
    3d36:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3d38:	6019      	str	r1, [r3, #0]
    3d3a:	2a00      	cmp	r2, #0
    3d3c:	f000 811e 	beq.w	3f7c <getTrngSource+0x260>
    3d40:	4a9a      	ldr	r2, [pc, #616]	; (3fac <getTrngSource+0x290>)
    3d42:	4b9b      	ldr	r3, [pc, #620]	; (3fb0 <getTrngSource+0x294>)
    3d44:	6811      	ldr	r1, [r2, #0]
    3d46:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	429a      	cmp	r2, r3
    3d4c:	d147      	bne.n	3dde <getTrngSource+0xc2>
    3d4e:	290a      	cmp	r1, #10
    3d50:	d145      	bne.n	3dde <getTrngSource+0xc2>
    3d52:	78fb      	ldrb	r3, [r7, #3]
    3d54:	9304      	str	r3, [sp, #16]
    3d56:	2304      	movs	r3, #4
    3d58:	46b8      	mov	r8, r7
    3d5a:	9302      	str	r3, [sp, #8]
    3d5c:	4b95      	ldr	r3, [pc, #596]	; (3fb4 <getTrngSource+0x298>)
    3d5e:	fba3 230b 	umull	r2, r3, r3, fp
    3d62:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    3d66:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    3d6a:	f105 0208 	add.w	r2, r5, #8
    3d6e:	9203      	str	r2, [sp, #12]
    3d70:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    3d74:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3d76:	f8c3 b000 	str.w	fp, [r3]
    3d7a:	f1bb 0f00 	cmp.w	fp, #0
    3d7e:	f000 80c3 	beq.w	3f08 <getTrngSource+0x1ec>
    3d82:	465d      	mov	r5, fp
    3d84:	f04f 0900 	mov.w	r9, #0
    3d88:	9e03      	ldr	r6, [sp, #12]
    3d8a:	f000 f9c7 	bl	411c <LLF_RND_TurnOffTrng>
    3d8e:	2300      	movs	r3, #0
    3d90:	9305      	str	r3, [sp, #20]
    3d92:	f1b8 0f00 	cmp.w	r8, #0
    3d96:	f000 80e5 	beq.w	3f64 <getTrngSource+0x248>
    3d9a:	2c00      	cmp	r4, #0
    3d9c:	f000 80e2 	beq.w	3f64 <getTrngSource+0x248>
    3da0:	9b04      	ldr	r3, [sp, #16]
    3da2:	2b00      	cmp	r3, #0
    3da4:	f000 80dc 	beq.w	3f60 <getTrngSource+0x244>
    3da8:	4620      	mov	r0, r4
    3daa:	a904      	add	r1, sp, #16
    3dac:	f000 f9a6 	bl	40fc <LLF_RND_GetFastestRosc>
    3db0:	b1b8      	cbz	r0, 3de2 <getTrngSource+0xc6>
    3db2:	4b81      	ldr	r3, [pc, #516]	; (3fb8 <getTrngSource+0x29c>)
    3db4:	4298      	cmp	r0, r3
    3db6:	f040 80a7 	bne.w	3f08 <getTrngSource+0x1ec>
    3dba:	9002      	str	r0, [sp, #8]
    3dbc:	f000 f9ae 	bl	411c <LLF_RND_TurnOffTrng>
    3dc0:	9802      	ldr	r0, [sp, #8]
    3dc2:	b00d      	add	sp, #52	; 0x34
    3dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dc8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3dcc:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    3dd0:	3001      	adds	r0, #1
    3dd2:	bf0c      	ite	eq
    3dd4:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    3dd8:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    3ddc:	e7a9      	b.n	3d32 <getTrngSource+0x16>
    3dde:	4877      	ldr	r0, [pc, #476]	; (3fbc <getTrngSource+0x2a0>)
    3de0:	e7eb      	b.n	3dba <getTrngSource+0x9e>
    3de2:	4621      	mov	r1, r4
    3de4:	9804      	ldr	r0, [sp, #16]
    3de6:	f000 f96b 	bl	40c0 <LLF_RND_GetRoscSampleCnt>
    3dea:	2800      	cmp	r0, #0
    3dec:	d1e1      	bne.n	3db2 <getTrngSource+0x96>
    3dee:	9f04      	ldr	r7, [sp, #16]
    3df0:	2f08      	cmp	r7, #8
    3df2:	f000 80b9 	beq.w	3f68 <getTrngSource+0x24c>
    3df6:	2f04      	cmp	r7, #4
    3df8:	f000 80b8 	beq.w	3f6c <getTrngSource+0x250>
    3dfc:	f1a7 0702 	sub.w	r7, r7, #2
    3e00:	fab7 f787 	clz	r7, r7
    3e04:	097f      	lsrs	r7, r7, #5
    3e06:	2301      	movs	r3, #1
    3e08:	4619      	mov	r1, r3
    3e0a:	486d      	ldr	r0, [pc, #436]	; (3fc0 <getTrngSource+0x2a4>)
    3e0c:	6003      	str	r3, [r0, #0]
    3e0e:	f840 3c84 	str.w	r3, [r0, #-132]
    3e12:	4b6b      	ldr	r3, [pc, #428]	; (3fc0 <getTrngSource+0x2a4>)
    3e14:	4866      	ldr	r0, [pc, #408]	; (3fb0 <getTrngSource+0x294>)
    3e16:	6019      	str	r1, [r3, #0]
    3e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e1a:	6003      	str	r3, [r0, #0]
    3e1c:	6800      	ldr	r0, [r0, #0]
    3e1e:	4283      	cmp	r3, r0
    3e20:	d1f7      	bne.n	3e12 <getTrngSource+0xf6>
    3e22:	2300      	movs	r3, #0
    3e24:	4a67      	ldr	r2, [pc, #412]	; (3fc4 <getTrngSource+0x2a8>)
    3e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e2a:	6013      	str	r3, [r2, #0]
    3e2c:	f7ff fb48 	bl	34c0 <CC_HalClearInterruptBit>
    3e30:	2300      	movs	r3, #0
    3e32:	4965      	ldr	r1, [pc, #404]	; (3fc8 <getTrngSource+0x2ac>)
    3e34:	4618      	mov	r0, r3
    3e36:	4b65      	ldr	r3, [pc, #404]	; (3fcc <getTrngSource+0x2b0>)
    3e38:	6019      	str	r1, [r3, #0]
    3e3a:	f7ff fb4f 	bl	34dc <CC_HalMaskInterrupt>
    3e3e:	4964      	ldr	r1, [pc, #400]	; (3fd0 <getTrngSource+0x2b4>)
    3e40:	4b64      	ldr	r3, [pc, #400]	; (3fd4 <getTrngSource+0x2b8>)
    3e42:	600f      	str	r7, [r1, #0]
    3e44:	6818      	ldr	r0, [r3, #0]
    3e46:	4f5b      	ldr	r7, [pc, #364]	; (3fb4 <getTrngSource+0x298>)
    3e48:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    3e4c:	f7ff fb46 	bl	34dc <CC_HalMaskInterrupt>
    3e50:	210a      	movs	r1, #10
    3e52:	2201      	movs	r2, #1
    3e54:	4b55      	ldr	r3, [pc, #340]	; (3fac <getTrngSource+0x290>)
    3e56:	4860      	ldr	r0, [pc, #384]	; (3fd8 <getTrngSource+0x2bc>)
    3e58:	6019      	str	r1, [r3, #0]
    3e5a:	6921      	ldr	r1, [r4, #16]
    3e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e5e:	fba7 c101 	umull	ip, r1, r7, r1
    3e62:	0909      	lsrs	r1, r1, #4
    3e64:	fb03 f301 	mul.w	r3, r3, r1
    3e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e6c:	03db      	lsls	r3, r3, #15
    3e6e:	099b      	lsrs	r3, r3, #6
    3e70:	6003      	str	r3, [r0, #0]
    3e72:	4b54      	ldr	r3, [pc, #336]	; (3fc4 <getTrngSource+0x2a8>)
    3e74:	a805      	add	r0, sp, #20
    3e76:	601a      	str	r2, [r3, #0]
    3e78:	9904      	ldr	r1, [sp, #16]
    3e7a:	f8d8 2000 	ldr.w	r2, [r8]
    3e7e:	020b      	lsls	r3, r1, #8
    3e80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3e84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3e88:	4313      	orrs	r3, r2
    3e8a:	f8c8 3000 	str.w	r3, [r8]
    3e8e:	f000 f907 	bl	40a0 <LLF_RND_WaitRngInterrupt>
    3e92:	2800      	cmp	r0, #0
    3e94:	d18d      	bne.n	3db2 <getTrngSource+0x96>
    3e96:	4b51      	ldr	r3, [pc, #324]	; (3fdc <getTrngSource+0x2c0>)
    3e98:	fba7 2705 	umull	r2, r7, r7, r5
    3e9c:	681a      	ldr	r2, [r3, #0]
    3e9e:	3314      	adds	r3, #20
    3ea0:	9206      	str	r2, [sp, #24]
    3ea2:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3ea6:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    3eaa:	9207      	str	r2, [sp, #28]
    3eac:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3eb0:	9208      	str	r2, [sp, #32]
    3eb2:	f853 2c08 	ldr.w	r2, [r3, #-8]
    3eb6:	9209      	str	r2, [sp, #36]	; 0x24
    3eb8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3ebc:	920a      	str	r2, [sp, #40]	; 0x28
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	930b      	str	r3, [sp, #44]	; 0x2c
    3ec2:	d102      	bne.n	3eca <getTrngSource+0x1ae>
    3ec4:	f1ba 0f00 	cmp.w	sl, #0
    3ec8:	d141      	bne.n	3f4e <getTrngSource+0x232>
    3eca:	2218      	movs	r2, #24
    3ecc:	4630      	mov	r0, r6
    3ece:	eb0d 0102 	add.w	r1, sp, r2
    3ed2:	f7ff fa19 	bl	3308 <CC_PalMemCopyPlat>
    3ed6:	3d18      	subs	r5, #24
    3ed8:	3618      	adds	r6, #24
    3eda:	f109 0901 	add.w	r9, r9, #1
    3ede:	2d00      	cmp	r5, #0
    3ee0:	f47f af53 	bne.w	3d8a <getTrngSource+0x6e>
    3ee4:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    3ee8:	d85d      	bhi.n	3fa6 <getTrngSource+0x28a>
    3eea:	9d03      	ldr	r5, [sp, #12]
    3eec:	4659      	mov	r1, fp
    3eee:	4628      	mov	r0, r5
    3ef0:	6962      	ldr	r2, [r4, #20]
    3ef2:	f7ff fe81 	bl	3bf8 <LLF_RND_RepetitionCounterTest.part.0>
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d04b      	beq.n	3f92 <getTrngSource+0x276>
    3efa:	2300      	movs	r3, #0
    3efc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    3efe:	6013      	str	r3, [r2, #0]
    3f00:	4b2d      	ldr	r3, [pc, #180]	; (3fb8 <getTrngSource+0x29c>)
    3f02:	4298      	cmp	r0, r3
    3f04:	f43f af59 	beq.w	3dba <getTrngSource+0x9e>
    3f08:	9d04      	ldr	r5, [sp, #16]
    3f0a:	2d08      	cmp	r5, #8
    3f0c:	d034      	beq.n	3f78 <getTrngSource+0x25c>
    3f0e:	2200      	movs	r2, #0
    3f10:	ab04      	add	r3, sp, #16
    3f12:	4621      	mov	r1, r4
    3f14:	4640      	mov	r0, r8
    3f16:	006d      	lsls	r5, r5, #1
    3f18:	9200      	str	r2, [sp, #0]
    3f1a:	9504      	str	r5, [sp, #16]
    3f1c:	f7ff fdc2 	bl	3aa4 <startTrngHW>
    3f20:	4b2f      	ldr	r3, [pc, #188]	; (3fe0 <getTrngSource+0x2c4>)
    3f22:	4298      	cmp	r0, r3
    3f24:	d024      	beq.n	3f70 <getTrngSource+0x254>
    3f26:	2800      	cmp	r0, #0
    3f28:	f47f af47 	bne.w	3dba <getTrngSource+0x9e>
    3f2c:	f8d8 2000 	ldr.w	r2, [r8]
    3f30:	0a13      	lsrs	r3, r2, #8
    3f32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3f36:	4313      	orrs	r3, r2
    3f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3f3c:	f8c8 3000 	str.w	r3, [r8]
    3f40:	9b02      	ldr	r3, [sp, #8]
    3f42:	3b01      	subs	r3, #1
    3f44:	9302      	str	r3, [sp, #8]
    3f46:	f47f af15 	bne.w	3d74 <getTrngSource+0x58>
    3f4a:	2000      	movs	r0, #0
    3f4c:	e735      	b.n	3dba <getTrngSource+0x9e>
    3f4e:	4630      	mov	r0, r6
    3f50:	4652      	mov	r2, sl
    3f52:	a906      	add	r1, sp, #24
    3f54:	f7ff f9d8 	bl	3308 <CC_PalMemCopyPlat>
    3f58:	eba5 050a 	sub.w	r5, r5, sl
    3f5c:	4456      	add	r6, sl
    3f5e:	e7bc      	b.n	3eda <getTrngSource+0x1be>
    3f60:	481f      	ldr	r0, [pc, #124]	; (3fe0 <getTrngSource+0x2c4>)
    3f62:	e726      	b.n	3db2 <getTrngSource+0x96>
    3f64:	481f      	ldr	r0, [pc, #124]	; (3fe4 <getTrngSource+0x2c8>)
    3f66:	e724      	b.n	3db2 <getTrngSource+0x96>
    3f68:	2703      	movs	r7, #3
    3f6a:	e74c      	b.n	3e06 <getTrngSource+0xea>
    3f6c:	2702      	movs	r7, #2
    3f6e:	e74a      	b.n	3e06 <getTrngSource+0xea>
    3f70:	6a23      	ldr	r3, [r4, #32]
    3f72:	2b00      	cmp	r3, #0
    3f74:	f43f af21 	beq.w	3dba <getTrngSource+0x9e>
    3f78:	481b      	ldr	r0, [pc, #108]	; (3fe8 <getTrngSource+0x2cc>)
    3f7a:	e71e      	b.n	3dba <getTrngSource+0x9e>
    3f7c:	2201      	movs	r2, #1
    3f7e:	4621      	mov	r1, r4
    3f80:	4638      	mov	r0, r7
    3f82:	9600      	str	r6, [sp, #0]
    3f84:	ab04      	add	r3, sp, #16
    3f86:	f7ff fd8d 	bl	3aa4 <startTrngHW>
    3f8a:	2800      	cmp	r0, #0
    3f8c:	f43f aee3 	beq.w	3d56 <getTrngSource+0x3a>
    3f90:	e713      	b.n	3dba <getTrngSource+0x9e>
    3f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3f96:	4659      	mov	r1, fp
    3f98:	4628      	mov	r0, r5
    3f9a:	69a2      	ldr	r2, [r4, #24]
    3f9c:	f7ff fe58 	bl	3c50 <LLF_RND_AdaptiveProportionTest>
    3fa0:	2800      	cmp	r0, #0
    3fa2:	d1aa      	bne.n	3efa <getTrngSource+0x1de>
    3fa4:	e7d1      	b.n	3f4a <getTrngSource+0x22e>
    3fa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3fa8:	601d      	str	r5, [r3, #0]
    3faa:	e7ad      	b.n	3f08 <getTrngSource+0x1ec>
    3fac:	50841138 	.word	0x50841138
    3fb0:	50841130 	.word	0x50841130
    3fb4:	aaaaaaab 	.word	0xaaaaaaab
    3fb8:	00f10c02 	.word	0x00f10c02
    3fbc:	00f10c30 	.word	0x00f10c30
    3fc0:	508411c4 	.word	0x508411c4
    3fc4:	5084112c 	.word	0x5084112c
    3fc8:	0ffffffe 	.word	0x0ffffffe
    3fcc:	50841100 	.word	0x50841100
    3fd0:	5084110c 	.word	0x5084110c
    3fd4:	50841a04 	.word	0x50841a04
    3fd8:	508411d8 	.word	0x508411d8
    3fdc:	50841114 	.word	0x50841114
    3fe0:	00f10c31 	.word	0x00f10c31
    3fe4:	00f10c35 	.word	0x00f10c35
    3fe8:	00f10c32 	.word	0x00f10c32

00003fec <LLF_RND_GetTrngSource>:
    3fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff0:	4e1f      	ldr	r6, [pc, #124]	; (4070 <LLF_RND_GetTrngSource+0x84>)
    3ff2:	b084      	sub	sp, #16
    3ff4:	4604      	mov	r4, r0
    3ff6:	460d      	mov	r5, r1
    3ff8:	6830      	ldr	r0, [r6, #0]
    3ffa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3ffe:	4690      	mov	r8, r2
    4000:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4002:	f7ff f9e7 	bl	33d4 <CC_PalMutexLock>
    4006:	b9d8      	cbnz	r0, 4040 <LLF_RND_GetTrngSource+0x54>
    4008:	2000      	movs	r0, #0
    400a:	f7ff fa13 	bl	3434 <CC_PalPowerSaveModeSelect>
    400e:	b9f8      	cbnz	r0, 4050 <LLF_RND_GetTrngSource+0x64>
    4010:	2300      	movs	r3, #0
    4012:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4014:	4620      	mov	r0, r4
    4016:	9200      	str	r2, [sp, #0]
    4018:	9302      	str	r3, [sp, #8]
    401a:	4642      	mov	r2, r8
    401c:	4629      	mov	r1, r5
    401e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4020:	9701      	str	r7, [sp, #4]
    4022:	f7ff fe7b 	bl	3d1c <getTrngSource>
    4026:	4604      	mov	r4, r0
    4028:	2001      	movs	r0, #1
    402a:	f7ff fa03 	bl	3434 <CC_PalPowerSaveModeSelect>
    402e:	b9d0      	cbnz	r0, 4066 <LLF_RND_GetTrngSource+0x7a>
    4030:	6830      	ldr	r0, [r6, #0]
    4032:	f7ff f9d7 	bl	33e4 <CC_PalMutexUnlock>
    4036:	b978      	cbnz	r0, 4058 <LLF_RND_GetTrngSource+0x6c>
    4038:	4620      	mov	r0, r4
    403a:	b004      	add	sp, #16
    403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4040:	480c      	ldr	r0, [pc, #48]	; (4074 <LLF_RND_GetTrngSource+0x88>)
    4042:	f7ff fb5f 	bl	3704 <CC_PalAbort>
    4046:	2000      	movs	r0, #0
    4048:	f7ff f9f4 	bl	3434 <CC_PalPowerSaveModeSelect>
    404c:	2800      	cmp	r0, #0
    404e:	d0df      	beq.n	4010 <LLF_RND_GetTrngSource+0x24>
    4050:	4809      	ldr	r0, [pc, #36]	; (4078 <LLF_RND_GetTrngSource+0x8c>)
    4052:	f7ff fb57 	bl	3704 <CC_PalAbort>
    4056:	e7db      	b.n	4010 <LLF_RND_GetTrngSource+0x24>
    4058:	4808      	ldr	r0, [pc, #32]	; (407c <LLF_RND_GetTrngSource+0x90>)
    405a:	f7ff fb53 	bl	3704 <CC_PalAbort>
    405e:	4620      	mov	r0, r4
    4060:	b004      	add	sp, #16
    4062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4066:	4806      	ldr	r0, [pc, #24]	; (4080 <LLF_RND_GetTrngSource+0x94>)
    4068:	f7ff fb4c 	bl	3704 <CC_PalAbort>
    406c:	e7e0      	b.n	4030 <LLF_RND_GetTrngSource+0x44>
    406e:	bf00      	nop
    4070:	2000006c 	.word	0x2000006c
    4074:	00005304 	.word	0x00005304
    4078:	00005334 	.word	0x00005334
    407c:	0000531c 	.word	0x0000531c
    4080:	00005354 	.word	0x00005354

00004084 <LLF_RND_RunTrngStartupTest>:
    4084:	b510      	push	{r4, lr}
    4086:	2401      	movs	r4, #1
    4088:	b086      	sub	sp, #24
    408a:	ab05      	add	r3, sp, #20
    408c:	e9cd 2401 	strd	r2, r4, [sp, #4]
    4090:	9300      	str	r3, [sp, #0]
    4092:	2200      	movs	r2, #0
    4094:	ab04      	add	r3, sp, #16
    4096:	f7ff fe41 	bl	3d1c <getTrngSource>
    409a:	b006      	add	sp, #24
    409c:	bd10      	pop	{r4, pc}
    409e:	bf00      	nop

000040a0 <LLF_RND_WaitRngInterrupt>:
    40a0:	4601      	mov	r1, r0
    40a2:	b508      	push	{r3, lr}
    40a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    40a8:	f7ff fa1e 	bl	34e8 <CC_HalWaitInterruptRND>
    40ac:	2300      	movs	r3, #0
    40ae:	4902      	ldr	r1, [pc, #8]	; (40b8 <LLF_RND_WaitRngInterrupt+0x18>)
    40b0:	4a02      	ldr	r2, [pc, #8]	; (40bc <LLF_RND_WaitRngInterrupt+0x1c>)
    40b2:	600b      	str	r3, [r1, #0]
    40b4:	6013      	str	r3, [r2, #0]
    40b6:	bd08      	pop	{r3, pc}
    40b8:	508411c8 	.word	0x508411c8
    40bc:	5084112c 	.word	0x5084112c

000040c0 <LLF_RND_GetRoscSampleCnt>:
    40c0:	3801      	subs	r0, #1
    40c2:	2807      	cmp	r0, #7
    40c4:	d805      	bhi.n	40d2 <LLF_RND_GetRoscSampleCnt+0x12>
    40c6:	e8df f000 	tbb	[pc, r0]
    40ca:	0e0a      	.short	0x0e0a
    40cc:	04041204 	.word	0x04041204
    40d0:	0604      	.short	0x0604
    40d2:	4809      	ldr	r0, [pc, #36]	; (40f8 <LLF_RND_GetRoscSampleCnt+0x38>)
    40d4:	4770      	bx	lr
    40d6:	68cb      	ldr	r3, [r1, #12]
    40d8:	2000      	movs	r0, #0
    40da:	624b      	str	r3, [r1, #36]	; 0x24
    40dc:	4770      	bx	lr
    40de:	680b      	ldr	r3, [r1, #0]
    40e0:	2000      	movs	r0, #0
    40e2:	624b      	str	r3, [r1, #36]	; 0x24
    40e4:	4770      	bx	lr
    40e6:	684b      	ldr	r3, [r1, #4]
    40e8:	2000      	movs	r0, #0
    40ea:	624b      	str	r3, [r1, #36]	; 0x24
    40ec:	4770      	bx	lr
    40ee:	688b      	ldr	r3, [r1, #8]
    40f0:	2000      	movs	r0, #0
    40f2:	624b      	str	r3, [r1, #36]	; 0x24
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop
    40f8:	00f10c31 	.word	0x00f10c31

000040fc <LLF_RND_GetFastestRosc>:
    40fc:	680b      	ldr	r3, [r1, #0]
    40fe:	e002      	b.n	4106 <LLF_RND_GetFastestRosc+0xa>
    4100:	2b08      	cmp	r3, #8
    4102:	600b      	str	r3, [r1, #0]
    4104:	d806      	bhi.n	4114 <LLF_RND_GetFastestRosc+0x18>
    4106:	6a02      	ldr	r2, [r0, #32]
    4108:	4213      	tst	r3, r2
    410a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    410e:	d0f7      	beq.n	4100 <LLF_RND_GetFastestRosc+0x4>
    4110:	2000      	movs	r0, #0
    4112:	4770      	bx	lr
    4114:	4800      	ldr	r0, [pc, #0]	; (4118 <LLF_RND_GetFastestRosc+0x1c>)
    4116:	4770      	bx	lr
    4118:	00f10c31 	.word	0x00f10c31

0000411c <LLF_RND_TurnOffTrng>:
    411c:	2300      	movs	r3, #0
    411e:	4904      	ldr	r1, [pc, #16]	; (4130 <LLF_RND_TurnOffTrng+0x14>)
    4120:	4a04      	ldr	r2, [pc, #16]	; (4134 <LLF_RND_TurnOffTrng+0x18>)
    4122:	600b      	str	r3, [r1, #0]
    4124:	f44f 6080 	mov.w	r0, #1024	; 0x400
    4128:	6013      	str	r3, [r2, #0]
    412a:	f7ff b9c9 	b.w	34c0 <CC_HalClearInterruptBit>
    412e:	bf00      	nop
    4130:	5084112c 	.word	0x5084112c
    4134:	508411c4 	.word	0x508411c4

00004138 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    4138:	b508      	push	{r3, lr}
	spm_config();
    413a:	f7fc ff1f 	bl	f7c <spm_config>
	spm_jump();
}
    413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    4142:	f7fc beb1 	b.w	ea8 <spm_jump>

00004146 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4146:	b160      	cbz	r0, 4162 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4148:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    414a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    414e:	2b01      	cmp	r3, #1
    4150:	d003      	beq.n	415a <sys_notify_validate+0x14>
    4152:	2b03      	cmp	r3, #3
    4154:	d105      	bne.n	4162 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4156:	6803      	ldr	r3, [r0, #0]
    4158:	b11b      	cbz	r3, 4162 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    415a:	2300      	movs	r3, #0
    415c:	6083      	str	r3, [r0, #8]
    415e:	4618      	mov	r0, r3
    4160:	4770      	bx	lr
		return -EINVAL;
    4162:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4166:	4770      	bx	lr

00004168 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4168:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    416a:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    416c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    4170:	2a03      	cmp	r2, #3
    4172:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    4176:	6081      	str	r1, [r0, #8]
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4178:	bf0c      	ite	eq
    417a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    417c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    417e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4180:	4770      	bx	lr

00004182 <arch_printk_char_out>:
}
    4182:	2000      	movs	r0, #0
    4184:	4770      	bx	lr

00004186 <z_vprintk>:
{
    4186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    418a:	2500      	movs	r5, #0
{
    418c:	4606      	mov	r6, r0
    418e:	460f      	mov	r7, r1
    4190:	461c      	mov	r4, r3
	int min_width = -1;
    4192:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    4196:	46a8      	mov	r8, r5
{
    4198:	b087      	sub	sp, #28
    419a:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
    419e:	f04f 0a00 	mov.w	sl, #0
					break;
    41a2:	e007      	b.n	41b4 <z_vprintk+0x2e>
		if (!might_format) {
    41a4:	f1ba 0f00 	cmp.w	sl, #0
    41a8:	d10b      	bne.n	41c2 <z_vprintk+0x3c>
			if (*fmt != '%') {
    41aa:	2825      	cmp	r0, #37	; 0x25
    41ac:	f000 80f0 	beq.w	4390 <z_vprintk+0x20a>
				out((int)*fmt, ctx);
    41b0:	4639      	mov	r1, r7
    41b2:	47b0      	blx	r6
	while (*fmt) {
    41b4:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    41b8:	2800      	cmp	r0, #0
    41ba:	d1f3      	bne.n	41a4 <z_vprintk+0x1e>
}
    41bc:	b007      	add	sp, #28
    41be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    41c2:	2864      	cmp	r0, #100	; 0x64
    41c4:	d06c      	beq.n	42a0 <z_vprintk+0x11a>
    41c6:	d81a      	bhi.n	41fe <z_vprintk+0x78>
    41c8:	2839      	cmp	r0, #57	; 0x39
    41ca:	d80a      	bhi.n	41e2 <z_vprintk+0x5c>
    41cc:	2831      	cmp	r0, #49	; 0x31
    41ce:	d25e      	bcs.n	428e <z_vprintk+0x108>
    41d0:	282d      	cmp	r0, #45	; 0x2d
    41d2:	f000 80e4 	beq.w	439e <z_vprintk+0x218>
    41d6:	2830      	cmp	r0, #48	; 0x30
    41d8:	d04a      	beq.n	4270 <z_vprintk+0xea>
    41da:	2825      	cmp	r0, #37	; 0x25
    41dc:	d107      	bne.n	41ee <z_vprintk+0x68>
				out((int)'%', ctx);
    41de:	4639      	mov	r1, r7
    41e0:	e00b      	b.n	41fa <z_vprintk+0x74>
			switch (*fmt) {
    41e2:	2858      	cmp	r0, #88	; 0x58
    41e4:	f000 80a5 	beq.w	4332 <z_vprintk+0x1ac>
    41e8:	2863      	cmp	r0, #99	; 0x63
    41ea:	f000 80cd 	beq.w	4388 <z_vprintk+0x202>
					out((int)'%', ctx);
    41ee:	4639      	mov	r1, r7
    41f0:	2025      	movs	r0, #37	; 0x25
    41f2:	47b0      	blx	r6
					out((int)*fmt, ctx);
    41f4:	4639      	mov	r1, r7
    41f6:	f89b 0000 	ldrb.w	r0, [fp]
    41fa:	47b0      	blx	r6
    41fc:	e7cf      	b.n	419e <z_vprintk+0x18>
			switch (*fmt) {
    41fe:	2870      	cmp	r0, #112	; 0x70
    4200:	f000 808d 	beq.w	431e <z_vprintk+0x198>
    4204:	d80d      	bhi.n	4222 <z_vprintk+0x9c>
    4206:	2869      	cmp	r0, #105	; 0x69
    4208:	d04a      	beq.n	42a0 <z_vprintk+0x11a>
    420a:	286c      	cmp	r0, #108	; 0x6c
    420c:	d103      	bne.n	4216 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
    420e:	2d6c      	cmp	r5, #108	; 0x6c
    4210:	d12a      	bne.n	4268 <z_vprintk+0xe2>
					length_mod = 'L';
    4212:	254c      	movs	r5, #76	; 0x4c
    4214:	e7ce      	b.n	41b4 <z_vprintk+0x2e>
			switch (*fmt) {
    4216:	2868      	cmp	r0, #104	; 0x68
    4218:	d1e9      	bne.n	41ee <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    421a:	2d68      	cmp	r5, #104	; 0x68
    421c:	d124      	bne.n	4268 <z_vprintk+0xe2>
					length_mod = 'H';
    421e:	2548      	movs	r5, #72	; 0x48
    4220:	e7c8      	b.n	41b4 <z_vprintk+0x2e>
			switch (*fmt) {
    4222:	2875      	cmp	r0, #117	; 0x75
    4224:	d03c      	beq.n	42a0 <z_vprintk+0x11a>
    4226:	d81b      	bhi.n	4260 <z_vprintk+0xda>
    4228:	2873      	cmp	r0, #115	; 0x73
    422a:	d1e0      	bne.n	41ee <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    422c:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    4230:	469a      	mov	sl, r3
    4232:	4652      	mov	r2, sl
    4234:	f81a 0b01 	ldrb.w	r0, [sl], #1
    4238:	2800      	cmp	r0, #0
    423a:	f040 80a0 	bne.w	437e <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
    423e:	f1b8 0f03 	cmp.w	r8, #3
    4242:	f040 80b2 	bne.w	43aa <z_vprintk+0x224>
					int remaining = min_width - (s - start);
    4246:	eba2 0a03 	sub.w	sl, r2, r3
    424a:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
    424e:	f1ba 0f00 	cmp.w	sl, #0
    4252:	dda4      	ble.n	419e <z_vprintk+0x18>
						out(' ', ctx);
    4254:	4639      	mov	r1, r7
    4256:	2020      	movs	r0, #32
    4258:	47b0      	blx	r6
    425a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    425e:	e7f6      	b.n	424e <z_vprintk+0xc8>
			switch (*fmt) {
    4260:	2878      	cmp	r0, #120	; 0x78
    4262:	d066      	beq.n	4332 <z_vprintk+0x1ac>
    4264:	287a      	cmp	r0, #122	; 0x7a
    4266:	d1c2      	bne.n	41ee <z_vprintk+0x68>
				} else if (length_mod == 0) {
    4268:	2d00      	cmp	r5, #0
    426a:	d1c0      	bne.n	41ee <z_vprintk+0x68>
    426c:	4605      	mov	r5, r0
    426e:	e7a1      	b.n	41b4 <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
    4270:	f1b9 0f00 	cmp.w	r9, #0
    4274:	da0e      	bge.n	4294 <z_vprintk+0x10e>
    4276:	f1b8 0f00 	cmp.w	r8, #0
    427a:	f000 8093 	beq.w	43a4 <z_vprintk+0x21e>
					min_width = *fmt - '0';
    427e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    4282:	f1b8 0f00 	cmp.w	r8, #0
    4286:	bf08      	it	eq
    4288:	f04f 0802 	moveq.w	r8, #2
    428c:	e792      	b.n	41b4 <z_vprintk+0x2e>
				if (min_width < 0) {
    428e:	f1b9 0f00 	cmp.w	r9, #0
    4292:	dbf4      	blt.n	427e <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    4294:	230a      	movs	r3, #10
    4296:	fb03 0909 	mla	r9, r3, r9, r0
    429a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    429e:	e7f0      	b.n	4282 <z_vprintk+0xfc>
				if (length_mod == 'z') {
    42a0:	2d7a      	cmp	r5, #122	; 0x7a
    42a2:	d106      	bne.n	42b2 <z_vprintk+0x12c>
					d = va_arg(ap, long);
    42a4:	46a2      	mov	sl, r4
    42a6:	f85a 2b04 	ldr.w	r2, [sl], #4
    42aa:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    42ac:	2875      	cmp	r0, #117	; 0x75
    42ae:	d125      	bne.n	42fc <z_vprintk+0x176>
    42b0:	e00f      	b.n	42d2 <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
    42b2:	2d6c      	cmp	r5, #108	; 0x6c
    42b4:	d0f6      	beq.n	42a4 <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
    42b6:	2d4c      	cmp	r5, #76	; 0x4c
    42b8:	d105      	bne.n	42c6 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
    42ba:	3407      	adds	r4, #7
    42bc:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
    42c0:	e8fa 2302 	ldrd	r2, r3, [sl], #8
    42c4:	e7f2      	b.n	42ac <z_vprintk+0x126>
				} else if (*fmt == 'u') {
    42c6:	2875      	cmp	r0, #117	; 0x75
    42c8:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
    42cc:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
    42ce:	d114      	bne.n	42fa <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
    42d0:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    42d2:	f1b8 0103 	subs.w	r1, r8, #3
    42d6:	bf18      	it	ne
    42d8:	2101      	movne	r1, #1
    42da:	f1b8 0f01 	cmp.w	r8, #1
    42de:	bf0c      	ite	eq
    42e0:	2030      	moveq	r0, #48	; 0x30
    42e2:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    42e4:	9101      	str	r1, [sp, #4]
    42e6:	210a      	movs	r1, #10
    42e8:	e9cd 0902 	strd	r0, r9, [sp, #8]
    42ec:	9100      	str	r1, [sp, #0]
    42ee:	4630      	mov	r0, r6
    42f0:	4639      	mov	r1, r7
    42f2:	f7fc f957 	bl	5a4 <print_digits.part.0>
    42f6:	4654      	mov	r4, sl
    42f8:	e751      	b.n	419e <z_vprintk+0x18>
					d = va_arg(ap, int);
    42fa:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    42fc:	2a00      	cmp	r2, #0
    42fe:	f173 0100 	sbcs.w	r1, r3, #0
    4302:	dae6      	bge.n	42d2 <z_vprintk+0x14c>
					out((int)'-', ctx);
    4304:	4639      	mov	r1, r7
    4306:	202d      	movs	r0, #45	; 0x2d
    4308:	e9cd 2304 	strd	r2, r3, [sp, #16]
    430c:	47b0      	blx	r6
					d = -d;
    430e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4312:	4252      	negs	r2, r2
    4314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    4318:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    431c:	e7d9      	b.n	42d2 <z_vprintk+0x14c>
				out('0', ctx);
    431e:	4639      	mov	r1, r7
    4320:	2030      	movs	r0, #48	; 0x30
    4322:	47b0      	blx	r6
				out('x', ctx);
    4324:	4639      	mov	r1, r7
    4326:	2078      	movs	r0, #120	; 0x78
    4328:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
    432a:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    432e:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
    4332:	f89b 3000 	ldrb.w	r3, [fp]
    4336:	2b70      	cmp	r3, #112	; 0x70
    4338:	d103      	bne.n	4342 <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
    433a:	f854 2b04 	ldr.w	r2, [r4], #4
    433e:	2300      	movs	r3, #0
    4340:	e00a      	b.n	4358 <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
    4342:	2d6c      	cmp	r5, #108	; 0x6c
    4344:	d0f9      	beq.n	433a <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
    4346:	2d4c      	cmp	r5, #76	; 0x4c
    4348:	d1f7      	bne.n	433a <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
    434a:	3407      	adds	r4, #7
    434c:	f024 0307 	bic.w	r3, r4, #7
    4350:	461c      	mov	r4, r3
    4352:	685b      	ldr	r3, [r3, #4]
    4354:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    4358:	f1b8 0103 	subs.w	r1, r8, #3
    435c:	bf18      	it	ne
    435e:	2101      	movne	r1, #1
    4360:	f1b8 0f01 	cmp.w	r8, #1
    4364:	bf0c      	ite	eq
    4366:	2030      	moveq	r0, #48	; 0x30
    4368:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    436a:	9101      	str	r1, [sp, #4]
    436c:	2110      	movs	r1, #16
    436e:	e9cd 0902 	strd	r0, r9, [sp, #8]
    4372:	9100      	str	r1, [sp, #0]
    4374:	4630      	mov	r0, r6
    4376:	4639      	mov	r1, r7
    4378:	f7fc f914 	bl	5a4 <print_digits.part.0>
    437c:	e70f      	b.n	419e <z_vprintk+0x18>
					out((int)(*s++), ctx);
    437e:	4639      	mov	r1, r7
    4380:	9304      	str	r3, [sp, #16]
    4382:	47b0      	blx	r6
    4384:	9b04      	ldr	r3, [sp, #16]
    4386:	e754      	b.n	4232 <z_vprintk+0xac>
				out(c, ctx);
    4388:	4639      	mov	r1, r7
    438a:	f854 0b04 	ldr.w	r0, [r4], #4
    438e:	e734      	b.n	41fa <z_vprintk+0x74>
				length_mod = 0;
    4390:	4655      	mov	r5, sl
				padding = PAD_NONE;
    4392:	46d0      	mov	r8, sl
				min_width = -1;
    4394:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    4398:	f04f 0a01 	mov.w	sl, #1
    439c:	e70a      	b.n	41b4 <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
    439e:	f04f 0803 	mov.w	r8, #3
    43a2:	e707      	b.n	41b4 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    43a4:	f04f 0801 	mov.w	r8, #1
    43a8:	e704      	b.n	41b4 <z_vprintk+0x2e>
			might_format = 0;
    43aa:	4682      	mov	sl, r0
    43ac:	e702      	b.n	41b4 <z_vprintk+0x2e>

000043ae <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    43ae:	b40f      	push	{r0, r1, r2, r3}
    43b0:	b507      	push	{r0, r1, r2, lr}
    43b2:	a904      	add	r1, sp, #16
    43b4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    43b8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    43ba:	f7fc f943 	bl	644 <vprintk>
	}
	va_end(ap);
}
    43be:	b003      	add	sp, #12
    43c0:	f85d eb04 	ldr.w	lr, [sp], #4
    43c4:	b004      	add	sp, #16
    43c6:	4770      	bx	lr

000043c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    43c8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    43ca:	f013 0307 	ands.w	r3, r3, #7
    43ce:	d105      	bne.n	43dc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    43d0:	6803      	ldr	r3, [r0, #0]
    43d2:	2b00      	cmp	r3, #0
		evt = EVT_START;
    43d4:	bf0c      	ite	eq
    43d6:	2000      	moveq	r0, #0
    43d8:	2003      	movne	r0, #3
    43da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    43dc:	2b02      	cmp	r3, #2
    43de:	d105      	bne.n	43ec <process_recheck+0x24>
		   && (mgr->refs == 0)) {
    43e0:	8b43      	ldrh	r3, [r0, #26]
    43e2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    43e4:	bf14      	ite	ne
    43e6:	2000      	movne	r0, #0
    43e8:	2004      	moveq	r0, #4
    43ea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    43ec:	2b01      	cmp	r3, #1
    43ee:	d105      	bne.n	43fc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    43f0:	6803      	ldr	r3, [r0, #0]
    43f2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    43f4:	bf0c      	ite	eq
    43f6:	2000      	moveq	r0, #0
    43f8:	2005      	movne	r0, #5
    43fa:	4770      	bx	lr
	int evt = EVT_NOP;
    43fc:	2000      	movs	r0, #0
}
    43fe:	4770      	bx	lr

00004400 <notify_one>:
{
    4400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4404:	460d      	mov	r5, r1
    4406:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4408:	4619      	mov	r1, r3
    440a:	1d28      	adds	r0, r5, #4
{
    440c:	4690      	mov	r8, r2
    440e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4410:	f7ff feaa 	bl	4168 <sys_notify_finalize>
	if (cb) {
    4414:	4604      	mov	r4, r0
    4416:	b138      	cbz	r0, 4428 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4418:	4633      	mov	r3, r6
    441a:	4642      	mov	r2, r8
    441c:	4629      	mov	r1, r5
    441e:	4638      	mov	r0, r7
    4420:	46a4      	mov	ip, r4
}
    4422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4426:	4760      	bx	ip
}
    4428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000442c <transition_complete>:
{
    442c:	b410      	push	{r4}
	__asm__ volatile(
    442e:	f04f 0420 	mov.w	r4, #32
    4432:	f3ef 8211 	mrs	r2, BASEPRI
    4436:	f384 8811 	msr	BASEPRI, r4
    443a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    443e:	6141      	str	r1, [r0, #20]
}
    4440:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    4444:	2101      	movs	r1, #1
    4446:	f7fc b90b 	b.w	660 <process_event>

0000444a <validate_args>:
{
    444a:	b510      	push	{r4, lr}
    444c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    444e:	b140      	cbz	r0, 4462 <validate_args+0x18>
    4450:	b139      	cbz	r1, 4462 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4452:	1d08      	adds	r0, r1, #4
    4454:	f7ff fe77 	bl	4146 <sys_notify_validate>
	if ((rv == 0)
    4458:	b928      	cbnz	r0, 4466 <validate_args+0x1c>
	    && ((cli->notify.flags
    445a:	68a3      	ldr	r3, [r4, #8]
    445c:	f033 0303 	bics.w	r3, r3, #3
    4460:	d001      	beq.n	4466 <validate_args+0x1c>
		rv = -EINVAL;
    4462:	f06f 0015 	mvn.w	r0, #21
}
    4466:	bd10      	pop	{r4, pc}

00004468 <onoff_manager_init>:
{
    4468:	b538      	push	{r3, r4, r5, lr}
    446a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    446c:	4605      	mov	r5, r0
    446e:	b158      	cbz	r0, 4488 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4470:	b151      	cbz	r1, 4488 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4472:	680b      	ldr	r3, [r1, #0]
    4474:	b143      	cbz	r3, 4488 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4476:	684b      	ldr	r3, [r1, #4]
    4478:	b133      	cbz	r3, 4488 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    447a:	221c      	movs	r2, #28
    447c:	2100      	movs	r1, #0
    447e:	f000 faeb 	bl	4a58 <memset>
	return 0;
    4482:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4484:	612c      	str	r4, [r5, #16]
}
    4486:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4488:	f06f 0015 	mvn.w	r0, #21
    448c:	e7fb      	b.n	4486 <onoff_manager_init+0x1e>

0000448e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    448e:	b570      	push	{r4, r5, r6, lr}
    4490:	4604      	mov	r4, r0
    4492:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4494:	f7ff ffd9 	bl	444a <validate_args>

	if (rv < 0) {
    4498:	1e06      	subs	r6, r0, #0
    449a:	db31      	blt.n	4500 <onoff_request+0x72>
    449c:	f04f 0320 	mov.w	r3, #32
    44a0:	f3ef 8111 	mrs	r1, BASEPRI
    44a4:	f383 8811 	msr	BASEPRI, r3
    44a8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    44ac:	f64f 76ff 	movw	r6, #65535	; 0xffff
    44b0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    44b2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    44b4:	42b3      	cmp	r3, r6
    44b6:	f000 0207 	and.w	r2, r0, #7
    44ba:	d02e      	beq.n	451a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    44bc:	2a02      	cmp	r2, #2
    44be:	d10e      	bne.n	44de <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    44c0:	3301      	adds	r3, #1
    44c2:	8363      	strh	r3, [r4, #26]
	rv = state;
    44c4:	4616      	mov	r6, r2
		notify = true;
    44c6:	2301      	movs	r3, #1
	__asm__ volatile(
    44c8:	f381 8811 	msr	BASEPRI, r1
    44cc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    44d0:	b1b3      	cbz	r3, 4500 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    44d2:	2300      	movs	r3, #0
    44d4:	4629      	mov	r1, r5
    44d6:	4620      	mov	r0, r4
    44d8:	f7ff ff92 	bl	4400 <notify_one>
    44dc:	e010      	b.n	4500 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    44de:	0783      	lsls	r3, r0, #30
    44e0:	d001      	beq.n	44e6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    44e2:	2a06      	cmp	r2, #6
    44e4:	d10e      	bne.n	4504 <onoff_request+0x76>
	parent->next = child;
    44e6:	2300      	movs	r3, #0
    44e8:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    44ea:	6863      	ldr	r3, [r4, #4]
    44ec:	b993      	cbnz	r3, 4514 <onoff_request+0x86>
	list->head = node;
    44ee:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
    44f2:	4616      	mov	r6, r2
    44f4:	b962      	cbnz	r2, 4510 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    44f6:	460a      	mov	r2, r1
    44f8:	4620      	mov	r0, r4
    44fa:	2102      	movs	r1, #2
    44fc:	f7fc f8b0 	bl	660 <process_event>
		}
	}

	return rv;
}
    4500:	4630      	mov	r0, r6
    4502:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4504:	2a05      	cmp	r2, #5
    4506:	bf0c      	ite	eq
    4508:	f06f 0622 	mvneq.w	r6, #34	; 0x22
    450c:	f06f 0604 	mvnne.w	r6, #4
    4510:	2300      	movs	r3, #0
    4512:	e7d9      	b.n	44c8 <onoff_request+0x3a>
	parent->next = child;
    4514:	601d      	str	r5, [r3, #0]
	list->tail = node;
    4516:	6065      	str	r5, [r4, #4]
    4518:	e7eb      	b.n	44f2 <onoff_request+0x64>
		rv = -EAGAIN;
    451a:	f06f 060a 	mvn.w	r6, #10
    451e:	e7f7      	b.n	4510 <onoff_request+0x82>

00004520 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4520:	4604      	mov	r4, r0
    4522:	b508      	push	{r3, lr}
    4524:	4608      	mov	r0, r1
    4526:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4528:	461a      	mov	r2, r3
    452a:	47a0      	blx	r4
	return z_impl_k_current_get();
    452c:	f7fe fc9e 	bl	2e6c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    4530:	f7fd f9a6 	bl	1880 <z_impl_k_thread_abort>

00004534 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4534:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4536:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    453a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    453e:	bf2c      	ite	cs
    4540:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    4544:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    4548:	4770      	bx	lr

0000454a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    454a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    454e:	6880      	ldr	r0, [r0, #8]
    4550:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    4554:	bf2c      	ite	cs
    4556:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    455a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    455e:	4770      	bx	lr

00004560 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    4560:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4562:	2201      	movs	r2, #1
    4564:	f7ff ffe6 	bl	4534 <chunk_field>
}
    4568:	0840      	lsrs	r0, r0, #1
    456a:	bd08      	pop	{r3, pc}

0000456c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    456c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    456e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4576:	d308      	bcc.n	458a <set_chunk_used+0x1e>
		if (used) {
    4578:	684b      	ldr	r3, [r1, #4]
    457a:	b11a      	cbz	r2, 4584 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    457c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    4580:	604b      	str	r3, [r1, #4]
    4582:	4770      	bx	lr
    4584:	f023 0301 	bic.w	r3, r3, #1
    4588:	e7fa      	b.n	4580 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    458a:	884b      	ldrh	r3, [r1, #2]
    458c:	b11a      	cbz	r2, 4596 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    458e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    4592:	804b      	strh	r3, [r1, #2]
		}
	}
}
    4594:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    4596:	f023 0301 	bic.w	r3, r3, #1
    459a:	e7fa      	b.n	4592 <set_chunk_used+0x26>

0000459c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    459c:	0053      	lsls	r3, r2, #1
    459e:	2201      	movs	r2, #1
    45a0:	f7ff bfd3 	b.w	454a <chunk_set>

000045a4 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    45a4:	6883      	ldr	r3, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    45a6:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    45a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    45ac:	bf2c      	ite	cs
    45ae:	2302      	movcs	r3, #2
    45b0:	2301      	movcc	r3, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    45b2:	1ac0      	subs	r0, r0, r3
	return 31 - __builtin_clz(usable_sz);
    45b4:	fab0 f080 	clz	r0, r0
}
    45b8:	f1c0 001f 	rsb	r0, r0, #31
    45bc:	4770      	bx	lr

000045be <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    45be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45c2:	4604      	mov	r4, r0
    45c4:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
    45c6:	f7ff ffcb 	bl	4560 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
    45ca:	68a3      	ldr	r3, [r4, #8]
    45cc:	4601      	mov	r1, r0
    45ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    45d2:	d301      	bcc.n	45d8 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    45d4:	2801      	cmp	r0, #1
    45d6:	d035      	beq.n	4644 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    45d8:	4620      	mov	r0, r4
    45da:	f7ff ffe3 	bl	45a4 <bucket_idx>
	if (b->next == 0) {
    45de:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    45e2:	6916      	ldr	r6, [r2, #16]
    45e4:	b99e      	cbnz	r6, 460e <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    45e6:	2301      	movs	r3, #1
    45e8:	fa03 f000 	lsl.w	r0, r3, r0
    45ec:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    45ee:	4629      	mov	r1, r5
    45f0:	4303      	orrs	r3, r0
    45f2:	60e3      	str	r3, [r4, #12]
    45f4:	4620      	mov	r0, r4
		b->next = c;
    45f6:	6115      	str	r5, [r2, #16]
    45f8:	462b      	mov	r3, r5
    45fa:	2202      	movs	r2, #2
    45fc:	f7ff ffa5 	bl	454a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4600:	2203      	movs	r2, #3
    4602:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    4604:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    4606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    460a:	f7ff bf9e 	b.w	454a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    460e:	2202      	movs	r2, #2
    4610:	4631      	mov	r1, r6
    4612:	4620      	mov	r0, r4
    4614:	f7ff ff8e 	bl	4534 <chunk_field>
    4618:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    461a:	4603      	mov	r3, r0
    461c:	2202      	movs	r2, #2
    461e:	4629      	mov	r1, r5
    4620:	4620      	mov	r0, r4
    4622:	f7ff ff92 	bl	454a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4626:	4633      	mov	r3, r6
    4628:	2203      	movs	r2, #3
    462a:	4629      	mov	r1, r5
    462c:	4620      	mov	r0, r4
    462e:	f7ff ff8c 	bl	454a <chunk_set>
    4632:	2203      	movs	r2, #3
    4634:	4639      	mov	r1, r7
    4636:	462b      	mov	r3, r5
    4638:	4620      	mov	r0, r4
    463a:	f7ff ff86 	bl	454a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    463e:	2202      	movs	r2, #2
    4640:	4631      	mov	r1, r6
    4642:	e7df      	b.n	4604 <free_list_add+0x46>
    4644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004648 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    4648:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464e:	bf2c      	ite	cs
    4650:	2508      	movcs	r5, #8
    4652:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    4654:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    4656:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    4658:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    465a:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    465c:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    465e:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4662:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4666:	1b2d      	subs	r5, r5, r4
    4668:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    466a:	6004      	str	r4, [r0, #0]
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    466c:	4629      	mov	r1, r5
	h->chunk0_hdr_area = 0;
    466e:	e9c4 2300 	strd	r2, r3, [r4]
	h->avail_buckets = 0;
    4672:	e9c4 5202 	strd	r5, r2, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4676:	4620      	mov	r0, r4
    4678:	f7ff ff94 	bl	45a4 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    467c:	4613      	mov	r3, r2
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    467e:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    4680:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4682:	1c47      	adds	r7, r0, #1
    4684:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    4686:	f104 0110 	add.w	r1, r4, #16
    468a:	42bb      	cmp	r3, r7
    468c:	db29      	blt.n	46e2 <sys_heap_init+0x9a>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    468e:	4632      	mov	r2, r6
    4690:	4620      	mov	r0, r4
    4692:	2100      	movs	r1, #0
    4694:	f7ff ff82 	bl	459c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4698:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    469a:	4620      	mov	r0, r4
    469c:	2201      	movs	r2, #1
    469e:	2100      	movs	r1, #0
    46a0:	f7ff ff64 	bl	456c <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    46a4:	463a      	mov	r2, r7
    46a6:	4631      	mov	r1, r6
    46a8:	f7ff ff78 	bl	459c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    46ac:	4633      	mov	r3, r6
    46ae:	4631      	mov	r1, r6
    46b0:	4620      	mov	r0, r4
    46b2:	2200      	movs	r2, #0
    46b4:	f7ff ff49 	bl	454a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    46b8:	4629      	mov	r1, r5
    46ba:	4620      	mov	r0, r4
    46bc:	2200      	movs	r2, #0
    46be:	f7ff ff6d 	bl	459c <set_chunk_size>
    46c2:	463b      	mov	r3, r7
    46c4:	4629      	mov	r1, r5
    46c6:	4620      	mov	r0, r4
    46c8:	2200      	movs	r2, #0
    46ca:	f7ff ff3e 	bl	454a <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    46ce:	4629      	mov	r1, r5
    46d0:	4620      	mov	r0, r4
    46d2:	2201      	movs	r2, #1
    46d4:	f7ff ff4a 	bl	456c <set_chunk_used>

	free_list_add(h, chunk0_size);
    46d8:	4631      	mov	r1, r6
}
    46da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    46de:	f7ff bf6e 	b.w	45be <free_list_add>
		h->buckets[i].next = 0;
    46e2:	f841 2b04 	str.w	r2, [r1], #4
	for (int i = 0; i < nb_buckets; i++) {
    46e6:	3301      	adds	r3, #1
    46e8:	e7cf      	b.n	468a <sys_heap_init+0x42>

000046ea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    46ea:	4770      	bx	lr

000046ec <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    46ec:	f7fd bc6c 	b.w	1fc8 <SystemInit>

000046f0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    46f0:	230c      	movs	r3, #12
    46f2:	68c2      	ldr	r2, [r0, #12]
    46f4:	b2c9      	uxtb	r1, r1
    46f6:	fb01 2303 	mla	r3, r1, r3, r2
    46fa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    46fc:	f000 0007 	and.w	r0, r0, #7
    4700:	4770      	bx	lr

00004702 <set_off_state>:
	__asm__ volatile(
    4702:	f04f 0320 	mov.w	r3, #32
    4706:	f3ef 8211 	mrs	r2, BASEPRI
    470a:	f383 8811 	msr	BASEPRI, r3
    470e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4712:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4714:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4718:	d001      	beq.n	471e <set_off_state+0x1c>
    471a:	428b      	cmp	r3, r1
    471c:	d107      	bne.n	472e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    471e:	2301      	movs	r3, #1
    4720:	6003      	str	r3, [r0, #0]
	int err = 0;
    4722:	2000      	movs	r0, #0
	__asm__ volatile(
    4724:	f382 8811 	msr	BASEPRI, r2
    4728:	f3bf 8f6f 	isb	sy
}
    472c:	4770      	bx	lr
		err = -EPERM;
    472e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4732:	e7f7      	b.n	4724 <set_off_state+0x22>

00004734 <set_starting_state>:
{
    4734:	b510      	push	{r4, lr}
	__asm__ volatile(
    4736:	f04f 0320 	mov.w	r3, #32
    473a:	f3ef 8211 	mrs	r2, BASEPRI
    473e:	f383 8811 	msr	BASEPRI, r3
    4742:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4746:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4748:	f003 0407 	and.w	r4, r3, #7
    474c:	2c01      	cmp	r4, #1
    474e:	d106      	bne.n	475e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4750:	6001      	str	r1, [r0, #0]
	int err = 0;
    4752:	2000      	movs	r0, #0
	__asm__ volatile(
    4754:	f382 8811 	msr	BASEPRI, r2
    4758:	f3bf 8f6f 	isb	sy
}
    475c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    475e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4762:	428b      	cmp	r3, r1
		err = -EBUSY;
    4764:	bf14      	ite	ne
    4766:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    476a:	f06f 000f 	mvneq.w	r0, #15
    476e:	e7f1      	b.n	4754 <set_starting_state+0x20>

00004770 <set_on_state>:
	__asm__ volatile(
    4770:	f04f 0320 	mov.w	r3, #32
    4774:	f3ef 8211 	mrs	r2, BASEPRI
    4778:	f383 8811 	msr	BASEPRI, r3
    477c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4780:	6803      	ldr	r3, [r0, #0]
    4782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4786:	f043 0302 	orr.w	r3, r3, #2
    478a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    478c:	f382 8811 	msr	BASEPRI, r2
    4790:	f3bf 8f6f 	isb	sy
}
    4794:	4770      	bx	lr

00004796 <onoff_started_callback>:
	return &data->mgr[type];
    4796:	68c3      	ldr	r3, [r0, #12]
	notify(mgr, 0);
    4798:	201c      	movs	r0, #28
{
    479a:	b410      	push	{r4}
	return &data->mgr[type];
    479c:	b2cc      	uxtb	r4, r1
	notify(mgr, 0);
    479e:	fb04 3000 	mla	r0, r4, r0, r3
    47a2:	2100      	movs	r1, #0
}
    47a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    47a8:	4710      	bx	r2

000047aa <blocking_start_callback>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    47aa:	4610      	mov	r0, r2
    47ac:	f7fe bb64 	b.w	2e78 <z_impl_k_sem_give>

000047b0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    47b0:	2000      	movs	r0, #0
    47b2:	f7fd bd05 	b.w	21c0 <nrfx_clock_stop>

000047b6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    47b6:	2000      	movs	r0, #0
    47b8:	f7fd bcd0 	b.w	215c <nrfx_clock_start>

000047bc <api_stop>:
{
    47bc:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    47be:	230c      	movs	r3, #12
    47c0:	b2cc      	uxtb	r4, r1
    47c2:	4363      	muls	r3, r4
{
    47c4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    47c6:	68c0      	ldr	r0, [r0, #12]
    47c8:	3340      	adds	r3, #64	; 0x40
    47ca:	2180      	movs	r1, #128	; 0x80
    47cc:	4418      	add	r0, r3
    47ce:	f7ff ff98 	bl	4702 <set_off_state>
	if (err < 0) {
    47d2:	2800      	cmp	r0, #0
    47d4:	db05      	blt.n	47e2 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    47d6:	6869      	ldr	r1, [r5, #4]
    47d8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    47dc:	684b      	ldr	r3, [r1, #4]
    47de:	4798      	blx	r3
	return 0;
    47e0:	2000      	movs	r0, #0
}
    47e2:	bd38      	pop	{r3, r4, r5, pc}

000047e4 <api_start>:
{
    47e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    47e8:	250c      	movs	r5, #12
    47ea:	b2ce      	uxtb	r6, r1
    47ec:	4375      	muls	r5, r6
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    47ee:	68c4      	ldr	r4, [r0, #12]
{
    47f0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    47f2:	f105 0040 	add.w	r0, r5, #64	; 0x40
    47f6:	2180      	movs	r1, #128	; 0x80
    47f8:	4420      	add	r0, r4
{
    47fa:	4690      	mov	r8, r2
	err = set_starting_state(&subdata->flags, ctx);
    47fc:	f7ff ff9a 	bl	4734 <set_starting_state>
	if (err < 0) {
    4800:	2800      	cmp	r0, #0
    4802:	db0b      	blt.n	481c <api_start+0x38>
	subdata->cb = data->cb;
    4804:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4808:	442c      	add	r4, r5
    480a:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
    480c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4810:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    4818:	4798      	blx	r3
	return 0;
    481a:	2000      	movs	r0, #0
}
    481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004820 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4820:	4770      	bx	lr

00004822 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4822:	4770      	bx	lr

00004824 <sys_clock_disable>:
    4824:	4770      	bx	lr

00004826 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    4826:	2300      	movs	r3, #0
{
    4828:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    482a:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    482c:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    4830:	f7fe fe78 	bl	3524 <mbedtls_platform_setup>
}
    4834:	b003      	add	sp, #12
    4836:	f85d fb04 	ldr.w	pc, [sp], #4

0000483a <__acle_se_spm_request_random_number_nse>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    483a:	2990      	cmp	r1, #144	; 0x90
{
    483c:	b508      	push	{r3, lr}
    483e:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    4840:	d139      	bne.n	48b6 <__acle_se_spm_request_random_number_nse+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    4842:	460a      	mov	r2, r1
    4844:	4601      	mov	r1, r0
    4846:	2000      	movs	r0, #0
    4848:	f7fe fe78 	bl	353c <mbedtls_hardware_poll>
}
    484c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4850:	4671      	mov	r1, lr
    4852:	4672      	mov	r2, lr
    4854:	4673      	mov	r3, lr
    4856:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    485a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    485e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4862:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    4866:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    486a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    486e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    4872:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    4876:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    487a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    487e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    4882:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    4886:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    488e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4892:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4896:	f38e 8c00 	msr	CPSR_fs, lr
    489a:	b410      	push	{r4}
    489c:	eef1 ca10 	vmrs	ip, fpscr
    48a0:	f64f 7460 	movw	r4, #65376	; 0xff60
    48a4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    48a8:	ea0c 0c04 	and.w	ip, ip, r4
    48ac:	eee1 ca10 	vmsr	fpscr, ip
    48b0:	bc10      	pop	{r4}
    48b2:	46f4      	mov	ip, lr
    48b4:	4774      	bxns	lr
		return -EINVAL;
    48b6:	f06f 0015 	mvn.w	r0, #21
    48ba:	e7c7      	b.n	484c <__acle_se_spm_request_random_number_nse+0x12>

000048bc <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    48bc:	2000      	movs	r0, #0
    48be:	f7fb bfcb 	b.w	858 <sys_reboot>

000048c2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    48c2:	2100      	movs	r1, #0
    48c4:	2001      	movs	r0, #1
    48c6:	f000 b832 	b.w	492e <z_arm_fatal_error>

000048ca <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    48ca:	b243      	sxtb	r3, r0
    48cc:	b9c9      	cbnz	r1, 4902 <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
    48ce:	2b00      	cmp	r3, #0
    48d0:	db15      	blt.n	48fe <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    48d2:	2101      	movs	r1, #1
    48d4:	095b      	lsrs	r3, r3, #5
    48d6:	009b      	lsls	r3, r3, #2
    48d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    48dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    48e0:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    48e4:	f000 001f 	and.w	r0, r0, #31
    48e8:	4081      	lsls	r1, r0
    48ea:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    48ee:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    48f2:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    48f6:	40c1      	lsrs	r1, r0
    48f8:	f001 0101 	and.w	r1, r1, #1
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
		return IRQ_TARGET_STATE_NON_SECURE;
    48fc:	b2c9      	uxtb	r1, r1
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
    48fe:	4608      	mov	r0, r1
    4900:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    4902:	2b00      	cmp	r3, #0
    4904:	db0d      	blt.n	4922 <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4906:	2201      	movs	r2, #1
    4908:	095b      	lsrs	r3, r3, #5
    490a:	009b      	lsls	r3, r3, #2
    490c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4910:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4914:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    4918:	f000 001f 	and.w	r0, r0, #31
    491c:	4082      	lsls	r2, r0
    491e:	430a      	orrs	r2, r1
    4920:	e7e5      	b.n	48ee <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
    4922:	2100      	movs	r1, #0
    4924:	e7eb      	b.n	48fe <irq_target_state_set+0x34>

00004926 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4926:	6e83      	ldr	r3, [r0, #104]	; 0x68
    4928:	f383 880b 	msr	PSPLIM, r3
}
    492c:	4770      	bx	lr

0000492e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    492e:	f000 b937 	b.w	4ba0 <z_fatal_error>

00004932 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4932:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4934:	6800      	ldr	r0, [r0, #0]
    4936:	f000 b933 	b.w	4ba0 <z_fatal_error>

0000493a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    493a:	b508      	push	{r3, lr}
	handler();
    493c:	f7fc fdf2 	bl	1524 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4944:	f7fc bf70 	b.w	1828 <z_arm_exc_exit>

00004948 <mpu_configure_region>:
{
    4948:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    494a:	680b      	ldr	r3, [r1, #0]
{
    494c:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    494e:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    4950:	f89d 2008 	ldrb.w	r2, [sp, #8]
    4954:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4956:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    4958:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    495a:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    495c:	f023 031f 	bic.w	r3, r3, #31
    4960:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    4962:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    4966:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    496a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    496e:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    4970:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4974:	9303      	str	r3, [sp, #12]
    4976:	4604      	mov	r4, r0
    4978:	d805      	bhi.n	4986 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    497a:	4669      	mov	r1, sp
    497c:	f7fc ffd6 	bl	192c <region_init>
}
    4980:	4620      	mov	r0, r4
    4982:	b005      	add	sp, #20
    4984:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    4986:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    498a:	e7f9      	b.n	4980 <mpu_configure_region+0x38>

0000498c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    498c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    4990:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4994:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    4996:	bf08      	it	eq
    4998:	f06f 0015 	mvneq.w	r0, #21
    499c:	4770      	bx	lr

0000499e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    499e:	3801      	subs	r0, #1
    49a0:	3901      	subs	r1, #1
    49a2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    49a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    49aa:	4293      	cmp	r3, r2
    49ac:	d101      	bne.n	49b2 <strcmp+0x14>
    49ae:	2b00      	cmp	r3, #0
    49b0:	d1f7      	bne.n	49a2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    49b2:	1a98      	subs	r0, r3, r2
    49b4:	4770      	bx	lr

000049b6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    49b6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    49b8:	b15a      	cbz	r2, 49d2 <memcmp+0x1c>
    49ba:	3901      	subs	r1, #1
    49bc:	1884      	adds	r4, r0, r2
    49be:	f810 2b01 	ldrb.w	r2, [r0], #1
    49c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    49c6:	42a0      	cmp	r0, r4
    49c8:	d001      	beq.n	49ce <memcmp+0x18>
    49ca:	429a      	cmp	r2, r3
    49cc:	d0f7      	beq.n	49be <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    49ce:	1ad0      	subs	r0, r2, r3
}
    49d0:	bd10      	pop	{r4, pc}
		return 0;
    49d2:	4610      	mov	r0, r2
    49d4:	e7fc      	b.n	49d0 <memcmp+0x1a>

000049d6 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    49d6:	1a43      	subs	r3, r0, r1
    49d8:	4293      	cmp	r3, r2
{
    49da:	b510      	push	{r4, lr}
    49dc:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    49e0:	d308      	bcc.n	49f4 <memmove+0x1e>
	char *dest = d;
    49e2:	4602      	mov	r2, r0
    49e4:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    49e6:	429a      	cmp	r2, r3
    49e8:	d00b      	beq.n	4a02 <memmove+0x2c>
			*dest = *src;
    49ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    49ee:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    49f2:	e7f8      	b.n	49e6 <memmove+0x10>
    49f4:	440a      	add	r2, r1
			dest[n] = src[n];
    49f6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    49fa:	428a      	cmp	r2, r1
			dest[n] = src[n];
    49fc:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    4a00:	d1f9      	bne.n	49f6 <memmove+0x20>
		}
	}

	return d;
}
    4a02:	bd10      	pop	{r4, pc}

00004a04 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4a04:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4a06:	ea81 0400 	eor.w	r4, r1, r0
    4a0a:	07a5      	lsls	r5, r4, #30
    4a0c:	4603      	mov	r3, r0
    4a0e:	d00b      	beq.n	4a28 <memcpy+0x24>
    4a10:	3b01      	subs	r3, #1
    4a12:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4a14:	4291      	cmp	r1, r2
    4a16:	d11a      	bne.n	4a4e <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4a1a:	2a00      	cmp	r2, #0
    4a1c:	d0fc      	beq.n	4a18 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4a22:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4a24:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    4a28:	079c      	lsls	r4, r3, #30
    4a2a:	d1f6      	bne.n	4a1a <memcpy+0x16>
    4a2c:	0895      	lsrs	r5, r2, #2
    4a2e:	00ac      	lsls	r4, r5, #2
    4a30:	1f1e      	subs	r6, r3, #4
    4a32:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4a34:	42b9      	cmp	r1, r7
    4a36:	d105      	bne.n	4a44 <memcpy+0x40>
    4a38:	f06f 0603 	mvn.w	r6, #3
    4a3c:	4423      	add	r3, r4
    4a3e:	fb06 2205 	mla	r2, r6, r5, r2
    4a42:	e7e5      	b.n	4a10 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4a44:	f851 cb04 	ldr.w	ip, [r1], #4
    4a48:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    4a4c:	e7f2      	b.n	4a34 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    4a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
    4a52:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4a56:	e7dd      	b.n	4a14 <memcpy+0x10>

00004a58 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    4a58:	4603      	mov	r3, r0
{
    4a5a:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    4a5c:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4a5e:	079c      	lsls	r4, r3, #30
    4a60:	d110      	bne.n	4a84 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4a62:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4a66:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4a6a:	0894      	lsrs	r4, r2, #2
    4a6c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    4a70:	42b3      	cmp	r3, r6
    4a72:	d10d      	bne.n	4a90 <memset+0x38>
    4a74:	f06f 0503 	mvn.w	r5, #3
    4a78:	fb05 2404 	mla	r4, r5, r4, r2
    4a7c:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4a7e:	42a3      	cmp	r3, r4
    4a80:	d109      	bne.n	4a96 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4a82:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    4a84:	2a00      	cmp	r2, #0
    4a86:	d0fc      	beq.n	4a82 <memset+0x2a>
		*(d_byte++) = c_byte;
    4a88:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4a8c:	3a01      	subs	r2, #1
    4a8e:	e7e6      	b.n	4a5e <memset+0x6>
		*(d_word++) = c_word;
    4a90:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    4a94:	e7ec      	b.n	4a70 <memset+0x18>
		*(d_byte++) = c_byte;
    4a96:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4a9a:	e7f0      	b.n	4a7e <memset+0x26>

00004a9c <_stdout_hook_default>:
}
    4a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4aa0:	4770      	bx	lr

00004aa2 <uarte_nrfx_config_get>:
{
    4aa2:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
    4aa4:	68c3      	ldr	r3, [r0, #12]
    4aa6:	3304      	adds	r3, #4
    4aa8:	e893 0003 	ldmia.w	r3, {r0, r1}
    4aac:	e882 0003 	stmia.w	r2, {r0, r1}
}
    4ab0:	2000      	movs	r0, #0
    4ab2:	4770      	bx	lr

00004ab4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4ab4:	6843      	ldr	r3, [r0, #4]
    4ab6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4ab8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4abc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4ac0:	4770      	bx	lr

00004ac2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4ac2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    4ac4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    4ac6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ac8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4acc:	b148      	cbz	r0, 4ae2 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ace:	2000      	movs	r0, #0
	*c = data->rx_data;
    4ad0:	7c12      	ldrb	r2, [r2, #16]
    4ad2:	700a      	strb	r2, [r1, #0]
    4ad4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4ad8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4adc:	2201      	movs	r2, #1
    4ade:	601a      	str	r2, [r3, #0]
	return 0;
    4ae0:	4770      	bx	lr
		return -1;
    4ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4ae6:	4770      	bx	lr

00004ae8 <uarte_nrfx_poll_out>:
{
    4ae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    4aec:	6843      	ldr	r3, [r0, #4]
{
    4aee:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    4af2:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4af4:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    4af6:	f000 f938 	bl	4d6a <k_is_in_isr>
    4afa:	bb98      	cbnz	r0, 4b64 <uarte_nrfx_poll_out+0x7c>
    4afc:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4afe:	f04f 0801 	mov.w	r8, #1
    4b02:	f106 070c 	add.w	r7, r6, #12
    4b06:	e8d7 3fef 	ldaex	r3, [r7]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d103      	bne.n	4b16 <uarte_nrfx_poll_out+0x2e>
    4b0e:	e8c7 8fe2 	stlex	r2, r8, [r7]
    4b12:	2a00      	cmp	r2, #0
    4b14:	d1f7      	bne.n	4b06 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    4b16:	d007      	beq.n	4b28 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
    4b18:	2021      	movs	r0, #33	; 0x21
    4b1a:	2100      	movs	r1, #0
    4b1c:	3d01      	subs	r5, #1
    4b1e:	f7fe f985 	bl	2e2c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4b22:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4b26:	d1ee      	bne.n	4b06 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b28:	2300      	movs	r3, #0
    4b2a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    4b2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4b32:	f10d 0307 	add.w	r3, sp, #7
    4b36:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4b3a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b3c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    4b40:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b44:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b46:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    4b4a:	b923      	cbnz	r3, 4b56 <uarte_nrfx_poll_out+0x6e>
    4b4c:	2001      	movs	r0, #1
    4b4e:	f000 f81a 	bl	4b86 <nrfx_busy_wait>
    4b52:	3d01      	subs	r5, #1
    4b54:	d1f7      	bne.n	4b46 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b56:	2301      	movs	r3, #1
    4b58:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    4b5a:	2300      	movs	r3, #0
    4b5c:	60f3      	str	r3, [r6, #12]
}
    4b5e:	b002      	add	sp, #8
    4b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    4b64:	2301      	movs	r3, #1
    4b66:	60f3      	str	r3, [r6, #12]
    4b68:	e7de      	b.n	4b28 <uarte_nrfx_poll_out+0x40>

00004b6a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4b6a:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    4b6c:	2000      	movs	r0, #0
    4b6e:	f7fc fe69 	bl	1844 <sys_arch_reboot>

00004b72 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    4b72:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4b74:	f7fc fb58 	bl	1228 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4b78:	f7fc fbda 	bl	1330 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    4b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4b80:	f7fe bd92 	b.w	36a8 <nrf_cc3xx_platform_init_no_rng>

00004b84 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4b84:	4700      	bx	r0

00004b86 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4b86:	f000 b8f6 	b.w	4d76 <z_impl_k_busy_wait>

00004b8a <nrfx_clock_enable>:
{
    4b8a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4b8c:	2005      	movs	r0, #5
    4b8e:	f7fc fc4b 	bl	1428 <arch_irq_is_enabled>
    4b92:	b920      	cbnz	r0, 4b9e <nrfx_clock_enable+0x14>
}
    4b94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4b98:	2005      	movs	r0, #5
    4b9a:	f7fc bc35 	b.w	1408 <arch_irq_enable>
    4b9e:	bd08      	pop	{r3, pc}

00004ba0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ba2:	4606      	mov	r6, r0
    4ba4:	460f      	mov	r7, r1
	__asm__ volatile(
    4ba6:	f04f 0320 	mov.w	r3, #32
    4baa:	f3ef 8511 	mrs	r5, BASEPRI
    4bae:	f383 8811 	msr	BASEPRI, r3
    4bb2:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4bb6:	f7fe f959 	bl	2e6c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4bba:	4639      	mov	r1, r7
    4bbc:	4604      	mov	r4, r0
    4bbe:	4630      	mov	r0, r6
    4bc0:	f7ff ffd3 	bl	4b6a <k_sys_fatal_error_handler>
	__asm__ volatile(
    4bc4:	f385 8811 	msr	BASEPRI, r5
    4bc8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4bcc:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4bd2:	f7fc be55 	b.w	1880 <z_impl_k_thread_abort>

00004bd6 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4bd6:	f7ff be24 	b.w	4822 <z_clock_idle_exit>

00004bda <k_mem_slab_init>:
{
    4bda:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4bdc:	2400      	movs	r4, #0
    4bde:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4be0:	ea41 0402 	orr.w	r4, r1, r2
    4be4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    4be8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4bec:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4bee:	d10c      	bne.n	4c0a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4bf0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4bf2:	42a3      	cmp	r3, r4
    4bf4:	d103      	bne.n	4bfe <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    4bf6:	e9c0 0000 	strd	r0, r0, [r0]
    4bfa:	2000      	movs	r0, #0
}
    4bfc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4bfe:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4c00:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    4c02:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    4c04:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    4c06:	4411      	add	r1, r2
    4c08:	e7f3      	b.n	4bf2 <k_mem_slab_init+0x18>
		return -EINVAL;
    4c0a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4c0e:	e7f5      	b.n	4bfc <k_mem_slab_init+0x22>

00004c10 <z_impl_k_mutex_init>:
{
    4c10:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4c12:	2000      	movs	r0, #0
    4c14:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    4c18:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4c1c:	4770      	bx	lr

00004c1e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4c1e:	4603      	mov	r3, r0
    4c20:	b920      	cbnz	r0, 4c2c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4c22:	f3ef 8205 	mrs	r2, IPSR
    4c26:	b90a      	cbnz	r2, 4c2c <z_reschedule_irqlock+0xe>
    4c28:	f7fc bb98 	b.w	135c <arch_swap>
    4c2c:	f383 8811 	msr	BASEPRI, r3
    4c30:	f3bf 8f6f 	isb	sy
}
    4c34:	4770      	bx	lr

00004c36 <z_reschedule_unlocked>:
	__asm__ volatile(
    4c36:	f04f 0320 	mov.w	r3, #32
    4c3a:	f3ef 8011 	mrs	r0, BASEPRI
    4c3e:	f383 8811 	msr	BASEPRI, r3
    4c42:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4c46:	f7ff bfea 	b.w	4c1e <z_reschedule_irqlock>

00004c4a <unpend_thread_no_timeout>:
{
    4c4a:	b510      	push	{r4, lr}
    4c4c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4c4e:	4601      	mov	r1, r0
    4c50:	6880      	ldr	r0, [r0, #8]
    4c52:	f7fd fe1d 	bl	2890 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4c56:	7b63      	ldrb	r3, [r4, #13]
    4c58:	f023 0302 	bic.w	r3, r3, #2
    4c5c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4c5e:	2300      	movs	r3, #0
    4c60:	60a3      	str	r3, [r4, #8]
}
    4c62:	bd10      	pop	{r4, pc}

00004c64 <z_priq_dumb_best>:
	return list->head == list;
    4c64:	6803      	ldr	r3, [r0, #0]
}
    4c66:	4298      	cmp	r0, r3
    4c68:	bf14      	ite	ne
    4c6a:	4618      	movne	r0, r3
    4c6c:	2000      	moveq	r0, #0
    4c6e:	4770      	bx	lr

00004c70 <z_ready_thread>:
{
    4c70:	b510      	push	{r4, lr}
    4c72:	f04f 0320 	mov.w	r3, #32
    4c76:	f3ef 8411 	mrs	r4, BASEPRI
    4c7a:	f383 8811 	msr	BASEPRI, r3
    4c7e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    4c82:	f7fd fe5b 	bl	293c <ready_thread>
	__asm__ volatile(
    4c86:	f384 8811 	msr	BASEPRI, r4
    4c8a:	f3bf 8f6f 	isb	sy
}
    4c8e:	bd10      	pop	{r4, pc}

00004c90 <z_thread_timeout>:
{
    4c90:	b570      	push	{r4, r5, r6, lr}
    4c92:	4604      	mov	r4, r0
	__asm__ volatile(
    4c94:	f04f 0320 	mov.w	r3, #32
    4c98:	f3ef 8611 	mrs	r6, BASEPRI
    4c9c:	f383 8811 	msr	BASEPRI, r3
    4ca0:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    4ca4:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    4ca8:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    4cac:	b113      	cbz	r3, 4cb4 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    4cae:	4628      	mov	r0, r5
    4cb0:	f7ff ffcb 	bl	4c4a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4cb4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    4cb8:	4628      	mov	r0, r5
    4cba:	f023 0314 	bic.w	r3, r3, #20
    4cbe:	f804 3c0b 	strb.w	r3, [r4, #-11]
    4cc2:	f7fd fe3b 	bl	293c <ready_thread>
	__asm__ volatile(
    4cc6:	f386 8811 	msr	BASEPRI, r6
    4cca:	f3bf 8f6f 	isb	sy
}
    4cce:	bd70      	pop	{r4, r5, r6, pc}

00004cd0 <add_to_waitq_locked>:
{
    4cd0:	b538      	push	{r3, r4, r5, lr}
    4cd2:	4604      	mov	r4, r0
    4cd4:	460d      	mov	r5, r1
	unready_thread(thread);
    4cd6:	f7fd ff89 	bl	2bec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4cda:	7b63      	ldrb	r3, [r4, #13]
    4cdc:	f043 0302 	orr.w	r3, r3, #2
    4ce0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4ce2:	b17d      	cbz	r5, 4d04 <add_to_waitq_locked+0x34>
    4ce4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4ce6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ce8:	429d      	cmp	r5, r3
    4cea:	d012      	beq.n	4d12 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4cec:	b18b      	cbz	r3, 4d12 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
    4cee:	f994 200e 	ldrsb.w	r2, [r4, #14]
    4cf2:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4cf6:	4291      	cmp	r1, r2
    4cf8:	dd05      	ble.n	4d06 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
    4cfa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4cfc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4d00:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d02:	605c      	str	r4, [r3, #4]
}
    4d04:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4d06:	6869      	ldr	r1, [r5, #4]
    4d08:	428b      	cmp	r3, r1
    4d0a:	d002      	beq.n	4d12 <add_to_waitq_locked+0x42>
    4d0c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d1ef      	bne.n	4cf2 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
    4d12:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4d14:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    4d16:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4d18:	686b      	ldr	r3, [r5, #4]
    4d1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4d1c:	606c      	str	r4, [r5, #4]
}
    4d1e:	e7f1      	b.n	4d04 <add_to_waitq_locked+0x34>

00004d20 <z_unpend_first_thread>:
{
    4d20:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4d22:	f04f 0320 	mov.w	r3, #32
    4d26:	f3ef 8211 	mrs	r2, BASEPRI
    4d2a:	f383 8811 	msr	BASEPRI, r3
    4d2e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    4d32:	f7ff ff97 	bl	4c64 <z_priq_dumb_best>
    4d36:	4604      	mov	r4, r0
	__asm__ volatile(
    4d38:	f382 8811 	msr	BASEPRI, r2
    4d3c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4d40:	b188      	cbz	r0, 4d66 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    4d42:	f04f 0320 	mov.w	r3, #32
    4d46:	f3ef 8511 	mrs	r5, BASEPRI
    4d4a:	f383 8811 	msr	BASEPRI, r3
    4d4e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    4d52:	f7ff ff7a 	bl	4c4a <unpend_thread_no_timeout>
	__asm__ volatile(
    4d56:	f385 8811 	msr	BASEPRI, r5
    4d5a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    4d5e:	f104 0018 	add.w	r0, r4, #24
    4d62:	f000 f80a 	bl	4d7a <z_abort_timeout>
}
    4d66:	4620      	mov	r0, r4
    4d68:	bd38      	pop	{r3, r4, r5, pc}

00004d6a <k_is_in_isr>:
    4d6a:	f3ef 8005 	mrs	r0, IPSR
}
    4d6e:	3000      	adds	r0, #0
    4d70:	bf18      	it	ne
    4d72:	2001      	movne	r0, #1
    4d74:	4770      	bx	lr

00004d76 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    4d76:	f7fb bd65 	b.w	844 <arch_busy_wait>

00004d7a <z_abort_timeout>:
{
    4d7a:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d7c:	f04f 0220 	mov.w	r2, #32
    4d80:	f3ef 8411 	mrs	r4, BASEPRI
    4d84:	f382 8811 	msr	BASEPRI, r2
    4d88:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4d8c:	6803      	ldr	r3, [r0, #0]
    4d8e:	b13b      	cbz	r3, 4da0 <z_abort_timeout+0x26>
			remove_timeout(to);
    4d90:	f7fe f952 	bl	3038 <remove_timeout>
			ret = 0;
    4d94:	2000      	movs	r0, #0
	__asm__ volatile(
    4d96:	f384 8811 	msr	BASEPRI, r4
    4d9a:	f3bf 8f6f 	isb	sy
}
    4d9e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4da0:	f06f 0015 	mvn.w	r0, #21
    4da4:	e7f7      	b.n	4d96 <z_abort_timeout+0x1c>

00004da6 <z_get_next_timeout_expiry>:
{
    4da6:	b510      	push	{r4, lr}
	__asm__ volatile(
    4da8:	f04f 0320 	mov.w	r3, #32
    4dac:	f3ef 8411 	mrs	r4, BASEPRI
    4db0:	f383 8811 	msr	BASEPRI, r3
    4db4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4db8:	f7fe f958 	bl	306c <next_timeout>
	__asm__ volatile(
    4dbc:	f384 8811 	msr	BASEPRI, r4
    4dc0:	f3bf 8f6f 	isb	sy
}
    4dc4:	bd10      	pop	{r4, pc}

00004dc6 <z_set_timeout_expiry>:
{
    4dc6:	b570      	push	{r4, r5, r6, lr}
    4dc8:	4604      	mov	r4, r0
    4dca:	460e      	mov	r6, r1
	__asm__ volatile(
    4dcc:	f04f 0320 	mov.w	r3, #32
    4dd0:	f3ef 8511 	mrs	r5, BASEPRI
    4dd4:	f383 8811 	msr	BASEPRI, r3
    4dd8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4ddc:	f7fe f946 	bl	306c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4de0:	2801      	cmp	r0, #1
    4de2:	dd05      	ble.n	4df0 <z_set_timeout_expiry+0x2a>
    4de4:	42a0      	cmp	r0, r4
    4de6:	dd03      	ble.n	4df0 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    4de8:	4631      	mov	r1, r6
    4dea:	4620      	mov	r0, r4
    4dec:	f7fb ff56 	bl	c9c <z_clock_set_timeout>
	__asm__ volatile(
    4df0:	f385 8811 	msr	BASEPRI, r5
    4df4:	f3bf 8f6f 	isb	sy
}
    4df8:	bd70      	pop	{r4, r5, r6, pc}

00004dfa <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    4dfa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    4dfc:	f7fe fa54 	bl	32a8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4e00:	bd08      	pop	{r3, pc}

00004e02 <k_heap_init>:
{
    4e02:	b410      	push	{r4}
    4e04:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4e08:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    4e10:	f7ff bc1a 	b.w	4648 <sys_heap_init>

00004e14 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    4e14:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

000058e0 <spm_firmware_info_nse-0x2700>:
	...

00007fe0 <spm_firmware_info_nse>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f9 b8ba 	b.w	115c <__acle_se_spm_firmware_info_nse>

00007fe8 <spm_request_random_number_nse>:
    7fe8:	e97f e97f 	sg
    7fec:	f7fc bc25 	b.w	483a <__acle_se_spm_request_random_number_nse>

00007ff0 <spm_request_read_nse>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7f9 b85a 	b.w	10ac <__acle_se_spm_request_read_nse>
	...
