
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20010aa8 	.word	0x20010aa8
    c004:	0000dcad 	.word	0x0000dcad
    c008:	000110ef 	.word	0x000110ef
    c00c:	0000dcdd 	.word	0x0000dcdd
    c010:	0000dcdd 	.word	0x0000dcdd
    c014:	0000dcdd 	.word	0x0000dcdd
    c018:	0000dcdd 	.word	0x0000dcdd
    c01c:	0000dcdd 	.word	0x0000dcdd
	...
    c02c:	0000da25 	.word	0x0000da25
    c030:	0000dcdd 	.word	0x0000dcdd
    c034:	00000000 	.word	0x00000000
    c038:	0000d9cd 	.word	0x0000d9cd
    c03c:	000110bb 	.word	0x000110bb

0000c040 <_irq_vector_table>:
    c040:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c050:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c060:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c070:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c080:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c090:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c0a0:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c0b0:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c0c0:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c0d0:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c0e0:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c0f0:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c100:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c110:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c120:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c130:	0000dc6d 0000dc6d 0000dc6d 0000dc6d     m...m...m...m...
    c140:	0000dc6d                                m...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	000069cc 00000001 0000c000 0000c000     .i..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <flash_at45_get_parameters>:
flash_at45_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_at45_parameters;
}
    c538:	4800      	ldr	r0, [pc, #0]	; (c53c <flash_at45_get_parameters+0x4>)
    c53a:	4770      	bx	lr
    c53c:	00011a98 	.word	0x00011a98

0000c540 <read_status_register>:
	const uint8_t opcode = CMD_READ_STATUS;
    c540:	23d7      	movs	r3, #215	; 0xd7
{
    c542:	b510      	push	{r4, lr}
    c544:	b08c      	sub	sp, #48	; 0x30
	const uint8_t opcode = CMD_READ_STATUS;
    c546:	f88d 3007 	strb.w	r3, [sp, #7]
	const struct spi_buf tx_buf[] = {
    c54a:	f10d 0307 	add.w	r3, sp, #7
{
    c54e:	4602      	mov	r2, r0
	const struct spi_buf tx_buf[] = {
    c550:	9302      	str	r3, [sp, #8]
	const struct spi_buf rx_buf[] = {
    c552:	2000      	movs	r0, #0
	const struct spi_buf tx_buf[] = {
    c554:	2301      	movs	r3, #1
	const struct spi_buf rx_buf[] = {
    c556:	910a      	str	r1, [sp, #40]	; 0x28
    c558:	2102      	movs	r1, #2
    c55a:	e9cd 0308 	strd	r0, r3, [sp, #32]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c55e:	a802      	add	r0, sp, #8
    c560:	e9cd 0304 	strd	r0, r3, [sp, #16]
	const struct spi_buf tx_buf[] = {
    c564:	9303      	str	r3, [sp, #12]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c566:	ab08      	add	r3, sp, #32
    c568:	e9cd 3106 	strd	r3, r1, [sp, #24]
	const struct spi_buf rx_buf[] = {
    c56c:	910b      	str	r1, [sp, #44]	; 0x2c
	err = spi_transceive(get_dev_data(dev)->spi,
    c56e:	68d3      	ldr	r3, [r2, #12]
    c570:	6851      	ldr	r1, [r2, #4]
    c572:	6818      	ldr	r0, [r3, #0]
    c574:	3104      	adds	r1, #4
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    c576:	6883      	ldr	r3, [r0, #8]
    c578:	aa04      	add	r2, sp, #16
    c57a:	681c      	ldr	r4, [r3, #0]
    c57c:	ab06      	add	r3, sp, #24
    c57e:	47a0      	blx	r4
	if (err != 0) {
    c580:	4602      	mov	r2, r0
    c582:	b180      	cbz	r0, c5a6 <read_status_register+0x66>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c584:	2301      	movs	r3, #1
    c586:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    c58a:	4908      	ldr	r1, [pc, #32]	; (c5ac <read_status_register+0x6c>)
    c58c:	f363 0007 	bfi	r0, r3, #0, #8
    c590:	4b07      	ldr	r3, [pc, #28]	; (c5b0 <read_status_register+0x70>)
    c592:	1a5b      	subs	r3, r3, r1
    c594:	08db      	lsrs	r3, r3, #3
    c596:	f363 108f 	bfi	r0, r3, #6, #10
    c59a:	4906      	ldr	r1, [pc, #24]	; (c5b4 <read_status_register+0x74>)
    c59c:	23b8      	movs	r3, #184	; 0xb8
    c59e:	f004 fcb8 	bl	10f12 <log_string_sync>
		return -EIO;
    c5a2:	f06f 0204 	mvn.w	r2, #4
}
    c5a6:	4610      	mov	r0, r2
    c5a8:	b00c      	add	sp, #48	; 0x30
    c5aa:	bd10      	pop	{r4, pc}
    c5ac:	000119e4 	.word	0x000119e4
    c5b0:	00011a1c 	.word	0x00011a1c
    c5b4:	00011c70 	.word	0x00011c70

0000c5b8 <perform_erase_op>:
{
    c5b8:	b510      	push	{r4, lr}
		(offset >> 16) & 0xFF,
    c5ba:	1413      	asrs	r3, r2, #16
{
    c5bc:	b086      	sub	sp, #24
	uint8_t const op_and_addr[] = {
    c5be:	f88d 3005 	strb.w	r3, [sp, #5]
	const struct spi_buf tx_buf[] = {
    c5c2:	ab01      	add	r3, sp, #4
    c5c4:	9302      	str	r3, [sp, #8]
    c5c6:	2304      	movs	r3, #4
    c5c8:	9303      	str	r3, [sp, #12]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c5ca:	ab02      	add	r3, sp, #8
    c5cc:	9304      	str	r3, [sp, #16]
    c5ce:	2301      	movs	r3, #1
	uint8_t const op_and_addr[] = {
    c5d0:	f88d 1004 	strb.w	r1, [sp, #4]
    c5d4:	ba52      	rev16	r2, r2
	err = spi_write(get_dev_data(dev)->spi,
    c5d6:	6841      	ldr	r1, [r0, #4]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c5d8:	9305      	str	r3, [sp, #20]
	err = spi_write(get_dev_data(dev)->spi,
    c5da:	68c3      	ldr	r3, [r0, #12]
	uint8_t const op_and_addr[] = {
    c5dc:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    c5e0:	4604      	mov	r4, r0
	err = spi_write(get_dev_data(dev)->spi,
    c5e2:	aa04      	add	r2, sp, #16
    c5e4:	3104      	adds	r1, #4
    c5e6:	6818      	ldr	r0, [r3, #0]
    c5e8:	f004 f958 	bl	1089c <spi_write>
	if (err != 0) {
    c5ec:	4602      	mov	r2, r0
    c5ee:	b198      	cbz	r0, c618 <perform_erase_op+0x60>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c5f0:	2301      	movs	r3, #1
    c5f2:	f04f 0000 	mov.w	r0, #0
    c5f6:	490c      	ldr	r1, [pc, #48]	; (c628 <perform_erase_op+0x70>)
    c5f8:	f363 0007 	bfi	r0, r3, #0, #8
    c5fc:	4b0b      	ldr	r3, [pc, #44]	; (c62c <perform_erase_op+0x74>)
    c5fe:	1a5b      	subs	r3, r3, r1
    c600:	08db      	lsrs	r3, r3, #3
    c602:	f363 108f 	bfi	r0, r3, #6, #10
    c606:	490a      	ldr	r1, [pc, #40]	; (c630 <perform_erase_op+0x78>)
    c608:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    c60c:	f004 fc81 	bl	10f12 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c610:	f06f 0004 	mvn.w	r0, #4
}
    c614:	b006      	add	sp, #24
    c616:	bd10      	pop	{r4, pc}
		err = wait_until_ready(dev);
    c618:	4620      	mov	r0, r4
    c61a:	f004 f931 	bl	10880 <wait_until_ready>
	return (err != 0) ? -EIO : 0;
    c61e:	2800      	cmp	r0, #0
    c620:	bf18      	it	ne
    c622:	f06f 0004 	mvnne.w	r0, #4
    c626:	e7f5      	b.n	c614 <perform_erase_op+0x5c>
    c628:	000119e4 	.word	0x000119e4
    c62c:	00011a1c 	.word	0x00011a1c
    c630:	00011c70 	.word	0x00011c70

0000c634 <spi_flash_at45_write>:
{
    c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (addr >= 0 && (addr + size) <= chip_size);
    c638:	f1b1 0a00 	subs.w	sl, r1, #0
{
    c63c:	b089      	sub	sp, #36	; 0x24
    c63e:	4606      	mov	r6, r0
    c640:	4617      	mov	r7, r2
    c642:	461d      	mov	r5, r3
	return (addr >= 0 && (addr + size) <= chip_size);
    c644:	db59      	blt.n	c6fa <spi_flash_at45_write+0xc6>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    c646:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return (addr >= 0 && (addr + size) <= chip_size);
    c64a:	eb0a 0203 	add.w	r2, sl, r3
    c64e:	f8d8 1020 	ldr.w	r1, [r8, #32]
    c652:	4291      	cmp	r1, r2
    c654:	d351      	bcc.n	c6fa <spi_flash_at45_write+0xc6>
	acquire(dev);
    c656:	f004 f90b 	bl	10870 <acquire>
	uint8_t const op_and_addr[] = {
    c65a:	f04f 0958 	mov.w	r9, #88	; 0x58
	const struct spi_buf tx_buf[] = {
    c65e:	f04f 0b04 	mov.w	fp, #4
	while (len) {
    c662:	2d00      	cmp	r5, #0
    c664:	d039      	beq.n	c6da <spi_flash_at45_write+0xa6>
			offset - (offset & (cfg->page_size - 1));
    c666:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
	err = spi_write(get_dev_data(dev)->spi,
    c66a:	6871      	ldr	r1, [r6, #4]
			offset - (offset & (cfg->page_size - 1));
    c66c:	4254      	negs	r4, r2
		off_t current_page_start =
    c66e:	ea04 040a 	and.w	r4, r4, sl
		if (chunk_len > (current_page_end - offset)) {
    c672:	eba4 040a 	sub.w	r4, r4, sl
    c676:	4414      	add	r4, r2
		(offset >> 16) & 0xFF,
    c678:	ea4f 422a 	mov.w	r2, sl, asr #16
	uint8_t const op_and_addr[] = {
    c67c:	f88d 2005 	strb.w	r2, [sp, #5]
    c680:	fa9a f29a 	rev16.w	r2, sl
    c684:	f8ad 2006 	strh.w	r2, [sp, #6]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c688:	aa04      	add	r2, sp, #16
    c68a:	42ac      	cmp	r4, r5
    c68c:	9202      	str	r2, [sp, #8]
    c68e:	f04f 0202 	mov.w	r2, #2
    c692:	bf28      	it	cs
    c694:	462c      	movcs	r4, r5
	err = spi_write(get_dev_data(dev)->spi,
    c696:	68f0      	ldr	r0, [r6, #12]
	uint8_t const op_and_addr[] = {
    c698:	f88d 9004 	strb.w	r9, [sp, #4]
	const struct spi_buf tx_buf[] = {
    c69c:	ab01      	add	r3, sp, #4
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c69e:	9203      	str	r2, [sp, #12]
	err = spi_write(get_dev_data(dev)->spi,
    c6a0:	3104      	adds	r1, #4
    c6a2:	aa02      	add	r2, sp, #8
    c6a4:	6800      	ldr	r0, [r0, #0]
	const struct spi_buf tx_buf[] = {
    c6a6:	e9cd 3b04 	strd	r3, fp, [sp, #16]
    c6aa:	e9cd 7406 	strd	r7, r4, [sp, #24]
	err = spi_write(get_dev_data(dev)->spi,
    c6ae:	f004 f8f5 	bl	1089c <spi_write>
	if (err != 0) {
    c6b2:	4602      	mov	r2, r0
    c6b4:	b1c0      	cbz	r0, c6e8 <spi_flash_at45_write+0xb4>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c6b6:	2301      	movs	r3, #1
    c6b8:	f04f 0000 	mov.w	r0, #0
    c6bc:	4910      	ldr	r1, [pc, #64]	; (c700 <spi_flash_at45_write+0xcc>)
    c6be:	f363 0007 	bfi	r0, r3, #0, #8
    c6c2:	4b10      	ldr	r3, [pc, #64]	; (c704 <spi_flash_at45_write+0xd0>)
    c6c4:	1a5b      	subs	r3, r3, r1
    c6c6:	08db      	lsrs	r3, r3, #3
    c6c8:	f363 108f 	bfi	r0, r3, #6, #10
    c6cc:	490e      	ldr	r1, [pc, #56]	; (c708 <spi_flash_at45_write+0xd4>)
    c6ce:	f44f 73a2 	mov.w	r3, #324	; 0x144
    c6d2:	f004 fc1e 	bl	10f12 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c6d6:	f06f 0504 	mvn.w	r5, #4
	release(dev);
    c6da:	4630      	mov	r0, r6
    c6dc:	f004 f8c4 	bl	10868 <release>
}
    c6e0:	4628      	mov	r0, r5
    c6e2:	b009      	add	sp, #36	; 0x24
    c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = wait_until_ready(dev);
    c6e8:	4630      	mov	r0, r6
    c6ea:	f004 f8c9 	bl	10880 <wait_until_ready>
	return (err != 0) ? -EIO : 0;
    c6ee:	2800      	cmp	r0, #0
    c6f0:	d1f1      	bne.n	c6d6 <spi_flash_at45_write+0xa2>
		data    = (uint8_t *)data + chunk_len;
    c6f2:	4427      	add	r7, r4
		offset += chunk_len;
    c6f4:	44a2      	add	sl, r4
		len    -= chunk_len;
    c6f6:	1b2d      	subs	r5, r5, r4
    c6f8:	e7b3      	b.n	c662 <spi_flash_at45_write+0x2e>
		return -ENODEV;
    c6fa:	f06f 0512 	mvn.w	r5, #18
    c6fe:	e7ef      	b.n	c6e0 <spi_flash_at45_write+0xac>
    c700:	000119e4 	.word	0x000119e4
    c704:	00011a1c 	.word	0x00011a1c
    c708:	00011c70 	.word	0x00011c70

0000c70c <power_down_op>:
{
    c70c:	b530      	push	{r4, r5, lr}
    c70e:	b087      	sub	sp, #28
	const struct spi_buf tx_buf[] = {
    c710:	f10d 0307 	add.w	r3, sp, #7
    c714:	9302      	str	r3, [sp, #8]
    c716:	2301      	movs	r3, #1
{
    c718:	4615      	mov	r5, r2
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c71a:	aa02      	add	r2, sp, #8
{
    c71c:	f88d 1007 	strb.w	r1, [sp, #7]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c720:	e9cd 2304 	strd	r2, r3, [sp, #16]
	err = spi_write(get_dev_data(dev)->spi,
    c724:	6841      	ldr	r1, [r0, #4]
	const struct spi_buf tx_buf[] = {
    c726:	9303      	str	r3, [sp, #12]
	err = spi_write(get_dev_data(dev)->spi,
    c728:	68c3      	ldr	r3, [r0, #12]
    c72a:	aa04      	add	r2, sp, #16
    c72c:	3104      	adds	r1, #4
    c72e:	6818      	ldr	r0, [r3, #0]
    c730:	f004 f8b4 	bl	1089c <spi_write>
	if (err != 0) {
    c734:	4604      	mov	r4, r0
    c736:	b1a8      	cbz	r0, c764 <power_down_op+0x58>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c738:	2301      	movs	r3, #1
    c73a:	f04f 0000 	mov.w	r0, #0
    c73e:	4a0b      	ldr	r2, [pc, #44]	; (c76c <power_down_op+0x60>)
    c740:	f363 0007 	bfi	r0, r3, #0, #8
    c744:	4b0a      	ldr	r3, [pc, #40]	; (c770 <power_down_op+0x64>)
    c746:	490b      	ldr	r1, [pc, #44]	; (c774 <power_down_op+0x68>)
    c748:	1a9b      	subs	r3, r3, r2
    c74a:	08db      	lsrs	r3, r3, #3
    c74c:	f363 108f 	bfi	r0, r3, #6, #10
    c750:	4622      	mov	r2, r4
    c752:	f240 2317 	movw	r3, #535	; 0x217
    c756:	f004 fbdc 	bl	10f12 <log_string_sync>
		return -EIO;
    c75a:	f06f 0404 	mvn.w	r4, #4
}
    c75e:	4620      	mov	r0, r4
    c760:	b007      	add	sp, #28
    c762:	bd30      	pop	{r4, r5, pc}
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    c764:	4628      	mov	r0, r5
    c766:	f004 ffa3 	bl	116b0 <z_impl_k_busy_wait>
    c76a:	e7f8      	b.n	c75e <power_down_op+0x52>
    c76c:	000119e4 	.word	0x000119e4
    c770:	00011a1c 	.word	0x00011a1c
    c774:	00011c70 	.word	0x00011c70

0000c778 <spi_flash_at45_init>:
{
    c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_ERR("STARTING MY INIT");
    c77c:	2301      	movs	r3, #1
	const struct spi_flash_at45_config *dev_config = get_dev_config(dev);
    c77e:	6846      	ldr	r6, [r0, #4]
	struct spi_flash_at45_data *dev_data = get_dev_data(dev);
    c780:	68c7      	ldr	r7, [r0, #12]
{
    c782:	4604      	mov	r4, r0
	LOG_ERR("STARTING MY INIT");
    c784:	f04f 0000 	mov.w	r0, #0
    c788:	4d67      	ldr	r5, [pc, #412]	; (c928 <spi_flash_at45_init+0x1b0>)
    c78a:	f363 0007 	bfi	r0, r3, #0, #8
    c78e:	4b67      	ldr	r3, [pc, #412]	; (c92c <spi_flash_at45_init+0x1b4>)
{
    c790:	b093      	sub	sp, #76	; 0x4c
	LOG_ERR("STARTING MY INIT");
    c792:	1aed      	subs	r5, r5, r3
    c794:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    c798:	f365 108f 	bfi	r0, r5, #6, #10
    c79c:	4964      	ldr	r1, [pc, #400]	; (c930 <spi_flash_at45_init+0x1b8>)
    c79e:	f004 fbb8 	bl	10f12 <log_string_sync>
	printk("STARTING MY INIT");
    c7a2:	4863      	ldr	r0, [pc, #396]	; (c930 <spi_flash_at45_init+0x1b8>)
    c7a4:	f004 fa11 	bl	10bca <printk>
	dev_data->spi = device_get_binding(dev_config->spi_bus);
    c7a8:	6830      	ldr	r0, [r6, #0]
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c7aa:	f003 f957 	bl	fa5c <z_impl_device_get_binding>
    c7ae:	6038      	str	r0, [r7, #0]
	if (!dev_data->spi) {
    c7b0:	b970      	cbnz	r0, c7d0 <spi_flash_at45_init+0x58>
		LOG_ERR("Cannot find %s", dev_config->spi_bus);
    c7b2:	2301      	movs	r3, #1
    c7b4:	6832      	ldr	r2, [r6, #0]
    c7b6:	f363 0007 	bfi	r0, r3, #0, #8
    c7ba:	f365 108f 	bfi	r0, r5, #6, #10
			LOG_ERR("Cannot find %s", dev_config->cs_gpio);
    c7be:	495d      	ldr	r1, [pc, #372]	; (c934 <spi_flash_at45_init+0x1bc>)
    c7c0:	f004 fba7 	bl	10f12 <log_string_sync>
			return -ENODEV;
    c7c4:	f06f 0612 	mvn.w	r6, #18
}
    c7c8:	4630      	mov	r0, r6
    c7ca:	b013      	add	sp, #76	; 0x4c
    c7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dev_config->cs_gpio) {
    c7d0:	6930      	ldr	r0, [r6, #16]
    c7d2:	b180      	cbz	r0, c7f6 <spi_flash_at45_init+0x7e>
    c7d4:	f003 f942 	bl	fa5c <z_impl_device_get_binding>
		dev_data->spi_cs.gpio_dev =
    c7d8:	6078      	str	r0, [r7, #4]
		if (!dev_data->spi_cs.gpio_dev) {
    c7da:	b930      	cbnz	r0, c7ea <spi_flash_at45_init+0x72>
			LOG_ERR("Cannot find %s", dev_config->cs_gpio);
    c7dc:	2301      	movs	r3, #1
    c7de:	f363 0007 	bfi	r0, r3, #0, #8
    c7e2:	f365 108f 	bfi	r0, r5, #6, #10
    c7e6:	6932      	ldr	r2, [r6, #16]
    c7e8:	e7e9      	b.n	c7be <spi_flash_at45_init+0x46>
		dev_data->spi_cs.gpio_pin = dev_config->cs_pin;
    c7ea:	7d33      	ldrb	r3, [r6, #20]
    c7ec:	733b      	strb	r3, [r7, #12]
		dev_data->spi_cs.gpio_dt_flags = dev_config->cs_dt_flags;
    c7ee:	7d73      	ldrb	r3, [r6, #21]
    c7f0:	737b      	strb	r3, [r7, #13]
		dev_data->spi_cs.delay = 0;
    c7f2:	2300      	movs	r3, #0
    c7f4:	60bb      	str	r3, [r7, #8]
	acquire(dev);
    c7f6:	4620      	mov	r0, r4
    c7f8:	f004 f83a 	bl	10870 <acquire>
	power_down_op(dev, CMD_EXIT_DPD, dev_config->t_exit_dpd);
    c7fc:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
    c7fe:	21ab      	movs	r1, #171	; 0xab
    c800:	4620      	mov	r0, r4
    c802:	f7ff ff83 	bl	c70c <power_down_op>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    c806:	6866      	ldr	r6, [r4, #4]
	const struct spi_buf rx_buf[] = {
    c808:	2100      	movs	r1, #0
	uint8_t const *expected_id = cfg->jedec_id;
    c80a:	f106 0331 	add.w	r3, r6, #49	; 0x31
    c80e:	9305      	str	r3, [sp, #20]
	const uint8_t opcode = CMD_READ_ID;
    c810:	239f      	movs	r3, #159	; 0x9f
    c812:	f88d 301b 	strb.w	r3, [sp, #27]
	const struct spi_buf tx_buf[] = {
    c816:	f10d 031b 	add.w	r3, sp, #27
    c81a:	9308      	str	r3, [sp, #32]
    c81c:	2301      	movs	r3, #1
    c81e:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf rx_buf[] = {
    c820:	2301      	movs	r3, #1
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c822:	f10d 0820 	add.w	r8, sp, #32
	const struct spi_buf rx_buf[] = {
    c826:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c82a:	e9cd 830a 	strd	r8, r3, [sp, #40]	; 0x28
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c82e:	2302      	movs	r3, #2
	const struct spi_buf rx_buf[] = {
    c830:	f04f 0a03 	mov.w	sl, #3
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c834:	930d      	str	r3, [sp, #52]	; 0x34
	err = spi_transceive(get_dev_data(dev)->spi,
    c836:	68e3      	ldr	r3, [r4, #12]
	const struct spi_buf rx_buf[] = {
    c838:	f10d 091c 	add.w	r9, sp, #28
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c83c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
	const struct spi_buf rx_buf[] = {
    c840:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    c844:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c848:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	err = spi_transceive(get_dev_data(dev)->spi,
    c84c:	6818      	ldr	r0, [r3, #0]
    c84e:	6883      	ldr	r3, [r0, #8]
    c850:	aa0a      	add	r2, sp, #40	; 0x28
    c852:	681b      	ldr	r3, [r3, #0]
    c854:	1d31      	adds	r1, r6, #4
    c856:	461f      	mov	r7, r3
    c858:	ab0c      	add	r3, sp, #48	; 0x30
    c85a:	47b8      	blx	r7
	if (err != 0) {
    c85c:	4602      	mov	r2, r0
    c85e:	b168      	cbz	r0, c87c <spi_flash_at45_init+0x104>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c860:	2301      	movs	r3, #1
    c862:	f04f 0000 	mov.w	r0, #0
    c866:	f363 0007 	bfi	r0, r3, #0, #8
    c86a:	2388      	movs	r3, #136	; 0x88
    c86c:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c870:	4931      	ldr	r1, [pc, #196]	; (c938 <spi_flash_at45_init+0x1c0>)
    c872:	f004 fb4e 	bl	10f12 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c876:	f06f 0604 	mvn.w	r6, #4
    c87a:	e021      	b.n	c8c0 <spi_flash_at45_init+0x148>
	if (memcmp(expected_id, read_id, sizeof(read_id)) != 0) {
    c87c:	4652      	mov	r2, sl
    c87e:	4649      	mov	r1, r9
    c880:	9805      	ldr	r0, [sp, #20]
    c882:	f004 fc6b 	bl	1115c <memcmp>
    c886:	b1f8      	cbz	r0, c8c8 <spi_flash_at45_init+0x150>
		LOG_ERR("Wrong JEDEC ID: %02X %02X %02X, "
    c888:	2301      	movs	r3, #1
    c88a:	f04f 0000 	mov.w	r0, #0
    c88e:	f363 0007 	bfi	r0, r3, #0, #8
    c892:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    c896:	f365 108f 	bfi	r0, r5, #6, #10
    c89a:	9303      	str	r3, [sp, #12]
    c89c:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
    c8a0:	f89d 201c 	ldrb.w	r2, [sp, #28]
    c8a4:	9302      	str	r3, [sp, #8]
    c8a6:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    c8aa:	4924      	ldr	r1, [pc, #144]	; (c93c <spi_flash_at45_init+0x1c4>)
    c8ac:	9301      	str	r3, [sp, #4]
    c8ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
		return -ENODEV;
    c8b2:	f06f 0612 	mvn.w	r6, #18
		LOG_ERR("Wrong JEDEC ID: %02X %02X %02X, "
    c8b6:	9300      	str	r3, [sp, #0]
    c8b8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    c8bc:	f004 fb29 	bl	10f12 <log_string_sync>
	release(dev);
    c8c0:	4620      	mov	r0, r4
    c8c2:	f003 ffd1 	bl	10868 <release>
	return err;
    c8c6:	e77f      	b.n	c7c8 <spi_flash_at45_init+0x50>
	uint8_t const conf_binary_page_size[] = CMD_BINARY_PAGE_SIZE;
    c8c8:	4b1d      	ldr	r3, [pc, #116]	; (c940 <spi_flash_at45_init+0x1c8>)
	err = read_status_register(dev, &status);
    c8ca:	4641      	mov	r1, r8
	uint8_t const conf_binary_page_size[] = CMD_BINARY_PAGE_SIZE;
    c8cc:	930a      	str	r3, [sp, #40]	; 0x28
	const struct spi_buf tx_buf[] = {
    c8ce:	ab0a      	add	r3, sp, #40	; 0x28
    c8d0:	930c      	str	r3, [sp, #48]	; 0x30
    c8d2:	2304      	movs	r3, #4
    c8d4:	930d      	str	r3, [sp, #52]	; 0x34
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c8d6:	ab0c      	add	r3, sp, #48	; 0x30
    c8d8:	930e      	str	r3, [sp, #56]	; 0x38
    c8da:	2301      	movs	r3, #1
	err = read_status_register(dev, &status);
    c8dc:	4620      	mov	r0, r4
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c8de:	930f      	str	r3, [sp, #60]	; 0x3c
	err = read_status_register(dev, &status);
    c8e0:	f7ff fe2e 	bl	c540 <read_status_register>
	if (err != 0) {
    c8e4:	4606      	mov	r6, r0
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d1ea      	bne.n	c8c0 <spi_flash_at45_init+0x148>
	if (status & STATUS_REG_LSB_PAGE_SIZE_BIT) {
    c8ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    c8ee:	07db      	lsls	r3, r3, #31
    c8f0:	d4e6      	bmi.n	c8c0 <spi_flash_at45_init+0x148>
	err = spi_write(get_dev_data(dev)->spi,
    c8f2:	6861      	ldr	r1, [r4, #4]
    c8f4:	68e3      	ldr	r3, [r4, #12]
    c8f6:	465a      	mov	r2, fp
    c8f8:	3104      	adds	r1, #4
    c8fa:	6818      	ldr	r0, [r3, #0]
    c8fc:	f003 ffce 	bl	1089c <spi_write>
	if (err != 0) {
    c900:	4602      	mov	r2, r0
    c902:	b140      	cbz	r0, c916 <spi_flash_at45_init+0x19e>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c904:	2301      	movs	r3, #1
    c906:	f04f 0000 	mov.w	r0, #0
    c90a:	f363 0007 	bfi	r0, r3, #0, #8
    c90e:	f365 108f 	bfi	r0, r5, #6, #10
    c912:	23ea      	movs	r3, #234	; 0xea
    c914:	e7ac      	b.n	c870 <spi_flash_at45_init+0xf8>
		err = wait_until_ready(dev);
    c916:	4620      	mov	r0, r4
    c918:	f003 ffb2 	bl	10880 <wait_until_ready>
	return (err != 0) ? -EIO : 0;
    c91c:	2800      	cmp	r0, #0
    c91e:	bf18      	it	ne
    c920:	f06f 0604 	mvnne.w	r6, #4
    c924:	e7cc      	b.n	c8c0 <spi_flash_at45_init+0x148>
    c926:	bf00      	nop
    c928:	00011a1c 	.word	0x00011a1c
    c92c:	000119e4 	.word	0x000119e4
    c930:	00011cc5 	.word	0x00011cc5
    c934:	00011cd6 	.word	0x00011cd6
    c938:	00011c70 	.word	0x00011c70
    c93c:	00011ce5 	.word	0x00011ce5
    c940:	a6802a3d 	.word	0xa6802a3d

0000c944 <spi_flash_at45_erase>:
{
    c944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (addr >= 0 && (addr + size) <= chip_size);
    c948:	1e0d      	subs	r5, r1, #0
{
    c94a:	b086      	sub	sp, #24
    c94c:	4680      	mov	r8, r0
    c94e:	4614      	mov	r4, r2
	return (addr >= 0 && (addr + size) <= chip_size);
    c950:	f2c0 8094 	blt.w	ca7c <spi_flash_at45_erase+0x138>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    c954:	6847      	ldr	r7, [r0, #4]
	return (addr >= 0 && (addr + size) <= chip_size);
    c956:	18ab      	adds	r3, r5, r2
    c958:	6a3a      	ldr	r2, [r7, #32]
    c95a:	429a      	cmp	r2, r3
    c95c:	f0c0 808e 	bcc.w	ca7c <spi_flash_at45_erase+0x138>
	if (((offset % cfg->page_size) != 0)
    c960:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    c962:	fb95 f2f3 	sdiv	r2, r5, r3
    c966:	fb03 5212 	mls	r2, r3, r2, r5
    c96a:	2a00      	cmp	r2, #0
    c96c:	f040 8089 	bne.w	ca82 <spi_flash_at45_erase+0x13e>
	    || ((size % cfg->page_size) != 0)) {
    c970:	fbb4 f2f3 	udiv	r2, r4, r3
    c974:	fb03 4312 	mls	r3, r3, r2, r4
    c978:	2b00      	cmp	r3, #0
    c97a:	f040 8082 	bne.w	ca82 <spi_flash_at45_erase+0x13e>
	acquire(dev);
    c97e:	f003 ff77 	bl	10870 <acquire>
	if (size == cfg->chip_size) {
    c982:	6a3b      	ldr	r3, [r7, #32]
    c984:	42a3      	cmp	r3, r4
    c986:	d146      	bne.n	ca16 <spi_flash_at45_erase+0xd2>
	uint8_t const chip_erase_cmd[] = CMD_CHIP_ERASE;
    c988:	4b3f      	ldr	r3, [pc, #252]	; (ca88 <spi_flash_at45_erase+0x144>)
	err = spi_write(get_dev_data(dev)->spi,
    c98a:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint8_t const chip_erase_cmd[] = CMD_CHIP_ERASE;
    c98e:	9301      	str	r3, [sp, #4]
	const struct spi_buf tx_buf[] = {
    c990:	ab01      	add	r3, sp, #4
    c992:	9302      	str	r3, [sp, #8]
    c994:	2304      	movs	r3, #4
    c996:	9303      	str	r3, [sp, #12]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c998:	ab02      	add	r3, sp, #8
    c99a:	9304      	str	r3, [sp, #16]
    c99c:	2301      	movs	r3, #1
    c99e:	9305      	str	r3, [sp, #20]
	err = spi_write(get_dev_data(dev)->spi,
    c9a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    c9a4:	aa04      	add	r2, sp, #16
    c9a6:	3104      	adds	r1, #4
    c9a8:	6818      	ldr	r0, [r3, #0]
    c9aa:	f003 ff77 	bl	1089c <spi_write>
	if (err != 0) {
    c9ae:	4602      	mov	r2, r0
    c9b0:	b1c0      	cbz	r0, c9e4 <spi_flash_at45_erase+0xa0>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c9b2:	2301      	movs	r3, #1
    c9b4:	f04f 0000 	mov.w	r0, #0
    c9b8:	4934      	ldr	r1, [pc, #208]	; (ca8c <spi_flash_at45_erase+0x148>)
    c9ba:	f363 0007 	bfi	r0, r3, #0, #8
    c9be:	4b34      	ldr	r3, [pc, #208]	; (ca90 <spi_flash_at45_erase+0x14c>)
	return (err != 0) ? -EIO : 0;
    c9c0:	f06f 0604 	mvn.w	r6, #4
    c9c4:	1a5b      	subs	r3, r3, r1
    c9c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c9c8:	f363 108f 	bfi	r0, r3, #6, #10
    c9cc:	4931      	ldr	r1, [pc, #196]	; (ca94 <spi_flash_at45_erase+0x150>)
    c9ce:	f44f 73c1 	mov.w	r3, #386	; 0x182
    c9d2:	f004 fa9e 	bl	10f12 <log_string_sync>
	release(dev);
    c9d6:	4640      	mov	r0, r8
    c9d8:	f003 ff46 	bl	10868 <release>
}
    c9dc:	4630      	mov	r0, r6
    c9de:	b006      	add	sp, #24
    c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = wait_until_ready(dev);
    c9e4:	4640      	mov	r0, r8
    c9e6:	f003 ff4b 	bl	10880 <wait_until_ready>
	return (err != 0) ? -EIO : 0;
    c9ea:	1e06      	subs	r6, r0, #0
    c9ec:	bf18      	it	ne
    c9ee:	f06f 0604 	mvnne.w	r6, #4
    c9f2:	e7f0      	b.n	c9d6 <spi_flash_at45_erase+0x92>
			if (is_erase_possible(cfg->sector_size,
    c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	return (requested_size >= entity_size &&
    c9f6:	42a3      	cmp	r3, r4
    c9f8:	d811      	bhi.n	ca1e <spi_flash_at45_erase+0xda>
		(offset & (entity_size - 1)) == 0);
    c9fa:	3b01      	subs	r3, #1
			if (is_erase_possible(cfg->sector_size,
    c9fc:	422b      	tst	r3, r5
    c9fe:	d10e      	bne.n	ca1e <spi_flash_at45_erase+0xda>
				err = perform_erase_op(dev, CMD_SECTOR_ERASE,
    ca00:	462a      	mov	r2, r5
    ca02:	217c      	movs	r1, #124	; 0x7c
    ca04:	4640      	mov	r0, r8
    ca06:	f7ff fdd7 	bl	c5b8 <perform_erase_op>
    ca0a:	4606      	mov	r6, r0
				offset += cfg->sector_size;
    ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				offset += cfg->page_size;
    ca0e:	441d      	add	r5, r3
				size   -= cfg->page_size;
    ca10:	1ae4      	subs	r4, r4, r3
			if (err != 0) {
    ca12:	2e00      	cmp	r6, #0
    ca14:	d1df      	bne.n	c9d6 <spi_flash_at45_erase+0x92>
		while (size) {
    ca16:	2c00      	cmp	r4, #0
    ca18:	d1ec      	bne.n	c9f4 <spi_flash_at45_erase+0xb0>
    ca1a:	4626      	mov	r6, r4
    ca1c:	e7db      	b.n	c9d6 <spi_flash_at45_erase+0x92>
			} else if (is_erase_possible(cfg->block_size,
    ca1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	return (requested_size >= entity_size &&
    ca20:	42a3      	cmp	r3, r4
    ca22:	d80a      	bhi.n	ca3a <spi_flash_at45_erase+0xf6>
		(offset & (entity_size - 1)) == 0);
    ca24:	3b01      	subs	r3, #1
			} else if (is_erase_possible(cfg->block_size,
    ca26:	422b      	tst	r3, r5
    ca28:	d107      	bne.n	ca3a <spi_flash_at45_erase+0xf6>
				err = perform_erase_op(dev, CMD_BLOCK_ERASE,
    ca2a:	462a      	mov	r2, r5
    ca2c:	2150      	movs	r1, #80	; 0x50
    ca2e:	4640      	mov	r0, r8
    ca30:	f7ff fdc2 	bl	c5b8 <perform_erase_op>
				offset += cfg->block_size;
    ca34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
				err = perform_erase_op(dev, CMD_BLOCK_ERASE,
    ca36:	4606      	mov	r6, r0
				offset += cfg->block_size;
    ca38:	e7e9      	b.n	ca0e <spi_flash_at45_erase+0xca>
			} else if (is_erase_possible(cfg->page_size,
    ca3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
	return (requested_size >= entity_size &&
    ca3c:	42a3      	cmp	r3, r4
    ca3e:	d80a      	bhi.n	ca56 <spi_flash_at45_erase+0x112>
		(offset & (entity_size - 1)) == 0);
    ca40:	3b01      	subs	r3, #1
			} else if (is_erase_possible(cfg->page_size,
    ca42:	422b      	tst	r3, r5
    ca44:	d107      	bne.n	ca56 <spi_flash_at45_erase+0x112>
				err = perform_erase_op(dev, CMD_PAGE_ERASE,
    ca46:	462a      	mov	r2, r5
    ca48:	2181      	movs	r1, #129	; 0x81
    ca4a:	4640      	mov	r0, r8
    ca4c:	f7ff fdb4 	bl	c5b8 <perform_erase_op>
				offset += cfg->page_size;
    ca50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
				err = perform_erase_op(dev, CMD_PAGE_ERASE,
    ca52:	4606      	mov	r6, r0
				offset += cfg->page_size;
    ca54:	e7db      	b.n	ca0e <spi_flash_at45_erase+0xca>
				LOG_ERR("Unsupported erase request: "
    ca56:	2301      	movs	r3, #1
    ca58:	f04f 0000 	mov.w	r0, #0
    ca5c:	4a0b      	ldr	r2, [pc, #44]	; (ca8c <spi_flash_at45_erase+0x148>)
    ca5e:	f363 0007 	bfi	r0, r3, #0, #8
    ca62:	4b0b      	ldr	r3, [pc, #44]	; (ca90 <spi_flash_at45_erase+0x14c>)
    ca64:	490c      	ldr	r1, [pc, #48]	; (ca98 <spi_flash_at45_erase+0x154>)
    ca66:	1a9b      	subs	r3, r3, r2
    ca68:	08db      	lsrs	r3, r3, #3
    ca6a:	f363 108f 	bfi	r0, r3, #6, #10
    ca6e:	4622      	mov	r2, r4
    ca70:	462b      	mov	r3, r5
    ca72:	f004 fa4e 	bl	10f12 <log_string_sync>
				err = -EINVAL;
    ca76:	f06f 0615 	mvn.w	r6, #21
    ca7a:	e7ac      	b.n	c9d6 <spi_flash_at45_erase+0x92>
		return -ENODEV;
    ca7c:	f06f 0612 	mvn.w	r6, #18
    ca80:	e7ac      	b.n	c9dc <spi_flash_at45_erase+0x98>
		return -EINVAL;
    ca82:	f06f 0615 	mvn.w	r6, #21
    ca86:	e7a9      	b.n	c9dc <spi_flash_at45_erase+0x98>
    ca88:	9a8094c7 	.word	0x9a8094c7
    ca8c:	000119e4 	.word	0x000119e4
    ca90:	00011a1c 	.word	0x00011a1c
    ca94:	00011c70 	.word	0x00011c70
    ca98:	00011c98 	.word	0x00011c98

0000ca9c <spi_flash_at45_read>:
{
    ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (addr >= 0 && (addr + size) <= chip_size);
    ca9e:	2900      	cmp	r1, #0
{
    caa0:	b08d      	sub	sp, #52	; 0x34
    caa2:	4605      	mov	r5, r0
	return (addr >= 0 && (addr + size) <= chip_size);
    caa4:	db42      	blt.n	cb2c <spi_flash_at45_read+0x90>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    caa6:	6846      	ldr	r6, [r0, #4]
	return (addr >= 0 && (addr + size) <= chip_size);
    caa8:	18cc      	adds	r4, r1, r3
    caaa:	6a37      	ldr	r7, [r6, #32]
    caac:	42a7      	cmp	r7, r4
    caae:	d33d      	bcc.n	cb2c <spi_flash_at45_read+0x90>
	uint8_t const op_and_addr[] = {
    cab0:	2401      	movs	r4, #1
		(offset >> 16) & 0xFF,
    cab2:	140f      	asrs	r7, r1, #16
	const struct spi_buf rx_buf[] = {
    cab4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	uint8_t const op_and_addr[] = {
    cab8:	ba49      	rev16	r1, r1
	DEF_BUF_SET(tx_buf_set, tx_buf);
    caba:	ab02      	add	r3, sp, #8
	uint8_t const op_and_addr[] = {
    cabc:	f8ad 1006 	strh.w	r1, [sp, #6]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    cac0:	e9cd 3404 	strd	r3, r4, [sp, #16]
	const struct spi_buf tx_buf[] = {
    cac4:	a901      	add	r1, sp, #4
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cac6:	ab08      	add	r3, sp, #32
	uint8_t const op_and_addr[] = {
    cac8:	f88d 7005 	strb.w	r7, [sp, #5]
	const struct spi_buf tx_buf[] = {
    cacc:	9102      	str	r1, [sp, #8]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cace:	9306      	str	r3, [sp, #24]
	const struct spi_buf tx_buf[] = {
    cad0:	2104      	movs	r1, #4
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cad2:	2302      	movs	r3, #2
	const struct spi_buf rx_buf[] = {
    cad4:	2700      	movs	r7, #0
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cad6:	9307      	str	r3, [sp, #28]
	uint8_t const op_and_addr[] = {
    cad8:	f88d 4004 	strb.w	r4, [sp, #4]
	const struct spi_buf tx_buf[] = {
    cadc:	9103      	str	r1, [sp, #12]
	const struct spi_buf rx_buf[] = {
    cade:	e9cd 7108 	strd	r7, r1, [sp, #32]
	acquire(dev);
    cae2:	f003 fec5 	bl	10870 <acquire>
	err = spi_transceive(get_dev_data(dev)->spi,
    cae6:	68eb      	ldr	r3, [r5, #12]
    cae8:	6818      	ldr	r0, [r3, #0]
    caea:	6883      	ldr	r3, [r0, #8]
    caec:	aa04      	add	r2, sp, #16
    caee:	681c      	ldr	r4, [r3, #0]
    caf0:	1d31      	adds	r1, r6, #4
    caf2:	ab06      	add	r3, sp, #24
    caf4:	47a0      	blx	r4
    caf6:	4604      	mov	r4, r0
	release(dev);
    caf8:	4628      	mov	r0, r5
    cafa:	f003 feb5 	bl	10868 <release>
	if (err != 0) {
    cafe:	b194      	cbz	r4, cb26 <spi_flash_at45_read+0x8a>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    cb00:	2301      	movs	r3, #1
    cb02:	f04f 0000 	mov.w	r0, #0
    cb06:	4a0b      	ldr	r2, [pc, #44]	; (cb34 <spi_flash_at45_read+0x98>)
    cb08:	f363 0007 	bfi	r0, r3, #0, #8
    cb0c:	4b0a      	ldr	r3, [pc, #40]	; (cb38 <spi_flash_at45_read+0x9c>)
    cb0e:	490b      	ldr	r1, [pc, #44]	; (cb3c <spi_flash_at45_read+0xa0>)
    cb10:	1a9b      	subs	r3, r3, r2
    cb12:	08db      	lsrs	r3, r3, #3
    cb14:	f363 108f 	bfi	r0, r3, #6, #10
    cb18:	4622      	mov	r2, r4
    cb1a:	f240 1321 	movw	r3, #289	; 0x121
    cb1e:	f004 f9f8 	bl	10f12 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    cb22:	f06f 0404 	mvn.w	r4, #4
}
    cb26:	4620      	mov	r0, r4
    cb28:	b00d      	add	sp, #52	; 0x34
    cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
    cb2c:	f06f 0412 	mvn.w	r4, #18
    cb30:	e7f9      	b.n	cb26 <spi_flash_at45_read+0x8a>
    cb32:	bf00      	nop
    cb34:	000119e4 	.word	0x000119e4
    cb38:	00011a1c 	.word	0x00011a1c
    cb3c:	00011c70 	.word	0x00011c70

0000cb40 <main>:
static uint8_t read_buf[TEST_REGION_SIZE];

static int spi_flash_at45_init(const struct device *dev);

void main(void)
{
    cb40:	b538      	push	{r3, r4, r5, lr}
	printk("Hello world, using: %s\n", CONFIG_BOARD);
    cb42:	491d      	ldr	r1, [pc, #116]	; (cbb8 <main+0x78>)
    cb44:	481d      	ldr	r0, [pc, #116]	; (cbbc <main+0x7c>)
    cb46:	f004 f840 	bl	10bca <printk>
    cb4a:	481d      	ldr	r0, [pc, #116]	; (cbc0 <main+0x80>)
    cb4c:	f002 ff86 	bl	fa5c <z_impl_device_get_binding>



	const struct device * dev;
	dev = device_get_binding("GPIO_0");
	if (dev == NULL) {
    cb50:	4604      	mov	r4, r0
    cb52:	b928      	cbnz	r0, cb60 <main+0x20>
        printk("Hello world, using: %s\n", CONFIG_BOARD);
        k_sleep(K_MSEC(1000));
    }


}
    cb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Device %s not found!\n", "GPIO_0");
    cb58:	4919      	ldr	r1, [pc, #100]	; (cbc0 <main+0x80>)
    cb5a:	481a      	ldr	r0, [pc, #104]	; (cbc4 <main+0x84>)
    cb5c:	f004 b835 	b.w	10bca <printk>
	gpio_pin_configure(dev, 16, GPIO_OUTPUT);
    cb60:	2110      	movs	r1, #16
    cb62:	f003 feed 	bl	10940 <gpio_pin_configure.constprop.1>
	gpio_pin_set(dev, 16, 1);
    cb66:	2110      	movs	r1, #16
    cb68:	4620      	mov	r0, r4
    cb6a:	f003 fede 	bl	1092a <gpio_pin_set.constprop.0>
	gpio_pin_configure(dev, 0, GPIO_OUTPUT);
    cb6e:	2100      	movs	r1, #0
    cb70:	4620      	mov	r0, r4
    cb72:	f003 fee5 	bl	10940 <gpio_pin_configure.constprop.1>
	gpio_pin_set(dev, 0, 1);
    cb76:	2100      	movs	r1, #0
    cb78:	4620      	mov	r0, r4
    cb7a:	f003 fed6 	bl	1092a <gpio_pin_set.constprop.0>
	gpio_pin_configure(dev, 31, GPIO_OUTPUT);
    cb7e:	211f      	movs	r1, #31
    cb80:	4620      	mov	r0, r4
    cb82:	f003 fedd 	bl	10940 <gpio_pin_configure.constprop.1>
	gpio_pin_set(dev, 31, 1);
    cb86:	4620      	mov	r0, r4
    cb88:	211f      	movs	r1, #31
    cb8a:	f003 fece 	bl	1092a <gpio_pin_set.constprop.0>
        printk("Hello world, using: %s\n", CONFIG_BOARD);
    cb8e:	4d0a      	ldr	r5, [pc, #40]	; (cbb8 <main+0x78>)
    cb90:	4c0a      	ldr	r4, [pc, #40]	; (cbbc <main+0x7c>)
    cb92:	4629      	mov	r1, r5
    cb94:	4620      	mov	r0, r4
    cb96:	f004 f818 	bl	10bca <printk>
	return z_impl_k_sleep(timeout);
    cb9a:	2100      	movs	r1, #0
    cb9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cba0:	f003 fbec 	bl	1037c <z_impl_k_sleep>
        printk("Hello world, using: %s\n", CONFIG_BOARD);
    cba4:	4629      	mov	r1, r5
    cba6:	4620      	mov	r0, r4
    cba8:	f004 f80f 	bl	10bca <printk>
    cbac:	2100      	movs	r1, #0
    cbae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cbb2:	f003 fbe3 	bl	1037c <z_impl_k_sleep>
    cbb6:	e7ec      	b.n	cb92 <main+0x52>
    cbb8:	00011d44 	.word	0x00011d44
    cbbc:	00011d56 	.word	0x00011d56
    cbc0:	00011d2e 	.word	0x00011d2e
    cbc4:	00011d6e 	.word	0x00011d6e

0000cbc8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    cbc8:	680b      	ldr	r3, [r1, #0]
    cbca:	3301      	adds	r3, #1
    cbcc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    cbce:	4b01      	ldr	r3, [pc, #4]	; (cbd4 <char_out+0xc>)
    cbd0:	681b      	ldr	r3, [r3, #0]
    cbd2:	4718      	bx	r3
    cbd4:	20010074 	.word	0x20010074

0000cbd8 <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbdc:	b087      	sub	sp, #28
    cbde:	460f      	mov	r7, r1
    cbe0:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
    cbe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cbe4:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    cbe6:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cbe8:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    cbea:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cbec:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    cbf0:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    cbf4:	4c1c      	ldr	r4, [pc, #112]	; (cc68 <print_digits.part.0+0x90>)
    cbf6:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    cbfa:	ea50 0301 	orrs.w	r3, r0, r1
    cbfe:	d11a      	bne.n	cc36 <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
    cc00:	2d14      	cmp	r5, #20
		buf[i] = '0';
    cc02:	bf08      	it	eq
    cc04:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cc06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    cc08:	bf18      	it	ne
    cc0a:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cc0c:	442c      	add	r4, r5
		buf[i] = '0';
    cc0e:	bf08      	it	eq
    cc10:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cc14:	2c15      	cmp	r4, #21
    cc16:	d017      	beq.n	cc48 <print_digits.part.0+0x70>
    cc18:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
    cc1a:	2c00      	cmp	r4, #0
    cc1c:	dc16      	bgt.n	cc4c <print_digits.part.0+0x74>
		out(buf[i], ctx);
    cc1e:	f81d 0005 	ldrb.w	r0, [sp, r5]
    cc22:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    cc24:	3501      	adds	r5, #1
		out(buf[i], ctx);
    cc26:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    cc28:	2d15      	cmp	r5, #21
    cc2a:	d1f8      	bne.n	cc1e <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
    cc2c:	2c00      	cmp	r4, #0
    cc2e:	dc15      	bgt.n	cc5c <print_digits.part.0+0x84>
}
    cc30:	b007      	add	sp, #28
    cc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    cc36:	4642      	mov	r2, r8
    cc38:	464b      	mov	r3, r9
    cc3a:	f7ff faff 	bl	c23c <__aeabi_uldivmod>
    cc3e:	5ca3      	ldrb	r3, [r4, r2]
    cc40:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    cc44:	3d01      	subs	r5, #1
    cc46:	e7d8      	b.n	cbfa <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cc48:	2400      	movs	r4, #0
    cc4a:	e7e8      	b.n	cc1e <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
    cc4c:	f1bb 0f00 	cmp.w	fp, #0
    cc50:	d0e5      	beq.n	cc1e <print_digits.part.0+0x46>
		out(pad_char, ctx);
    cc52:	4639      	mov	r1, r7
    cc54:	4650      	mov	r0, sl
    cc56:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    cc58:	3c01      	subs	r4, #1
    cc5a:	e7de      	b.n	cc1a <print_digits.part.0+0x42>
		out(pad_char, ctx);
    cc5c:	4639      	mov	r1, r7
    cc5e:	4650      	mov	r0, sl
    cc60:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    cc62:	3c01      	subs	r4, #1
    cc64:	e7e2      	b.n	cc2c <print_digits.part.0+0x54>
    cc66:	bf00      	nop
    cc68:	00011d84 	.word	0x00011d84

0000cc6c <__printk_hook_install>:
	_char_out = fn;
    cc6c:	4b01      	ldr	r3, [pc, #4]	; (cc74 <__printk_hook_install+0x8>)
    cc6e:	6018      	str	r0, [r3, #0]
}
    cc70:	4770      	bx	lr
    cc72:	bf00      	nop
    cc74:	20010074 	.word	0x20010074

0000cc78 <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
    cc78:	2300      	movs	r3, #0
{
    cc7a:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    cc7c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    cc7e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    cc80:	4803      	ldr	r0, [pc, #12]	; (cc90 <vprintk+0x18>)
    cc82:	460b      	mov	r3, r1
    cc84:	a901      	add	r1, sp, #4
    cc86:	f003 fe8c 	bl	109a2 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    cc8a:	b003      	add	sp, #12
    cc8c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc90:	0000cbc9 	.word	0x0000cbc9

0000cc94 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cc94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc98:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    cc9c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cc9e:	f019 0808 	ands.w	r8, r9, #8
    cca2:	d00d      	beq.n	ccc0 <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
    cca4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cca6:	bf0c      	ite	eq
    cca8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccac:	f049 0920 	orrne.w	r9, r9, #32
    ccb0:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ccb4:	f382 8811 	msr	BASEPRI, r2
    ccb8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ccbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ccc0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    ccc4:	2902      	cmp	r1, #2
    ccc6:	d107      	bne.n	ccd8 <process_event+0x44>
			evt = process_recheck(mgr);
    ccc8:	4620      	mov	r0, r4
    ccca:	f003 ff8b 	bl	10be4 <process_recheck>
		if (evt == EVT_NOP) {
    ccce:	2800      	cmp	r0, #0
    ccd0:	d0f0      	beq.n	ccb4 <process_event+0x20>
		if (evt == EVT_COMPLETE) {
    ccd2:	2801      	cmp	r0, #1
    ccd4:	8b23      	ldrh	r3, [r4, #24]
    ccd6:	d14a      	bne.n	cd6e <process_event+0xda>
			res = mgr->last_res;
    ccd8:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ccda:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
    ccdc:	2f00      	cmp	r7, #0
    ccde:	da15      	bge.n	cd0c <process_event+0x78>
		*clients = mgr->clients;
    cce0:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    cce2:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cce6:	f023 0307 	bic.w	r3, r3, #7
    ccea:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccee:	8323      	strh	r3, [r4, #24]
		onoff_transition_fn transit = NULL;
    ccf0:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccf2:	8b23      	ldrh	r3, [r4, #24]
    ccf4:	f003 0a07 	and.w	sl, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ccf8:	45ca      	cmp	sl, r9
    ccfa:	d002      	beq.n	cd02 <process_event+0x6e>
		if (do_monitors
    ccfc:	68a1      	ldr	r1, [r4, #8]
    ccfe:	2900      	cmp	r1, #0
    cd00:	d156      	bne.n	cdb0 <process_event+0x11c>
		    || !sys_slist_is_empty(&clients)
    cd02:	b90d      	cbnz	r5, cd08 <process_event+0x74>
		    || (transit != NULL)) {
    cd04:	2e00      	cmp	r6, #0
    cd06:	d06d      	beq.n	cde4 <process_event+0x150>
    cd08:	2100      	movs	r1, #0
    cd0a:	e052      	b.n	cdb2 <process_event+0x11e>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd0c:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cd10:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cd12:	2801      	cmp	r0, #1
    cd14:	d81c      	bhi.n	cd50 <process_event+0xbc>
		*clients = mgr->clients;
    cd16:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    cd1a:	2906      	cmp	r1, #6
		*clients = mgr->clients;
    cd1c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    cd1e:	b29b      	uxth	r3, r3
	list->tail = NULL;
    cd20:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cd24:	d10a      	bne.n	cd3c <process_event+0xa8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cd26:	b13d      	cbz	r5, cd38 <process_event+0xa4>
    cd28:	4628      	mov	r0, r5
    cd2a:	8b61      	ldrh	r1, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cd2c:	6800      	ldr	r0, [r0, #0]
				mgr->refs += 1U;
    cd2e:	3101      	adds	r1, #1
    cd30:	b289      	uxth	r1, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cd32:	2800      	cmp	r0, #0
    cd34:	d1fa      	bne.n	cd2c <process_event+0x98>
    cd36:	8361      	strh	r1, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd38:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd3c:	8323      	strh	r3, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    cd3e:	4620      	mov	r0, r4
    cd40:	f003 ff50 	bl	10be4 <process_recheck>
    cd44:	2800      	cmp	r0, #0
    cd46:	d0d3      	beq.n	ccf0 <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cd48:	8b23      	ldrh	r3, [r4, #24]
    cd4a:	f043 0320 	orr.w	r3, r3, #32
    cd4e:	e7ce      	b.n	ccee <process_event+0x5a>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cd50:	2904      	cmp	r1, #4
    cd52:	d10a      	bne.n	cd6a <process_event+0xd6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd54:	f023 0307 	bic.w	r3, r3, #7
    cd58:	b299      	uxth	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd5a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    cd5c:	4620      	mov	r0, r4
    cd5e:	f003 ff41 	bl	10be4 <process_recheck>
    cd62:	b110      	cbz	r0, cd6a <process_event+0xd6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cd64:	f041 0120 	orr.w	r1, r1, #32
    cd68:	8321      	strh	r1, [r4, #24]
    cd6a:	2500      	movs	r5, #0
    cd6c:	e7c0      	b.n	ccf0 <process_event+0x5c>
		} else if (evt == EVT_START) {
    cd6e:	2803      	cmp	r0, #3
    cd70:	d109      	bne.n	cd86 <process_event+0xf2>
			transit = mgr->transitions->start;
    cd72:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd74:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    cd78:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd7a:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd7e:	2500      	movs	r5, #0
    cd80:	8323      	strh	r3, [r4, #24]
		res = 0;
    cd82:	462f      	mov	r7, r5
    cd84:	e7b5      	b.n	ccf2 <process_event+0x5e>
		} else if (evt == EVT_STOP) {
    cd86:	2804      	cmp	r0, #4
    cd88:	d106      	bne.n	cd98 <process_event+0x104>
			transit = mgr->transitions->stop;
    cd8a:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd8c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    cd90:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd92:	f043 0304 	orr.w	r3, r3, #4
    cd96:	e7f2      	b.n	cd7e <process_event+0xea>
		} else if (evt == EVT_RESET) {
    cd98:	2805      	cmp	r0, #5
    cd9a:	d106      	bne.n	cdaa <process_event+0x116>
			transit = mgr->transitions->reset;
    cd9c:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd9e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    cda2:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cda4:	f043 0305 	orr.w	r3, r3, #5
    cda8:	e7e9      	b.n	cd7e <process_event+0xea>
    cdaa:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    cdac:	462e      	mov	r6, r5
    cdae:	e7e8      	b.n	cd82 <process_event+0xee>
				   && !sys_slist_is_empty(&mgr->monitors);
    cdb0:	2101      	movs	r1, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cdb2:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    cdb6:	8323      	strh	r3, [r4, #24]
    cdb8:	f382 8811 	msr	BASEPRI, r2
    cdbc:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cdc0:	b9f9      	cbnz	r1, ce02 <process_event+0x16e>
	while (!sys_slist_is_empty(list)) {
    cdc2:	bb85      	cbnz	r5, ce26 <process_event+0x192>
			if (transit != NULL) {
    cdc4:	b116      	cbz	r6, cdcc <process_event+0x138>
				transit(mgr, transition_complete);
    cdc6:	4921      	ldr	r1, [pc, #132]	; (ce4c <process_event+0x1b8>)
    cdc8:	4620      	mov	r0, r4
    cdca:	47b0      	blx	r6
	__asm__ volatile(
    cdcc:	f04f 0320 	mov.w	r3, #32
    cdd0:	f3ef 8211 	mrs	r2, BASEPRI
    cdd4:	f383 8811 	msr	BASEPRI, r3
    cdd8:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cddc:	8b23      	ldrh	r3, [r4, #24]
    cdde:	f023 0308 	bic.w	r3, r3, #8
    cde2:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cde4:	8b23      	ldrh	r3, [r4, #24]
    cde6:	06d9      	lsls	r1, r3, #27
    cde8:	d527      	bpl.n	ce3a <process_event+0x1a6>
			evt = EVT_COMPLETE;
    cdea:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cdec:	f023 0310 	bic.w	r3, r3, #16
    cdf0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    cdf2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    cdf6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    cdfa:	2900      	cmp	r1, #0
    cdfc:	f47f af62 	bne.w	ccc4 <process_event+0x30>
out:
    ce00:	e758      	b.n	ccb4 <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ce02:	68a1      	ldr	r1, [r4, #8]
    ce04:	2900      	cmp	r1, #0
    ce06:	d0dc      	beq.n	cdc2 <process_event+0x12e>
    ce08:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    ce0c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ce10:	463b      	mov	r3, r7
    ce12:	4652      	mov	r2, sl
    ce14:	4620      	mov	r0, r4
    ce16:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ce18:	f1b9 0f00 	cmp.w	r9, #0
    ce1c:	d0d1      	beq.n	cdc2 <process_event+0x12e>
    ce1e:	4649      	mov	r1, r9
    ce20:	f8d9 9000 	ldr.w	r9, [r9]
    ce24:	e7f2      	b.n	ce0c <process_event+0x178>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ce26:	f8d5 9000 	ldr.w	r9, [r5]
		notify_one(mgr, cli, state, res);
    ce2a:	4629      	mov	r1, r5
    ce2c:	463b      	mov	r3, r7
    ce2e:	4652      	mov	r2, sl
    ce30:	4620      	mov	r0, r4
    ce32:	f003 fef3 	bl	10c1c <notify_one>
	while (!sys_slist_is_empty(list)) {
    ce36:	464d      	mov	r5, r9
    ce38:	e7c3      	b.n	cdc2 <process_event+0x12e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ce3a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ce3e:	bf1e      	ittt	ne
    ce40:	f023 0320 	bicne.w	r3, r3, #32
    ce44:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    ce46:	2102      	movne	r1, #2
    ce48:	e7d3      	b.n	cdf2 <process_event+0x15e>
    ce4a:	bf00      	nop
    ce4c:	00010c49 	.word	0x00010c49

0000ce50 <nordicsemi_nrf91_init>:
    ce50:	f04f 0220 	mov.w	r2, #32
    ce54:	f3ef 8311 	mrs	r3, BASEPRI
    ce58:	f382 8811 	msr	BASEPRI, r2
    ce5c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ce60:	2101      	movs	r1, #1
    ce62:	4a04      	ldr	r2, [pc, #16]	; (ce74 <nordicsemi_nrf91_init+0x24>)
    ce64:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    ce68:	f383 8811 	msr	BASEPRI, r3
    ce6c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ce70:	2000      	movs	r0, #0
    ce72:	4770      	bx	lr
    ce74:	40039000 	.word	0x40039000

0000ce78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ce78:	b120      	cbz	r0, ce84 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    ce7a:	4b03      	ldr	r3, [pc, #12]	; (ce88 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    ce7c:	0180      	lsls	r0, r0, #6
    ce7e:	f043 0301 	orr.w	r3, r3, #1
    ce82:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop
    ce88:	00011a90 	.word	0x00011a90

0000ce8c <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
    ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
    ce90:	4b12      	ldr	r3, [pc, #72]	; (cedc <log_generic+0x50>)
{
    ce92:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
    ce94:	681b      	ldr	r3, [r3, #0]
{
    ce96:	4681      	mov	r9, r0
    ce98:	468a      	mov	sl, r1
    ce9a:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
    ce9c:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
    ce9e:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
    cea0:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    cea2:	4c0f      	ldr	r4, [pc, #60]	; (cee0 <log_generic+0x54>)
    cea4:	4d0f      	ldr	r5, [pc, #60]	; (cee4 <log_generic+0x58>)
    cea6:	1b2d      	subs	r5, r5, r4
    cea8:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    ceaa:	42ae      	cmp	r6, r5
    ceac:	db02      	blt.n	ceb4 <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
    ceae:	b005      	add	sp, #20
    ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ceb4:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend)) {
    ceb6:	795b      	ldrb	r3, [r3, #5]
    ceb8:	b163      	cbz	r3, ced4 <log_generic+0x48>
	if (backend->api->put_sync_string) {
    ceba:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
    cebc:	9703      	str	r7, [sp, #12]
    cebe:	f8d3 b004 	ldr.w	fp, [r3, #4]
    cec2:	f1bb 0f00 	cmp.w	fp, #0
    cec6:	d005      	beq.n	ced4 <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
    cec8:	9700      	str	r7, [sp, #0]
    ceca:	4653      	mov	r3, sl
    cecc:	4642      	mov	r2, r8
    cece:	4649      	mov	r1, r9
    ced0:	4620      	mov	r0, r4
    ced2:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
    ced4:	3601      	adds	r6, #1
    ced6:	3410      	adds	r4, #16
    ced8:	e7e7      	b.n	ceaa <log_generic+0x1e>
    ceda:	bf00      	nop
    cedc:	20010078 	.word	0x20010078
    cee0:	00011a34 	.word	0x00011a34
    cee4:	00011a44 	.word	0x00011a44

0000cee8 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    cee8:	4b03      	ldr	r3, [pc, #12]	; (cef8 <log_core_init+0x10>)
    ceea:	4a04      	ldr	r2, [pc, #16]	; (cefc <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    ceec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    cef0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    cef2:	f000 ba0f 	b.w	d314 <log_output_timestamp_freq_set>
    cef6:	bf00      	nop
    cef8:	20010078 	.word	0x20010078
    cefc:	00010f0b 	.word	0x00010f0b

0000cf00 <log_source_name_get>:
    cf00:	4a04      	ldr	r2, [pc, #16]	; (cf14 <log_source_name_get+0x14>)
    cf02:	4b05      	ldr	r3, [pc, #20]	; (cf18 <log_source_name_get+0x18>)
    cf04:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    cf06:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    cf0a:	bf34      	ite	cc
    cf0c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    cf10:	2000      	movcs	r0, #0
}
    cf12:	4770      	bx	lr
    cf14:	000119e4 	.word	0x000119e4
    cf18:	00011a34 	.word	0x00011a34

0000cf1c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    cf1c:	4b09      	ldr	r3, [pc, #36]	; (cf44 <log_backend_enable+0x28>)

	log_backend_id_set(backend, id);
    cf1e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    cf20:	1ac3      	subs	r3, r0, r3
    cf22:	111b      	asrs	r3, r3, #4
    cf24:	3301      	adds	r3, #1
{
    cf26:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    cf28:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    cf2a:	2201      	movs	r2, #1
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
    cf2c:	6843      	ldr	r3, [r0, #4]

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    cf2e:	4c06      	ldr	r4, [pc, #24]	; (cf48 <log_backend_enable+0x2c>)
    cf30:	715a      	strb	r2, [r3, #5]
    cf32:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    cf34:	6019      	str	r1, [r3, #0]
    cf36:	b912      	cbnz	r2, cf3e <log_backend_enable+0x22>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    cf38:	4804      	ldr	r0, [pc, #16]	; (cf4c <log_backend_enable+0x30>)
    cf3a:	f003 fa45 	bl	103c8 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    cf3e:	2301      	movs	r3, #1
    cf40:	7023      	strb	r3, [r4, #0]
}
    cf42:	bd10      	pop	{r4, pc}
    cf44:	00011a34 	.word	0x00011a34
    cf48:	200106a0 	.word	0x200106a0
    cf4c:	20010414 	.word	0x20010414

0000cf50 <log_init>:
{
    cf50:	b570      	push	{r4, r5, r6, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cf52:	4b0f      	ldr	r3, [pc, #60]	; (cf90 <log_init+0x40>)
    cf54:	e8d3 5fef 	ldaex	r5, [r3]
    cf58:	1c6a      	adds	r2, r5, #1
    cf5a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cf5e:	2900      	cmp	r1, #0
    cf60:	d1f8      	bne.n	cf54 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    cf62:	b92d      	cbnz	r5, cf70 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    cf64:	4c0b      	ldr	r4, [pc, #44]	; (cf94 <log_init+0x44>)
    cf66:	4e0c      	ldr	r6, [pc, #48]	; (cf98 <log_init+0x48>)
    cf68:	1b36      	subs	r6, r6, r4
    cf6a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    cf6c:	42b5      	cmp	r5, r6
    cf6e:	db00      	blt.n	cf72 <log_init+0x22>
}
    cf70:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    cf72:	7b23      	ldrb	r3, [r4, #12]
    cf74:	b143      	cbz	r3, cf88 <log_init+0x38>
			if (backend->api->init != NULL) {
    cf76:	6823      	ldr	r3, [r4, #0]
    cf78:	695b      	ldr	r3, [r3, #20]
    cf7a:	b103      	cbz	r3, cf7e <log_init+0x2e>
				backend->api->init();
    cf7c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    cf7e:	2204      	movs	r2, #4
    cf80:	2100      	movs	r1, #0
    cf82:	4620      	mov	r0, r4
    cf84:	f7ff ffca 	bl	cf1c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    cf88:	3501      	adds	r5, #1
    cf8a:	3410      	adds	r4, #16
    cf8c:	e7ee      	b.n	cf6c <log_init+0x1c>
    cf8e:	bf00      	nop
    cf90:	20010530 	.word	0x20010530
    cf94:	00011a34 	.word	0x00011a34
    cf98:	00011a44 	.word	0x00011a44

0000cf9c <z_impl_log_panic>:
{
    cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    cf9e:	4f0c      	ldr	r7, [pc, #48]	; (cfd0 <z_impl_log_panic+0x34>)
    cfa0:	783d      	ldrb	r5, [r7, #0]
    cfa2:	b94d      	cbnz	r5, cfb8 <z_impl_log_panic+0x1c>
	log_init();
    cfa4:	f7ff ffd4 	bl	cf50 <log_init>
    cfa8:	4c0a      	ldr	r4, [pc, #40]	; (cfd4 <z_impl_log_panic+0x38>)
    cfaa:	4e0b      	ldr	r6, [pc, #44]	; (cfd8 <z_impl_log_panic+0x3c>)
    cfac:	1b36      	subs	r6, r6, r4
    cfae:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cfb0:	42b5      	cmp	r5, r6
    cfb2:	db02      	blt.n	cfba <z_impl_log_panic+0x1e>
	panic_mode = true;
    cfb4:	2301      	movs	r3, #1
    cfb6:	703b      	strb	r3, [r7, #0]
}
    cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    cfba:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cfbc:	795b      	ldrb	r3, [r3, #5]
    cfbe:	b11b      	cbz	r3, cfc8 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    cfc0:	6823      	ldr	r3, [r4, #0]
    cfc2:	4620      	mov	r0, r4
    cfc4:	691b      	ldr	r3, [r3, #16]
    cfc6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cfc8:	3501      	adds	r5, #1
    cfca:	3410      	adds	r4, #16
    cfcc:	e7f0      	b.n	cfb0 <z_impl_log_panic+0x14>
    cfce:	bf00      	nop
    cfd0:	200106a1 	.word	0x200106a1
    cfd4:	00011a34 	.word	0x00011a34
    cfd8:	00011a44 	.word	0x00011a44

0000cfdc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    cfdc:	b40e      	push	{r1, r2, r3}
    cfde:	b503      	push	{r0, r1, lr}
    cfe0:	ab03      	add	r3, sp, #12
    cfe2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    cfe6:	4601      	mov	r1, r0
    cfe8:	4804      	ldr	r0, [pc, #16]	; (cffc <print_formatted+0x20>)
	va_start(args, fmt);
    cfea:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    cfec:	f003 fcd9 	bl	109a2 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    cff0:	2000      	movs	r0, #0
    cff2:	b002      	add	sp, #8
    cff4:	f85d eb04 	ldr.w	lr, [sp], #4
    cff8:	b003      	add	sp, #12
    cffa:	4770      	bx	lr
    cffc:	00010f3b 	.word	0x00010f3b

0000d000 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    d004:	f011 0402 	ands.w	r4, r1, #2
{
    d008:	b085      	sub	sp, #20
    d00a:	4606      	mov	r6, r0
    d00c:	4690      	mov	r8, r2
    d00e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    d012:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    d016:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    d01a:	d007      	beq.n	d02c <prefix_print+0x2c>
	if (!format) {
    d01c:	f011 0f44 	tst.w	r1, #68	; 0x44
    d020:	d137      	bne.n	d092 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    d022:	461a      	mov	r2, r3
    d024:	4932      	ldr	r1, [pc, #200]	; (d0f0 <prefix_print+0xf0>)
    d026:	f7ff ffd9 	bl	cfdc <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    d02a:	4604      	mov	r4, r0
	if (color) {
    d02c:	f1b9 0f00 	cmp.w	r9, #0
    d030:	d00a      	beq.n	d048 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    d032:	4b30      	ldr	r3, [pc, #192]	; (d0f4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    d034:	4930      	ldr	r1, [pc, #192]	; (d0f8 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    d036:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    d03a:	4b30      	ldr	r3, [pc, #192]	; (d0fc <prefix_print+0xfc>)
    d03c:	4630      	mov	r0, r6
    d03e:	2a00      	cmp	r2, #0
    d040:	bf08      	it	eq
    d042:	461a      	moveq	r2, r3
    d044:	f7ff ffca 	bl	cfdc <print_formatted>
	if (level_on) {
    d048:	b13d      	cbz	r5, d05a <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    d04a:	4b2d      	ldr	r3, [pc, #180]	; (d100 <prefix_print+0x100>)
    d04c:	492d      	ldr	r1, [pc, #180]	; (d104 <prefix_print+0x104>)
    d04e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    d052:	4630      	mov	r0, r6
    d054:	f7ff ffc2 	bl	cfdc <print_formatted>
    d058:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    d05a:	f1b8 0f00 	cmp.w	r8, #0
    d05e:	d044      	beq.n	d0ea <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    d060:	2301      	movs	r3, #1
    d062:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    d066:	4b28      	ldr	r3, [pc, #160]	; (d108 <prefix_print+0x108>)
    d068:	f017 0f10 	tst.w	r7, #16
    d06c:	4f27      	ldr	r7, [pc, #156]	; (d10c <prefix_print+0x10c>)
    d06e:	bf18      	it	ne
    d070:	461f      	movne	r7, r3
    d072:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    d076:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    d07a:	f7ff ff41 	bl	cf00 <log_source_name_get>
    d07e:	4639      	mov	r1, r7
    d080:	4602      	mov	r2, r0
    d082:	4630      	mov	r0, r6
    d084:	f7ff ffaa 	bl	cfdc <print_formatted>
    d088:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    d08a:	4420      	add	r0, r4
    d08c:	b005      	add	sp, #20
    d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    d092:	4a1f      	ldr	r2, [pc, #124]	; (d110 <prefix_print+0x110>)
    d094:	6811      	ldr	r1, [r2, #0]
    d096:	b331      	cbz	r1, d0e6 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    d098:	4a1e      	ldr	r2, [pc, #120]	; (d114 <prefix_print+0x114>)
    d09a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    d09e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    d0a0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    d0a4:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
    d0a8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    d0ac:	fbb4 f2fe 	udiv	r2, r4, lr
    d0b0:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    d0b4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    d0b8:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d0bc:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    d0c0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d0c4:	fb01 441b 	mls	r4, r1, fp, r4
    d0c8:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    d0cc:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d0d0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    d0d4:	e9cd b101 	strd	fp, r1, [sp, #4]
    d0d8:	fb0a e113 	mls	r1, sl, r3, lr
    d0dc:	9100      	str	r1, [sp, #0]
    d0de:	490e      	ldr	r1, [pc, #56]	; (d118 <prefix_print+0x118>)
    d0e0:	f7ff ff7c 	bl	cfdc <print_formatted>
    d0e4:	e7a1      	b.n	d02a <prefix_print+0x2a>
		length = 0;
    d0e6:	4608      	mov	r0, r1
    d0e8:	e79f      	b.n	d02a <prefix_print+0x2a>
	total += print_formatted(log_output,
    d0ea:	4f08      	ldr	r7, [pc, #32]	; (d10c <prefix_print+0x10c>)
    d0ec:	e7c1      	b.n	d072 <prefix_print+0x72>
    d0ee:	bf00      	nop
    d0f0:	00011dbc 	.word	0x00011dbc
    d0f4:	00011aec 	.word	0x00011aec
    d0f8:	00012309 	.word	0x00012309
    d0fc:	00011dae 	.word	0x00011dae
    d100:	00011b00 	.word	0x00011b00
    d104:	00011de1 	.word	0x00011de1
    d108:	00011db8 	.word	0x00011db8
    d10c:	00011db3 	.word	0x00011db3
    d110:	20010534 	.word	0x20010534
    d114:	20010538 	.word	0x20010538
    d118:	00011dc5 	.word	0x00011dc5

0000d11c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    d11c:	b538      	push	{r3, r4, r5, lr}
    d11e:	460c      	mov	r4, r1
	if (color) {
    d120:	07e1      	lsls	r1, r4, #31
{
    d122:	4605      	mov	r5, r0
	if (color) {
    d124:	d503      	bpl.n	d12e <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    d126:	4a08      	ldr	r2, [pc, #32]	; (d148 <postfix_print+0x2c>)
    d128:	4908      	ldr	r1, [pc, #32]	; (d14c <postfix_print+0x30>)
    d12a:	f7ff ff57 	bl	cfdc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d12e:	06e2      	lsls	r2, r4, #27
    d130:	d408      	bmi.n	d144 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d132:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    d134:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    d136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    d13a:	bf4c      	ite	mi
    d13c:	4904      	ldrmi	r1, [pc, #16]	; (d150 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    d13e:	4905      	ldrpl	r1, [pc, #20]	; (d154 <postfix_print+0x38>)
    d140:	f7ff bf4c 	b.w	cfdc <print_formatted>
}
    d144:	bd38      	pop	{r3, r4, r5, pc}
    d146:	bf00      	nop
    d148:	00011dae 	.word	0x00011dae
    d14c:	00012309 	.word	0x00012309
    d150:	000124a5 	.word	0x000124a5
    d154:	000124a4 	.word	0x000124a4

0000d158 <hexdump_line_print>:
{
    d158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d15c:	4698      	mov	r8, r3
    d15e:	9b08      	ldr	r3, [sp, #32]
    d160:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d162:	06dd      	lsls	r5, r3, #27
{
    d164:	460e      	mov	r6, r1
    d166:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d168:	d405      	bmi.n	d176 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d16a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    d16c:	bf4c      	ite	mi
    d16e:	4929      	ldrmi	r1, [pc, #164]	; (d214 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    d170:	4929      	ldrpl	r1, [pc, #164]	; (d218 <hexdump_line_print+0xc0>)
    d172:	f7ff ff33 	bl	cfdc <print_formatted>
{
    d176:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    d178:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d220 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    d17c:	4545      	cmp	r5, r8
    d17e:	db2a      	blt.n	d1d6 <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d180:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    d182:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d224 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    d186:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d228 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    d18a:	f8df a094 	ldr.w	sl, [pc, #148]	; d220 <hexdump_line_print+0xc8>
		if (i < length) {
    d18e:	42bd      	cmp	r5, r7
    d190:	d22e      	bcs.n	d1f0 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    d192:	5d72      	ldrb	r2, [r6, r5]
    d194:	4649      	mov	r1, r9
    d196:	4620      	mov	r0, r4
    d198:	f7ff ff20 	bl	cfdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d19c:	3501      	adds	r5, #1
    d19e:	2d10      	cmp	r5, #16
    d1a0:	d11f      	bne.n	d1e2 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    d1a2:	491e      	ldr	r1, [pc, #120]	; (d21c <hexdump_line_print+0xc4>)
    d1a4:	4620      	mov	r0, r4
    d1a6:	f7ff ff19 	bl	cfdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d1aa:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    d1ac:	f8df 8070 	ldr.w	r8, [pc, #112]	; d220 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    d1b0:	f8df 9078 	ldr.w	r9, [pc, #120]	; d22c <hexdump_line_print+0xd4>
		if (i < length) {
    d1b4:	42af      	cmp	r7, r5
    d1b6:	d927      	bls.n	d208 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    d1b8:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    d1ba:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    d1bc:	f1a2 0320 	sub.w	r3, r2, #32
    d1c0:	2b5f      	cmp	r3, #95	; 0x5f
    d1c2:	bf28      	it	cs
    d1c4:	222e      	movcs	r2, #46	; 0x2e
    d1c6:	4620      	mov	r0, r4
    d1c8:	f7ff ff08 	bl	cfdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d1cc:	3501      	adds	r5, #1
    d1ce:	2d10      	cmp	r5, #16
    d1d0:	d113      	bne.n	d1fa <hexdump_line_print+0xa2>
}
    d1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    d1d6:	4649      	mov	r1, r9
    d1d8:	4620      	mov	r0, r4
    d1da:	f7ff feff 	bl	cfdc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d1de:	3501      	adds	r5, #1
    d1e0:	e7cc      	b.n	d17c <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    d1e2:	076a      	lsls	r2, r5, #29
    d1e4:	d1d3      	bne.n	d18e <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    d1e6:	4651      	mov	r1, sl
    d1e8:	4620      	mov	r0, r4
    d1ea:	f7ff fef7 	bl	cfdc <print_formatted>
    d1ee:	e7ce      	b.n	d18e <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    d1f0:	4641      	mov	r1, r8
    d1f2:	4620      	mov	r0, r4
    d1f4:	f7ff fef2 	bl	cfdc <print_formatted>
    d1f8:	e7d0      	b.n	d19c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    d1fa:	076b      	lsls	r3, r5, #29
    d1fc:	d1da      	bne.n	d1b4 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d1fe:	4641      	mov	r1, r8
    d200:	4620      	mov	r0, r4
    d202:	f7ff feeb 	bl	cfdc <print_formatted>
    d206:	e7d5      	b.n	d1b4 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d208:	4641      	mov	r1, r8
    d20a:	4620      	mov	r0, r4
    d20c:	f7ff fee6 	bl	cfdc <print_formatted>
    d210:	e7dc      	b.n	d1cc <hexdump_line_print+0x74>
    d212:	bf00      	nop
    d214:	000124a5 	.word	0x000124a5
    d218:	000124a4 	.word	0x000124a4
    d21c:	00011da7 	.word	0x00011da7
    d220:	00011da5 	.word	0x00011da5
    d224:	00011da3 	.word	0x00011da3
    d228:	00011d9d 	.word	0x00011d9d
    d22c:	00011da9 	.word	0x00011da9

0000d230 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
    d230:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    d234:	f011 0407 	ands.w	r4, r1, #7
{
    d238:	4606      	mov	r6, r0
    d23a:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
    d23e:	461d      	mov	r5, r3
	if (!raw_string) {
    d240:	d00b      	beq.n	d25a <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
    d242:	f3c1 1389 	ubfx	r3, r1, #6, #10
    d246:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    d24a:	9302      	str	r3, [sp, #8]
    d24c:	e9cd 4100 	strd	r4, r1, [sp]
    d250:	4613      	mov	r3, r2
    d252:	4639      	mov	r1, r7
    d254:	2201      	movs	r2, #1
    d256:	f7ff fed3 	bl	d000 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    d25a:	4643      	mov	r3, r8
    d25c:	462a      	mov	r2, r5
    d25e:	4631      	mov	r1, r6
    d260:	480d      	ldr	r0, [pc, #52]	; (d298 <log_output_string+0x68>)
    d262:	f003 fb9e 	bl	109a2 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    d266:	b98c      	cbnz	r4, d28c <log_output_string+0x5c>
    d268:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
    d26a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    d26e:	b95b      	cbnz	r3, d288 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    d270:	2c0a      	cmp	r4, #10
    d272:	d103      	bne.n	d27c <log_output_string+0x4c>
			print_formatted(log_output, "\r");
    d274:	4909      	ldr	r1, [pc, #36]	; (d29c <log_output_string+0x6c>)
    d276:	4630      	mov	r0, r6
    d278:	f7ff feb0 	bl	cfdc <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
    d27c:	4630      	mov	r0, r6
}
    d27e:	b004      	add	sp, #16
    d280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
    d284:	f003 be72 	b.w	10f6c <log_output_flush>
	while (*fmt != '\0') {
    d288:	461c      	mov	r4, r3
    d28a:	e7ee      	b.n	d26a <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
    d28c:	4622      	mov	r2, r4
    d28e:	4639      	mov	r1, r7
    d290:	4630      	mov	r0, r6
    d292:	f7ff ff43 	bl	d11c <postfix_print>
    d296:	e7f1      	b.n	d27c <log_output_string+0x4c>
    d298:	00010f3b 	.word	0x00010f3b
    d29c:	00011dac 	.word	0x00011dac

0000d2a0 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
    d2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d2a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    d2a6:	4698      	mov	r8, r3
    d2a8:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d2ac:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
    d2b0:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d2b4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    d2b8:	9302      	str	r3, [sp, #8]
    d2ba:	e9cd 9100 	strd	r9, r1, [sp]
    d2be:	4613      	mov	r3, r2
    d2c0:	4631      	mov	r1, r6
    d2c2:	2201      	movs	r2, #1
{
    d2c4:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d2c6:	f7ff fe9b 	bl	d000 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    d2ca:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d2cc:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
    d2ce:	4910      	ldr	r1, [pc, #64]	; (d310 <log_output_hexdump+0x70>)
    d2d0:	4620      	mov	r0, r4
    d2d2:	f7ff fe83 	bl	cfdc <print_formatted>

	while (length) {
    d2d6:	b955      	cbnz	r5, d2ee <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
    d2d8:	4620      	mov	r0, r4
    d2da:	464a      	mov	r2, r9
    d2dc:	4631      	mov	r1, r6
    d2de:	f7ff ff1d 	bl	d11c <postfix_print>
	log_output_flush(log_output);
    d2e2:	4620      	mov	r0, r4
}
    d2e4:	b004      	add	sp, #16
    d2e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    d2ea:	f003 be3f 	b.w	10f6c <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    d2ee:	2d10      	cmp	r5, #16
    d2f0:	46a8      	mov	r8, r5
    d2f2:	bf28      	it	cs
    d2f4:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
    d2f8:	4639      	mov	r1, r7
    d2fa:	9600      	str	r6, [sp, #0]
    d2fc:	4653      	mov	r3, sl
    d2fe:	4642      	mov	r2, r8
    d300:	4620      	mov	r0, r4
    d302:	f7ff ff29 	bl	d158 <hexdump_line_print>
		data += part_len;
    d306:	4447      	add	r7, r8
		length -= part_len;
    d308:	eba5 0508 	sub.w	r5, r5, r8
    d30c:	e7e3      	b.n	d2d6 <log_output_hexdump+0x36>
    d30e:	bf00      	nop
    d310:	00012309 	.word	0x00012309

0000d314 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    d314:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d316:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d318:	4a07      	ldr	r2, [pc, #28]	; (d338 <log_output_timestamp_freq_set+0x24>)
{
    d31a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d31c:	4c07      	ldr	r4, [pc, #28]	; (d33c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d31e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d320:	42a0      	cmp	r0, r4
    d322:	d804      	bhi.n	d32e <log_output_timestamp_freq_set+0x1a>
    d324:	b101      	cbz	r1, d328 <log_output_timestamp_freq_set+0x14>
    d326:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d328:	4b05      	ldr	r3, [pc, #20]	; (d340 <log_output_timestamp_freq_set+0x2c>)
    d32a:	6018      	str	r0, [r3, #0]
}
    d32c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    d32e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d330:	005b      	lsls	r3, r3, #1
    d332:	2101      	movs	r1, #1
    d334:	e7f4      	b.n	d320 <log_output_timestamp_freq_set+0xc>
    d336:	bf00      	nop
    d338:	20010538 	.word	0x20010538
    d33c:	000f4240 	.word	0x000f4240
    d340:	20010534 	.word	0x20010534

0000d344 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d346:	460d      	mov	r5, r1
    d348:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    d34a:	4f06      	ldr	r7, [pc, #24]	; (d364 <char_out+0x20>)
    d34c:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    d34e:	42b4      	cmp	r4, r6
    d350:	d101      	bne.n	d356 <char_out+0x12>
	}

	return length;
}
    d352:	4628      	mov	r0, r5
    d354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    d356:	6838      	ldr	r0, [r7, #0]
    d358:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    d35c:	6883      	ldr	r3, [r0, #8]
    d35e:	685b      	ldr	r3, [r3, #4]
    d360:	4798      	blx	r3
    d362:	e7f4      	b.n	d34e <char_out+0xa>
    d364:	20010550 	.word	0x20010550

0000d368 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    d368:	4801      	ldr	r0, [pc, #4]	; (d370 <panic+0x8>)
    d36a:	f003 bdff 	b.w	10f6c <log_output_flush>
    d36e:	bf00      	nop
    d370:	00011b2c 	.word	0x00011b2c

0000d374 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    d374:	b508      	push	{r3, lr}
    d376:	4803      	ldr	r0, [pc, #12]	; (d384 <log_backend_uart_init+0x10>)
    d378:	f002 fb70 	bl	fa5c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d37c:	4b02      	ldr	r3, [pc, #8]	; (d388 <log_backend_uart_init+0x14>)
    d37e:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    d380:	bd08      	pop	{r3, pc}
    d382:	bf00      	nop
    d384:	00011e07 	.word	0x00011e07
    d388:	20010550 	.word	0x20010550

0000d38c <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
    d38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    d38e:	200f      	movs	r0, #15
    d390:	9002      	str	r0, [sp, #8]
    d392:	9807      	ldr	r0, [sp, #28]
    d394:	9001      	str	r0, [sp, #4]
    d396:	9806      	ldr	r0, [sp, #24]
    d398:	9000      	str	r0, [sp, #0]
    d39a:	4803      	ldr	r0, [pc, #12]	; (d3a8 <sync_hexdump+0x1c>)
    d39c:	f7ff ff80 	bl	d2a0 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
    d3a0:	b005      	add	sp, #20
    d3a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3a6:	bf00      	nop
    d3a8:	00011b2c 	.word	0x00011b2c

0000d3ac <sync_string>:
{
    d3ac:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    d3ae:	200f      	movs	r0, #15
    d3b0:	9001      	str	r0, [sp, #4]
    d3b2:	9804      	ldr	r0, [sp, #16]
    d3b4:	9000      	str	r0, [sp, #0]
    d3b6:	4803      	ldr	r0, [pc, #12]	; (d3c4 <sync_string+0x18>)
    d3b8:	f7ff ff3a 	bl	d230 <log_output_string>
}
    d3bc:	b003      	add	sp, #12
    d3be:	f85d fb04 	ldr.w	pc, [sp], #4
    d3c2:	bf00      	nop
    d3c4:	00011b2c 	.word	0x00011b2c

0000d3c8 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
    d3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
    d3cc:	481f      	ldr	r0, [pc, #124]	; (d44c <sys_pm_create_device_list+0x84>)
    d3ce:	f002 fb1d 	bl	fa0c <z_device_get_all_static>

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
	while (z_pm_core_devices[core_dev]) {
    d3d2:	2300      	movs	r3, #0
    d3d4:	4a1e      	ldr	r2, [pc, #120]	; (d450 <sys_pm_create_device_list+0x88>)
	size_t count = z_device_get_all_static(&all_devices);
    d3d6:	9000      	str	r0, [sp, #0]
	while (z_pm_core_devices[core_dev]) {
    d3d8:	fa1f f983 	uxth.w	r9, r3
    d3dc:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
    d3e0:	3301      	adds	r3, #1
    d3e2:	2c00      	cmp	r4, #0
    d3e4:	d1f8      	bne.n	d3d8 <sys_pm_create_device_list+0x10>
		core_dev++;
	}

	num_pm = core_dev;
    d3e6:	4e1b      	ldr	r6, [pc, #108]	; (d454 <sys_pm_create_device_list+0x8c>)
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
    d3e8:	4b18      	ldr	r3, [pc, #96]	; (d44c <sys_pm_create_device_list+0x84>)
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
    d3ea:	f8df a070 	ldr.w	sl, [pc, #112]	; d45c <sys_pm_create_device_list+0x94>
	num_pm = core_dev;
    d3ee:	f8a6 9000 	strh.w	r9, [r6]
	for (pmi = 0; pmi < count; pmi++) {
    d3f2:	9a00      	ldr	r2, [sp, #0]
    d3f4:	fa1f f884 	uxth.w	r8, r4
    d3f8:	4542      	cmp	r2, r8
    d3fa:	4645      	mov	r5, r8
    d3fc:	d802      	bhi.n	d404 <sys_pm_create_device_list+0x3c>
		}
	}
}
    d3fe:	b003      	add	sp, #12
    d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
    d404:	2118      	movs	r1, #24
    d406:	681a      	ldr	r2, [r3, #0]
    d408:	fb01 2505 	mla	r5, r1, r5, r2
		if (dev->device_pm_control == device_pm_control_nop) {
    d40c:	4912      	ldr	r1, [pc, #72]	; (d458 <sys_pm_create_device_list+0x90>)
    d40e:	692a      	ldr	r2, [r5, #16]
    d410:	428a      	cmp	r2, r1
    d412:	d101      	bne.n	d418 <sys_pm_create_device_list+0x50>
    d414:	3401      	adds	r4, #1
    d416:	e7ec      	b.n	d3f2 <sys_pm_create_device_list+0x2a>
    d418:	2700      	movs	r7, #0
		while (z_pm_core_devices[cdi]) {
    d41a:	490d      	ldr	r1, [pc, #52]	; (d450 <sys_pm_create_device_list+0x88>)
    d41c:	b2ba      	uxth	r2, r7
    d41e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    d422:	4693      	mov	fp, r2
    d424:	b151      	cbz	r1, d43c <sys_pm_create_device_list+0x74>
			if (strcmp(dev->name, z_pm_core_devices[cdi]) == 0) {
    d426:	6828      	ldr	r0, [r5, #0]
    d428:	9201      	str	r2, [sp, #4]
    d42a:	f003 fe8b 	bl	11144 <strcmp>
    d42e:	3701      	adds	r7, #1
    d430:	9a01      	ldr	r2, [sp, #4]
    d432:	4b06      	ldr	r3, [pc, #24]	; (d44c <sys_pm_create_device_list+0x84>)
    d434:	2800      	cmp	r0, #0
    d436:	d1f0      	bne.n	d41a <sys_pm_create_device_list+0x52>
				pm_devices[cdi] = pmi;
    d438:	f82a 801b 	strh.w	r8, [sl, fp, lsl #1]
		if (cdi == core_dev) {
    d43c:	454a      	cmp	r2, r9
			pm_devices[num_pm++] = pmi;
    d43e:	bf01      	itttt	eq
    d440:	8832      	ldrheq	r2, [r6, #0]
    d442:	1c51      	addeq	r1, r2, #1
    d444:	8031      	strheq	r1, [r6, #0]
    d446:	f82a 8012 	strheq.w	r8, [sl, r2, lsl #1]
    d44a:	e7e3      	b.n	d414 <sys_pm_create_device_list+0x4c>
    d44c:	20010554 	.word	0x20010554
    d450:	00011b3c 	.word	0x00011b3c
    d454:	20010680 	.word	0x20010680
    d458:	00011537 	.word	0x00011537
    d45c:	20010682 	.word	0x20010682

0000d460 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    d460:	b510      	push	{r4, lr}
    d462:	4807      	ldr	r0, [pc, #28]	; (d480 <uart_console_init+0x20>)
    d464:	f002 fafa 	bl	fa5c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    d468:	4c06      	ldr	r4, [pc, #24]	; (d484 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d46a:	4b07      	ldr	r3, [pc, #28]	; (d488 <uart_console_init+0x28>)
    d46c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    d46e:	4620      	mov	r0, r4
    d470:	f001 f900 	bl	e674 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d474:	4620      	mov	r0, r4
    d476:	f7ff fbf9 	bl	cc6c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    d47a:	2000      	movs	r0, #0
    d47c:	bd10      	pop	{r4, pc}
    d47e:	bf00      	nop
    d480:	00011e07 	.word	0x00011e07
    d484:	0000d48d 	.word	0x0000d48d
    d488:	20010558 	.word	0x20010558

0000d48c <console_out>:
	if ('\n' == c) {
    d48c:	280a      	cmp	r0, #10
{
    d48e:	b538      	push	{r3, r4, r5, lr}
    d490:	4604      	mov	r4, r0
    d492:	4d07      	ldr	r5, [pc, #28]	; (d4b0 <console_out+0x24>)
	if ('\n' == c) {
    d494:	d104      	bne.n	d4a0 <console_out+0x14>
    d496:	6828      	ldr	r0, [r5, #0]
    d498:	6883      	ldr	r3, [r0, #8]
    d49a:	210d      	movs	r1, #13
    d49c:	685b      	ldr	r3, [r3, #4]
    d49e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    d4a0:	6828      	ldr	r0, [r5, #0]
    d4a2:	6883      	ldr	r3, [r0, #8]
    d4a4:	b2e1      	uxtb	r1, r4
    d4a6:	685b      	ldr	r3, [r3, #4]
    d4a8:	4798      	blx	r3
}
    d4aa:	4620      	mov	r0, r4
    d4ac:	bd38      	pop	{r3, r4, r5, pc}
    d4ae:	bf00      	nop
    d4b0:	20010558 	.word	0x20010558

0000d4b4 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d4b4:	b570      	push	{r4, r5, r6, lr}
    d4b6:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    d4b8:	240c      	movs	r4, #12
	size_t offset = (size_t)(mgr - data->mgr);
    d4ba:	480d      	ldr	r0, [pc, #52]	; (d4f0 <onoff_stop+0x3c>)
{
    d4bc:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    d4be:	1a2b      	subs	r3, r5, r0
    d4c0:	109a      	asrs	r2, r3, #2
    d4c2:	4b0c      	ldr	r3, [pc, #48]	; (d4f4 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    d4c4:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    d4c6:	4353      	muls	r3, r2
    d4c8:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    d4ca:	435c      	muls	r4, r3
    d4cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
    d4d0:	4418      	add	r0, r3
    d4d2:	f003 fd66 	bl	10fa2 <set_off_state>
	if (err < 0) {
    d4d6:	1e01      	subs	r1, r0, #0
    d4d8:	db04      	blt.n	d4e4 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    d4da:	4b07      	ldr	r3, [pc, #28]	; (d4f8 <onoff_stop+0x44>)
    d4dc:	4423      	add	r3, r4
    d4de:	685b      	ldr	r3, [r3, #4]
    d4e0:	4798      	blx	r3
	return 0;
    d4e2:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    d4e4:	4628      	mov	r0, r5
    d4e6:	4633      	mov	r3, r6
}
    d4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d4ec:	4718      	bx	r3
    d4ee:	bf00      	nop
    d4f0:	2001056c 	.word	0x2001056c
    d4f4:	b6db6db7 	.word	0xb6db6db7
    d4f8:	00011b60 	.word	0x00011b60

0000d4fc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d500:	4c0f      	ldr	r4, [pc, #60]	; (d540 <onoff_start+0x44>)
    d502:	4d10      	ldr	r5, [pc, #64]	; (d544 <onoff_start+0x48>)
    d504:	1b03      	subs	r3, r0, r4
    d506:	109b      	asrs	r3, r3, #2
    d508:	435d      	muls	r5, r3
    d50a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    d50c:	250c      	movs	r5, #12
    d50e:	435d      	muls	r5, r3
{
    d510:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    d512:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    d516:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    d518:	4420      	add	r0, r4
    d51a:	2140      	movs	r1, #64	; 0x40
    d51c:	f003 fd5a 	bl	10fd4 <set_starting_state>
	if (err < 0) {
    d520:	1e01      	subs	r1, r0, #0
    d522:	db08      	blt.n	d536 <onoff_start+0x3a>
	subdata->cb = data->cb;
    d524:	4b08      	ldr	r3, [pc, #32]	; (d548 <onoff_start+0x4c>)
    d526:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    d528:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d52c:	4b07      	ldr	r3, [pc, #28]	; (d54c <onoff_start+0x50>)
    d52e:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    d530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    d534:	4718      	bx	r3
		notify(mgr, err);
    d536:	4638      	mov	r0, r7
    d538:	4633      	mov	r3, r6
}
    d53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    d53e:	4718      	bx	r3
    d540:	2001056c 	.word	0x2001056c
    d544:	b6db6db7 	.word	0xb6db6db7
    d548:	00011037 	.word	0x00011037
    d54c:	00011b60 	.word	0x00011b60

0000d550 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    d550:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d552:	2200      	movs	r2, #0
    d554:	2101      	movs	r1, #1
{
    d556:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d558:	2005      	movs	r0, #5
    d55a:	f000 faa5 	bl	daa8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    d55e:	2005      	movs	r0, #5
    d560:	f000 fa70 	bl	da44 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    d564:	480f      	ldr	r0, [pc, #60]	; (d5a4 <clk_init+0x54>)
    d566:	f001 ff7b 	bl	f460 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d56a:	4b0f      	ldr	r3, [pc, #60]	; (d5a8 <clk_init+0x58>)
    d56c:	4298      	cmp	r0, r3
    d56e:	d115      	bne.n	d59c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d570:	f003 ffcd 	bl	1150e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    d574:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d576:	490d      	ldr	r1, [pc, #52]	; (d5ac <clk_init+0x5c>)
    d578:	4630      	mov	r0, r6
    d57a:	f003 fb82 	bl	10c82 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d57e:	2800      	cmp	r0, #0
    d580:	db0b      	blt.n	d59a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d582:	2501      	movs	r5, #1
    d584:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    d586:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d588:	4908      	ldr	r1, [pc, #32]	; (d5ac <clk_init+0x5c>)
    d58a:	f104 001c 	add.w	r0, r4, #28
    d58e:	f003 fb78 	bl	10c82 <onoff_manager_init>
		if (err < 0) {
    d592:	2800      	cmp	r0, #0
    d594:	db01      	blt.n	d59a <clk_init+0x4a>
	}

	return 0;
    d596:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d598:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    d59a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d59c:	f06f 0004 	mvn.w	r0, #4
    d5a0:	e7fb      	b.n	d59a <clk_init+0x4a>
    d5a2:	bf00      	nop
    d5a4:	0000d649 	.word	0x0000d649
    d5a8:	0bad0000 	.word	0x0bad0000
    d5ac:	00011b78 	.word	0x00011b78

0000d5b0 <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
    d5b0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d5b2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d5b4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d5b6:	434b      	muls	r3, r1
    d5b8:	4808      	ldr	r0, [pc, #32]	; (d5dc <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
    d5ba:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d5bc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d5be:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    d5c0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d5c4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d5c6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d5c8:	f003 fd22 	bl	11010 <set_on_state>
	if (callback) {
    d5cc:	b12d      	cbz	r5, d5da <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d5ce:	4632      	mov	r2, r6
    d5d0:	462b      	mov	r3, r5
}
    d5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d5d6:	4802      	ldr	r0, [pc, #8]	; (d5e0 <clkstarted_handle.constprop.10+0x30>)
    d5d8:	4718      	bx	r3
}
    d5da:	bd70      	pop	{r4, r5, r6, pc}
    d5dc:	2001056c 	.word	0x2001056c
    d5e0:	2001034c 	.word	0x2001034c

0000d5e4 <generic_hfclk_start>:
{
    d5e4:	b508      	push	{r3, lr}
	__asm__ volatile(
    d5e6:	f04f 0320 	mov.w	r3, #32
    d5ea:	f3ef 8111 	mrs	r1, BASEPRI
    d5ee:	f383 8811 	msr	BASEPRI, r3
    d5f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d5f6:	4a11      	ldr	r2, [pc, #68]	; (d63c <generic_hfclk_start+0x58>)
    d5f8:	6813      	ldr	r3, [r2, #0]
    d5fa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    d5fe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    d602:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d604:	d00b      	beq.n	d61e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d606:	4a0e      	ldr	r2, [pc, #56]	; (d640 <generic_hfclk_start+0x5c>)
    d608:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d60c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d610:	f013 0301 	ands.w	r3, r3, #1
    d614:	d003      	beq.n	d61e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    d616:	480b      	ldr	r0, [pc, #44]	; (d644 <generic_hfclk_start+0x60>)
    d618:	f003 fcfa 	bl	11010 <set_on_state>
			already_started = true;
    d61c:	2301      	movs	r3, #1
	__asm__ volatile(
    d61e:	f381 8811 	msr	BASEPRI, r1
    d622:	f3bf 8f6f 	isb	sy
	if (already_started) {
    d626:	b123      	cbz	r3, d632 <generic_hfclk_start+0x4e>
}
    d628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    d62c:	2000      	movs	r0, #0
    d62e:	f7ff bfbf 	b.w	d5b0 <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d632:	2001      	movs	r0, #1
}
    d634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d638:	f001 bf22 	b.w	f480 <nrfx_clock_start>
    d63c:	200105bc 	.word	0x200105bc
    d640:	40005000 	.word	0x40005000
    d644:	200105ac 	.word	0x200105ac

0000d648 <clock_event_handler>:
	switch (event) {
    d648:	b110      	cbz	r0, d650 <clock_event_handler+0x8>
    d64a:	2801      	cmp	r0, #1
    d64c:	d004      	beq.n	d658 <clock_event_handler+0x10>
    d64e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d650:	4b03      	ldr	r3, [pc, #12]	; (d660 <clock_event_handler+0x18>)
    d652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d654:	075b      	lsls	r3, r3, #29
    d656:	d101      	bne.n	d65c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d658:	f7ff bfaa 	b.w	d5b0 <clkstarted_handle.constprop.10>
}
    d65c:	4770      	bx	lr
    d65e:	bf00      	nop
    d660:	2001056c 	.word	0x2001056c

0000d664 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d664:	4b07      	ldr	r3, [pc, #28]	; (d684 <generic_hfclk_stop+0x20>)
    d666:	e8d3 2fef 	ldaex	r2, [r3]
    d66a:	f022 0102 	bic.w	r1, r2, #2
    d66e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d672:	2800      	cmp	r0, #0
    d674:	d1f7      	bne.n	d666 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    d676:	07d3      	lsls	r3, r2, #31
    d678:	d402      	bmi.n	d680 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d67a:	2001      	movs	r0, #1
    d67c:	f001 bf32 	b.w	f4e4 <nrfx_clock_stop>
}
    d680:	4770      	bx	lr
    d682:	bf00      	nop
    d684:	200105bc 	.word	0x200105bc

0000d688 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d688:	2300      	movs	r3, #0
    d68a:	2201      	movs	r2, #1
{
    d68c:	b510      	push	{r4, lr}
    d68e:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d690:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    d694:	9301      	str	r3, [sp, #4]
    d696:	4b09      	ldr	r3, [pc, #36]	; (d6bc <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d698:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    d69a:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d69c:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    d6a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    d6a4:	f003 fced 	bl	11082 <api_start>
	if (err < 0) {
    d6a8:	2800      	cmp	r0, #0
    d6aa:	db05      	blt.n	d6b8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d6ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d6b0:	2300      	movs	r3, #0
    d6b2:	4620      	mov	r0, r4
    d6b4:	f002 fea8 	bl	10408 <z_impl_k_sem_take>
}
    d6b8:	b008      	add	sp, #32
    d6ba:	bd10      	pop	{r4, pc}
    d6bc:	00011049 	.word	0x00011049

0000d6c0 <z_nrf_clock_control_lf_on>:
{
    d6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d6c4:	2201      	movs	r2, #1
    d6c6:	4606      	mov	r6, r0
    d6c8:	4934      	ldr	r1, [pc, #208]	; (d79c <z_nrf_clock_control_lf_on+0xdc>)
    d6ca:	e8d1 3fef 	ldaex	r3, [r1]
    d6ce:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d6d2:	2800      	cmp	r0, #0
    d6d4:	d1f9      	bne.n	d6ca <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d6d6:	b933      	cbnz	r3, d6e6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d6d8:	4931      	ldr	r1, [pc, #196]	; (d7a0 <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    d6da:	4832      	ldr	r0, [pc, #200]	; (d7a4 <z_nrf_clock_control_lf_on+0xe4>)
    d6dc:	604b      	str	r3, [r1, #4]
    d6de:	60cb      	str	r3, [r1, #12]
    d6e0:	608a      	str	r2, [r1, #8]
    d6e2:	f003 fae1 	bl	10ca8 <onoff_request>
	switch (start_mode) {
    d6e6:	1e73      	subs	r3, r6, #1
    d6e8:	2b01      	cmp	r3, #1
    d6ea:	d82c      	bhi.n	d746 <z_nrf_clock_control_lf_on+0x86>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d6ec:	2e01      	cmp	r6, #1
    d6ee:	d106      	bne.n	d6fe <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d6f0:	4b2d      	ldr	r3, [pc, #180]	; (d7a8 <z_nrf_clock_control_lf_on+0xe8>)
    d6f2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d6f6:	f003 0303 	and.w	r3, r3, #3
    d6fa:	2b02      	cmp	r3, #2
    d6fc:	d023      	beq.n	d746 <z_nrf_clock_control_lf_on+0x86>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d6fe:	f003 ffd1 	bl	116a4 <k_is_in_isr>
    d702:	b918      	cbnz	r0, d70c <z_nrf_clock_control_lf_on+0x4c>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    d704:	4b29      	ldr	r3, [pc, #164]	; (d7ac <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    d706:	781b      	ldrb	r3, [r3, #0]
    d708:	2b00      	cmp	r3, #0
    d70a:	d140      	bne.n	d78e <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    d70c:	f04f 0320 	mov.w	r3, #32
    d710:	f3ef 8911 	mrs	r9, BASEPRI
    d714:	f383 8811 	msr	BASEPRI, r3
    d718:	f3bf 8f6f 	isb	sy
    d71c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d71e:	4d22      	ldr	r5, [pc, #136]	; (d7a8 <z_nrf_clock_control_lf_on+0xe8>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d720:	4f23      	ldr	r7, [pc, #140]	; (d7b0 <z_nrf_clock_control_lf_on+0xf0>)
    d722:	46a8      	mov	r8, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d724:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d728:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    d72c:	03d2      	lsls	r2, r2, #15
    d72e:	d50c      	bpl.n	d74a <z_nrf_clock_control_lf_on+0x8a>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d730:	f003 0303 	and.w	r3, r3, #3
    d734:	2b02      	cmp	r3, #2
    d736:	d001      	beq.n	d73c <z_nrf_clock_control_lf_on+0x7c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d738:	2e01      	cmp	r6, #1
    d73a:	d106      	bne.n	d74a <z_nrf_clock_control_lf_on+0x8a>
	if (isr_mode) {
    d73c:	b31c      	cbz	r4, d786 <z_nrf_clock_control_lf_on+0xc6>
	__asm__ volatile(
    d73e:	f389 8811 	msr	BASEPRI, r9
    d742:	f3bf 8f6f 	isb	sy
}
    d746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    d74a:	b1bc      	cbz	r4, d77c <z_nrf_clock_control_lf_on+0xbc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d74c:	4648      	mov	r0, r9
    d74e:	f000 fa0d 	bl	db6c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d752:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d756:	b2db      	uxtb	r3, r3
    d758:	2b01      	cmp	r3, #1
    d75a:	d1e3      	bne.n	d724 <z_nrf_clock_control_lf_on+0x64>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d75c:	683a      	ldr	r2, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    d75e:	2a00      	cmp	r2, #0
    d760:	d0e0      	beq.n	d724 <z_nrf_clock_control_lf_on+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d762:	2200      	movs	r2, #0
    d764:	603a      	str	r2, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d766:	683a      	ldr	r2, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    d768:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d76a:	2120      	movs	r1, #32
    d76c:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    d770:	4a10      	ldr	r2, [pc, #64]	; (d7b4 <z_nrf_clock_control_lf_on+0xf4>)
    d772:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d776:	4a10      	ldr	r2, [pc, #64]	; (d7b8 <z_nrf_clock_control_lf_on+0xf8>)
    d778:	6013      	str	r3, [r2, #0]
    d77a:	e7d3      	b.n	d724 <z_nrf_clock_control_lf_on+0x64>
	return z_impl_k_sleep(timeout);
    d77c:	2100      	movs	r1, #0
    d77e:	2021      	movs	r0, #33	; 0x21
    d780:	f002 fdfc 	bl	1037c <z_impl_k_sleep>
    d784:	e7e5      	b.n	d752 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENSET = mask;
    d786:	2302      	movs	r3, #2
    d788:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
		__ASSERT_NO_MSG(false);
    d78c:	e7db      	b.n	d746 <z_nrf_clock_control_lf_on+0x86>
    p_reg->INTENCLR = mask;
    d78e:	2202      	movs	r2, #2
    d790:	4b05      	ldr	r3, [pc, #20]	; (d7a8 <z_nrf_clock_control_lf_on+0xe8>)
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d792:	4604      	mov	r4, r0
    d794:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    d798:	4681      	mov	r9, r0
    d79a:	e7c0      	b.n	d71e <z_nrf_clock_control_lf_on+0x5e>
    d79c:	200105c0 	.word	0x200105c0
    d7a0:	2001055c 	.word	0x2001055c
    d7a4:	20010588 	.word	0x20010588
    d7a8:	40005000 	.word	0x40005000
    d7ac:	200106a5 	.word	0x200106a5
    d7b0:	40005104 	.word	0x40005104
    d7b4:	e000e100 	.word	0xe000e100
    d7b8:	40005008 	.word	0x40005008

0000d7bc <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    d7bc:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    d7be:	4b08      	ldr	r3, [pc, #32]	; (d7e0 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d7c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d7c4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d7c8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    d7cc:	4290      	cmp	r0, r2
    d7ce:	d100      	bne.n	d7d2 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    d7d0:	4770      	bx	lr
    d7d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    d7d6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d7d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d7dc:	e7f2      	b.n	d7c4 <handle_next_cycle_case+0x8>
    d7de:	bf00      	nop
    d7e0:	40015000 	.word	0x40015000

0000d7e4 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d7e4:	2200      	movs	r2, #0
    d7e6:	4b07      	ldr	r3, [pc, #28]	; (d804 <rtc_nrf_isr+0x20>)
    d7e8:	601a      	str	r2, [r3, #0]
    d7ea:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d7ec:	4a06      	ldr	r2, [pc, #24]	; (d808 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    d7ee:	4b07      	ldr	r3, [pc, #28]	; (d80c <rtc_nrf_isr+0x28>)
    d7f0:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    d7f4:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d7f6:	1ac0      	subs	r0, r0, r3
    d7f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d7fc:	4403      	add	r3, r0
    d7fe:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    d800:	f002 bf8e 	b.w	10720 <z_clock_announce>
    d804:	40015140 	.word	0x40015140
    d808:	200105c4 	.word	0x200105c4
    d80c:	40015000 	.word	0x40015000

0000d810 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    d810:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d812:	2400      	movs	r4, #0
    d814:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d818:	4d0e      	ldr	r5, [pc, #56]	; (d854 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d81a:	4b0f      	ldr	r3, [pc, #60]	; (d858 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    d81c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d820:	601c      	str	r4, [r3, #0]
    d822:	681b      	ldr	r3, [r3, #0]
    d824:	4b0d      	ldr	r3, [pc, #52]	; (d85c <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    d826:	2101      	movs	r1, #1
    d828:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    d82c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d830:	4622      	mov	r2, r4
    d832:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    d836:	2015      	movs	r0, #21
    d838:	f000 f936 	bl	daa8 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    d83c:	2015      	movs	r0, #21
    d83e:	f000 f901 	bl	da44 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d842:	2301      	movs	r3, #1
    d844:	4a06      	ldr	r2, [pc, #24]	; (d860 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    d846:	2002      	movs	r0, #2
    d848:	6013      	str	r3, [r2, #0]
    d84a:	602b      	str	r3, [r5, #0]
    d84c:	f7ff ff38 	bl	d6c0 <z_nrf_clock_control_lf_on>

	return 0;
}
    d850:	4620      	mov	r0, r4
    d852:	bd38      	pop	{r3, r4, r5, pc}
    d854:	40015000 	.word	0x40015000
    d858:	40015140 	.word	0x40015140
    d85c:	e000e100 	.word	0xe000e100
    d860:	40015008 	.word	0x40015008

0000d864 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    d866:	4b2d      	ldr	r3, [pc, #180]	; (d91c <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    d868:	4c2d      	ldr	r4, [pc, #180]	; (d920 <z_clock_set_timeout+0xbc>)
    d86a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    d86e:	4b2d      	ldr	r3, [pc, #180]	; (d924 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    d870:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d874:	bf08      	it	eq
    d876:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
    d878:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d87a:	1a52      	subs	r2, r2, r1
    d87c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    d880:	0212      	lsls	r2, r2, #8
    d882:	d438      	bmi.n	d8f6 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    d884:	3801      	subs	r0, #1
    d886:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d88a:	42a0      	cmp	r0, r4
    d88c:	bfa8      	it	ge
    d88e:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d890:	3301      	adds	r3, #1
    d892:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    d894:	42a0      	cmp	r0, r4
    d896:	bf94      	ite	ls
    d898:	180c      	addls	r4, r1, r0
    d89a:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    d89c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d8a0:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
    d8a2:	4a1e      	ldr	r2, [pc, #120]	; (d91c <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d8a4:	4d20      	ldr	r5, [pc, #128]	; (d928 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
    d8a6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
    d8aa:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
    d8ae:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d8b2:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
    d8b4:	1a5b      	subs	r3, r3, r1
    d8b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d8ba:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
    d8bc:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d8be:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d8c2:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    d8c6:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    d8ca:	d104      	bne.n	d8d6 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
    d8cc:	200f      	movs	r0, #15
    d8ce:	f003 feef 	bl	116b0 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d8d2:	602e      	str	r6, [r5, #0]
    d8d4:	682b      	ldr	r3, [r5, #0]
    d8d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d8da:	4b14      	ldr	r3, [pc, #80]	; (d92c <z_clock_set_timeout+0xc8>)
    d8dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    d8e0:	4b0e      	ldr	r3, [pc, #56]	; (d91c <z_clock_set_timeout+0xb8>)
    d8e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    d8e6:	1a22      	subs	r2, r4, r0
    d8e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
    d8ec:	2a01      	cmp	r2, #1
    d8ee:	d104      	bne.n	d8fa <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
    d8f0:	f7ff ff64 	bl	d7bc <handle_next_cycle_case>
    d8f4:	e00b      	b.n	d90e <z_clock_set_timeout+0xaa>
		ticks = 0;
    d8f6:	2000      	movs	r0, #0
    d8f8:	e7ca      	b.n	d890 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d8fa:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d8fe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    d902:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    d906:	1a24      	subs	r4, r4, r0
    d908:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
    d90a:	0223      	lsls	r3, r4, #8
    d90c:	d4f0      	bmi.n	d8f0 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
    d90e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d912:	4b02      	ldr	r3, [pc, #8]	; (d91c <z_clock_set_timeout+0xb8>)
    d914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d91a:	bf00      	nop
    d91c:	40015000 	.word	0x40015000
    d920:	007fffff 	.word	0x007fffff
    d924:	200105c4 	.word	0x200105c4
    d928:	40015140 	.word	0x40015140
    d92c:	e000e100 	.word	0xe000e100

0000d930 <z_clock_elapsed>:
	__asm__ volatile(
    d930:	f04f 0220 	mov.w	r2, #32
    d934:	f3ef 8311 	mrs	r3, BASEPRI
    d938:	f382 8811 	msr	BASEPRI, r2
    d93c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d940:	4a06      	ldr	r2, [pc, #24]	; (d95c <z_clock_elapsed+0x2c>)
    d942:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d946:	4a06      	ldr	r2, [pc, #24]	; (d960 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    d948:	6812      	ldr	r2, [r2, #0]
    d94a:	1a80      	subs	r0, r0, r2
    d94c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    d950:	f383 8811 	msr	BASEPRI, r3
    d954:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d958:	4770      	bx	lr
    d95a:	bf00      	nop
    d95c:	40015000 	.word	0x40015000
    d960:	200105c4 	.word	0x200105c4

0000d964 <z_timer_cycle_get_32>:
	__asm__ volatile(
    d964:	f04f 0320 	mov.w	r3, #32
    d968:	f3ef 8211 	mrs	r2, BASEPRI
    d96c:	f383 8811 	msr	BASEPRI, r3
    d970:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    d974:	4906      	ldr	r1, [pc, #24]	; (d990 <z_timer_cycle_get_32+0x2c>)
    d976:	4b07      	ldr	r3, [pc, #28]	; (d994 <z_timer_cycle_get_32+0x30>)
    d978:	6808      	ldr	r0, [r1, #0]
    d97a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    d97e:	f382 8811 	msr	BASEPRI, r2
    d982:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    d986:	1a1b      	subs	r3, r3, r0
    d988:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    d98c:	4418      	add	r0, r3
    d98e:	4770      	bx	lr
    d990:	200105c4 	.word	0x200105c4
    d994:	40015000 	.word	0x40015000

0000d998 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d998:	4a09      	ldr	r2, [pc, #36]	; (d9c0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d99a:	490a      	ldr	r1, [pc, #40]	; (d9c4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d99c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d99e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d9a0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    d9a2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d9a4:	4908      	ldr	r1, [pc, #32]	; (d9c8 <arch_swap+0x30>)
    d9a6:	684b      	ldr	r3, [r1, #4]
    d9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d9ac:	604b      	str	r3, [r1, #4]
    d9ae:	2300      	movs	r3, #0
    d9b0:	f383 8811 	msr	BASEPRI, r3
    d9b4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d9b8:	6893      	ldr	r3, [r2, #8]
}
    d9ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    d9bc:	4770      	bx	lr
    d9be:	bf00      	nop
    d9c0:	20010640 	.word	0x20010640
    d9c4:	00011c58 	.word	0x00011c58
    d9c8:	e000ed00 	.word	0xe000ed00

0000d9cc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d9cc:	4913      	ldr	r1, [pc, #76]	; (da1c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d9ce:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d9d0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    d9d4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d9d6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d9da:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d9de:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d9e0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d9e4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d9e8:	4f0d      	ldr	r7, [pc, #52]	; (da20 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d9ea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d9ee:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d9f0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d9f2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d9f4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    d9f6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d9f8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d9fa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d9fe:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    da02:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    da06:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    da0a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    da0e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    da10:	f003 fb65 	bl	110de <configure_builtin_stack_guard>
    pop {r2, lr}
    da14:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    da18:	4770      	bx	lr
    da1a:	0000      	.short	0x0000
    ldr r1, =_kernel
    da1c:	20010640 	.word	0x20010640
    ldr v4, =_SCS_ICSR
    da20:	e000ed04 	.word	0xe000ed04

0000da24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    da24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    da28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    da2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    da2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    da32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    da34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    da38:	2902      	cmp	r1, #2
    beq _oops
    da3a:	d0ff      	beq.n	da3c <_oops>

0000da3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    da3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    da3e:	f003 fb52 	bl	110e6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    da42:	bd01      	pop	{r0, pc}

0000da44 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    da44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    da46:	2b00      	cmp	r3, #0
    da48:	db08      	blt.n	da5c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da4a:	2201      	movs	r2, #1
    da4c:	f000 001f 	and.w	r0, r0, #31
    da50:	fa02 f000 	lsl.w	r0, r2, r0
    da54:	4a02      	ldr	r2, [pc, #8]	; (da60 <arch_irq_enable+0x1c>)
    da56:	095b      	lsrs	r3, r3, #5
    da58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    da5c:	4770      	bx	lr
    da5e:	bf00      	nop
    da60:	e000e100 	.word	0xe000e100

0000da64 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    da64:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    da66:	2b00      	cmp	r3, #0
    da68:	db0d      	blt.n	da86 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da6a:	2201      	movs	r2, #1
    da6c:	f000 001f 	and.w	r0, r0, #31
    da70:	fa02 f000 	lsl.w	r0, r2, r0
    da74:	095b      	lsrs	r3, r3, #5
    da76:	4a04      	ldr	r2, [pc, #16]	; (da88 <arch_irq_disable+0x24>)
    da78:	3320      	adds	r3, #32
    da7a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    da7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    da82:	f3bf 8f6f 	isb	sy
}
    da86:	4770      	bx	lr
    da88:	e000e100 	.word	0xe000e100

0000da8c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    da8c:	4b05      	ldr	r3, [pc, #20]	; (daa4 <arch_irq_is_enabled+0x18>)
    da8e:	0942      	lsrs	r2, r0, #5
    da90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    da94:	2301      	movs	r3, #1
    da96:	f000 001f 	and.w	r0, r0, #31
    da9a:	fa03 f000 	lsl.w	r0, r3, r0
}
    da9e:	4010      	ands	r0, r2
    daa0:	4770      	bx	lr
    daa2:	bf00      	nop
    daa4:	e000e100 	.word	0xe000e100

0000daa8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    daa8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    daaa:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    daac:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dab0:	bfa8      	it	ge
    dab2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    dab6:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    daba:	bfb8      	it	lt
    dabc:	4b05      	ldrlt	r3, [pc, #20]	; (dad4 <z_arm_irq_priority_set+0x2c>)
    dabe:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dac0:	bfab      	itete	ge
    dac2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dac6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    daca:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dace:	5419      	strblt	r1, [r3, r0]
}
    dad0:	4770      	bx	lr
    dad2:	bf00      	nop
    dad4:	e000ed14 	.word	0xe000ed14

0000dad8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dad8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dadc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dade:	490b      	ldr	r1, [pc, #44]	; (db0c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dae0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dae4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dae6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    daea:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    daee:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    daf0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    daf4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    daf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dafc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    db00:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    db02:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    db04:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    db06:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    db08:	4770      	bx	lr
    db0a:	bf00      	nop
    db0c:	00010d3b 	.word	0x00010d3b

0000db10 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    db10:	4604      	mov	r4, r0
    db12:	b508      	push	{r3, lr}
    db14:	460e      	mov	r6, r1
    db16:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    db18:	f000 fbf2 	bl	e300 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    db1c:	4b08      	ldr	r3, [pc, #32]	; (db40 <arch_switch_to_main_thread+0x30>)
    db1e:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    db20:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    db22:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    db26:	4628      	mov	r0, r5
    db28:	f386 8809 	msr	PSP, r6
    db2c:	2100      	movs	r1, #0
    db2e:	b663      	cpsie	if
    db30:	f381 8811 	msr	BASEPRI, r1
    db34:	f3bf 8f6f 	isb	sy
    db38:	2200      	movs	r2, #0
    db3a:	2300      	movs	r3, #0
    db3c:	f003 f8fd 	bl	10d3a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    db40:	20010640 	.word	0x20010640

0000db44 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    db44:	4901      	ldr	r1, [pc, #4]	; (db4c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    db46:	2210      	movs	r2, #16
	str	r2, [r1]
    db48:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    db4a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    db4c:	e000ed10 	.word	0xe000ed10

0000db50 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    db50:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    db52:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    db54:	f380 8811 	msr	BASEPRI, r0
	isb
    db58:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    db5c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    db60:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    db62:	b662      	cpsie	i
	isb
    db64:	f3bf 8f6f 	isb	sy

	bx	lr
    db68:	4770      	bx	lr
    db6a:	bf00      	nop

0000db6c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    db6c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    db6e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    db70:	f381 8811 	msr	BASEPRI, r1

	wfe
    db74:	bf20      	wfe

	msr	BASEPRI, r0
    db76:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    db7a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    db7c:	4770      	bx	lr
    db7e:	bf00      	nop

0000db80 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    db80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    db82:	4606      	mov	r6, r0

	if (esf != NULL) {
    db84:	460c      	mov	r4, r1
    db86:	2900      	cmp	r1, #0
    db88:	d036      	beq.n	dbf8 <z_arm_fatal_error+0x78>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    db8a:	2301      	movs	r3, #1
    db8c:	f04f 0000 	mov.w	r0, #0
    db90:	4d1d      	ldr	r5, [pc, #116]	; (dc08 <z_arm_fatal_error+0x88>)
    db92:	f363 0007 	bfi	r0, r3, #0, #8
    db96:	4b1d      	ldr	r3, [pc, #116]	; (dc0c <z_arm_fatal_error+0x8c>)
    db98:	1aed      	subs	r5, r5, r3
    db9a:	688b      	ldr	r3, [r1, #8]
    db9c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    dba0:	9300      	str	r3, [sp, #0]
    dba2:	e9d1 2300 	ldrd	r2, r3, [r1]
    dba6:	f365 108f 	bfi	r0, r5, #6, #10
    dbaa:	4919      	ldr	r1, [pc, #100]	; (dc10 <z_arm_fatal_error+0x90>)
    dbac:	f003 f9b1 	bl	10f12 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dbb0:	2301      	movs	r3, #1
    dbb2:	f04f 0000 	mov.w	r0, #0
    dbb6:	f363 0007 	bfi	r0, r3, #0, #8
    dbba:	6963      	ldr	r3, [r4, #20]
    dbbc:	f365 108f 	bfi	r0, r5, #6, #10
    dbc0:	9300      	str	r3, [sp, #0]
    dbc2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    dbc6:	4913      	ldr	r1, [pc, #76]	; (dc14 <z_arm_fatal_error+0x94>)
    dbc8:	f003 f9a3 	bl	10f12 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dbcc:	2301      	movs	r3, #1
    dbce:	f04f 0000 	mov.w	r0, #0
    dbd2:	f363 0007 	bfi	r0, r3, #0, #8
    dbd6:	f365 108f 	bfi	r0, r5, #6, #10
    dbda:	69e2      	ldr	r2, [r4, #28]
    dbdc:	490e      	ldr	r1, [pc, #56]	; (dc18 <z_arm_fatal_error+0x98>)
    dbde:	f003 f998 	bl	10f12 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    dbe2:	f04f 0000 	mov.w	r0, #0
    dbe6:	2301      	movs	r3, #1
    dbe8:	f363 0007 	bfi	r0, r3, #0, #8
    dbec:	f365 108f 	bfi	r0, r5, #6, #10
    dbf0:	69a2      	ldr	r2, [r4, #24]
    dbf2:	490a      	ldr	r1, [pc, #40]	; (dc1c <z_arm_fatal_error+0x9c>)
    dbf4:	f003 f98d 	bl	10f12 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    dbf8:	4621      	mov	r1, r4
    dbfa:	4630      	mov	r0, r6
}
    dbfc:	b002      	add	sp, #8
    dbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    dc02:	f001 bf53 	b.w	faac <z_fatal_error>
    dc06:	bf00      	nop
    dc08:	00011a04 	.word	0x00011a04
    dc0c:	000119e4 	.word	0x000119e4
    dc10:	00011e6c 	.word	0x00011e6c
    dc14:	00011e9b 	.word	0x00011e9b
    dc18:	00011eca 	.word	0x00011eca
    dc1c:	00011ed9 	.word	0x00011ed9

0000dc20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dc20:	bf30      	wfi
    b z_SysNmiOnReset
    dc22:	f7ff bffd 	b.w	dc20 <z_SysNmiOnReset>
    dc26:	bf00      	nop

0000dc28 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dc28:	4a0e      	ldr	r2, [pc, #56]	; (dc64 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    dc2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dc2c:	4b0e      	ldr	r3, [pc, #56]	; (dc68 <z_arm_prep_c+0x40>)
    dc2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    dc32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    dc34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dc38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    dc3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dc40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    dc44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    dc48:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    dc4c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    dc50:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    dc54:	f001 ffb4 	bl	fbc0 <z_bss_zero>
	z_data_copy();
    dc58:	f001 ffbc 	bl	fbd4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    dc5c:	f000 fb18 	bl	e290 <z_arm_interrupt_init>
	z_cstart();
    dc60:	f001 fff6 	bl	fc50 <z_cstart>
    dc64:	0000c000 	.word	0x0000c000
    dc68:	e000ed00 	.word	0xe000ed00

0000dc6c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dc6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    dc6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dc70:	4a0b      	ldr	r2, [pc, #44]	; (dca0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dc72:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    dc74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dc76:	bf1e      	ittt	ne
	movne	r1, #0
    dc78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dc7a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    dc7c:	f003 fc5e 	blne	1153c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dc80:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dc82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dc86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dc8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    dc8e:	4905      	ldr	r1, [pc, #20]	; (dca4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dc90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dc92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    dc94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dc96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dc9a:	4903      	ldr	r1, [pc, #12]	; (dca8 <_isr_wrapper+0x3c>)
	bx r1
    dc9c:	4708      	bx	r1
    dc9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    dca0:	20010640 	.word	0x20010640
	ldr r1, =_sw_isr_table
    dca4:	000117dc 	.word	0x000117dc
	ldr r1, =z_arm_int_exit
    dca8:	0000e251 	.word	0x0000e251

0000dcac <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dcac:	f003 f92b 	bl	10f06 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dcb0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dcb2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    dcb6:	4808      	ldr	r0, [pc, #32]	; (dcd8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    dcb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dcbc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dcbe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dcc2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dcc6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dcc8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dcca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dcce:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dcd2:	f7ff ffa9 	bl	dc28 <z_arm_prep_c>
    dcd6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    dcd8:	20010be8 	.word	0x20010be8

0000dcdc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    dcdc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    dce0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    dce4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    dce6:	4672      	mov	r2, lr
	bl z_arm_fault
    dce8:	f000 f9b4 	bl	e054 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    dcec:	bd01      	pop	{r0, pc}
    dcee:	bf00      	nop

0000dcf0 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    dcf2:	2301      	movs	r3, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dcf4:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    dcf6:	f04f 0000 	mov.w	r0, #0
    dcfa:	4c37      	ldr	r4, [pc, #220]	; (ddd8 <mem_manage_fault.isra.2+0xe8>)
    dcfc:	f363 0007 	bfi	r0, r3, #0, #8
    dd00:	4b36      	ldr	r3, [pc, #216]	; (dddc <mem_manage_fault.isra.2+0xec>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd02:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd04:	1ae4      	subs	r4, r4, r3
    dd06:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd0a:	f364 108f 	bfi	r0, r4, #6, #10
    dd0e:	4934      	ldr	r1, [pc, #208]	; (dde0 <mem_manage_fault.isra.2+0xf0>)
    dd10:	f003 f8ff 	bl	10f12 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd14:	4b33      	ldr	r3, [pc, #204]	; (dde4 <mem_manage_fault.isra.2+0xf4>)
    dd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd18:	06db      	lsls	r3, r3, #27
    dd1a:	d509      	bpl.n	dd30 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dd1c:	f04f 0000 	mov.w	r0, #0
    dd20:	2301      	movs	r3, #1
    dd22:	f363 0007 	bfi	r0, r3, #0, #8
    dd26:	f364 108f 	bfi	r0, r4, #6, #10
    dd2a:	492f      	ldr	r1, [pc, #188]	; (dde8 <mem_manage_fault.isra.2+0xf8>)
    dd2c:	f003 f8f1 	bl	10f12 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dd30:	4b2c      	ldr	r3, [pc, #176]	; (dde4 <mem_manage_fault.isra.2+0xf4>)
    dd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd34:	071d      	lsls	r5, r3, #28
    dd36:	d509      	bpl.n	dd4c <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    dd38:	f04f 0000 	mov.w	r0, #0
    dd3c:	2301      	movs	r3, #1
    dd3e:	f363 0007 	bfi	r0, r3, #0, #8
    dd42:	f364 108f 	bfi	r0, r4, #6, #10
    dd46:	4929      	ldr	r1, [pc, #164]	; (ddec <mem_manage_fault.isra.2+0xfc>)
    dd48:	f003 f8e3 	bl	10f12 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dd4c:	4d25      	ldr	r5, [pc, #148]	; (dde4 <mem_manage_fault.isra.2+0xf4>)
    dd4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd50:	0798      	lsls	r0, r3, #30
    dd52:	d51c      	bpl.n	dd8e <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    dd54:	2301      	movs	r3, #1
    dd56:	f04f 0000 	mov.w	r0, #0
    dd5a:	f363 0007 	bfi	r0, r3, #0, #8
    dd5e:	4924      	ldr	r1, [pc, #144]	; (ddf0 <mem_manage_fault.isra.2+0x100>)
    dd60:	f364 108f 	bfi	r0, r4, #6, #10
    dd64:	f003 f8d5 	bl	10f12 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    dd68:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dd6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd6c:	0619      	lsls	r1, r3, #24
    dd6e:	d50e      	bpl.n	dd8e <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dd70:	f04f 0000 	mov.w	r0, #0
    dd74:	2301      	movs	r3, #1
    dd76:	f363 0007 	bfi	r0, r3, #0, #8
    dd7a:	f364 108f 	bfi	r0, r4, #6, #10
    dd7e:	491d      	ldr	r1, [pc, #116]	; (ddf4 <mem_manage_fault.isra.2+0x104>)
    dd80:	f003 f8c7 	bl	10f12 <log_string_sync>
			if (from_hard_fault) {
    dd84:	b11f      	cbz	r7, dd8e <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dd86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dd8c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dd8e:	4b15      	ldr	r3, [pc, #84]	; (dde4 <mem_manage_fault.isra.2+0xf4>)
    dd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd92:	07da      	lsls	r2, r3, #31
    dd94:	d509      	bpl.n	ddaa <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    dd96:	f04f 0000 	mov.w	r0, #0
    dd9a:	2301      	movs	r3, #1
    dd9c:	f363 0007 	bfi	r0, r3, #0, #8
    dda0:	f364 108f 	bfi	r0, r4, #6, #10
    dda4:	4914      	ldr	r1, [pc, #80]	; (ddf8 <mem_manage_fault.isra.2+0x108>)
    dda6:	f003 f8b4 	bl	10f12 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ddaa:	4b0e      	ldr	r3, [pc, #56]	; (dde4 <mem_manage_fault.isra.2+0xf4>)
    ddac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddae:	069b      	lsls	r3, r3, #26
    ddb0:	d509      	bpl.n	ddc6 <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
    ddb2:	f04f 0000 	mov.w	r0, #0
    ddb6:	2301      	movs	r3, #1
    ddb8:	f363 0007 	bfi	r0, r3, #0, #8
    ddbc:	f364 108f 	bfi	r0, r4, #6, #10
    ddc0:	490e      	ldr	r1, [pc, #56]	; (ddfc <mem_manage_fault.isra.2+0x10c>)
    ddc2:	f003 f8a6 	bl	10f12 <log_string_sync>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    ddc6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    ddc8:	4b06      	ldr	r3, [pc, #24]	; (dde4 <mem_manage_fault.isra.2+0xf4>)
    ddca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ddcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ddce:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    ddd2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ddd4:	7030      	strb	r0, [r6, #0]

	return reason;
}
    ddd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddd8:	00011a04 	.word	0x00011a04
    dddc:	000119e4 	.word	0x000119e4
    dde0:	00011f8f 	.word	0x00011f8f
    dde4:	e000ed00 	.word	0xe000ed00
    dde8:	00011fa5 	.word	0x00011fa5
    ddec:	00011fd8 	.word	0x00011fd8
    ddf0:	00011feb 	.word	0x00011feb
    ddf4:	00012003 	.word	0x00012003
    ddf8:	00012019 	.word	0x00012019
    ddfc:	00012038 	.word	0x00012038

0000de00 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    de02:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de04:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    de06:	f04f 0000 	mov.w	r0, #0
    de0a:	4c3d      	ldr	r4, [pc, #244]	; (df00 <bus_fault.isra.3+0x100>)
    de0c:	f363 0007 	bfi	r0, r3, #0, #8
    de10:	4b3c      	ldr	r3, [pc, #240]	; (df04 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de12:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    de14:	1ae4      	subs	r4, r4, r3
    de16:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    de1a:	493b      	ldr	r1, [pc, #236]	; (df08 <bus_fault.isra.3+0x108>)
    de1c:	f364 108f 	bfi	r0, r4, #6, #10
    de20:	f003 f877 	bl	10f12 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    de24:	4b39      	ldr	r3, [pc, #228]	; (df0c <bus_fault.isra.3+0x10c>)
    de26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de28:	04d9      	lsls	r1, r3, #19
    de2a:	d509      	bpl.n	de40 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
    de2c:	f04f 0000 	mov.w	r0, #0
    de30:	2301      	movs	r3, #1
    de32:	f363 0007 	bfi	r0, r3, #0, #8
    de36:	f364 108f 	bfi	r0, r4, #6, #10
    de3a:	4935      	ldr	r1, [pc, #212]	; (df10 <bus_fault.isra.3+0x110>)
    de3c:	f003 f869 	bl	10f12 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    de40:	4b32      	ldr	r3, [pc, #200]	; (df0c <bus_fault.isra.3+0x10c>)
    de42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de44:	051a      	lsls	r2, r3, #20
    de46:	d509      	bpl.n	de5c <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    de48:	f04f 0000 	mov.w	r0, #0
    de4c:	2301      	movs	r3, #1
    de4e:	f363 0007 	bfi	r0, r3, #0, #8
    de52:	f364 108f 	bfi	r0, r4, #6, #10
    de56:	492f      	ldr	r1, [pc, #188]	; (df14 <bus_fault.isra.3+0x114>)
    de58:	f003 f85b 	bl	10f12 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    de5c:	4d2b      	ldr	r5, [pc, #172]	; (df0c <bus_fault.isra.3+0x10c>)
    de5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de60:	059b      	lsls	r3, r3, #22
    de62:	d51c      	bpl.n	de9e <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    de64:	2301      	movs	r3, #1
    de66:	f04f 0000 	mov.w	r0, #0
    de6a:	f363 0007 	bfi	r0, r3, #0, #8
    de6e:	f364 108f 	bfi	r0, r4, #6, #10
    de72:	4929      	ldr	r1, [pc, #164]	; (df18 <bus_fault.isra.3+0x118>)
    de74:	f003 f84d 	bl	10f12 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    de78:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    de7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de7c:	0418      	lsls	r0, r3, #16
    de7e:	d50e      	bpl.n	de9e <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    de80:	f04f 0000 	mov.w	r0, #0
    de84:	2301      	movs	r3, #1
    de86:	f363 0007 	bfi	r0, r3, #0, #8
    de8a:	f364 108f 	bfi	r0, r4, #6, #10
    de8e:	4923      	ldr	r1, [pc, #140]	; (df1c <bus_fault.isra.3+0x11c>)
    de90:	f003 f83f 	bl	10f12 <log_string_sync>
			if (from_hard_fault) {
    de94:	b11f      	cbz	r7, de9e <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    de96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    de9c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    de9e:	4b1b      	ldr	r3, [pc, #108]	; (df0c <bus_fault.isra.3+0x10c>)
    dea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dea2:	0559      	lsls	r1, r3, #21
    dea4:	d509      	bpl.n	deba <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    dea6:	f04f 0000 	mov.w	r0, #0
    deaa:	2301      	movs	r3, #1
    deac:	f363 0007 	bfi	r0, r3, #0, #8
    deb0:	f364 108f 	bfi	r0, r4, #6, #10
    deb4:	491a      	ldr	r1, [pc, #104]	; (df20 <bus_fault.isra.3+0x120>)
    deb6:	f003 f82c 	bl	10f12 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    deba:	4b14      	ldr	r3, [pc, #80]	; (df0c <bus_fault.isra.3+0x10c>)
    debc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    debe:	05d2      	lsls	r2, r2, #23
    dec0:	d511      	bpl.n	dee6 <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    dec2:	f04f 0000 	mov.w	r0, #0
    dec6:	2301      	movs	r3, #1
    dec8:	4916      	ldr	r1, [pc, #88]	; (df24 <bus_fault.isra.3+0x124>)
    deca:	f363 0007 	bfi	r0, r3, #0, #8
    dece:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ded2:	f003 f81e 	bl	10f12 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    ded6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ded8:	4a0c      	ldr	r2, [pc, #48]	; (df0c <bus_fault.isra.3+0x10c>)
    deda:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dedc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dee0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dee2:	7030      	strb	r0, [r6, #0]

	return reason;
}
    dee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dee8:	049b      	lsls	r3, r3, #18
    deea:	d5f4      	bpl.n	ded6 <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    deec:	f04f 0000 	mov.w	r0, #0
    def0:	2301      	movs	r3, #1
    def2:	f363 0007 	bfi	r0, r3, #0, #8
    def6:	f364 108f 	bfi	r0, r4, #6, #10
    defa:	490b      	ldr	r1, [pc, #44]	; (df28 <bus_fault.isra.3+0x128>)
    defc:	e7e9      	b.n	ded2 <bus_fault.isra.3+0xd2>
    defe:	bf00      	nop
    df00:	00011a04 	.word	0x00011a04
    df04:	000119e4 	.word	0x000119e4
    df08:	00011f07 	.word	0x00011f07
    df0c:	e000ed00 	.word	0xe000ed00
    df10:	00011f1d 	.word	0x00011f1d
    df14:	00011fd8 	.word	0x00011fd8
    df18:	00011f2e 	.word	0x00011f2e
    df1c:	00011f47 	.word	0x00011f47
    df20:	00011f5c 	.word	0x00011f5c
    df24:	00011f77 	.word	0x00011f77
    df28:	00012038 	.word	0x00012038

0000df2c <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    df2c:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    df2e:	f04f 0000 	mov.w	r0, #0
    df32:	2301      	movs	r3, #1
    df34:	4c3c      	ldr	r4, [pc, #240]	; (e028 <usage_fault.isra.4+0xfc>)
    df36:	f363 0007 	bfi	r0, r3, #0, #8
    df3a:	4b3c      	ldr	r3, [pc, #240]	; (e02c <usage_fault.isra.4+0x100>)
    df3c:	493c      	ldr	r1, [pc, #240]	; (e030 <usage_fault.isra.4+0x104>)
    df3e:	1ae4      	subs	r4, r4, r3
    df40:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    df44:	f364 108f 	bfi	r0, r4, #6, #10
    df48:	f002 ffe3 	bl	10f12 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    df4c:	4b39      	ldr	r3, [pc, #228]	; (e034 <usage_fault.isra.4+0x108>)
    df4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df50:	019b      	lsls	r3, r3, #6
    df52:	d509      	bpl.n	df68 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
    df54:	f04f 0000 	mov.w	r0, #0
    df58:	2301      	movs	r3, #1
    df5a:	f363 0007 	bfi	r0, r3, #0, #8
    df5e:	f364 108f 	bfi	r0, r4, #6, #10
    df62:	4935      	ldr	r1, [pc, #212]	; (e038 <usage_fault.isra.4+0x10c>)
    df64:	f002 ffd5 	bl	10f12 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    df68:	4b32      	ldr	r3, [pc, #200]	; (e034 <usage_fault.isra.4+0x108>)
    df6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df6c:	01dd      	lsls	r5, r3, #7
    df6e:	d509      	bpl.n	df84 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    df70:	f04f 0000 	mov.w	r0, #0
    df74:	2301      	movs	r3, #1
    df76:	f363 0007 	bfi	r0, r3, #0, #8
    df7a:	f364 108f 	bfi	r0, r4, #6, #10
    df7e:	492f      	ldr	r1, [pc, #188]	; (e03c <usage_fault.isra.4+0x110>)
    df80:	f002 ffc7 	bl	10f12 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    df84:	4b2b      	ldr	r3, [pc, #172]	; (e034 <usage_fault.isra.4+0x108>)
    df86:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    df88:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
    df8c:	d00a      	beq.n	dfa4 <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    df8e:	2301      	movs	r3, #1
    df90:	f04f 0000 	mov.w	r0, #0
    df94:	f363 0007 	bfi	r0, r3, #0, #8
    df98:	f364 108f 	bfi	r0, r4, #6, #10
    df9c:	4928      	ldr	r1, [pc, #160]	; (e040 <usage_fault.isra.4+0x114>)
    df9e:	f002 ffb8 	bl	10f12 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dfa2:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dfa4:	4b23      	ldr	r3, [pc, #140]	; (e034 <usage_fault.isra.4+0x108>)
    dfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfa8:	0318      	lsls	r0, r3, #12
    dfaa:	d509      	bpl.n	dfc0 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
    dfac:	f04f 0000 	mov.w	r0, #0
    dfb0:	2301      	movs	r3, #1
    dfb2:	f363 0007 	bfi	r0, r3, #0, #8
    dfb6:	f364 108f 	bfi	r0, r4, #6, #10
    dfba:	4922      	ldr	r1, [pc, #136]	; (e044 <usage_fault.isra.4+0x118>)
    dfbc:	f002 ffa9 	bl	10f12 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dfc0:	4b1c      	ldr	r3, [pc, #112]	; (e034 <usage_fault.isra.4+0x108>)
    dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfc4:	0359      	lsls	r1, r3, #13
    dfc6:	d509      	bpl.n	dfdc <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dfc8:	f04f 0000 	mov.w	r0, #0
    dfcc:	2301      	movs	r3, #1
    dfce:	f363 0007 	bfi	r0, r3, #0, #8
    dfd2:	f364 108f 	bfi	r0, r4, #6, #10
    dfd6:	491c      	ldr	r1, [pc, #112]	; (e048 <usage_fault.isra.4+0x11c>)
    dfd8:	f002 ff9b 	bl	10f12 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dfdc:	4b15      	ldr	r3, [pc, #84]	; (e034 <usage_fault.isra.4+0x108>)
    dfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfe0:	039a      	lsls	r2, r3, #14
    dfe2:	d509      	bpl.n	dff8 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dfe4:	f04f 0000 	mov.w	r0, #0
    dfe8:	2301      	movs	r3, #1
    dfea:	f363 0007 	bfi	r0, r3, #0, #8
    dfee:	f364 108f 	bfi	r0, r4, #6, #10
    dff2:	4916      	ldr	r1, [pc, #88]	; (e04c <usage_fault.isra.4+0x120>)
    dff4:	f002 ff8d 	bl	10f12 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dff8:	4b0e      	ldr	r3, [pc, #56]	; (e034 <usage_fault.isra.4+0x108>)
    dffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dffc:	03db      	lsls	r3, r3, #15
    dffe:	d509      	bpl.n	e014 <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    e000:	f04f 0000 	mov.w	r0, #0
    e004:	2301      	movs	r3, #1
    e006:	f363 0007 	bfi	r0, r3, #0, #8
    e00a:	f364 108f 	bfi	r0, r4, #6, #10
    e00e:	4910      	ldr	r1, [pc, #64]	; (e050 <usage_fault.isra.4+0x124>)
    e010:	f002 ff7f 	bl	10f12 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e014:	4a07      	ldr	r2, [pc, #28]	; (e034 <usage_fault.isra.4+0x108>)

	return reason;
}
    e016:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e018:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e01a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    e01e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    e022:	6293      	str	r3, [r2, #40]	; 0x28
}
    e024:	bd38      	pop	{r3, r4, r5, pc}
    e026:	bf00      	nop
    e028:	00011a04 	.word	0x00011a04
    e02c:	000119e4 	.word	0x000119e4
    e030:	00012067 	.word	0x00012067
    e034:	e000ed00 	.word	0xe000ed00
    e038:	0001207f 	.word	0x0001207f
    e03c:	00012092 	.word	0x00012092
    e040:	000120ac 	.word	0x000120ac
    e044:	000120d6 	.word	0x000120d6
    e048:	000120f4 	.word	0x000120f4
    e04c:	00012119 	.word	0x00012119
    e050:	00012133 	.word	0x00012133

0000e054 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    e054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e058:	4b69      	ldr	r3, [pc, #420]	; (e200 <z_arm_fault+0x1ac>)
{
    e05a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e05c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    e060:	4606      	mov	r6, r0
    e062:	4689      	mov	r9, r1
    e064:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e066:	f3c8 0708 	ubfx	r7, r8, #0, #9
    e06a:	2500      	movs	r5, #0
    e06c:	f385 8811 	msr	BASEPRI, r5
    e070:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e074:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e078:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e07c:	d128      	bne.n	e0d0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e07e:	07d0      	lsls	r0, r2, #31
    e080:	d426      	bmi.n	e0d0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e082:	0651      	lsls	r1, r2, #25
    e084:	d403      	bmi.n	e08e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e086:	0722      	lsls	r2, r4, #28
    e088:	d412      	bmi.n	e0b0 <z_arm_fault+0x5c>
			*nested_exc = true;
    e08a:	2501      	movs	r5, #1
    e08c:	e012      	b.n	e0b4 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e08e:	2301      	movs	r3, #1
    e090:	f04f 0000 	mov.w	r0, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    e094:	4a5b      	ldr	r2, [pc, #364]	; (e204 <z_arm_fault+0x1b0>)
    e096:	f363 0007 	bfi	r0, r3, #0, #8
    e09a:	4b5b      	ldr	r3, [pc, #364]	; (e208 <z_arm_fault+0x1b4>)
    e09c:	495b      	ldr	r1, [pc, #364]	; (e20c <z_arm_fault+0x1b8>)
    e09e:	1ad2      	subs	r2, r2, r3
    e0a0:	08d2      	lsrs	r2, r2, #3
    e0a2:	f362 108f 	bfi	r0, r2, #6, #10
    e0a6:	f002 ff34 	bl	10f12 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e0aa:	f014 0504 	ands.w	r5, r4, #4
    e0ae:	d001      	beq.n	e0b4 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    e0b0:	464e      	mov	r6, r9
	*nested_exc = false;
    e0b2:	2500      	movs	r5, #0
	*recoverable = false;
    e0b4:	2300      	movs	r3, #0
    e0b6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    e0ba:	1efb      	subs	r3, r7, #3
    e0bc:	2b09      	cmp	r3, #9
    e0be:	f200 8082 	bhi.w	e1c6 <z_arm_fault+0x172>
    e0c2:	e8df f003 	tbb	[pc, r3]
    e0c6:	6b07      	.short	0x6b07
    e0c8:	80804e6f 	.word	0x80804e6f
    e0cc:	73808080 	.word	0x73808080
		return NULL;
    e0d0:	462e      	mov	r6, r5
    e0d2:	e7ef      	b.n	e0b4 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    e0d4:	2301      	movs	r3, #1
    e0d6:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
    e0da:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    e0de:	f363 0007 	bfi	r0, r3, #0, #8
    e0e2:	4f48      	ldr	r7, [pc, #288]	; (e204 <z_arm_fault+0x1b0>)
    e0e4:	4b48      	ldr	r3, [pc, #288]	; (e208 <z_arm_fault+0x1b4>)
    e0e6:	494a      	ldr	r1, [pc, #296]	; (e210 <z_arm_fault+0x1bc>)
    e0e8:	1aff      	subs	r7, r7, r3
    e0ea:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    e0ee:	f367 108f 	bfi	r0, r7, #6, #10
    e0f2:	f002 ff0e 	bl	10f12 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e0f6:	4b42      	ldr	r3, [pc, #264]	; (e200 <z_arm_fault+0x1ac>)
	*recoverable = false;
    e0f8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e0fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e0fe:	f014 0402 	ands.w	r4, r4, #2
    e102:	d00b      	beq.n	e11c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    e104:	f04f 0000 	mov.w	r0, #0
    e108:	2301      	movs	r3, #1
    e10a:	4942      	ldr	r1, [pc, #264]	; (e214 <z_arm_fault+0x1c0>)
    e10c:	f363 0007 	bfi	r0, r3, #0, #8
    e110:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
    e114:	f002 fefd 	bl	10f12 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e118:	2400      	movs	r4, #0
    e11a:	e025      	b.n	e168 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e11e:	005b      	lsls	r3, r3, #1
    e120:	d522      	bpl.n	e168 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    e122:	2301      	movs	r3, #1
    e124:	f04f 0000 	mov.w	r0, #0
    e128:	f363 0007 	bfi	r0, r3, #0, #8
    e12c:	f367 108f 	bfi	r0, r7, #6, #10
    e130:	4939      	ldr	r1, [pc, #228]	; (e218 <z_arm_fault+0x1c4>)
    e132:	f002 feee 	bl	10f12 <log_string_sync>
		if (SCB_MMFSR != 0) {
    e136:	4b39      	ldr	r3, [pc, #228]	; (e21c <z_arm_fault+0x1c8>)
    e138:	781b      	ldrb	r3, [r3, #0]
    e13a:	b12b      	cbz	r3, e148 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    e13c:	2001      	movs	r0, #1
    e13e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e142:	f7ff fdd5 	bl	dcf0 <mem_manage_fault.isra.2>
    e146:	e00e      	b.n	e166 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    e148:	4b35      	ldr	r3, [pc, #212]	; (e220 <z_arm_fault+0x1cc>)
    e14a:	781b      	ldrb	r3, [r3, #0]
    e14c:	b12b      	cbz	r3, e15a <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    e14e:	2001      	movs	r0, #1
    e150:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e154:	f7ff fe54 	bl	de00 <bus_fault.isra.3>
    e158:	e005      	b.n	e166 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    e15a:	4b32      	ldr	r3, [pc, #200]	; (e224 <z_arm_fault+0x1d0>)
    e15c:	881b      	ldrh	r3, [r3, #0]
    e15e:	b29b      	uxth	r3, r3
    e160:	b113      	cbz	r3, e168 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    e162:	f7ff fee3 	bl	df2c <usage_fault.isra.4>
    e166:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e168:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e16c:	b99b      	cbnz	r3, e196 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e16e:	2220      	movs	r2, #32
    e170:	4631      	mov	r1, r6
    e172:	a802      	add	r0, sp, #8
    e174:	f003 f802 	bl	1117c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e17a:	2d00      	cmp	r5, #0
    e17c:	d03a      	beq.n	e1f4 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e17e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e182:	b922      	cbnz	r2, e18e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e184:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e188:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e18c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e18e:	a902      	add	r1, sp, #8
    e190:	4620      	mov	r0, r4
    e192:	f7ff fcf5 	bl	db80 <z_arm_fatal_error>
}
    e196:	b00b      	add	sp, #44	; 0x2c
    e198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e19c:	f10d 0107 	add.w	r1, sp, #7
    e1a0:	2000      	movs	r0, #0
    e1a2:	e7ce      	b.n	e142 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    e1a4:	f10d 0107 	add.w	r1, sp, #7
    e1a8:	2000      	movs	r0, #0
    e1aa:	e7d3      	b.n	e154 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    e1ac:	2301      	movs	r3, #1
    e1ae:	f04f 0000 	mov.w	r0, #0
    e1b2:	4a15      	ldr	r2, [pc, #84]	; (e208 <z_arm_fault+0x1b4>)
    e1b4:	f363 0007 	bfi	r0, r3, #0, #8
    e1b8:	4b12      	ldr	r3, [pc, #72]	; (e204 <z_arm_fault+0x1b0>)
    e1ba:	491b      	ldr	r1, [pc, #108]	; (e228 <z_arm_fault+0x1d4>)
    e1bc:	1a9b      	subs	r3, r3, r2
    e1be:	08db      	lsrs	r3, r3, #3
    e1c0:	f363 108f 	bfi	r0, r3, #6, #10
    e1c4:	e7a6      	b.n	e114 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    e1c6:	2301      	movs	r3, #1
    e1c8:	f04f 0000 	mov.w	r0, #0
    e1cc:	4a0d      	ldr	r2, [pc, #52]	; (e204 <z_arm_fault+0x1b0>)
    e1ce:	f363 0007 	bfi	r0, r3, #0, #8
    e1d2:	4b0d      	ldr	r3, [pc, #52]	; (e208 <z_arm_fault+0x1b4>)
    e1d4:	4915      	ldr	r1, [pc, #84]	; (e22c <z_arm_fault+0x1d8>)
    e1d6:	1ad2      	subs	r2, r2, r3
    e1d8:	08d2      	lsrs	r2, r2, #3
    e1da:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e1de:	f362 108f 	bfi	r0, r2, #6, #10
    e1e2:	f1a7 0310 	sub.w	r3, r7, #16
    e1e6:	4a12      	ldr	r2, [pc, #72]	; (e230 <z_arm_fault+0x1dc>)
    e1e8:	bf08      	it	eq
    e1ea:	460a      	moveq	r2, r1
    e1ec:	4911      	ldr	r1, [pc, #68]	; (e234 <z_arm_fault+0x1e0>)
    e1ee:	f002 fe90 	bl	10f12 <log_string_sync>
    e1f2:	e791      	b.n	e118 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e1f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e1f8:	f023 0301 	bic.w	r3, r3, #1
    e1fc:	e7c6      	b.n	e18c <z_arm_fault+0x138>
    e1fe:	bf00      	nop
    e200:	e000ed00 	.word	0xe000ed00
    e204:	00011a04 	.word	0x00011a04
    e208:	000119e4 	.word	0x000119e4
    e20c:	0001218c 	.word	0x0001218c
    e210:	000121af 	.word	0x000121af
    e214:	000121c6 	.word	0x000121c6
    e218:	000121e7 	.word	0x000121e7
    e21c:	e000ed28 	.word	0xe000ed28
    e220:	e000ed29 	.word	0xe000ed29
    e224:	e000ed2a 	.word	0xe000ed2a
    e228:	00012206 	.word	0x00012206
    e22c:	0001215e 	.word	0x0001215e
    e230:	00012173 	.word	0x00012173
    e234:	0001223c 	.word	0x0001223c

0000e238 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e238:	4b04      	ldr	r3, [pc, #16]	; (e24c <z_arm_fault_init+0x14>)
    e23a:	695a      	ldr	r2, [r3, #20]
    e23c:	f042 0210 	orr.w	r2, r2, #16
    e240:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e242:	695a      	ldr	r2, [r3, #20]
    e244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e248:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e24a:	4770      	bx	lr
    e24c:	e000ed00 	.word	0xe000ed00

0000e250 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e250:	4b04      	ldr	r3, [pc, #16]	; (e264 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e252:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e254:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    e256:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e258:	d003      	beq.n	e262 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e25a:	4903      	ldr	r1, [pc, #12]	; (e268 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e260:	600a      	str	r2, [r1, #0]

0000e262 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e262:	4770      	bx	lr
	ldr r3, =_kernel
    e264:	20010640 	.word	0x20010640
	ldr r1, =_SCS_ICSR
    e268:	e000ed04 	.word	0xe000ed04

0000e26c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e26c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e270:	4905      	ldr	r1, [pc, #20]	; (e288 <sys_arch_reboot+0x1c>)
    e272:	4b06      	ldr	r3, [pc, #24]	; (e28c <sys_arch_reboot+0x20>)
    e274:	68ca      	ldr	r2, [r1, #12]
    e276:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e27a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e27c:	60cb      	str	r3, [r1, #12]
    e27e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e282:	bf00      	nop
    e284:	e7fd      	b.n	e282 <sys_arch_reboot+0x16>
    e286:	bf00      	nop
    e288:	e000ed00 	.word	0xe000ed00
    e28c:	05fa0004 	.word	0x05fa0004

0000e290 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e290:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e292:	2120      	movs	r1, #32
    e294:	4803      	ldr	r0, [pc, #12]	; (e2a4 <z_arm_interrupt_init+0x14>)
    e296:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e298:	3301      	adds	r3, #1
    e29a:	2b41      	cmp	r3, #65	; 0x41
    e29c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e2a0:	d1f9      	bne.n	e296 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e2a2:	4770      	bx	lr
    e2a4:	e000e100 	.word	0xe000e100

0000e2a8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e2a8:	b510      	push	{r4, lr}
    e2aa:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    e2ac:	f001 ff2e 	bl	1010c <z_thread_single_abort>

	if (_current == thread) {
    e2b0:	4b11      	ldr	r3, [pc, #68]	; (e2f8 <z_impl_k_thread_abort+0x50>)
    e2b2:	689b      	ldr	r3, [r3, #8]
    e2b4:	42a3      	cmp	r3, r4
    e2b6:	d107      	bne.n	e2c8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e2b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e2bc:	b183      	cbz	r3, e2e0 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e2be:	4a0f      	ldr	r2, [pc, #60]	; (e2fc <z_impl_k_thread_abort+0x54>)
    e2c0:	6853      	ldr	r3, [r2, #4]
    e2c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e2c6:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    e2c8:	f04f 0320 	mov.w	r3, #32
    e2cc:	f3ef 8011 	mrs	r0, BASEPRI
    e2d0:	f383 8811 	msr	BASEPRI, r3
    e2d4:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e2dc:	f003 b930 	b.w	11540 <z_reschedule_irqlock>
    e2e0:	f04f 0320 	mov.w	r3, #32
    e2e4:	f3ef 8011 	mrs	r0, BASEPRI
    e2e8:	f383 8811 	msr	BASEPRI, r3
    e2ec:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    e2f0:	f7ff fb52 	bl	d998 <arch_swap>
	return ret;
    e2f4:	e7e8      	b.n	e2c8 <z_impl_k_thread_abort+0x20>
    e2f6:	bf00      	nop
    e2f8:	20010640 	.word	0x20010640
    e2fc:	e000ed00 	.word	0xe000ed00

0000e300 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e300:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e302:	4b0e      	ldr	r3, [pc, #56]	; (e33c <z_arm_configure_static_mpu_regions+0x3c>)
{
    e304:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e306:	9302      	str	r3, [sp, #8]
    e308:	4b0d      	ldr	r3, [pc, #52]	; (e340 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e30a:	4c0e      	ldr	r4, [pc, #56]	; (e344 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e30c:	9303      	str	r3, [sp, #12]
    e30e:	4b0e      	ldr	r3, [pc, #56]	; (e348 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e310:	4a0e      	ldr	r2, [pc, #56]	; (e34c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e312:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e314:	ab02      	add	r3, sp, #8
    e316:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e318:	a801      	add	r0, sp, #4
    e31a:	4623      	mov	r3, r4
    e31c:	2101      	movs	r1, #1
    e31e:	f000 f94b 	bl	e5b8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e322:	2300      	movs	r3, #0
    e324:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e326:	4b0a      	ldr	r3, [pc, #40]	; (e350 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e328:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e32a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e32c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e32e:	9305      	str	r3, [sp, #20]
    e330:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e332:	f000 f94b 	bl	e5cc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e336:	b008      	add	sp, #32
    e338:	bd10      	pop	{r4, pc}
    e33a:	bf00      	nop
    e33c:	20010000 	.word	0x20010000
    e340:	00000000 	.word	0x00000000
    e344:	20040000 	.word	0x20040000
    e348:	00010006 	.word	0x00010006
    e34c:	20010000 	.word	0x20010000
    e350:	20010428 	.word	0x20010428

0000e354 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e354:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e356:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e358:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e35a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e35e:	f004 031f 	and.w	r3, r4, #31
    e362:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e364:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e366:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e368:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e36c:	4904      	ldr	r1, [pc, #16]	; (e380 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e36e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e372:	f043 0301 	orr.w	r3, r3, #1
    e376:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e378:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e37a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e37c:	bd10      	pop	{r4, pc}
    e37e:	bf00      	nop
    e380:	e000ed90 	.word	0xe000ed90

0000e384 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    e384:	280f      	cmp	r0, #15
{
    e386:	b510      	push	{r4, lr}
    e388:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
    e38a:	d912      	bls.n	e3b2 <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e38c:	2301      	movs	r3, #1
    e38e:	f04f 0000 	mov.w	r0, #0
    e392:	4a09      	ldr	r2, [pc, #36]	; (e3b8 <region_allocate_and_init+0x34>)
    e394:	f363 0007 	bfi	r0, r3, #0, #8
    e398:	4b08      	ldr	r3, [pc, #32]	; (e3bc <region_allocate_and_init+0x38>)
    e39a:	4909      	ldr	r1, [pc, #36]	; (e3c0 <region_allocate_and_init+0x3c>)
    e39c:	1a9b      	subs	r3, r3, r2
    e39e:	08db      	lsrs	r3, r3, #3
    e3a0:	4622      	mov	r2, r4
    e3a2:	f363 108f 	bfi	r0, r3, #6, #10
    e3a6:	f002 fdb4 	bl	10f12 <log_string_sync>
		return -EINVAL;
    e3aa:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e3ae:	4620      	mov	r0, r4
    e3b0:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    e3b2:	f7ff ffcf 	bl	e354 <region_init>
	return index;
    e3b6:	e7fa      	b.n	e3ae <region_allocate_and_init+0x2a>
    e3b8:	000119e4 	.word	0x000119e4
    e3bc:	000119fc 	.word	0x000119fc
    e3c0:	00012299 	.word	0x00012299

0000e3c4 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3c8:	4607      	mov	r7, r0
    e3ca:	4688      	mov	r8, r1
    e3cc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e3ce:	2600      	movs	r6, #0
	MPU->RNR = index;
    e3d0:	4d58      	ldr	r5, [pc, #352]	; (e534 <mpu_configure_regions_and_partition.constprop.1+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e3d2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e3d4:	4546      	cmp	r6, r8
    e3d6:	da3d      	bge.n	e454 <mpu_configure_regions_and_partition.constprop.1+0x90>
		if (regions[i]->size == 0U) {
    e3d8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e3dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e3e0:	f1b9 0f00 	cmp.w	r9, #0
    e3e4:	d059      	beq.n	e49a <mpu_configure_regions_and_partition.constprop.1+0xd6>
		&&
    e3e6:	f1b9 0f1f 	cmp.w	r9, #31
    e3ea:	d922      	bls.n	e432 <mpu_configure_regions_and_partition.constprop.1+0x6e>
		&&
    e3ec:	f019 0f1f 	tst.w	r9, #31
    e3f0:	d11f      	bne.n	e432 <mpu_configure_regions_and_partition.constprop.1+0x6e>
		((part->start &
    e3f2:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e3f6:	f01a 0f1f 	tst.w	sl, #31
    e3fa:	d11a      	bne.n	e432 <mpu_configure_regions_and_partition.constprop.1+0x6e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3fc:	4650      	mov	r0, sl
    e3fe:	f002 fe98 	bl	11132 <arm_cmse_mpu_region_get>
    e402:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e404:	eb09 000a 	add.w	r0, r9, sl
    e408:	3801      	subs	r0, #1
    e40a:	f002 fe92 	bl	11132 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e40e:	4583      	cmp	fp, r0
    e410:	d024      	beq.n	e45c <mpu_configure_regions_and_partition.constprop.1+0x98>
	return -EINVAL;
    e412:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e416:	2301      	movs	r3, #1
    e418:	f04f 0000 	mov.w	r0, #0
    e41c:	4a46      	ldr	r2, [pc, #280]	; (e538 <mpu_configure_regions_and_partition.constprop.1+0x174>)
    e41e:	f363 0007 	bfi	r0, r3, #0, #8
    e422:	4b46      	ldr	r3, [pc, #280]	; (e53c <mpu_configure_regions_and_partition.constprop.1+0x178>)
    e424:	4946      	ldr	r1, [pc, #280]	; (e540 <mpu_configure_regions_and_partition.constprop.1+0x17c>)
    e426:	1a9b      	subs	r3, r3, r2
    e428:	08db      	lsrs	r3, r3, #3
    e42a:	f363 108f 	bfi	r0, r3, #6, #10
    e42e:	465a      	mov	r2, fp
    e430:	e00c      	b.n	e44c <mpu_configure_regions_and_partition.constprop.1+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e432:	2301      	movs	r3, #1
    e434:	f04f 0000 	mov.w	r0, #0
    e438:	4a3f      	ldr	r2, [pc, #252]	; (e538 <mpu_configure_regions_and_partition.constprop.1+0x174>)
    e43a:	f363 0007 	bfi	r0, r3, #0, #8
    e43e:	4b3f      	ldr	r3, [pc, #252]	; (e53c <mpu_configure_regions_and_partition.constprop.1+0x178>)
    e440:	4940      	ldr	r1, [pc, #256]	; (e544 <mpu_configure_regions_and_partition.constprop.1+0x180>)
    e442:	1a9b      	subs	r3, r3, r2
    e444:	4632      	mov	r2, r6
    e446:	08db      	lsrs	r3, r3, #3
    e448:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    e44c:	f002 fd61 	bl	10f12 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e450:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e454:	4620      	mov	r0, r4
    e456:	b005      	add	sp, #20
    e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e45c:	f11b 0f16 	cmn.w	fp, #22
    e460:	d0d9      	beq.n	e416 <mpu_configure_regions_and_partition.constprop.1+0x52>
			(u_reg_index > (reg_index - 1))) {
    e462:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e464:	455b      	cmp	r3, fp
    e466:	dbd6      	blt.n	e416 <mpu_configure_regions_and_partition.constprop.1+0x52>
	MPU->RNR = index;
    e468:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e46c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e46e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e472:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e474:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e478:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e47c:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e480:	e9d1 3200 	ldrd	r3, r2, [r1]
    e484:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e486:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e488:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    e48c:	d118      	bne.n	e4c0 <mpu_configure_regions_and_partition.constprop.1+0xfc>
    e48e:	45ca      	cmp	sl, r9
    e490:	d105      	bne.n	e49e <mpu_configure_regions_and_partition.constprop.1+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    e492:	fa5f f08b 	uxtb.w	r0, fp
    e496:	f002 fe31 	bl	110fc <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e49a:	3601      	adds	r6, #1
    e49c:	e79a      	b.n	e3d4 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    e49e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e4a2:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e4a4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e4a8:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e4ac:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e4ae:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e4b0:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e4b2:	f002 fe23 	bl	110fc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e4b6:	f110 0f16 	cmn.w	r0, #22
    e4ba:	d0c9      	beq.n	e450 <mpu_configure_regions_and_partition.constprop.1+0x8c>
			reg_index++;
    e4bc:	1c44      	adds	r4, r0, #1
    e4be:	e7ec      	b.n	e49a <mpu_configure_regions_and_partition.constprop.1+0xd6>
	MPU->RNR = index;
    e4c0:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4c4:	692a      	ldr	r2, [r5, #16]
    e4c6:	3b01      	subs	r3, #1
    e4c8:	f023 031f 	bic.w	r3, r3, #31
    e4cc:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e4d0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e4d2:	45ca      	cmp	sl, r9
    e4d4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4d6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e4d8:	d0eb      	beq.n	e4b2 <mpu_configure_regions_and_partition.constprop.1+0xee>
				mpu_configure_region(reg_index, regions[i]);
    e4da:	f002 fe0f 	bl	110fc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e4de:	f110 0f16 	cmn.w	r0, #22
    e4e2:	d0b5      	beq.n	e450 <mpu_configure_regions_and_partition.constprop.1+0x8c>
	MPU->RNR = index;
    e4e4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e4e8:	68ea      	ldr	r2, [r5, #12]
    e4ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e4ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    e4f2:	f362 0304 	bfi	r3, r2, #0, #5
    e4f6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4fa:	692b      	ldr	r3, [r5, #16]
    e4fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e500:	085b      	lsrs	r3, r3, #1
    e502:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e506:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e50a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e512:	4413      	add	r3, r2
    e514:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e516:	f023 031f 	bic.w	r3, r3, #31
    e51a:	4453      	add	r3, sl
    e51c:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
    e520:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e522:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    e526:	4669      	mov	r1, sp
    e528:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    e52a:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    e52c:	f7ff ff2a 	bl	e384 <region_allocate_and_init>
    e530:	e7c1      	b.n	e4b6 <mpu_configure_regions_and_partition.constprop.1+0xf2>
    e532:	bf00      	nop
    e534:	e000ed90 	.word	0xe000ed90
    e538:	000119e4 	.word	0x000119e4
    e53c:	000119fc 	.word	0x000119fc
    e540:	00012276 	.word	0x00012276
    e544:	00012253 	.word	0x00012253

0000e548 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e548:	2205      	movs	r2, #5
    e54a:	4b03      	ldr	r3, [pc, #12]	; (e558 <arm_core_mpu_enable+0x10>)
    e54c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e54e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e552:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e556:	4770      	bx	lr
    e558:	e000ed90 	.word	0xe000ed90

0000e55c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e55c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e560:	2200      	movs	r2, #0
    e562:	4b01      	ldr	r3, [pc, #4]	; (e568 <arm_core_mpu_disable+0xc>)
    e564:	605a      	str	r2, [r3, #4]
}
    e566:	4770      	bx	lr
    e568:	e000ed90 	.word	0xe000ed90

0000e56c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e56c:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e56e:	4d0e      	ldr	r5, [pc, #56]	; (e5a8 <arm_mpu_init+0x3c>)
    e570:	682e      	ldr	r6, [r5, #0]
    e572:	2e10      	cmp	r6, #16
    e574:	d815      	bhi.n	e5a2 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e576:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e578:	f7ff fff0 	bl	e55c <arm_core_mpu_disable>
	MPU->MAIR0 =
    e57c:	4b0b      	ldr	r3, [pc, #44]	; (e5ac <arm_mpu_init+0x40>)
    e57e:	4a0c      	ldr	r2, [pc, #48]	; (e5b0 <arm_mpu_init+0x44>)
    e580:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e582:	42a6      	cmp	r6, r4
    e584:	d105      	bne.n	e592 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e586:	4b0b      	ldr	r3, [pc, #44]	; (e5b4 <arm_mpu_init+0x48>)
    e588:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e58a:	f7ff ffdd 	bl	e548 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e58e:	2000      	movs	r0, #0
}
    e590:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e592:	6869      	ldr	r1, [r5, #4]
    e594:	4620      	mov	r0, r4
    e596:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e59a:	f7ff fedb 	bl	e354 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e59e:	3401      	adds	r4, #1
    e5a0:	e7ef      	b.n	e582 <arm_mpu_init+0x16>
		return -1;
    e5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e5a6:	e7f3      	b.n	e590 <arm_mpu_init+0x24>
    e5a8:	00011b84 	.word	0x00011b84
    e5ac:	e000ed90 	.word	0xe000ed90
    e5b0:	0044ffaa 	.word	0x0044ffaa
    e5b4:	200106a3 	.word	0x200106a3

0000e5b8 <arm_core_mpu_configure_static_mpu_regions>:
{
    e5b8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e5ba:	4c03      	ldr	r4, [pc, #12]	; (e5c8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e5bc:	7822      	ldrb	r2, [r4, #0]
    e5be:	f7ff ff01 	bl	e3c4 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e5c2:	7020      	strb	r0, [r4, #0]
}
    e5c4:	bd10      	pop	{r4, pc}
    e5c6:	bf00      	nop
    e5c8:	200106a3 	.word	0x200106a3

0000e5cc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5d0:	4c25      	ldr	r4, [pc, #148]	; (e668 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    e5d2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5d4:	4680      	mov	r8, r0
    e5d6:	2700      	movs	r7, #0
    e5d8:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    e5da:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e5de:	4d23      	ldr	r5, [pc, #140]	; (e66c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5e0:	4557      	cmp	r7, sl
    e5e2:	da1a      	bge.n	e61a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e5e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e5e8:	9301      	str	r3, [sp, #4]
    e5ea:	2b00      	cmp	r3, #0
    e5ec:	d036      	beq.n	e65c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e5ee:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5f2:	4608      	mov	r0, r1
    e5f4:	9100      	str	r1, [sp, #0]
    e5f6:	f002 fd9c 	bl	11132 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5fa:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5fe:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e600:	1858      	adds	r0, r3, r1
    e602:	3801      	subs	r0, #1
    e604:	f002 fd95 	bl	11132 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e608:	4286      	cmp	r6, r0
    e60a:	4a19      	ldr	r2, [pc, #100]	; (e670 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    e60c:	d008      	beq.n	e620 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e60e:	2314      	movs	r3, #20
    e610:	435f      	muls	r7, r3
    e612:	f06f 0315 	mvn.w	r3, #21
    e616:	f849 3007 	str.w	r3, [r9, r7]
}
    e61a:	b003      	add	sp, #12
    e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e620:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e624:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e626:	d0f8      	beq.n	e61a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e628:	7813      	ldrb	r3, [r2, #0]
    e62a:	42b3      	cmp	r3, r6
    e62c:	ddf5      	ble.n	e61a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e62e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    e632:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e634:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e636:	68e8      	ldr	r0, [r5, #12]
    e638:	7b19      	ldrb	r1, [r3, #12]
    e63a:	f360 0104 	bfi	r1, r0, #0, #5
    e63e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e640:	6929      	ldr	r1, [r5, #16]
    e642:	7b18      	ldrb	r0, [r3, #12]
    e644:	0849      	lsrs	r1, r1, #1
    e646:	f361 1047 	bfi	r0, r1, #5, #3
    e64a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e64c:	68eb      	ldr	r3, [r5, #12]
    e64e:	f023 031f 	bic.w	r3, r3, #31
    e652:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e654:	692b      	ldr	r3, [r5, #16]
    e656:	f023 031f 	bic.w	r3, r3, #31
    e65a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e65c:	3701      	adds	r7, #1
    e65e:	3414      	adds	r4, #20
    e660:	f108 080c 	add.w	r8, r8, #12
    e664:	e7bc      	b.n	e5e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e666:	bf00      	nop
    e668:	200105c8 	.word	0x200105c8
    e66c:	e000ed90 	.word	0xe000ed90
    e670:	200106a3 	.word	0x200106a3

0000e674 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e674:	4b01      	ldr	r3, [pc, #4]	; (e67c <__stdout_hook_install+0x8>)
    e676:	6018      	str	r0, [r3, #0]
}
    e678:	4770      	bx	lr
    e67a:	bf00      	nop
    e67c:	2001011c 	.word	0x2001011c

0000e680 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    e680:	4b06      	ldr	r3, [pc, #24]	; (e69c <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    e682:	f000 001f 	and.w	r0, r0, #31
    e686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    e68a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    e68e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    e692:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    e696:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    e69a:	4770      	bx	lr
    e69c:	40842500 	.word	0x40842500

0000e6a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    e6a0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    e6a2:	4b09      	ldr	r3, [pc, #36]	; (e6c8 <gpio_nrfx_init+0x28>)
    e6a4:	781a      	ldrb	r2, [r3, #0]
    e6a6:	b96a      	cbnz	r2, e6c4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    e6a8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e6aa:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    e6ac:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e6ae:	2105      	movs	r1, #5
    e6b0:	f7ff f9fa 	bl	daa8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    e6b4:	2031      	movs	r0, #49	; 0x31
    e6b6:	f7ff f9c5 	bl	da44 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    e6ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e6be:	4b03      	ldr	r3, [pc, #12]	; (e6cc <gpio_nrfx_init+0x2c>)
    e6c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    e6c4:	2000      	movs	r0, #0
    e6c6:	bd08      	pop	{r3, pc}
    e6c8:	200106a4 	.word	0x200106a4
    e6cc:	40031000 	.word	0x40031000

0000e6d0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e6d0:	4b28      	ldr	r3, [pc, #160]	; (e774 <gpio_nrfx_config+0xa4>)
{
    e6d2:	b570      	push	{r4, r5, r6, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e6d4:	4013      	ands	r3, r2
    e6d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e6da:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e6dc:	d03b      	beq.n	e756 <gpio_nrfx_config+0x86>
    e6de:	d807      	bhi.n	e6f0 <gpio_nrfx_config+0x20>
    e6e0:	2b02      	cmp	r3, #2
    e6e2:	d03a      	beq.n	e75a <gpio_nrfx_config+0x8a>
    e6e4:	2b06      	cmp	r3, #6
    e6e6:	d013      	beq.n	e710 <gpio_nrfx_config+0x40>
    e6e8:	b193      	cbz	r3, e710 <gpio_nrfx_config+0x40>
		return -EINVAL;
    e6ea:	f06f 0015 	mvn.w	r0, #21
    e6ee:	e031      	b.n	e754 <gpio_nrfx_config+0x84>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e6f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    e6f4:	d033      	beq.n	e75e <gpio_nrfx_config+0x8e>
    e6f6:	d804      	bhi.n	e702 <gpio_nrfx_config+0x32>
    e6f8:	481f      	ldr	r0, [pc, #124]	; (e778 <gpio_nrfx_config+0xa8>)
    e6fa:	4283      	cmp	r3, r0
    e6fc:	d1f5      	bne.n	e6ea <gpio_nrfx_config+0x1a>
		drive = NRF_GPIO_PIN_H0D1;
    e6fe:	2307      	movs	r3, #7
    e700:	e006      	b.n	e710 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e702:	481e      	ldr	r0, [pc, #120]	; (e77c <gpio_nrfx_config+0xac>)
    e704:	4283      	cmp	r3, r0
    e706:	d02c      	beq.n	e762 <gpio_nrfx_config+0x92>
    e708:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    e70c:	d1ed      	bne.n	e6ea <gpio_nrfx_config+0x1a>
		drive = NRF_GPIO_PIN_H0H1;
    e70e:	2303      	movs	r3, #3
	if ((flags & GPIO_PULL_UP) != 0) {
    e710:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    e712:	bf54      	ite	pl
    e714:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    e718:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    e71a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    e71e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    e722:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    e726:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    e72a:	d006      	beq.n	e73a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    e72c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e730:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    e732:	d018      	beq.n	e766 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    e734:	2201      	movs	r2, #1
    e736:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    e738:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e73a:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    e73e:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
	return 0;
    e742:	2000      	movs	r0, #0
    *p_pin = pin_number & 0x1F;
    e744:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e748:	4a0d      	ldr	r2, [pc, #52]	; (e780 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e74a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e74e:	3180      	adds	r1, #128	; 0x80
    e750:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    e754:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0S1;
    e756:	2301      	movs	r3, #1
    e758:	e7da      	b.n	e710 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    e75a:	2304      	movs	r3, #4
    e75c:	e7d8      	b.n	e710 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_S0H1;
    e75e:	2302      	movs	r3, #2
    e760:	e7d6      	b.n	e710 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    e762:	2305      	movs	r3, #5
    e764:	e7d4      	b.n	e710 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    e766:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    e768:	bf42      	ittt	mi
    e76a:	2201      	movmi	r2, #1
    e76c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    e76e:	60f2      	strmi	r2, [r6, #12]
    e770:	e7e3      	b.n	e73a <gpio_nrfx_config+0x6a>
    e772:	bf00      	nop
    e774:	00f00006 	.word	0x00f00006
    e778:	00100006 	.word	0x00100006
    e77c:	00400002 	.word	0x00400002
    e780:	40842500 	.word	0x40842500

0000e784 <gpio_nrfx_pin_interrupt_configure>:
{
    e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e786:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    e788:	6841      	ldr	r1, [r0, #4]
    e78a:	f005 041f 	and.w	r4, r5, #31
    e78e:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    e790:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    e794:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    e796:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
    e79a:	d10a      	bne.n	e7b2 <gpio_nrfx_pin_interrupt_configure+0x2e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e79c:	4866      	ldr	r0, [pc, #408]	; (e938 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
    *p_pin = pin_number & 0x1F;
    e79e:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e7a2:	3180      	adds	r1, #128	; 0x80
    e7a4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    e7a8:	07c8      	lsls	r0, r1, #31
    e7aa:	d507      	bpl.n	e7bc <gpio_nrfx_pin_interrupt_configure+0x38>
		return -ENOTSUP;
    e7ac:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e7b0:	e0a1      	b.n	e8f6 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    e7b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    e7b6:	68f9      	ldr	r1, [r7, #12]
    e7b8:	f000 809e 	beq.w	e8f8 <gpio_nrfx_pin_interrupt_configure+0x174>
    e7bc:	2101      	movs	r1, #1
    e7be:	68f8      	ldr	r0, [r7, #12]
    e7c0:	40a9      	lsls	r1, r5
    e7c2:	4301      	orrs	r1, r0
    e7c4:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    e7c6:	2101      	movs	r1, #1
    e7c8:	6978      	ldr	r0, [r7, #20]
    e7ca:	40a9      	lsls	r1, r5
    e7cc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    e7d0:	69ba      	ldr	r2, [r7, #24]
    e7d2:	bf0c      	ite	eq
    e7d4:	4308      	orreq	r0, r1
    e7d6:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    e7d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    e7dc:	bf0c      	ite	eq
    e7de:	430a      	orreq	r2, r1
    e7e0:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    e7e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e7e6:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    e7ea:	61ba      	str	r2, [r7, #24]
    e7ec:	693a      	ldr	r2, [r7, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    e7ee:	4e53      	ldr	r6, [pc, #332]	; (e93c <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    e7f0:	bf0c      	ite	eq
    e7f2:	4311      	orreq	r1, r2
    e7f4:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    e7f8:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    e7fa:	6139      	str	r1, [r7, #16]
    e7fc:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    e800:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e802:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    e806:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    e80a:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    e80e:	428c      	cmp	r4, r1
    e810:	d177      	bne.n	e902 <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
    e812:	fa22 f103 	lsr.w	r1, r2, r3
    e816:	07c9      	lsls	r1, r1, #31
    e818:	d573      	bpl.n	e902 <gpio_nrfx_pin_interrupt_configure+0x17e>
			(void)atomic_and(mask, ~BIT(i));
    e81a:	2201      	movs	r2, #1
    e81c:	409a      	lsls	r2, r3
    e81e:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e820:	4947      	ldr	r1, [pc, #284]	; (e940 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
    e822:	e8d1 cfef 	ldaex	ip, [r1]
    e826:	ea0c 0c00 	and.w	ip, ip, r0
    e82a:	e8c1 cfee 	stlex	lr, ip, [r1]
    e82e:	f1be 0f00 	cmp.w	lr, #0
    e832:	d1f6      	bne.n	e822 <gpio_nrfx_pin_interrupt_configure+0x9e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    e834:	009b      	lsls	r3, r3, #2
    e836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e83a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    e83e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    e842:	f021 0101 	bic.w	r1, r1, #1
    e846:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    e84a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    e84e:	4620      	mov	r0, r4
    e850:	2100      	movs	r1, #0
    e852:	f7ff ff15 	bl	e680 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    e856:	68f8      	ldr	r0, [r7, #12]
    e858:	40e8      	lsrs	r0, r5
    e85a:	f010 0001 	ands.w	r0, r0, #1
    e85e:	d04a      	beq.n	e8f6 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
    e860:	6978      	ldr	r0, [r7, #20]
    e862:	40e8      	lsrs	r0, r5
    e864:	f010 0201 	ands.w	r2, r0, #1
    e868:	d058      	beq.n	e91c <gpio_nrfx_pin_interrupt_configure+0x198>
			if (data->double_edge & BIT(pin)) {
    e86a:	69bb      	ldr	r3, [r7, #24]
    e86c:	40eb      	lsrs	r3, r5
    e86e:	07db      	lsls	r3, r3, #31
    e870:	d44c      	bmi.n	e90c <gpio_nrfx_pin_interrupt_configure+0x188>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    e872:	693b      	ldr	r3, [r7, #16]
    e874:	fa23 f505 	lsr.w	r5, r3, r5
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    e878:	f015 0f01 	tst.w	r5, #1
    e87c:	bf14      	ite	ne
    e87e:	2701      	movne	r7, #1
    e880:	2702      	moveq	r7, #2
    e882:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    e884:	2501      	movs	r5, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e886:	4a2e      	ldr	r2, [pc, #184]	; (e940 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
    e888:	fa05 f103 	lsl.w	r1, r5, r3
    e88c:	e8d2 0fef 	ldaex	r0, [r2]
    e890:	ea40 0c01 	orr.w	ip, r0, r1
    e894:	e8c2 cfee 	stlex	lr, ip, [r2]
    e898:	f1be 0f00 	cmp.w	lr, #0
    e89c:	d1f6      	bne.n	e88c <gpio_nrfx_pin_interrupt_configure+0x108>
		if ((prev & BIT(channel)) == 0) {
    e89e:	40d8      	lsrs	r0, r3
    e8a0:	f010 0001 	ands.w	r0, r0, #1
    e8a4:	d134      	bne.n	e910 <gpio_nrfx_pin_interrupt_configure+0x18c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e8a6:	009a      	lsls	r2, r3, #2
    e8a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e8ac:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    e8b0:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
			nrf_gpiote_event_t evt =
    e8b4:	3340      	adds	r3, #64	; 0x40
    e8b6:	f425 3547 	bic.w	r5, r5, #203776	; 0x31c00
    e8ba:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    e8be:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e8c2:	0224      	lsls	r4, r4, #8
    e8c4:	009b      	lsls	r3, r3, #2
    e8c6:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    e8ca:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    e8ce:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e8d0:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    return ((uint32_t)p_reg + event);
    e8d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e8d8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e8dc:	432c      	orrs	r4, r5
    e8de:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e8e2:	6018      	str	r0, [r3, #0]
    e8e4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    e8e6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    e8ea:	f043 0301 	orr.w	r3, r3, #1
    e8ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
    e8f2:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    e8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    e8f8:	2001      	movs	r0, #1
    e8fa:	40a8      	lsls	r0, r5
    e8fc:	ea21 0100 	bic.w	r1, r1, r0
    e900:	e760      	b.n	e7c4 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e902:	3301      	adds	r3, #1
    e904:	2b08      	cmp	r3, #8
    e906:	f47f af7c 	bne.w	e802 <gpio_nrfx_pin_interrupt_configure+0x7e>
    e90a:	e7a0      	b.n	e84e <gpio_nrfx_pin_interrupt_configure+0xca>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    e90c:	2703      	movs	r7, #3
    e90e:	e7b8      	b.n	e882 <gpio_nrfx_pin_interrupt_configure+0xfe>
    e910:	3301      	adds	r3, #1
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    e912:	2b08      	cmp	r3, #8
    e914:	d1b8      	bne.n	e888 <gpio_nrfx_pin_interrupt_configure+0x104>
	return -ENODEV;
    e916:	f06f 0012 	mvn.w	r0, #18
    e91a:	e7ec      	b.n	e8f6 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    e91c:	693b      	ldr	r3, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e91e:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
    e920:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    e924:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e928:	bf0c      	ite	eq
    e92a:	2103      	moveq	r1, #3
    e92c:	2102      	movne	r1, #2
    e92e:	f7ff fea7 	bl	e680 <nrf_gpio_cfg_sense_set>
	int res = 0;
    e932:	4610      	mov	r0, r2
    e934:	e7df      	b.n	e8f6 <gpio_nrfx_pin_interrupt_configure+0x172>
    e936:	bf00      	nop
    e938:	40842500 	.word	0x40842500
    e93c:	40031000 	.word	0x40031000
    e940:	200105f8 	.word	0x200105f8

0000e944 <gpiote_event_handler>:
{
    e944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e948:	4d3a      	ldr	r5, [pc, #232]	; (ea34 <gpiote_event_handler+0xf0>)
    e94a:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    e94c:	2e00      	cmp	r6, #0
    e94e:	d04c      	beq.n	e9ea <gpiote_event_handler+0xa6>
	uint32_t bit = 1U << pin;
    e950:	2701      	movs	r7, #1
	uint32_t pin = 0U;
    e952:	f04f 0800 	mov.w	r8, #0
	uint32_t out = data->pin_int_en;
    e956:	4b38      	ldr	r3, [pc, #224]	; (ea38 <gpiote_event_handler+0xf4>)
    e958:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    e95a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    e95e:	4301      	orrs	r1, r0
    e960:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    e964:	4935      	ldr	r1, [pc, #212]	; (ea3c <gpiote_event_handler+0xf8>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    e966:	691b      	ldr	r3, [r3, #16]
    e968:	690c      	ldr	r4, [r1, #16]
    e96a:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    e96c:	ea22 0404 	bic.w	r4, r2, r4
	while (level_pins) {
    e970:	bb72      	cbnz	r2, e9d0 <gpiote_event_handler+0x8c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e972:	602a      	str	r2, [r5, #0]
    e974:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    e976:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    e978:	2501      	movs	r5, #1
    e97a:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    e97c:	4830      	ldr	r0, [pc, #192]	; (ea40 <gpiote_event_handler+0xfc>)
    e97e:	4931      	ldr	r1, [pc, #196]	; (ea44 <gpiote_event_handler+0x100>)
    e980:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    e984:	fa05 fc03 	lsl.w	ip, r5, r3
    e988:	ea1c 0f02 	tst.w	ip, r2
    e98c:	d00f      	beq.n	e9ae <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e98e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e992:	b162      	cbz	r2, e9ae <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e994:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    e998:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e99c:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e9a0:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    e9a4:	fa05 f202 	lsl.w	r2, r5, r2
    e9a8:	4314      	orrs	r4, r2
    e9aa:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e9ae:	3301      	adds	r3, #1
    e9b0:	2b08      	cmp	r3, #8
    e9b2:	d1e5      	bne.n	e980 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    e9b4:	b9dc      	cbnz	r4, e9ee <gpiote_event_handler+0xaa>
	if (port_event) {
    e9b6:	b14e      	cbz	r6, e9cc <gpiote_event_handler+0x88>
	uint32_t bit = 1U << pin;
    e9b8:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    e9ba:	2600      	movs	r6, #0
	uint32_t out = data->pin_int_en;
    e9bc:	4c1e      	ldr	r4, [pc, #120]	; (ea38 <gpiote_event_handler+0xf4>)
    e9be:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    e9c0:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
    e9c4:	4301      	orrs	r1, r0
    e9c6:	ea22 0201 	bic.w	r2, r2, r1
	while (level_pins) {
    e9ca:	bb0a      	cbnz	r2, ea10 <gpiote_event_handler+0xcc>
}
    e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    e9d0:	423a      	tst	r2, r7
    e9d2:	d006      	beq.n	e9e2 <gpiote_event_handler+0x9e>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    e9d4:	2100      	movs	r1, #0
    e9d6:	f008 001f 	and.w	r0, r8, #31
    e9da:	f7ff fe51 	bl	e680 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    e9de:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    e9e2:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    e9e6:	007f      	lsls	r7, r7, #1
    e9e8:	e7c2      	b.n	e970 <gpiote_event_handler+0x2c>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    e9ea:	4634      	mov	r4, r6
    e9ec:	e7c3      	b.n	e976 <gpiote_event_handler+0x32>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e9ee:	4b12      	ldr	r3, [pc, #72]	; (ea38 <gpiote_event_handler+0xf4>)
    e9f0:	6859      	ldr	r1, [r3, #4]
    e9f2:	2900      	cmp	r1, #0
    e9f4:	d0df      	beq.n	e9b6 <gpiote_event_handler+0x72>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e9f6:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    e9f8:	4f13      	ldr	r7, [pc, #76]	; (ea48 <gpiote_event_handler+0x104>)
		if (cb->pin_mask & pins) {
    e9fa:	688a      	ldr	r2, [r1, #8]
    e9fc:	4022      	ands	r2, r4
    e9fe:	d002      	beq.n	ea06 <gpiote_event_handler+0xc2>
			cb->handler(port, cb, cb->pin_mask & pins);
    ea00:	684b      	ldr	r3, [r1, #4]
    ea02:	4638      	mov	r0, r7
    ea04:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ea06:	2d00      	cmp	r5, #0
    ea08:	d0d5      	beq.n	e9b6 <gpiote_event_handler+0x72>
    ea0a:	4629      	mov	r1, r5
    ea0c:	682d      	ldr	r5, [r5, #0]
    ea0e:	e7f4      	b.n	e9fa <gpiote_event_handler+0xb6>
		if (level_pins & bit) {
    ea10:	4215      	tst	r5, r2
    ea12:	d00c      	beq.n	ea2e <gpiote_event_handler+0xea>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ea14:	6923      	ldr	r3, [r4, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ea16:	f006 001f 	and.w	r0, r6, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ea1a:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    ea1c:	f013 0f01 	tst.w	r3, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ea20:	bf0c      	ite	eq
    ea22:	2103      	moveq	r1, #3
    ea24:	2102      	movne	r1, #2
    ea26:	f7ff fe2b 	bl	e680 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ea2a:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    ea2e:	3601      	adds	r6, #1
		bit <<= 1;
    ea30:	006d      	lsls	r5, r5, #1
    ea32:	e7ca      	b.n	e9ca <gpiote_event_handler+0x86>
    ea34:	4003117c 	.word	0x4003117c
    ea38:	200105dc 	.word	0x200105dc
    ea3c:	40842500 	.word	0x40842500
    ea40:	40031000 	.word	0x40031000
    ea44:	40031100 	.word	0x40031100
    ea48:	200103ac 	.word	0x200103ac

0000ea4c <init_spim>:
		transfer_next_chunk(dev_data->dev);
	}
}

static int init_spim(const struct device *dev)
{
    ea4c:	b538      	push	{r3, r4, r5, lr}
	struct spi_nrfx_data *data = get_dev_data(dev);
    ea4e:	68c4      	ldr	r4, [r0, #12]
{
    ea50:	4605      	mov	r5, r0
	nrfx_err_t result;

	data->dev = dev;
    ea52:	64a0      	str	r0, [r4, #72]	; 0x48

	/* This sets only default values of frequency, mode and bit order.
	 * The proper ones are set in configure() when a transfer is started.
	 */
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    ea54:	6840      	ldr	r0, [r0, #4]
    ea56:	4623      	mov	r3, r4
    ea58:	4a10      	ldr	r2, [pc, #64]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
    ea5a:	f100 010c 	add.w	r1, r0, #12
    ea5e:	f000 fdeb 	bl	f638 <nrfx_spim_init>
				&get_dev_config(dev)->config,
				event_handler,
				data);
	if (result != NRFX_SUCCESS) {
    ea62:	4b0f      	ldr	r3, [pc, #60]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea64:	4298      	cmp	r0, r3
    ea66:	d011      	beq.n	ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    ea68:	2301      	movs	r3, #1
    ea6a:	f04f 0000 	mov.w	r0, #0
    ea6e:	4a0d      	ldr	r2, [pc, #52]	; (eaa4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>)
    ea70:	f363 0007 	bfi	r0, r3, #0, #8
    ea74:	4b0c      	ldr	r3, [pc, #48]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea76:	490d      	ldr	r1, [pc, #52]	; (eaac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
    ea78:	1a9b      	subs	r3, r3, r2
    ea7a:	08db      	lsrs	r3, r3, #3
    ea7c:	f363 108f 	bfi	r0, r3, #6, #10
    ea80:	682a      	ldr	r2, [r5, #0]
    ea82:	f002 fa46 	bl	10f12 <log_string_sync>
		return -EBUSY;
    ea86:	f06f 000f 	mvn.w	r0, #15
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
    ea8a:	bd38      	pop	{r3, r4, r5, pc}
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    ea8c:	2301      	movs	r3, #1
	spi_context_unlock_unconditionally(&data->ctx);
    ea8e:	4620      	mov	r0, r4
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    ea90:	6563      	str	r3, [r4, #84]	; 0x54
	spi_context_unlock_unconditionally(&data->ctx);
    ea92:	f002 fc42 	bl	1131a <spi_context_unlock_unconditionally>
	return 0;
    ea96:	2000      	movs	r0, #0
    ea98:	e7f7      	b.n	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    ea9a:	bf00      	nop
    ea9c:	0000eb55 	.word	0x0000eb55
    eaa0:	0bad0000 	.word	0x0bad0000
    eaa4:	000119e4 	.word	0x000119e4
    eaa8:	00011a24 	.word	0x00011a24
    eaac:	000122ec 	.word	0x000122ec

0000eab0 <transfer_next_chunk>:
{
    eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    eab2:	68c5      	ldr	r5, [r0, #12]
{
    eab4:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    eab6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    eab8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    eaba:	b97b      	cbnz	r3, eadc <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    eabc:	b99c      	cbnz	r4, eae6 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    eabe:	2200      	movs	r2, #0
    eac0:	4628      	mov	r0, r5
    eac2:	4611      	mov	r1, r2
    eac4:	f002 fc04 	bl	112d0 <_spi_context_cs_control.isra.5>
	ctx->sync_status = status;
    eac8:	626c      	str	r4, [r5, #36]	; 0x24
	z_impl_k_sem_give(sem);
    eaca:	f105 0014 	add.w	r0, r5, #20
    eace:	f001 fc7b 	bl	103c8 <z_impl_k_sem_give>
	dev_data->busy = false;
    ead2:	2300      	movs	r3, #0
    ead4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
    ead8:	b005      	add	sp, #20
    eada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    eadc:	2c00      	cmp	r4, #0
    eade:	d035      	beq.n	eb4c <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    eae0:	429c      	cmp	r4, r3
    eae2:	bf28      	it	cs
    eae4:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    eae6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    eae8:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    eaea:	b179      	cbz	r1, eb0c <transfer_next_chunk+0x5c>
    eaec:	b173      	cbz	r3, eb0c <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    eaee:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    eaf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    eaf6:	d009      	beq.n	eb0c <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    eaf8:	2c08      	cmp	r4, #8
    eafa:	bf28      	it	cs
    eafc:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    eafe:	f105 0758 	add.w	r7, r5, #88	; 0x58
    eb02:	4622      	mov	r2, r4
    eb04:	4638      	mov	r0, r7
    eb06:	f002 fb39 	bl	1117c <memcpy>
			tx_buf = dev_data->buffer;
    eb0a:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    eb0c:	68b3      	ldr	r3, [r6, #8]
		xfer.p_tx_buffer = tx_buf;
    eb0e:	9100      	str	r1, [sp, #0]
    eb10:	429c      	cmp	r4, r3
    eb12:	bf28      	it	cs
    eb14:	461c      	movcs	r4, r3
    eb16:	6bab      	ldr	r3, [r5, #56]	; 0x38
		dev_data->chunk_len = chunk_len;
    eb18:	64ec      	str	r4, [r5, #76]	; 0x4c
    eb1a:	b11b      	cbz	r3, eb24 <transfer_next_chunk+0x74>
    eb1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    eb1e:	2b00      	cmp	r3, #0
    eb20:	bf18      	it	ne
    eb22:	4623      	movne	r3, r4
    eb24:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    eb26:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    eb28:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    eb2a:	b11b      	cbz	r3, eb34 <transfer_next_chunk+0x84>
    eb2c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    eb2e:	2b00      	cmp	r3, #0
    eb30:	bf18      	it	ne
    eb32:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    eb34:	2200      	movs	r2, #0
    eb36:	4669      	mov	r1, sp
    eb38:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    eb3a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    eb3c:	f000 fe7c 	bl	f838 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    eb40:	4b03      	ldr	r3, [pc, #12]	; (eb50 <transfer_next_chunk+0xa0>)
    eb42:	4298      	cmp	r0, r3
    eb44:	d0c8      	beq.n	ead8 <transfer_next_chunk+0x28>
			error = -EIO;
    eb46:	f06f 0404 	mvn.w	r4, #4
    eb4a:	e7b8      	b.n	eabe <transfer_next_chunk+0xe>
	} else if (!ctx->rx_len) {
    eb4c:	461c      	mov	r4, r3
    eb4e:	e7ca      	b.n	eae6 <transfer_next_chunk+0x36>
    eb50:	0bad0000 	.word	0x0bad0000

0000eb54 <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    eb54:	7803      	ldrb	r3, [r0, #0]
{
    eb56:	b510      	push	{r4, lr}
    eb58:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	d156      	bne.n	ec0c <event_handler+0xb8>
	if (!ctx->tx_len) {
    eb5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    eb60:	b183      	cbz	r3, eb84 <event_handler+0x30>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    eb62:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	if (len > ctx->tx_len) {
    eb64:	429a      	cmp	r2, r3
    eb66:	d925      	bls.n	ebb4 <event_handler+0x60>
		LOG_ERR("Update exceeds current buffer");
    eb68:	2301      	movs	r3, #1
    eb6a:	f04f 0000 	mov.w	r0, #0
    eb6e:	4a28      	ldr	r2, [pc, #160]	; (ec10 <event_handler+0xbc>)
    eb70:	f363 0007 	bfi	r0, r3, #0, #8
    eb74:	4b27      	ldr	r3, [pc, #156]	; (ec14 <event_handler+0xc0>)
    eb76:	4928      	ldr	r1, [pc, #160]	; (ec18 <event_handler+0xc4>)
    eb78:	1a9b      	subs	r3, r3, r2
    eb7a:	08db      	lsrs	r3, r3, #3
    eb7c:	f363 108f 	bfi	r0, r3, #6, #10
    eb80:	f002 f9c7 	bl	10f12 <log_string_sync>
	if (!ctx->rx_len) {
    eb84:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eb86:	b183      	cbz	r3, ebaa <event_handler+0x56>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    eb88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	if (len > ctx->rx_len) {
    eb8a:	429a      	cmp	r2, r3
    eb8c:	d928      	bls.n	ebe0 <event_handler+0x8c>
		LOG_ERR("Update exceeds current buffer");
    eb8e:	2301      	movs	r3, #1
    eb90:	f04f 0000 	mov.w	r0, #0
    eb94:	4a1e      	ldr	r2, [pc, #120]	; (ec10 <event_handler+0xbc>)
    eb96:	f363 0007 	bfi	r0, r3, #0, #8
    eb9a:	4b1e      	ldr	r3, [pc, #120]	; (ec14 <event_handler+0xc0>)
    eb9c:	491e      	ldr	r1, [pc, #120]	; (ec18 <event_handler+0xc4>)
    eb9e:	1a9b      	subs	r3, r3, r2
    eba0:	08db      	lsrs	r3, r3, #3
    eba2:	f363 108f 	bfi	r0, r3, #6, #10
    eba6:	f002 f9b4 	bl	10f12 <log_string_sync>
		transfer_next_chunk(dev_data->dev);
    ebaa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    ebac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    ebb0:	f7ff bf7e 	b.w	eab0 <transfer_next_chunk>
	ctx->tx_len -= len;
    ebb4:	1a9b      	subs	r3, r3, r2
    ebb6:	63cb      	str	r3, [r1, #60]	; 0x3c
	if (!ctx->tx_len) {
    ebb8:	b963      	cbnz	r3, ebd4 <event_handler+0x80>
		ctx->tx_count--;
    ebba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    ebbc:	3b01      	subs	r3, #1
    ebbe:	62cb      	str	r3, [r1, #44]	; 0x2c
		if (ctx->tx_count) {
    ebc0:	b163      	cbz	r3, ebdc <event_handler+0x88>
			ctx->current_tx++;
    ebc2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ebc4:	f103 0208 	add.w	r2, r3, #8
    ebc8:	628a      	str	r2, [r1, #40]	; 0x28
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    ebca:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    ebcc:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    ebce:	638a      	str	r2, [r1, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    ebd0:	63cb      	str	r3, [r1, #60]	; 0x3c
    ebd2:	e7d7      	b.n	eb84 <event_handler+0x30>
	} else if (ctx->tx_buf) {
    ebd4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    ebd6:	2b00      	cmp	r3, #0
    ebd8:	d0d4      	beq.n	eb84 <event_handler+0x30>
		ctx->tx_buf += dfs * len;
    ebda:	4413      	add	r3, r2
    ebdc:	63a3      	str	r3, [r4, #56]	; 0x38
    ebde:	e7d1      	b.n	eb84 <event_handler+0x30>
	ctx->rx_len -= len;
    ebe0:	1a9b      	subs	r3, r3, r2
    ebe2:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    ebe4:	b963      	cbnz	r3, ec00 <event_handler+0xac>
		ctx->rx_count--;
    ebe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ebe8:	3b01      	subs	r3, #1
    ebea:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
    ebec:	b163      	cbz	r3, ec08 <event_handler+0xb4>
			ctx->current_rx++;
    ebee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebf0:	f103 0208 	add.w	r2, r3, #8
    ebf4:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ebf6:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    ebf8:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ebfa:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    ebfc:	6463      	str	r3, [r4, #68]	; 0x44
    ebfe:	e7d4      	b.n	ebaa <event_handler+0x56>
	} else if (ctx->rx_buf) {
    ec00:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ec02:	2b00      	cmp	r3, #0
    ec04:	d0d1      	beq.n	ebaa <event_handler+0x56>
		ctx->rx_buf += dfs * len;
    ec06:	4413      	add	r3, r2
    ec08:	6423      	str	r3, [r4, #64]	; 0x40
    ec0a:	e7ce      	b.n	ebaa <event_handler+0x56>
}
    ec0c:	bd10      	pop	{r4, pc}
    ec0e:	bf00      	nop
    ec10:	000119e4 	.word	0x000119e4
    ec14:	00011a24 	.word	0x00011a24
    ec18:	000122ce 	.word	0x000122ce

0000ec1c <spi_nrfx_transceive>:
{
    ec1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    ec20:	68c4      	ldr	r4, [r0, #12]
{
    ec22:	4681      	mov	r9, r0
    ec24:	460f      	mov	r7, r1
    ec26:	4616      	mov	r6, r2
    ec28:	461d      	mov	r5, r3
	k_sem_take(&ctx->lock, K_FOREVER);
    ec2a:	f104 0b04 	add.w	fp, r4, #4
	return z_impl_k_sem_take(sem, timeout);
    ec2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ec32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ec36:	4658      	mov	r0, fp
    ec38:	f001 fbe6 	bl	10408 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    ec3c:	f8d9 200c 	ldr.w	r2, [r9, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    ec40:	6813      	ldr	r3, [r2, #0]
    ec42:	429f      	cmp	r7, r3
    ec44:	f000 80bb 	beq.w	edbe <spi_nrfx_transceive+0x1a2>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    ec48:	88bb      	ldrh	r3, [r7, #4]
    ec4a:	07d8      	lsls	r0, r3, #31
    ec4c:	d518      	bpl.n	ec80 <spi_nrfx_transceive+0x64>
		LOG_ERR("Slave mode is not supported on %s",
    ec4e:	2301      	movs	r3, #1
    ec50:	f04f 0000 	mov.w	r0, #0
    ec54:	4a88      	ldr	r2, [pc, #544]	; (ee78 <spi_nrfx_transceive+0x25c>)
    ec56:	f363 0007 	bfi	r0, r3, #0, #8
    ec5a:	4b88      	ldr	r3, [pc, #544]	; (ee7c <spi_nrfx_transceive+0x260>)
    ec5c:	4988      	ldr	r1, [pc, #544]	; (ee80 <spi_nrfx_transceive+0x264>)
    ec5e:	1a9b      	subs	r3, r3, r2
    ec60:	08db      	lsrs	r3, r3, #3
    ec62:	f363 108f 	bfi	r0, r3, #6, #10
    ec66:	f8d9 2000 	ldr.w	r2, [r9]
    ec6a:	f002 f952 	bl	10f12 <log_string_sync>
		return -EINVAL;
    ec6e:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    ec72:	4658      	mov	r0, fp
    ec74:	f001 fba8 	bl	103c8 <z_impl_k_sem_give>
}
    ec78:	4620      	mov	r0, r4
    ec7a:	b003      	add	sp, #12
    ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    ec80:	0719      	lsls	r1, r3, #28
    ec82:	d50e      	bpl.n	eca2 <spi_nrfx_transceive+0x86>
		LOG_ERR("Loopback mode is not supported");
    ec84:	2301      	movs	r3, #1
    ec86:	f04f 0000 	mov.w	r0, #0
    ec8a:	4a7b      	ldr	r2, [pc, #492]	; (ee78 <spi_nrfx_transceive+0x25c>)
    ec8c:	f363 0007 	bfi	r0, r3, #0, #8
    ec90:	4b7a      	ldr	r3, [pc, #488]	; (ee7c <spi_nrfx_transceive+0x260>)
    ec92:	497c      	ldr	r1, [pc, #496]	; (ee84 <spi_nrfx_transceive+0x268>)
    ec94:	1a9b      	subs	r3, r3, r2
    ec96:	08db      	lsrs	r3, r3, #3
    ec98:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
    ec9c:	f002 f939 	bl	10f12 <log_string_sync>
    eca0:	e7e5      	b.n	ec6e <spi_nrfx_transceive+0x52>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    eca2:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    eca6:	d00c      	beq.n	ecc2 <spi_nrfx_transceive+0xa6>
		LOG_ERR("Only single line mode is supported");
    eca8:	2301      	movs	r3, #1
    ecaa:	f04f 0000 	mov.w	r0, #0
    ecae:	4a72      	ldr	r2, [pc, #456]	; (ee78 <spi_nrfx_transceive+0x25c>)
    ecb0:	f363 0007 	bfi	r0, r3, #0, #8
    ecb4:	4b71      	ldr	r3, [pc, #452]	; (ee7c <spi_nrfx_transceive+0x260>)
    ecb6:	4974      	ldr	r1, [pc, #464]	; (ee88 <spi_nrfx_transceive+0x26c>)
    ecb8:	1a9b      	subs	r3, r3, r2
    ecba:	08db      	lsrs	r3, r3, #3
    ecbc:	f363 108f 	bfi	r0, r3, #6, #10
    ecc0:	e7ec      	b.n	ec9c <spi_nrfx_transceive+0x80>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    ecc2:	f3c3 1345 	ubfx	r3, r3, #5, #6
    ecc6:	2b08      	cmp	r3, #8
    ecc8:	d00c      	beq.n	ece4 <spi_nrfx_transceive+0xc8>
		LOG_ERR("Word sizes other than 8 bits"
    ecca:	2301      	movs	r3, #1
    eccc:	f04f 0000 	mov.w	r0, #0
    ecd0:	4a69      	ldr	r2, [pc, #420]	; (ee78 <spi_nrfx_transceive+0x25c>)
    ecd2:	f363 0007 	bfi	r0, r3, #0, #8
    ecd6:	4b69      	ldr	r3, [pc, #420]	; (ee7c <spi_nrfx_transceive+0x260>)
    ecd8:	496c      	ldr	r1, [pc, #432]	; (ee8c <spi_nrfx_transceive+0x270>)
    ecda:	1a9b      	subs	r3, r3, r2
    ecdc:	08db      	lsrs	r3, r3, #3
    ecde:	f363 108f 	bfi	r0, r3, #6, #10
    ece2:	e7db      	b.n	ec9c <spi_nrfx_transceive+0x80>
	if (spi_cfg->frequency < 125000) {
    ece4:	6839      	ldr	r1, [r7, #0]
    ece6:	4b6a      	ldr	r3, [pc, #424]	; (ee90 <spi_nrfx_transceive+0x274>)
    ece8:	4299      	cmp	r1, r3
    ecea:	d80c      	bhi.n	ed06 <spi_nrfx_transceive+0xea>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    ecec:	2301      	movs	r3, #1
    ecee:	f04f 0000 	mov.w	r0, #0
    ecf2:	4a61      	ldr	r2, [pc, #388]	; (ee78 <spi_nrfx_transceive+0x25c>)
    ecf4:	f363 0007 	bfi	r0, r3, #0, #8
    ecf8:	4b60      	ldr	r3, [pc, #384]	; (ee7c <spi_nrfx_transceive+0x260>)
    ecfa:	4966      	ldr	r1, [pc, #408]	; (ee94 <spi_nrfx_transceive+0x278>)
    ecfc:	1a9b      	subs	r3, r3, r2
    ecfe:	08db      	lsrs	r3, r3, #3
    ed00:	f363 108f 	bfi	r0, r3, #6, #10
    ed04:	e7ca      	b.n	ec9c <spi_nrfx_transceive+0x80>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    ed06:	f8d9 3004 	ldr.w	r3, [r9, #4]
	ctx->config = spi_cfg;
    ed0a:	6017      	str	r7, [r2, #0]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    ed0c:	9301      	str	r3, [sp, #4]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    ed0e:	68bb      	ldr	r3, [r7, #8]
    ed10:	2b00      	cmp	r3, #0
    ed12:	d07e      	beq.n	ee12 <spi_nrfx_transceive+0x1f6>
    ed14:	6818      	ldr	r0, [r3, #0]
    ed16:	2800      	cmp	r0, #0
    ed18:	d07b      	beq.n	ee12 <spi_nrfx_transceive+0x1f6>
				   ctx->config->cs->gpio_dt_flags |
    ed1a:	f893 8009 	ldrb.w	r8, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    ed1e:	7a1a      	ldrb	r2, [r3, #8]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    ed20:	f018 0f01 	tst.w	r8, #1
    ed24:	bf0c      	ite	eq
    ed26:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    ed2a:	f488 6820 	eorne.w	r8, r8, #2560	; 0xa00
    ed2e:	9200      	str	r2, [sp, #0]
	struct gpio_driver_data *data =
    ed30:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	return api->pin_configure(port, pin, flags);
    ed34:	6883      	ldr	r3, [r0, #8]
    ed36:	4642      	mov	r2, r8
    ed38:	681b      	ldr	r3, [r3, #0]
    ed3a:	9900      	ldr	r1, [sp, #0]
    ed3c:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    ed3e:	b958      	cbnz	r0, ed58 <spi_nrfx_transceive+0x13c>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    ed40:	2201      	movs	r2, #1
    ed42:	9900      	ldr	r1, [sp, #0]
    ed44:	f8da 3000 	ldr.w	r3, [sl]
    ed48:	408a      	lsls	r2, r1
    ed4a:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    ed4e:	bf14      	ite	ne
    ed50:	4313      	orrne	r3, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    ed52:	4393      	biceq	r3, r2
    ed54:	f8ca 3000 	str.w	r3, [sl]
	nrf_spim_configure(spim->p_reg,
    ed58:	9b01      	ldr	r3, [sp, #4]
    ed5a:	6819      	ldr	r1, [r3, #0]
    ed5c:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    ed5e:	0798      	lsls	r0, r3, #30
    ed60:	f003 0204 	and.w	r2, r3, #4
    ed64:	d564      	bpl.n	ee30 <spi_nrfx_transceive+0x214>
			return NRF_SPIM_MODE_2;
    ed66:	2a00      	cmp	r2, #0
    ed68:	bf14      	ite	ne
    ed6a:	2203      	movne	r2, #3
    ed6c:	2202      	moveq	r2, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    ed6e:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    ed70:	f3c3 1300 	ubfx	r3, r3, #4, #1
    ed74:	d060      	beq.n	ee38 <spi_nrfx_transceive+0x21c>
    ed76:	2a03      	cmp	r2, #3
    ed78:	d061      	beq.n	ee3e <spi_nrfx_transceive+0x222>
    ed7a:	2a01      	cmp	r2, #1
    ed7c:	d101      	bne.n	ed82 <spi_nrfx_transceive+0x166>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    ed7e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    ed82:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    ed86:	4a44      	ldr	r2, [pc, #272]	; (ee98 <spi_nrfx_transceive+0x27c>)
	nrf_spim_frequency_set(spim->p_reg,
    ed88:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
    ed8a:	4293      	cmp	r3, r2
    ed8c:	d95a      	bls.n	ee44 <spi_nrfx_transceive+0x228>
	} else if (frequency < 500000) {
    ed8e:	4a43      	ldr	r2, [pc, #268]	; (ee9c <spi_nrfx_transceive+0x280>)
    ed90:	4293      	cmp	r3, r2
    ed92:	d95a      	bls.n	ee4a <spi_nrfx_transceive+0x22e>
	} else if (frequency < 1000000) {
    ed94:	4a42      	ldr	r2, [pc, #264]	; (eea0 <spi_nrfx_transceive+0x284>)
    ed96:	4293      	cmp	r3, r2
    ed98:	d95a      	bls.n	ee50 <spi_nrfx_transceive+0x234>
	} else if (frequency < 2000000) {
    ed9a:	4a42      	ldr	r2, [pc, #264]	; (eea4 <spi_nrfx_transceive+0x288>)
    ed9c:	4293      	cmp	r3, r2
    ed9e:	d95a      	bls.n	ee56 <spi_nrfx_transceive+0x23a>
	} else if (frequency < 4000000) {
    eda0:	4a41      	ldr	r2, [pc, #260]	; (eea8 <spi_nrfx_transceive+0x28c>)
    eda2:	4293      	cmp	r3, r2
    eda4:	d95a      	bls.n	ee5c <spi_nrfx_transceive+0x240>
		return NRF_SPIM_FREQ_8M;
    eda6:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    edaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    edae:	4293      	cmp	r3, r2
    edb0:	bf94      	ite	ls
    edb2:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    edb6:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    edba:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    edbe:	2301      	movs	r3, #1
    edc0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	if (tx_bufs) {
    edc4:	2e00      	cmp	r6, #0
    edc6:	d04c      	beq.n	ee62 <spi_nrfx_transceive+0x246>
		ctx->current_tx = tx_bufs->buffers;
    edc8:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    edca:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    edcc:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    edce:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    edd0:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    edd2:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    edd4:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    edd6:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    edd8:	2d00      	cmp	r5, #0
    edda:	d047      	beq.n	ee6c <spi_nrfx_transceive+0x250>
		ctx->current_rx = rx_bufs->buffers;
    eddc:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    edde:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    ede0:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    ede2:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ede4:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    ede6:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ede8:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    edea:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    edec:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    edee:	2101      	movs	r1, #1
	ctx->sync_status = 0;
    edf0:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    edf2:	4620      	mov	r0, r4
    edf4:	f002 fa6c 	bl	112d0 <_spi_context_cs_control.isra.5>
		transfer_next_chunk(dev);
    edf8:	4648      	mov	r0, r9
    edfa:	f7ff fe59 	bl	eab0 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    edfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee02:	f104 0014 	add.w	r0, r4, #20
    ee06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee0a:	f001 fafd 	bl	10408 <z_impl_k_sem_take>
	status = ctx->sync_status;
    ee0e:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return status;
    ee10:	e72f      	b.n	ec72 <spi_nrfx_transceive+0x56>
		LOG_INF("CS control inhibited (no GPIO device)");
    ee12:	2303      	movs	r3, #3
    ee14:	f04f 0000 	mov.w	r0, #0
    ee18:	4a17      	ldr	r2, [pc, #92]	; (ee78 <spi_nrfx_transceive+0x25c>)
    ee1a:	f363 0007 	bfi	r0, r3, #0, #8
    ee1e:	4b17      	ldr	r3, [pc, #92]	; (ee7c <spi_nrfx_transceive+0x260>)
    ee20:	4922      	ldr	r1, [pc, #136]	; (eeac <spi_nrfx_transceive+0x290>)
    ee22:	1a9b      	subs	r3, r3, r2
    ee24:	08db      	lsrs	r3, r3, #3
    ee26:	f363 108f 	bfi	r0, r3, #6, #10
    ee2a:	f002 f872 	bl	10f12 <log_string_sync>
    ee2e:	e793      	b.n	ed58 <spi_nrfx_transceive+0x13c>
			return NRF_SPIM_MODE_0;
    ee30:	3200      	adds	r2, #0
    ee32:	bf18      	it	ne
    ee34:	2201      	movne	r2, #1
    ee36:	e79a      	b.n	ed6e <spi_nrfx_transceive+0x152>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    ee38:	f043 0304 	orr.w	r3, r3, #4
        break;
    ee3c:	e7a1      	b.n	ed82 <spi_nrfx_transceive+0x166>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    ee3e:	f043 0306 	orr.w	r3, r3, #6
        break;
    ee42:	e79e      	b.n	ed82 <spi_nrfx_transceive+0x166>
		return NRF_SPIM_FREQ_125K;
    ee44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    ee48:	e7b7      	b.n	edba <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_250K;
    ee4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    ee4e:	e7b4      	b.n	edba <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_500K;
    ee50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ee54:	e7b1      	b.n	edba <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_1M;
    ee56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ee5a:	e7ae      	b.n	edba <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_2M;
    ee5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    ee60:	e7ab      	b.n	edba <spi_nrfx_transceive+0x19e>
		ctx->tx_count = 0;
    ee62:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    ee66:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    ee6a:	e7b5      	b.n	edd8 <spi_nrfx_transceive+0x1bc>
		ctx->rx_count = 0;
    ee6c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    ee70:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    ee74:	e7ba      	b.n	edec <spi_nrfx_transceive+0x1d0>
    ee76:	bf00      	nop
    ee78:	000119e4 	.word	0x000119e4
    ee7c:	00011a24 	.word	0x00011a24
    ee80:	0001230c 	.word	0x0001230c
    ee84:	0001232e 	.word	0x0001232e
    ee88:	0001234d 	.word	0x0001234d
    ee8c:	00012370 	.word	0x00012370
    ee90:	0001e847 	.word	0x0001e847
    ee94:	0001239f 	.word	0x0001239f
    ee98:	0003d08f 	.word	0x0003d08f
    ee9c:	0007a11f 	.word	0x0007a11f
    eea0:	000f423f 	.word	0x000f423f
    eea4:	001e847f 	.word	0x001e847f
    eea8:	003d08ff 	.word	0x003d08ff
    eeac:	000123d0 	.word	0x000123d0

0000eeb0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    eeb0:	4b02      	ldr	r3, [pc, #8]	; (eebc <flash_nrf_pages_layout+0xc>)
    eeb2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    eeb4:	2301      	movs	r3, #1
    eeb6:	6013      	str	r3, [r2, #0]
}
    eeb8:	4770      	bx	lr
    eeba:	bf00      	nop
    eebc:	200105fc 	.word	0x200105fc

0000eec0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    eec0:	4800      	ldr	r0, [pc, #0]	; (eec4 <flash_nrf_get_parameters+0x4>)
    eec2:	4770      	bx	lr
    eec4:	00011c18 	.word	0x00011c18

0000eec8 <flash_nrf_erase>:
{
    eec8:	b570      	push	{r4, r5, r6, lr}
    eeca:	460d      	mov	r5, r1
    eecc:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    eece:	f002 fb2c 	bl	1152a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    eed2:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    eed4:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    eed6:	4628      	mov	r0, r5
    eed8:	f002 fa82 	bl	113e0 <is_regular_addr_valid>
    eedc:	b300      	cbz	r0, ef20 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    eede:	fbb5 f3f6 	udiv	r3, r5, r6
    eee2:	fb06 5313 	mls	r3, r6, r3, r5
    eee6:	b9db      	cbnz	r3, ef20 <flash_nrf_erase+0x58>
    eee8:	fbb4 f0f6 	udiv	r0, r4, r6
    eeec:	fb06 4010 	mls	r0, r6, r0, r4
    eef0:	b9b0      	cbnz	r0, ef20 <flash_nrf_erase+0x58>
		if (!n_pages) {
    eef2:	42a6      	cmp	r6, r4
    eef4:	d813      	bhi.n	ef1e <flash_nrf_erase+0x56>
    eef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eefe:	480a      	ldr	r0, [pc, #40]	; (ef28 <flash_nrf_erase+0x60>)
    ef00:	f001 fa82 	bl	10408 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    ef04:	f002 fb11 	bl	1152a <nrfx_nvmc_flash_page_size_get>
    ef08:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    ef0a:	4628      	mov	r0, r5
    ef0c:	f000 fb6a 	bl	f5e4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    ef10:	1ba4      	subs	r4, r4, r6
    ef12:	4435      	add	r5, r6
    ef14:	d1f9      	bne.n	ef0a <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
    ef16:	4804      	ldr	r0, [pc, #16]	; (ef28 <flash_nrf_erase+0x60>)
    ef18:	f001 fa56 	bl	103c8 <z_impl_k_sem_give>
	return ret;
    ef1c:	4620      	mov	r0, r4
}
    ef1e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ef20:	f06f 0015 	mvn.w	r0, #21
    ef24:	e7fb      	b.n	ef1e <flash_nrf_erase+0x56>
    ef26:	bf00      	nop
    ef28:	20010604 	.word	0x20010604

0000ef2c <nrf_flash_init>:
{
    ef2c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    ef2e:	2201      	movs	r2, #1
    ef30:	4806      	ldr	r0, [pc, #24]	; (ef4c <nrf_flash_init+0x20>)
    ef32:	4611      	mov	r1, r2
    ef34:	f002 fbaa 	bl	1168c <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    ef38:	f002 fafa 	bl	11530 <nrfx_nvmc_flash_page_count_get>
    ef3c:	4c04      	ldr	r4, [pc, #16]	; (ef50 <nrf_flash_init+0x24>)
    ef3e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    ef40:	f002 faf3 	bl	1152a <nrfx_nvmc_flash_page_size_get>
    ef44:	6060      	str	r0, [r4, #4]
}
    ef46:	2000      	movs	r0, #0
    ef48:	bd10      	pop	{r4, pc}
    ef4a:	bf00      	nop
    ef4c:	20010604 	.word	0x20010604
    ef50:	200105fc 	.word	0x200105fc

0000ef54 <flash_nrf_write>:
{
    ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef56:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    ef58:	4619      	mov	r1, r3
    ef5a:	4630      	mov	r0, r6
{
    ef5c:	4617      	mov	r7, r2
    ef5e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    ef60:	f002 fa3e 	bl	113e0 <is_regular_addr_valid>
    ef64:	b308      	cbz	r0, efaa <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
    ef66:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    ef6a:	f015 0503 	ands.w	r5, r5, #3
    ef6e:	d11c      	bne.n	efaa <flash_nrf_write+0x56>
	if (!len) {
    ef70:	b1f4      	cbz	r4, efb0 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
    ef72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ef76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ef7a:	480e      	ldr	r0, [pc, #56]	; (efb4 <flash_nrf_write+0x60>)
    ef7c:	f001 fa44 	bl	10408 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    ef80:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    ef84:	42a5      	cmp	r5, r4
    ef86:	eb06 0005 	add.w	r0, r6, r5
    ef8a:	d109      	bne.n	efa0 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    ef8c:	4a0a      	ldr	r2, [pc, #40]	; (efb8 <flash_nrf_write+0x64>)
    ef8e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    ef92:	07db      	lsls	r3, r3, #31
    ef94:	d5fb      	bpl.n	ef8e <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
    ef96:	4807      	ldr	r0, [pc, #28]	; (efb4 <flash_nrf_write+0x60>)
    ef98:	f001 fa16 	bl	103c8 <z_impl_k_sem_give>
    ef9c:	2000      	movs	r0, #0
}
    ef9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    efa0:	5979      	ldr	r1, [r7, r5]
    efa2:	f000 fb3b 	bl	f61c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    efa6:	3504      	adds	r5, #4
    efa8:	e7ec      	b.n	ef84 <flash_nrf_write+0x30>
		return -EINVAL;
    efaa:	f06f 0015 	mvn.w	r0, #21
    efae:	e7f6      	b.n	ef9e <flash_nrf_write+0x4a>
		return 0;
    efb0:	4620      	mov	r0, r4
    efb2:	e7f4      	b.n	ef9e <flash_nrf_write+0x4a>
    efb4:	20010604 	.word	0x20010604
    efb8:	40039000 	.word	0x40039000

0000efbc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    efbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    efbe:	794b      	ldrb	r3, [r1, #5]
    efc0:	2b01      	cmp	r3, #1
    efc2:	d027      	beq.n	f014 <uarte_nrfx_configure+0x58>
    efc4:	2b03      	cmp	r3, #3
    efc6:	d122      	bne.n	f00e <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    efc8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    efca:	798b      	ldrb	r3, [r1, #6]
    efcc:	2b03      	cmp	r3, #3
    efce:	d11e      	bne.n	f00e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    efd0:	79cc      	ldrb	r4, [r1, #7]
    efd2:	b124      	cbz	r4, efde <uarte_nrfx_configure+0x22>
    efd4:	2c01      	cmp	r4, #1
    efd6:	d11a      	bne.n	f00e <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    efd8:	6843      	ldr	r3, [r0, #4]
    efda:	791b      	ldrb	r3, [r3, #4]
    efdc:	b1bb      	cbz	r3, f00e <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    efde:	790a      	ldrb	r2, [r1, #4]
    efe0:	b112      	cbz	r2, efe8 <uarte_nrfx_configure+0x2c>
    efe2:	2a02      	cmp	r2, #2
    efe4:	d113      	bne.n	f00e <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    efe6:	220e      	movs	r2, #14
	switch (baudrate) {
    efe8:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    efec:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    efee:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    eff0:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    eff2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    eff4:	d063      	beq.n	f0be <uarte_nrfx_configure+0x102>
    eff6:	d829      	bhi.n	f04c <uarte_nrfx_configure+0x90>
    eff8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    effc:	d062      	beq.n	f0c4 <uarte_nrfx_configure+0x108>
    effe:	d814      	bhi.n	f02a <uarte_nrfx_configure+0x6e>
    f000:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f004:	d060      	beq.n	f0c8 <uarte_nrfx_configure+0x10c>
    f006:	d807      	bhi.n	f018 <uarte_nrfx_configure+0x5c>
    f008:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f00c:	d05f      	beq.n	f0ce <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
    f00e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f012:	e053      	b.n	f0bc <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f014:	2600      	movs	r6, #0
    f016:	e7d8      	b.n	efca <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f018:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f01c:	d05a      	beq.n	f0d4 <uarte_nrfx_configure+0x118>
    f01e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f022:	d1f4      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f024:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f028:	e03c      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f02a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f02e:	d054      	beq.n	f0da <uarte_nrfx_configure+0x11e>
    f030:	d804      	bhi.n	f03c <uarte_nrfx_configure+0x80>
    f032:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f036:	d1ea      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f038:	4b33      	ldr	r3, [pc, #204]	; (f108 <uarte_nrfx_configure+0x14c>)
    f03a:	e033      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f03c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f040:	d04d      	beq.n	f0de <uarte_nrfx_configure+0x122>
    f042:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f046:	d1e2      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f048:	4b30      	ldr	r3, [pc, #192]	; (f10c <uarte_nrfx_configure+0x150>)
    f04a:	e02b      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f04c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f050:	d047      	beq.n	f0e2 <uarte_nrfx_configure+0x126>
    f052:	d812      	bhi.n	f07a <uarte_nrfx_configure+0xbe>
    f054:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f058:	42bb      	cmp	r3, r7
    f05a:	d045      	beq.n	f0e8 <uarte_nrfx_configure+0x12c>
    f05c:	d805      	bhi.n	f06a <uarte_nrfx_configure+0xae>
    f05e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f062:	d1d4      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f064:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f068:	e01c      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f06a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f06e:	d03e      	beq.n	f0ee <uarte_nrfx_configure+0x132>
    f070:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f074:	d1cb      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f076:	4b26      	ldr	r3, [pc, #152]	; (f110 <uarte_nrfx_configure+0x154>)
    f078:	e014      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f07a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f07e:	d039      	beq.n	f0f4 <uarte_nrfx_configure+0x138>
    f080:	d808      	bhi.n	f094 <uarte_nrfx_configure+0xd8>
    f082:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f086:	d038      	beq.n	f0fa <uarte_nrfx_configure+0x13e>
    f088:	4f22      	ldr	r7, [pc, #136]	; (f114 <uarte_nrfx_configure+0x158>)
    f08a:	42bb      	cmp	r3, r7
    f08c:	d1bf      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f08e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f092:	e007      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f094:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f098:	d032      	beq.n	f100 <uarte_nrfx_configure+0x144>
    f09a:	4f1f      	ldr	r7, [pc, #124]	; (f118 <uarte_nrfx_configure+0x15c>)
    f09c:	42bb      	cmp	r3, r7
    f09e:	d1b6      	bne.n	f00e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f0a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f0a4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    f0a8:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    f0aa:	4334      	orrs	r4, r6
    f0ac:	4322      	orrs	r2, r4
    f0ae:	3304      	adds	r3, #4
    f0b0:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f0b2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f0b6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f0ba:	2000      	movs	r0, #0
}
    f0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f0be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f0c2:	e7ef      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f0c4:	4b15      	ldr	r3, [pc, #84]	; (f11c <uarte_nrfx_configure+0x160>)
    f0c6:	e7ed      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    f0c8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f0cc:	e7ea      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    f0ce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f0d2:	e7e7      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f0d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f0d8:	e7e4      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f0da:	4b11      	ldr	r3, [pc, #68]	; (f120 <uarte_nrfx_configure+0x164>)
    f0dc:	e7e2      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f0de:	4b11      	ldr	r3, [pc, #68]	; (f124 <uarte_nrfx_configure+0x168>)
    f0e0:	e7e0      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f0e2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f0e6:	e7dd      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f0e8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f0ec:	e7da      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f0ee:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f0f2:	e7d7      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f0f4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f0f8:	e7d4      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f0fa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f0fe:	e7d1      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f100:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f104:	e7ce      	b.n	f0a4 <uarte_nrfx_configure+0xe8>
    f106:	bf00      	nop
    f108:	00275000 	.word	0x00275000
    f10c:	0075c000 	.word	0x0075c000
    f110:	013a9000 	.word	0x013a9000
    f114:	0003d090 	.word	0x0003d090
    f118:	000f4240 	.word	0x000f4240
    f11c:	0013b000 	.word	0x0013b000
    f120:	003af000 	.word	0x003af000
    f124:	004ea000 	.word	0x004ea000

0000f128 <uarte_instance_init.isra.2>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
    f128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
    f12a:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
    f12c:	460e      	mov	r6, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f12e:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f130:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    f134:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f136:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
    f138:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
    f13a:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
    f13e:	4b26      	ldr	r3, [pc, #152]	; (f1d8 <uarte_instance_init.isra.2+0xb0>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f140:	4091      	lsls	r1, r2
    f142:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
    f146:	6028      	str	r0, [r5, #0]
    p_reg->OUTSET = set_mask;
    f148:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f14a:	2103      	movs	r1, #3
    f14c:	3280      	adds	r2, #128	; 0x80
    f14e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    f152:	6872      	ldr	r2, [r6, #4]
    f154:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    f156:	bf1e      	ittt	ne
    f158:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f15c:	3180      	addne	r1, #128	; 0x80
    f15e:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    f162:	68b1      	ldr	r1, [r6, #8]
    p_reg->PSEL.TXD = pseltxd;
    f164:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    f168:	1c4f      	adds	r7, r1, #1
    f16a:	bf18      	it	ne
    f16c:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
    f16e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f172:	bf1e      	ittt	ne
    f174:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f178:	3280      	addne	r2, #128	; 0x80
    f17a:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    f17e:	68f7      	ldr	r7, [r6, #12]
    f180:	1c7a      	adds	r2, r7, #1
    f182:	d00c      	beq.n	f19e <uarte_instance_init.isra.2+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f184:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    f188:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f18c:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    f190:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f194:	f04f 0c03 	mov.w	ip, #3
    f198:	3280      	adds	r2, #128	; 0x80
    f19a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    f19e:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    f1a2:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f1a6:	68c1      	ldr	r1, [r0, #12]
    f1a8:	3104      	adds	r1, #4
    f1aa:	f7ff ff07 	bl	efbc <uarte_nrfx_configure>
	if (err) {
    f1ae:	b988      	cbnz	r0, f1d4 <uarte_instance_init.isra.2+0xac>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f1b0:	2208      	movs	r2, #8
		return err;
	}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    f1b2:	2301      	movs	r3, #1
    f1b4:	612b      	str	r3, [r5, #16]
    f1b6:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    f1ba:	6872      	ldr	r2, [r6, #4]
    f1bc:	3201      	adds	r2, #1
    f1be:	d009      	beq.n	f1d4 <uarte_instance_init.isra.2+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f1c0:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f1c4:	3514      	adds	r5, #20
    f1c6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f1ca:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f1ce:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f1d2:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    f1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1d6:	bf00      	nop
    f1d8:	40842500 	.word	0x40842500

0000f1dc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    f1dc:	b530      	push	{r4, r5, lr}
    f1de:	b085      	sub	sp, #20
    f1e0:	4605      	mov	r5, r0
    f1e2:	466c      	mov	r4, sp
    f1e4:	4b04      	ldr	r3, [pc, #16]	; (f1f8 <uarte_0_init+0x1c>)
    f1e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f1e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f1ec:	4621      	mov	r1, r4
    f1ee:	4628      	mov	r0, r5
    f1f0:	f7ff ff9a 	bl	f128 <uarte_instance_init.isra.2>
    f1f4:	b005      	add	sp, #20
    f1f6:	bd30      	pop	{r4, r5, pc}
    f1f8:	00011a50 	.word	0x00011a50

0000f1fc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    f1fc:	b530      	push	{r4, r5, lr}
    f1fe:	b085      	sub	sp, #20
    f200:	4605      	mov	r5, r0
    f202:	466c      	mov	r4, sp
    f204:	4b04      	ldr	r3, [pc, #16]	; (f218 <uarte_1_init+0x1c>)
    f206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f20c:	4621      	mov	r1, r4
    f20e:	4628      	mov	r0, r5
    f210:	f7ff ff8a 	bl	f128 <uarte_instance_init.isra.2>
    f214:	b005      	add	sp, #20
    f216:	bd30      	pop	{r4, r5, pc}
    f218:	00011a60 	.word	0x00011a60

0000f21c <uarte_nrfx_pm_control>:
{
    f21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f220:	68c6      	ldr	r6, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    f222:	2901      	cmp	r1, #1
{
    f224:	461d      	mov	r5, r3
    f226:	6934      	ldr	r4, [r6, #16]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    f228:	f040 80a5 	bne.w	f376 <uarte_nrfx_pm_control+0x15a>
		uint32_t new_state = *((const uint32_t *)context);
    f22c:	6817      	ldr	r7, [r2, #0]
		if (new_state != data->pm_state) {
    f22e:	42a7      	cmp	r7, r4
    f230:	d04f      	beq.n	f2d2 <uarte_nrfx_pm_control+0xb6>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    f232:	f8d0 e004 	ldr.w	lr, [r0, #4]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    f236:	2f01      	cmp	r7, #1
	return config->uarte_regs;
    f238:	f8de 3000 	ldr.w	r3, [lr]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    f23c:	d150      	bne.n	f2e0 <uarte_nrfx_pm_control+0xc4>
	if (!get_dev_config(dev)->gpio_mgmt) {
    f23e:	f89e 1005 	ldrb.w	r1, [lr, #5]
    f242:	2900      	cmp	r1, #0
    f244:	d03b      	beq.n	f2be <uarte_nrfx_pm_control+0xa2>
    return p_reg->PSEL.TXD;
    f246:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
    f24a:	f8d3 c514 	ldr.w	ip, [r3, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f24e:	f001 091f 	and.w	r9, r1, #31
    p_reg->OUTSET = set_mask;
    f252:	494a      	ldr	r1, [pc, #296]	; (f37c <uarte_nrfx_pm_control+0x160>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f254:	fa07 fa09 	lsl.w	sl, r7, r9
    return p_reg->PSEL.CTS;
    f258:	f8d3 8510 	ldr.w	r8, [r3, #1296]	; 0x510
    return p_reg->PSEL.RTS;
    f25c:	f8d3 4508 	ldr.w	r4, [r3, #1288]	; 0x508
    p_reg->OUTSET = set_mask;
    f260:	f8c1 a008 	str.w	sl, [r1, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f264:	f04f 0a03 	mov.w	sl, #3
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    f268:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    f26c:	f109 0980 	add.w	r9, r9, #128	; 0x80
    f270:	f841 a029 	str.w	sl, [r1, r9, lsl #2]
    f274:	bf1f      	itttt	ne
    f276:	f04f 0900 	movne.w	r9, #0
    *p_pin = pin_number & 0x1F;
    f27a:	f00c 0c1f 	andne.w	ip, ip, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f27e:	f10c 0c80 	addne.w	ip, ip, #128	; 0x80
    f282:	f841 902c 	strne.w	r9, [r1, ip, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f286:	f89e e004 	ldrb.w	lr, [lr, #4]
    f28a:	f01e 0f04 	tst.w	lr, #4
    f28e:	d00c      	beq.n	f2aa <uarte_nrfx_pm_control+0x8e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f290:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    f294:	f004 041f 	and.w	r4, r4, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f298:	fa0c fc04 	lsl.w	ip, ip, r4
    p_reg->OUTSET = set_mask;
    f29c:	f8c1 c008 	str.w	ip, [r1, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f2a0:	f04f 0c03 	mov.w	ip, #3
    f2a4:	3480      	adds	r4, #128	; 0x80
    f2a6:	f841 c024 	str.w	ip, [r1, r4, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f2aa:	f01e 0f02 	tst.w	lr, #2
    f2ae:	bf1f      	itttt	ne
    f2b0:	2400      	movne	r4, #0
    *p_pin = pin_number & 0x1F;
    f2b2:	f008 081f 	andne.w	r8, r8, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f2b6:	f108 0880 	addne.w	r8, r8, #128	; 0x80
    f2ba:	f841 4028 	strne.w	r4, [r1, r8, lsl #2]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f2be:	2108      	movs	r1, #8
    f2c0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return p_reg->PSEL.RXD;
    f2c4:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
		if (nrf_uarte_rx_pin_get(uarte) !=
    f2c8:	3101      	adds	r1, #1
    f2ca:	d001      	beq.n	f2d0 <uarte_nrfx_pm_control+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f2cc:	2101      	movs	r1, #1
    f2ce:	6019      	str	r1, [r3, #0]
			data->pm_state = new_state;
    f2d0:	6137      	str	r7, [r6, #16]
	if (cb) {
    f2d2:	b115      	cbz	r5, f2da <uarte_nrfx_pm_control+0xbe>
		cb(dev, 0, context, arg);
    f2d4:	9b08      	ldr	r3, [sp, #32]
    f2d6:	2100      	movs	r1, #0
    f2d8:	47a8      	blx	r5
}
    f2da:	2000      	movs	r0, #0
    f2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
    f2e0:	2c01      	cmp	r4, #1
    f2e2:	d1f5      	bne.n	f2d0 <uarte_nrfx_pm_control+0xb4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f2e4:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    f2e8:	b169      	cbz	r1, f306 <uarte_nrfx_pm_control+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f2ea:	605c      	str	r4, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f2ec:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
			while (!nrf_uarte_event_check(uarte,
    f2f0:	2900      	cmp	r1, #0
    f2f2:	d0fb      	beq.n	f2ec <uarte_nrfx_pm_control+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f2f4:	2100      	movs	r1, #0
    f2f6:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
    f2fa:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
    f2fe:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
    f302:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f306:	2100      	movs	r1, #0
    f308:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	if (!get_dev_config(dev)->gpio_mgmt) {
    f30c:	f89e 1005 	ldrb.w	r1, [lr, #5]
    f310:	2900      	cmp	r1, #0
    f312:	d0dd      	beq.n	f2d0 <uarte_nrfx_pm_control+0xb4>
    f314:	f04f 0902 	mov.w	r9, #2
    return p_reg->PSEL.TXD;
    f318:	f8d3 850c 	ldr.w	r8, [r3, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
    f31c:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f320:	f008 081f 	and.w	r8, r8, #31
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    f324:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f328:	bf18      	it	ne
    f32a:	f001 011f 	andne.w	r1, r1, #31
    return p_reg->PSEL.CTS;
    f32e:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
    return p_reg->PSEL.RTS;
    f332:	f8d3 c508 	ldr.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f336:	4b11      	ldr	r3, [pc, #68]	; (f37c <uarte_nrfx_pm_control+0x160>)
    f338:	bf18      	it	ne
    f33a:	3180      	addne	r1, #128	; 0x80
    f33c:	f108 0880 	add.w	r8, r8, #128	; 0x80
    f340:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
    f344:	bf18      	it	ne
    f346:	f843 9021 	strne.w	r9, [r3, r1, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f34a:	f89e e004 	ldrb.w	lr, [lr, #4]
    f34e:	f01e 0f04 	tst.w	lr, #4
    *p_pin = pin_number & 0x1F;
    f352:	bf1f      	itttt	ne
    f354:	f00c 011f 	andne.w	r1, ip, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f358:	f04f 0c02 	movne.w	ip, #2
    f35c:	3180      	addne	r1, #128	; 0x80
    f35e:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f362:	f01e 0f02 	tst.w	lr, #2
    *p_pin = pin_number & 0x1F;
    f366:	bf1f      	itttt	ne
    f368:	f004 011f 	andne.w	r1, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f36c:	2402      	movne	r4, #2
    f36e:	3180      	addne	r1, #128	; 0x80
    f370:	f843 4021 	strne.w	r4, [r3, r1, lsl #2]
    f374:	e7ac      	b.n	f2d0 <uarte_nrfx_pm_control+0xb4>
		*((uint32_t *)context) = data->pm_state;
    f376:	6014      	str	r4, [r2, #0]
    f378:	e7ab      	b.n	f2d2 <uarte_nrfx_pm_control+0xb6>
    f37a:	bf00      	nop
    f37c:	40842500 	.word	0x40842500

0000f380 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    f380:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    f382:	f7fd fe0b 	bl	cf9c <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    f386:	2301      	movs	r3, #1
    f388:	f04f 0000 	mov.w	r0, #0
    f38c:	4a06      	ldr	r2, [pc, #24]	; (f3a8 <k_sys_fatal_error_handler+0x28>)
    f38e:	f363 0007 	bfi	r0, r3, #0, #8
    f392:	4b06      	ldr	r3, [pc, #24]	; (f3ac <k_sys_fatal_error_handler+0x2c>)
    f394:	4906      	ldr	r1, [pc, #24]	; (f3b0 <k_sys_fatal_error_handler+0x30>)
    f396:	1a9b      	subs	r3, r3, r2
    f398:	08db      	lsrs	r3, r3, #3
    f39a:	f363 108f 	bfi	r0, r3, #6, #10
    f39e:	f001 fdb8 	bl	10f12 <log_string_sync>
	sys_arch_reboot(0);
    f3a2:	2000      	movs	r0, #0
    f3a4:	f7fe ff62 	bl	e26c <sys_arch_reboot>

	CODE_UNREACHABLE;
    f3a8:	000119e4 	.word	0x000119e4
    f3ac:	000119ec 	.word	0x000119ec
    f3b0:	0001242e 	.word	0x0001242e

0000f3b4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    f3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f3b8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    f3ba:	4c21      	ldr	r4, [pc, #132]	; (f440 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    f3bc:	4e21      	ldr	r6, [pc, #132]	; (f444 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f3be:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    f3c2:	f8df 9088 	ldr.w	r9, [pc, #136]	; f44c <check_ext_api_requests+0x98>
{
    f3c6:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f3c8:	45a8      	cmp	r8, r5
    f3ca:	d803      	bhi.n	f3d4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    f3cc:	2000      	movs	r0, #0
    f3ce:	b005      	add	sp, #20
    f3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    f3d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f3d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f3da:	681f      	ldr	r7, [r3, #0]
    f3dc:	ab01      	add	r3, sp, #4
    f3de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    f3e2:	220c      	movs	r2, #12
    f3e4:	4619      	mov	r1, r3
    f3e6:	4638      	mov	r0, r7
    f3e8:	f001 feb8 	bl	1115c <memcmp>
    f3ec:	b990      	cbnz	r0, f414 <check_ext_api_requests+0x60>
    f3ee:	b18f      	cbz	r7, f414 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    f3f2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f3f4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    f3f6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f3f8:	4291      	cmp	r1, r2
    f3fa:	d10b      	bne.n	f414 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    f3fc:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    f3fe:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    f400:	4291      	cmp	r1, r2
    f402:	d807      	bhi.n	f414 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    f404:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    f406:	4291      	cmp	r1, r2
    f408:	d904      	bls.n	f414 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    f40a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f40c:	695b      	ldr	r3, [r3, #20]
    f40e:	ea32 0303 	bics.w	r3, r2, r3
    f412:	d00a      	beq.n	f42a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    f414:	6a27      	ldr	r7, [r4, #32]
    f416:	b167      	cbz	r7, f432 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    f418:	480b      	ldr	r0, [pc, #44]	; (f448 <check_ext_api_requests+0x94>)
    f41a:	f001 fbd6 	bl	10bca <printk>
			k_panic();
    f41e:	4040      	eors	r0, r0
    f420:	f380 8811 	msr	BASEPRI, r0
    f424:	f04f 0004 	mov.w	r0, #4
    f428:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    f42a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f42c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    f42e:	441c      	add	r4, r3
    f430:	e7ca      	b.n	f3c8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    f432:	4648      	mov	r0, r9
    f434:	f001 fbc9 	bl	10bca <printk>
			*ext_api_req->ext_api = NULL;
    f438:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f43a:	601f      	str	r7, [r3, #0]
    f43c:	e7f5      	b.n	f42a <check_ext_api_requests+0x76>
    f43e:	bf00      	nop
    f440:	0000c23c 	.word	0x0000c23c
    f444:	00011a70 	.word	0x00011a70
    f448:	0001244b 	.word	0x0001244b
    f44c:	00012474 	.word	0x00012474

0000f450 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    f450:	4b01      	ldr	r3, [pc, #4]	; (f458 <SystemInit+0x8>)
    f452:	4a02      	ldr	r2, [pc, #8]	; (f45c <SystemInit+0xc>)
    f454:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    f456:	4770      	bx	lr
    f458:	20010340 	.word	0x20010340
    f45c:	03d09000 	.word	0x03d09000

0000f460 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    f460:	4b04      	ldr	r3, [pc, #16]	; (f474 <nrfx_clock_init+0x14>)
    f462:	791a      	ldrb	r2, [r3, #4]
    f464:	b922      	cbnz	r2, f470 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    f466:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    f468:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    f46a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    f46c:	4802      	ldr	r0, [pc, #8]	; (f478 <nrfx_clock_init+0x18>)
    f46e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    f470:	4802      	ldr	r0, [pc, #8]	; (f47c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f472:	4770      	bx	lr
    f474:	20010614 	.word	0x20010614
    f478:	0bad0000 	.word	0x0bad0000
    f47c:	0bad000c 	.word	0x0bad000c

0000f480 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    f480:	b110      	cbz	r0, f488 <nrfx_clock_start+0x8>
    f482:	2801      	cmp	r0, #1
    f484:	d01e      	beq.n	f4c4 <nrfx_clock_start+0x44>
    f486:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f488:	4b13      	ldr	r3, [pc, #76]	; (f4d8 <nrfx_clock_start+0x58>)
    f48a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f48e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    f492:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    f496:	4619      	mov	r1, r3
    f498:	d010      	beq.n	f4bc <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    f49a:	f002 0203 	and.w	r2, r2, #3
    f49e:	2a02      	cmp	r2, #2
    f4a0:	d10c      	bne.n	f4bc <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f4a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f4a6:	2200      	movs	r2, #0
    f4a8:	4b0c      	ldr	r3, [pc, #48]	; (f4dc <nrfx_clock_start+0x5c>)
    f4aa:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    f4ac:	2202      	movs	r2, #2
    f4ae:	681b      	ldr	r3, [r3, #0]
    f4b0:	4b09      	ldr	r3, [pc, #36]	; (f4d8 <nrfx_clock_start+0x58>)
    f4b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f4b6:	2201      	movs	r2, #1
    f4b8:	609a      	str	r2, [r3, #8]
    f4ba:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    f4bc:	2301      	movs	r3, #1
    f4be:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
    f4c2:	e7f0      	b.n	f4a6 <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f4c4:	2200      	movs	r2, #0
    f4c6:	4b06      	ldr	r3, [pc, #24]	; (f4e0 <nrfx_clock_start+0x60>)
    f4c8:	601a      	str	r2, [r3, #0]
    f4ca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f4cc:	4b02      	ldr	r3, [pc, #8]	; (f4d8 <nrfx_clock_start+0x58>)
    f4ce:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f4d2:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    f4d4:	4770      	bx	lr
    f4d6:	bf00      	nop
    f4d8:	40005000 	.word	0x40005000
    f4dc:	40005104 	.word	0x40005104
    f4e0:	40005100 	.word	0x40005100

0000f4e4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    f4e4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    f4e6:	b110      	cbz	r0, f4ee <nrfx_clock_stop+0xa>
    f4e8:	2801      	cmp	r0, #1
    f4ea:	d016      	beq.n	f51a <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    f4ec:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    f4ee:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f4f0:	2101      	movs	r1, #1
    f4f2:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    f4f6:	4c16      	ldr	r4, [pc, #88]	; (f550 <nrfx_clock_stop+0x6c>)
    f4f8:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f4fc:	4a15      	ldr	r2, [pc, #84]	; (f554 <nrfx_clock_stop+0x70>)
    f4fe:	6010      	str	r0, [r2, #0]
    f500:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f502:	4a15      	ldr	r2, [pc, #84]	; (f558 <nrfx_clock_stop+0x74>)
    f504:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f506:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    f50a:	03db      	lsls	r3, r3, #15
    f50c:	d5ee      	bpl.n	f4ec <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    f50e:	2001      	movs	r0, #1
    f510:	f001 fffb 	bl	1150a <nrfx_busy_wait>
    f514:	3d01      	subs	r5, #1
    f516:	d1f6      	bne.n	f506 <nrfx_clock_stop+0x22>
    f518:	e7e8      	b.n	f4ec <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f51a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f51c:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f520:	4b0e      	ldr	r3, [pc, #56]	; (f55c <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
    f522:	4c0b      	ldr	r4, [pc, #44]	; (f550 <nrfx_clock_stop+0x6c>)
    f524:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f528:	601a      	str	r2, [r3, #0]
    f52a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f52c:	4b0c      	ldr	r3, [pc, #48]	; (f560 <nrfx_clock_stop+0x7c>)
    f52e:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f530:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f534:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f538:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f53c:	03d2      	lsls	r2, r2, #15
    f53e:	d5d5      	bpl.n	f4ec <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    f540:	2b00      	cmp	r3, #0
    f542:	d0d3      	beq.n	f4ec <nrfx_clock_stop+0x8>
    f544:	2001      	movs	r0, #1
    f546:	f001 ffe0 	bl	1150a <nrfx_busy_wait>
    f54a:	3d01      	subs	r5, #1
    f54c:	d1f0      	bne.n	f530 <nrfx_clock_stop+0x4c>
    f54e:	e7cd      	b.n	f4ec <nrfx_clock_stop+0x8>
    f550:	40005000 	.word	0x40005000
    f554:	40005104 	.word	0x40005104
    f558:	4000500c 	.word	0x4000500c
    f55c:	40005100 	.word	0x40005100
    f560:	40005004 	.word	0x40005004

0000f564 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f564:	4b15      	ldr	r3, [pc, #84]	; (f5bc <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    f566:	b510      	push	{r4, lr}
    f568:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    f56a:	b14a      	cbz	r2, f580 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f56c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    f56e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f570:	6018      	str	r0, [r3, #0]
    f572:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    f574:	4b12      	ldr	r3, [pc, #72]	; (f5c0 <nrfx_power_clock_irq_handler+0x5c>)
    f576:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f57a:	4b12      	ldr	r3, [pc, #72]	; (f5c4 <nrfx_power_clock_irq_handler+0x60>)
    f57c:	681b      	ldr	r3, [r3, #0]
    f57e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f580:	4b11      	ldr	r3, [pc, #68]	; (f5c8 <nrfx_power_clock_irq_handler+0x64>)
    f582:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    f584:	b182      	cbz	r2, f5a8 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f586:	2200      	movs	r2, #0
    f588:	601a      	str	r2, [r3, #0]
    f58a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f58c:	4b0c      	ldr	r3, [pc, #48]	; (f5c0 <nrfx_power_clock_irq_handler+0x5c>)
    f58e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f592:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    f596:	f002 0203 	and.w	r2, r2, #3
    f59a:	2a01      	cmp	r2, #1
    f59c:	f04f 0102 	mov.w	r1, #2
    f5a0:	d103      	bne.n	f5aa <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f5a2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f5a6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    f5a8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    f5aa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f5ae:	4b05      	ldr	r3, [pc, #20]	; (f5c4 <nrfx_power_clock_irq_handler+0x60>)
    f5b0:	2001      	movs	r0, #1
}
    f5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f5b6:	681b      	ldr	r3, [r3, #0]
    f5b8:	4718      	bx	r3
    f5ba:	bf00      	nop
    f5bc:	40005100 	.word	0x40005100
    f5c0:	40005000 	.word	0x40005000
    f5c4:	20010614 	.word	0x20010614
    f5c8:	40005104 	.word	0x40005104

0000f5cc <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    f5cc:	4a04      	ldr	r2, [pc, #16]	; (f5e0 <nvmc_word_write+0x14>)
    f5ce:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    f5d2:	07db      	lsls	r3, r3, #31
    f5d4:	d5fb      	bpl.n	f5ce <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    f5d6:	6001      	str	r1, [r0, #0]
    f5d8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    f5dc:	4770      	bx	lr
    f5de:	bf00      	nop
    f5e0:	40039000 	.word	0x40039000

0000f5e4 <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
    f5e4:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    f5e8:	b97b      	cbnz	r3, f60a <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    f5ea:	2202      	movs	r2, #2
    f5ec:	4b08      	ldr	r3, [pc, #32]	; (f610 <nrfx_nvmc_page_erase+0x2c>)
    f5ee:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    f5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f5f6:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    f5f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    f5fc:	07d2      	lsls	r2, r2, #31
    f5fe:	d5fb      	bpl.n	f5f8 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
    f600:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    f602:	4804      	ldr	r0, [pc, #16]	; (f614 <nrfx_nvmc_page_erase+0x30>)
    f604:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    f608:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    f60a:	4803      	ldr	r0, [pc, #12]	; (f618 <nrfx_nvmc_page_erase+0x34>)
}
    f60c:	4770      	bx	lr
    f60e:	bf00      	nop
    f610:	40039000 	.word	0x40039000
    f614:	0bad0000 	.word	0x0bad0000
    f618:	0bad000a 	.word	0x0bad000a

0000f61c <nrfx_nvmc_word_write>:
    f61c:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    f61e:	b510      	push	{r4, lr}
    f620:	4c04      	ldr	r4, [pc, #16]	; (f634 <nrfx_nvmc_word_write+0x18>)
    f622:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    f626:	f7ff ffd1 	bl	f5cc <nvmc_word_write>
    f62a:	2300      	movs	r3, #0
    f62c:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
    f630:	bd10      	pop	{r4, pc}
    f632:	bf00      	nop
    f634:	40039000 	.word	0x40039000

0000f638 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    f638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f63c:	2424      	movs	r4, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f63e:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f640:	4e4c      	ldr	r6, [pc, #304]	; (f774 <nrfx_spim_init+0x13c>)
    f642:	436c      	muls	r4, r5
    f644:	1937      	adds	r7, r6, r4
    f646:	f897 c01c 	ldrb.w	ip, [r7, #28]
    f64a:	f1bc 0f00 	cmp.w	ip, #0
    f64e:	f040 808e 	bne.w	f76e <nrfx_spim_init+0x136>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    f652:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    f654:	607b      	str	r3, [r7, #4]
    f656:	2701      	movs	r7, #1
    p_cb->handler = handler;
    f658:	5132      	str	r2, [r6, r4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    f65a:	f891 8000 	ldrb.w	r8, [r1]
    f65e:	f891 e00c 	ldrb.w	lr, [r1, #12]
    f662:	4b45      	ldr	r3, [pc, #276]	; (f778 <nrfx_spim_init+0x140>)
    p_reg->OUTCLR = clr_mask;
    f664:	f008 041f 	and.w	r4, r8, #31
    f668:	40a7      	lsls	r7, r4
    f66a:	f1be 0f01 	cmp.w	lr, #1
    f66e:	bf94      	ite	ls
    f670:	60df      	strls	r7, [r3, #12]
    p_reg->OUTSET = set_mask;
    f672:	609f      	strhi	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f674:	2701      	movs	r7, #1
    f676:	3480      	adds	r4, #128	; 0x80
    f678:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    f67c:	f891 c001 	ldrb.w	ip, [r1, #1]
    f680:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    f684:	bf1f      	itttt	ne
    f686:	f00c 041f 	andne.w	r4, ip, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    f68a:	40a7      	lslne	r7, r4
    p_reg->OUTCLR = clr_mask;
    f68c:	60df      	strne	r7, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f68e:	2703      	movne	r7, #3
    f690:	bf1c      	itt	ne
    f692:	3480      	addne	r4, #128	; 0x80
    f694:	f843 7024 	strne.w	r7, [r3, r4, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    f698:	788f      	ldrb	r7, [r1, #2]
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    f69a:	bf08      	it	eq
    f69c:	f04f 3cff 	moveq.w	ip, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    f6a0:	2fff      	cmp	r7, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    f6a2:	bf1f      	itttt	ne
    f6a4:	f891 900e 	ldrbne.w	r9, [r1, #14]
    *p_pin = pin_number & 0x1F;
    f6a8:	f007 041f 	andne.w	r4, r7, #31
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    f6ac:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6b0:	3480      	addne	r4, #128	; 0x80
    f6b2:	bf18      	it	ne
    f6b4:	f843 9024 	strne.w	r9, [r3, r4, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    f6b8:	f04f 0924 	mov.w	r9, #36	; 0x24
    f6bc:	fb09 6905 	mla	r9, r9, r5, r6
    f6c0:	78cc      	ldrb	r4, [r1, #3]
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    f6c2:	bf08      	it	eq
    f6c4:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f6c8:	2cff      	cmp	r4, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    f6ca:	f889 401f 	strb.w	r4, [r9, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f6ce:	d016      	beq.n	f6fe <nrfx_spim_init+0xc6>
    {
        if (p_config->ss_active_high)
    f6d0:	f04f 0a01 	mov.w	sl, #1
    f6d4:	f891 9004 	ldrb.w	r9, [r1, #4]
    f6d8:	f004 041f 	and.w	r4, r4, #31
    f6dc:	fa0a fa04 	lsl.w	sl, sl, r4
    f6e0:	f1b9 0f00 	cmp.w	r9, #0
    f6e4:	d03a      	beq.n	f75c <nrfx_spim_init+0x124>
    p_reg->OUTCLR = clr_mask;
    f6e6:	f8c3 a00c 	str.w	sl, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6ea:	f04f 0a03 	mov.w	sl, #3
    f6ee:	3480      	adds	r4, #128	; 0x80
    f6f0:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    f6f4:	2324      	movs	r3, #36	; 0x24
    f6f6:	fb03 6305 	mla	r3, r3, r5, r6
    f6fa:	f883 901e 	strb.w	r9, [r3, #30]
    p_reg->FREQUENCY = (uint32_t)frequency;
    f6fe:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCK  = sck_pin;
    f700:	f8c0 8508 	str.w	r8, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    f704:	f8c0 c50c 	str.w	ip, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    f708:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    f70c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    f710:	7b4b      	ldrb	r3, [r1, #13]
    f712:	3300      	adds	r3, #0
    f714:	bf18      	it	ne
    f716:	2301      	movne	r3, #1
    switch (spi_mode)
    f718:	f1be 0f02 	cmp.w	lr, #2
    f71c:	d021      	beq.n	f762 <nrfx_spim_init+0x12a>
    f71e:	f1be 0f03 	cmp.w	lr, #3
    f722:	d021      	beq.n	f768 <nrfx_spim_init+0x130>
    f724:	f1be 0f01 	cmp.w	lr, #1
    f728:	d101      	bne.n	f72e <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    f72a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    f72e:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    f732:	798b      	ldrb	r3, [r1, #6]
    f734:	f8c0 35c0 	str.w	r3, [r0, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    f738:	2307      	movs	r3, #7
    f73a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    f73e:	b11a      	cbz	r2, f748 <nrfx_spim_init+0x110>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    f740:	f340 3007 	sbfx	r0, r0, #12, #8
    f744:	f7fe f97e 	bl	da44 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    f748:	2324      	movs	r3, #36	; 0x24
    f74a:	fb03 6505 	mla	r5, r3, r5, r6
    f74e:	2300      	movs	r3, #0
    f750:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f752:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f754:	4809      	ldr	r0, [pc, #36]	; (f77c <nrfx_spim_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f756:	772b      	strb	r3, [r5, #28]
}
    f758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->OUTSET = set_mask;
    f75c:	f8c3 a008 	str.w	sl, [r3, #8]
    f760:	e7c3      	b.n	f6ea <nrfx_spim_init+0xb2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f762:	f043 0304 	orr.w	r3, r3, #4
        break;
    f766:	e7e2      	b.n	f72e <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f768:	f043 0306 	orr.w	r3, r3, #6
        break;
    f76c:	e7df      	b.n	f72e <nrfx_spim_init+0xf6>
        return err_code;
    f76e:	4804      	ldr	r0, [pc, #16]	; (f780 <nrfx_spim_init+0x148>)
    f770:	e7f2      	b.n	f758 <nrfx_spim_init+0x120>
    f772:	bf00      	nop
    f774:	2001061c 	.word	0x2001061c
    f778:	40842500 	.word	0x40842500
    f77c:	0bad0000 	.word	0x0bad0000
    f780:	0bad0005 	.word	0x0bad0005

0000f784 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    f784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    f786:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f788:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    f78a:	4d28      	ldr	r5, [pc, #160]	; (f82c <nrfx_spim_uninit+0xa8>)
    f78c:	4373      	muls	r3, r6
    f78e:	18ef      	adds	r7, r5, r3
    f790:	58eb      	ldr	r3, [r5, r3]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    f792:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    f794:	b1c3      	cbz	r3, f7c8 <nrfx_spim_uninit+0x44>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    f796:	f344 3007 	sbfx	r0, r4, #12, #8
    f79a:	f7fe f963 	bl	da64 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    f79e:	4b24      	ldr	r3, [pc, #144]	; (f830 <nrfx_spim_uninit+0xac>)
    f7a0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    f7a4:	7f7b      	ldrb	r3, [r7, #29]
    f7a6:	b17b      	cbz	r3, f7c8 <nrfx_spim_uninit+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f7a8:	2301      	movs	r3, #1
    f7aa:	2764      	movs	r7, #100	; 0x64
    f7ac:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f7ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    f7b2:	b923      	cbnz	r3, f7be <nrfx_spim_uninit+0x3a>
    f7b4:	2001      	movs	r0, #1
    f7b6:	f001 fea8 	bl	1150a <nrfx_busy_wait>
    f7ba:	3f01      	subs	r7, #1
    f7bc:	d1f7      	bne.n	f7ae <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    f7be:	2324      	movs	r3, #36	; 0x24
    f7c0:	2200      	movs	r2, #0
    f7c2:	fb03 5306 	mla	r3, r3, r6, r5
    f7c6:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    f7c8:	2300      	movs	r3, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f7ca:	2102      	movs	r1, #2
    f7cc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return p_reg->PSEL.SCK;
    f7d0:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    f7d4:	4b17      	ldr	r3, [pc, #92]	; (f834 <nrfx_spim_uninit+0xb0>)
    *p_pin = pin_number & 0x1F;
    f7d6:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f7da:	3280      	adds	r2, #128	; 0x80
    f7dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return p_reg->PSEL.MISO;
    f7e0:	f8d4 2510 	ldr.w	r2, [r4, #1296]	; 0x510
    nrf_spim_disable(p_spim);

    nrf_gpio_cfg_default(nrf_spim_sck_pin_get(p_spim));

    uint32_t miso_pin = nrf_spim_miso_pin_get(p_spim);
    if (miso_pin != NRF_SPIM_PIN_NOT_CONNECTED)
    f7e4:	1c50      	adds	r0, r2, #1
    *p_pin = pin_number & 0x1F;
    f7e6:	bf1e      	ittt	ne
    f7e8:	f002 021f 	andne.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f7ec:	3280      	addne	r2, #128	; 0x80
    f7ee:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
    return p_reg->PSEL.MOSI;
    f7f2:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    {
        nrf_gpio_cfg_default(miso_pin);
    }

    uint32_t mosi_pin = nrf_spim_mosi_pin_get(p_spim);
    if (mosi_pin != NRF_SPIM_PIN_NOT_CONNECTED)
    f7f6:	1c51      	adds	r1, r2, #1
    f7f8:	bf1f      	itttt	ne
    f7fa:	2102      	movne	r1, #2
    *p_pin = pin_number & 0x1F;
    f7fc:	f002 021f 	andne.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f800:	3280      	addne	r2, #128	; 0x80
    f802:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
    {
        nrf_gpio_cfg_default(mosi_pin);
    }

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f806:	2224      	movs	r2, #36	; 0x24
    f808:	fb02 5206 	mla	r2, r2, r6, r5
    f80c:	7fd2      	ldrb	r2, [r2, #31]
    f80e:	2aff      	cmp	r2, #255	; 0xff
    f810:	bf1f      	itttt	ne
    f812:	2102      	movne	r1, #2
    *p_pin = pin_number & 0x1F;
    f814:	f002 021f 	andne.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f818:	3280      	addne	r2, #128	; 0x80
    f81a:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    f81e:	2324      	movs	r3, #36	; 0x24
    f820:	fb03 5506 	mla	r5, r3, r6, r5
    f824:	2300      	movs	r3, #0
    f826:	772b      	strb	r3, [r5, #28]
}
    f828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f82a:	bf00      	nop
    f82c:	2001061c 	.word	0x2001061c
    f830:	00080152 	.word	0x00080152
    f834:	40842500 	.word	0x40842500

0000f838 <nrfx_spim_xfer>:
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    f838:	2324      	movs	r3, #36	; 0x24
{
    f83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f83e:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->transfer_in_progress)
    f840:	4e43      	ldr	r6, [pc, #268]	; (f950 <nrfx_spim_xfer+0x118>)
    f842:	436b      	muls	r3, r5
{
    f844:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
    f846:	18f2      	adds	r2, r6, r3
{
    f848:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    f84a:	7f51      	ldrb	r1, [r2, #29]
{
    f84c:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    f84e:	2900      	cmp	r1, #0
    f850:	d17b      	bne.n	f94a <nrfx_spim_xfer+0x112>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    f852:	58f3      	ldr	r3, [r6, r3]
    f854:	b123      	cbz	r3, f860 <nrfx_spim_xfer+0x28>
    f856:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    f85a:	bf04      	itt	eq
    f85c:	2301      	moveq	r3, #1
    f85e:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    f860:	f04f 0c24 	mov.w	ip, #36	; 0x24
    f864:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    f868:	fb0c 6c05 	mla	ip, ip, r5, r6
    f86c:	f10c 080c 	add.w	r8, ip, #12
    f870:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f874:	f89c 301f 	ldrb.w	r3, [ip, #31]
    f878:	2bff      	cmp	r3, #255	; 0xff
    f87a:	d008      	beq.n	f88e <nrfx_spim_xfer+0x56>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
    f87c:	f003 021f 	and.w	r2, r3, #31
    f880:	2301      	movs	r3, #1
    f882:	f89c 101e 	ldrb.w	r1, [ip, #30]
    f886:	4093      	lsls	r3, r2
    f888:	4a32      	ldr	r2, [pc, #200]	; (f954 <nrfx_spim_xfer+0x11c>)
    f88a:	b1b1      	cbz	r1, f8ba <nrfx_spim_xfer+0x82>
    p_reg->OUTSET = set_mask;
    f88c:	6093      	str	r3, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    f88e:	6839      	ldr	r1, [r7, #0]
    f890:	b121      	cbz	r1, f89c <nrfx_spim_xfer+0x64>
    f892:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    f896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    f89a:	d106      	bne.n	f8aa <nrfx_spim_xfer+0x72>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    f89c:	68ba      	ldr	r2, [r7, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    f89e:	b172      	cbz	r2, f8be <nrfx_spim_xfer+0x86>
    f8a0:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    f8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    f8a8:	d009      	beq.n	f8be <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
    f8aa:	2324      	movs	r3, #36	; 0x24
    f8ac:	fb03 6505 	mla	r5, r3, r5, r6
    f8b0:	2300      	movs	r3, #0
        return err_code;
    f8b2:	4829      	ldr	r0, [pc, #164]	; (f958 <nrfx_spim_xfer+0x120>)
        p_cb->transfer_in_progress = false;
    f8b4:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    f8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->OUTCLR = clr_mask;
    f8ba:	60d3      	str	r3, [r2, #12]
    f8bc:	e7e7      	b.n	f88e <nrfx_spim_xfer+0x56>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    f8be:	f8de 3000 	ldr.w	r3, [lr]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    f8c2:	6878      	ldr	r0, [r7, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f8c4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f8c8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    f8cc:	68f9      	ldr	r1, [r7, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f8ce:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f8d2:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    f8d4:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f8d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f8dc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    f8e0:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    f8e4:	bf18      	it	ne
    f8e6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    f8e8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    f8ec:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    f8f0:	bf18      	it	ne
    f8f2:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    f8f4:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    f8f8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f8fc:	bf04      	itt	eq
    f8fe:	2201      	moveq	r2, #1
    f900:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
    f902:	2224      	movs	r2, #36	; 0x24
    f904:	436a      	muls	r2, r5
    f906:	58b2      	ldr	r2, [r6, r2]
    f908:	b9b2      	cbnz	r2, f938 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    f90a:	b919      	cbnz	r1, f914 <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f90c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    f910:	2a00      	cmp	r2, #0
    f912:	d0fb      	beq.n	f90c <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f914:	2324      	movs	r3, #36	; 0x24
    f916:	fb03 6505 	mla	r5, r3, r5, r6
    f91a:	7feb      	ldrb	r3, [r5, #31]
    f91c:	2bff      	cmp	r3, #255	; 0xff
    f91e:	d007      	beq.n	f930 <nrfx_spim_xfer+0xf8>
                if (p_cb->ss_active_high)
    f920:	f003 021f 	and.w	r2, r3, #31
    f924:	2301      	movs	r3, #1
    f926:	7fa9      	ldrb	r1, [r5, #30]
    f928:	4093      	lsls	r3, r2
    f92a:	4a0a      	ldr	r2, [pc, #40]	; (f954 <nrfx_spim_xfer+0x11c>)
    f92c:	b111      	cbz	r1, f934 <nrfx_spim_xfer+0xfc>
    f92e:	60d3      	str	r3, [r2, #12]
    return err_code;
    f930:	480a      	ldr	r0, [pc, #40]	; (f95c <nrfx_spim_xfer+0x124>)
    f932:	e7c0      	b.n	f8b6 <nrfx_spim_xfer+0x7e>
    p_reg->OUTSET = set_mask;
    f934:	6093      	str	r3, [r2, #8]
    f936:	e7fb      	b.n	f930 <nrfx_spim_xfer+0xf8>
    if (!enable)
    f938:	2240      	movs	r2, #64	; 0x40
    f93a:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
    f93e:	bf14      	ite	ne
    f940:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    f944:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    f948:	e7f2      	b.n	f930 <nrfx_spim_xfer+0xf8>
        return err_code;
    f94a:	4805      	ldr	r0, [pc, #20]	; (f960 <nrfx_spim_xfer+0x128>)
    f94c:	e7b3      	b.n	f8b6 <nrfx_spim_xfer+0x7e>
    f94e:	bf00      	nop
    f950:	2001061c 	.word	0x2001061c
    f954:	40842500 	.word	0x40842500
    f958:	0bad000a 	.word	0x0bad000a
    f95c:	0bad0000 	.word	0x0bad0000
    f960:	0bad000b 	.word	0x0bad000b

0000f964 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f964:	4b0f      	ldr	r3, [pc, #60]	; (f9a4 <nrfx_spim_3_irq_handler+0x40>)
    f966:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    f96a:	b1ca      	cbz	r2, f9a0 <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f96c:	2200      	movs	r2, #0
    f96e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f972:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f976:	4b0c      	ldr	r3, [pc, #48]	; (f9a8 <nrfx_spim_3_irq_handler+0x44>)
    f978:	7fda      	ldrb	r2, [r3, #31]
    f97a:	2aff      	cmp	r2, #255	; 0xff
    f97c:	d007      	beq.n	f98e <nrfx_spim_3_irq_handler+0x2a>
            if (p_cb->ss_active_high)
    f97e:	f002 011f 	and.w	r1, r2, #31
    f982:	2201      	movs	r2, #1
    f984:	7f98      	ldrb	r0, [r3, #30]
    f986:	408a      	lsls	r2, r1
    f988:	4908      	ldr	r1, [pc, #32]	; (f9ac <nrfx_spim_3_irq_handler+0x48>)
    f98a:	b138      	cbz	r0, f99c <nrfx_spim_3_irq_handler+0x38>
    p_reg->OUTCLR = clr_mask;
    f98c:	60ca      	str	r2, [r1, #12]
    p_cb->transfer_in_progress = false;
    f98e:	2200      	movs	r2, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    f990:	4807      	ldr	r0, [pc, #28]	; (f9b0 <nrfx_spim_3_irq_handler+0x4c>)
    p_cb->transfer_in_progress = false;
    f992:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    f994:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    f996:	e9d3 2100 	ldrd	r2, r1, [r3]
    f99a:	4710      	bx	r2
    p_reg->OUTSET = set_mask;
    f99c:	608a      	str	r2, [r1, #8]
    f99e:	e7f6      	b.n	f98e <nrfx_spim_3_irq_handler+0x2a>

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    f9a0:	4770      	bx	lr
    f9a2:	bf00      	nop
    f9a4:	4000b000 	.word	0x4000b000
    f9a8:	2001061c 	.word	0x2001061c
    f9ac:	40842500 	.word	0x40842500
    f9b0:	20010624 	.word	0x20010624

0000f9b4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f9b6:	4b11      	ldr	r3, [pc, #68]	; (f9fc <z_sys_init_run_level+0x48>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    f9b8:	4f11      	ldr	r7, [pc, #68]	; (fa00 <z_sys_init_run_level+0x4c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f9ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    f9be:	3001      	adds	r0, #1
    f9c0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    f9c4:	42ae      	cmp	r6, r5
    f9c6:	d800      	bhi.n	f9ca <z_sys_init_run_level+0x16>
		}
	}
}
    f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    f9ca:	e9d5 3400 	ldrd	r3, r4, [r5]
    f9ce:	4620      	mov	r0, r4
    f9d0:	4798      	blx	r3
    f9d2:	b180      	cbz	r0, f9f6 <z_sys_init_run_level+0x42>
    f9d4:	b17c      	cbz	r4, f9f6 <z_sys_init_run_level+0x42>
				(dev - __device_start));
    f9d6:	4b0b      	ldr	r3, [pc, #44]	; (fa04 <z_sys_init_run_level+0x50>)
    f9d8:	1be4      	subs	r4, r4, r7
    f9da:	10e4      	asrs	r4, r4, #3
    f9dc:	435c      	muls	r4, r3

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    f9de:	2301      	movs	r3, #1
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    f9e0:	4a09      	ldr	r2, [pc, #36]	; (fa08 <z_sys_init_run_level+0x54>)
    f9e2:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    f9e4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    f9e8:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    f9ec:	fa03 f404 	lsl.w	r4, r3, r4
    f9f0:	4304      	orrs	r4, r0
    f9f2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f9f6:	3508      	adds	r5, #8
    f9f8:	e7e4      	b.n	f9c4 <z_sys_init_run_level+0x10>
    f9fa:	bf00      	nop
    f9fc:	00011c44 	.word	0x00011c44
    fa00:	2001034c 	.word	0x2001034c
    fa04:	aaaaaaab 	.word	0xaaaaaaab
    fa08:	2001040c 	.word	0x2001040c

0000fa0c <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
    fa0c:	4a03      	ldr	r2, [pc, #12]	; (fa1c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    fa0e:	4b04      	ldr	r3, [pc, #16]	; (fa20 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    fa10:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    fa12:	1a9b      	subs	r3, r3, r2
}
    fa14:	4803      	ldr	r0, [pc, #12]	; (fa24 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    fa16:	10db      	asrs	r3, r3, #3
}
    fa18:	4358      	muls	r0, r3
    fa1a:	4770      	bx	lr
    fa1c:	2001034c 	.word	0x2001034c
    fa20:	2001040c 	.word	0x2001040c
    fa24:	aaaaaaab 	.word	0xaaaaaaab

0000fa28 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    fa28:	4b09      	ldr	r3, [pc, #36]	; (fa50 <z_device_ready+0x28>)
    fa2a:	1ac3      	subs	r3, r0, r3
    fa2c:	4809      	ldr	r0, [pc, #36]	; (fa54 <z_device_ready+0x2c>)
    fa2e:	10db      	asrs	r3, r3, #3
    fa30:	4358      	muls	r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    fa32:	4b09      	ldr	r3, [pc, #36]	; (fa58 <z_device_ready+0x30>)
    fa34:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    fa36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    fa3a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    fa3c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    fa40:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    fa44:	4210      	tst	r0, r2
}
    fa46:	bf0c      	ite	eq
    fa48:	4618      	moveq	r0, r3
    fa4a:	2000      	movne	r0, #0
    fa4c:	4770      	bx	lr
    fa4e:	bf00      	nop
    fa50:	2001034c 	.word	0x2001034c
    fa54:	aaaaaaab 	.word	0xaaaaaaab
    fa58:	2001040c 	.word	0x2001040c

0000fa5c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    fa5c:	4911      	ldr	r1, [pc, #68]	; (faa4 <z_impl_device_get_binding+0x48>)
{
    fa5e:	b570      	push	{r4, r5, r6, lr}
    fa60:	4605      	mov	r5, r0
    fa62:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    fa64:	4c10      	ldr	r4, [pc, #64]	; (faa8 <z_impl_device_get_binding+0x4c>)
    fa66:	428c      	cmp	r4, r1
    fa68:	d104      	bne.n	fa74 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    fa6a:	4c0f      	ldr	r4, [pc, #60]	; (faa8 <z_impl_device_get_binding+0x4c>)
    fa6c:	42b4      	cmp	r4, r6
    fa6e:	d10a      	bne.n	fa86 <z_impl_device_get_binding+0x2a>
	return NULL;
    fa70:	2400      	movs	r4, #0
    fa72:	e014      	b.n	fa9e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    fa74:	4620      	mov	r0, r4
    fa76:	f7ff ffd7 	bl	fa28 <z_device_ready>
    fa7a:	b110      	cbz	r0, fa82 <z_impl_device_get_binding+0x26>
    fa7c:	6823      	ldr	r3, [r4, #0]
    fa7e:	42ab      	cmp	r3, r5
    fa80:	d00d      	beq.n	fa9e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    fa82:	3418      	adds	r4, #24
    fa84:	e7ef      	b.n	fa66 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    fa86:	4620      	mov	r0, r4
    fa88:	f7ff ffce 	bl	fa28 <z_device_ready>
    fa8c:	b908      	cbnz	r0, fa92 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    fa8e:	3418      	adds	r4, #24
    fa90:	e7ec      	b.n	fa6c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    fa92:	6821      	ldr	r1, [r4, #0]
    fa94:	4628      	mov	r0, r5
    fa96:	f001 fb55 	bl	11144 <strcmp>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	d1f7      	bne.n	fa8e <z_impl_device_get_binding+0x32>
}
    fa9e:	4620      	mov	r0, r4
    faa0:	bd70      	pop	{r4, r5, r6, pc}
    faa2:	bf00      	nop
    faa4:	2001040c 	.word	0x2001040c
    faa8:	2001034c 	.word	0x2001034c

0000faac <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    faac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fab0:	4605      	mov	r5, r0
    fab2:	460f      	mov	r7, r1
    fab4:	f04f 0320 	mov.w	r3, #32
    fab8:	f3ef 8911 	mrs	r9, BASEPRI
    fabc:	f383 8811 	msr	BASEPRI, r3
    fac0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    fac4:	f000 fc7a 	bl	103bc <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    fac8:	2301      	movs	r3, #1
    faca:	4606      	mov	r6, r0
    facc:	f04f 0000 	mov.w	r0, #0
    fad0:	2200      	movs	r2, #0
    fad2:	f363 0007 	bfi	r0, r3, #0, #8
    fad6:	4c25      	ldr	r4, [pc, #148]	; (fb6c <z_fatal_error+0xc0>)
    fad8:	4b25      	ldr	r3, [pc, #148]	; (fb70 <z_fatal_error+0xc4>)
    fada:	2d04      	cmp	r5, #4
    fadc:	eba4 0403 	sub.w	r4, r4, r3
    fae0:	bf98      	it	ls
    fae2:	4b24      	ldrls	r3, [pc, #144]	; (fb74 <z_fatal_error+0xc8>)
    fae4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fae8:	bf94      	ite	ls
    faea:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    faee:	4b22      	ldrhi	r3, [pc, #136]	; (fb78 <z_fatal_error+0xcc>)
    faf0:	9200      	str	r2, [sp, #0]
    faf2:	f364 108f 	bfi	r0, r4, #6, #10
    faf6:	462a      	mov	r2, r5
    faf8:	4920      	ldr	r1, [pc, #128]	; (fb7c <z_fatal_error+0xd0>)
    fafa:	f001 fa0a 	bl	10f12 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    fafe:	b16f      	cbz	r7, fb1c <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    fb00:	69fb      	ldr	r3, [r7, #28]
    fb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
    fb06:	b14b      	cbz	r3, fb1c <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
    fb08:	f04f 0000 	mov.w	r0, #0
    fb0c:	2301      	movs	r3, #1
    fb0e:	f363 0007 	bfi	r0, r3, #0, #8
    fb12:	f364 108f 	bfi	r0, r4, #6, #10
    fb16:	491a      	ldr	r1, [pc, #104]	; (fb80 <z_fatal_error+0xd4>)
    fb18:	f001 f9fb 	bl	10f12 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    fb1c:	f04f 0800 	mov.w	r8, #0
    fb20:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
    fb22:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
    fb24:	f363 0807 	bfi	r8, r3, #0, #8
    fb28:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    fb2c:	f001 fdc2 	bl	116b4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    fb30:	b1d0      	cbz	r0, fb68 <z_fatal_error+0xbc>
    fb32:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    fb34:	4b13      	ldr	r3, [pc, #76]	; (fb84 <z_fatal_error+0xd8>)
    fb36:	2a00      	cmp	r2, #0
    fb38:	bf08      	it	eq
    fb3a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    fb3c:	f001 f9fc 	bl	10f38 <log_strdup>
    fb40:	4632      	mov	r2, r6
    fb42:	4603      	mov	r3, r0
    fb44:	4910      	ldr	r1, [pc, #64]	; (fb88 <z_fatal_error+0xdc>)
    fb46:	4640      	mov	r0, r8
    fb48:	f001 f9e3 	bl	10f12 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    fb4c:	4639      	mov	r1, r7
    fb4e:	4628      	mov	r0, r5
    fb50:	f7ff fc16 	bl	f380 <k_sys_fatal_error_handler>
	__asm__ volatile(
    fb54:	f389 8811 	msr	BASEPRI, r9
    fb58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    fb5c:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    fb5e:	b003      	add	sp, #12
    fb60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fb64:	f7fe bba0 	b.w	e2a8 <z_impl_k_thread_abort>
		thread_name = "unknown";
    fb68:	4806      	ldr	r0, [pc, #24]	; (fb84 <z_fatal_error+0xd8>)
    fb6a:	e7e7      	b.n	fb3c <z_fatal_error+0x90>
    fb6c:	00011a04 	.word	0x00011a04
    fb70:	000119e4 	.word	0x000119e4
    fb74:	00011c5c 	.word	0x00011c5c
    fb78:	000124f1 	.word	0x000124f1
    fb7c:	00012507 	.word	0x00012507
    fb80:	0001252f 	.word	0x0001252f
    fb84:	000124ff 	.word	0x000124ff
    fb88:	00012550 	.word	0x00012550

0000fb8c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    fb8c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    fb8e:	4d0b      	ldr	r5, [pc, #44]	; (fbbc <idle+0x30>)
	__asm__ volatile(
    fb90:	f04f 0220 	mov.w	r2, #32
    fb94:	f3ef 8311 	mrs	r3, BASEPRI
    fb98:	f382 8811 	msr	BASEPRI, r2
    fb9c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    fba0:	f001 fda0 	bl	116e4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    fba4:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
    fba6:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    fba8:	2802      	cmp	r0, #2
    fbaa:	bfd8      	it	le
    fbac:	4608      	movle	r0, r1
    fbae:	f001 fda9 	bl	11704 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    fbb2:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
    fbb4:	f7fd ffcc 	bl	db50 <arch_cpu_idle>
    fbb8:	e7ea      	b.n	fb90 <idle+0x4>
    fbba:	bf00      	nop
    fbbc:	20010640 	.word	0x20010640

0000fbc0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    fbc0:	4802      	ldr	r0, [pc, #8]	; (fbcc <z_bss_zero+0xc>)
    fbc2:	4a03      	ldr	r2, [pc, #12]	; (fbd0 <z_bss_zero+0x10>)
    fbc4:	2100      	movs	r1, #0
    fbc6:	1a12      	subs	r2, r2, r0
    fbc8:	f001 bb02 	b.w	111d0 <memset>
    fbcc:	20010428 	.word	0x20010428
    fbd0:	200106a8 	.word	0x200106a8

0000fbd4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    fbd4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    fbd6:	4806      	ldr	r0, [pc, #24]	; (fbf0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    fbd8:	4a06      	ldr	r2, [pc, #24]	; (fbf4 <z_data_copy+0x20>)
    fbda:	4907      	ldr	r1, [pc, #28]	; (fbf8 <z_data_copy+0x24>)
    fbdc:	1a12      	subs	r2, r2, r0
    fbde:	f001 facd 	bl	1117c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fbe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    fbe6:	4a05      	ldr	r2, [pc, #20]	; (fbfc <z_data_copy+0x28>)
    fbe8:	4905      	ldr	r1, [pc, #20]	; (fc00 <z_data_copy+0x2c>)
    fbea:	4806      	ldr	r0, [pc, #24]	; (fc04 <z_data_copy+0x30>)
    fbec:	f001 bac6 	b.w	1117c <memcpy>
    fbf0:	20010000 	.word	0x20010000
    fbf4:	20010424 	.word	0x20010424
    fbf8:	000125a8 	.word	0x000125a8
    fbfc:	00000000 	.word	0x00000000
    fc00:	000125a8 	.word	0x000125a8
    fc04:	20010000 	.word	0x20010000

0000fc08 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    fc08:	2201      	movs	r2, #1
{
    fc0a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    fc0c:	4b0b      	ldr	r3, [pc, #44]	; (fc3c <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    fc0e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    fc10:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    fc12:	f7ff fecf 	bl	f9b4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    fc16:	4a0a      	ldr	r2, [pc, #40]	; (fc40 <bg_thread_main+0x38>)
    fc18:	490a      	ldr	r1, [pc, #40]	; (fc44 <bg_thread_main+0x3c>)
    fc1a:	480b      	ldr	r0, [pc, #44]	; (fc48 <bg_thread_main+0x40>)
    fc1c:	f000 ffd5 	bl	10bca <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    fc20:	2003      	movs	r0, #3
    fc22:	f7ff fec7 	bl	f9b4 <z_sys_init_run_level>

	z_init_static_threads();
    fc26:	f000 fc47 	bl	104b8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    fc2a:	f7fc ff89 	bl	cb40 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    fc2e:	4a07      	ldr	r2, [pc, #28]	; (fc4c <bg_thread_main+0x44>)
    fc30:	7b13      	ldrb	r3, [r2, #12]
    fc32:	f023 0301 	bic.w	r3, r3, #1
    fc36:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    fc38:	bd08      	pop	{r3, pc}
    fc3a:	bf00      	nop
    fc3c:	200106a5 	.word	0x200106a5
    fc40:	000124a6 	.word	0x000124a6
    fc44:	00012568 	.word	0x00012568
    fc48:	00012574 	.word	0x00012574
    fc4c:	200104a8 	.word	0x200104a8

0000fc50 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    fc50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    fc54:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    fc56:	f7fd f947 	bl	cee8 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    fc5a:	4b34      	ldr	r3, [pc, #208]	; (fd2c <z_cstart+0xdc>)
	uint32_t msp =
    fc5c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    fc60:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    fc64:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc68:	2400      	movs	r4, #0
    fc6a:	23e0      	movs	r3, #224	; 0xe0
    fc6c:	4d30      	ldr	r5, [pc, #192]	; (fd30 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fc6e:	f04f 0b01 	mov.w	fp, #1
    fc72:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    fc76:	77ec      	strb	r4, [r5, #31]
    fc78:	762c      	strb	r4, [r5, #24]
    fc7a:	766c      	strb	r4, [r5, #25]
    fc7c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    fc7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    fc80:	4e2c      	ldr	r6, [pc, #176]	; (fd34 <z_cstart+0xe4>)
    fc82:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    fc86:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    fc88:	f7fe fad6 	bl	e238 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    fc8c:	f7fd ff5a 	bl	db44 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    fc90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc94:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    fc96:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    fc98:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    fc9c:	4d26      	ldr	r5, [pc, #152]	; (fd38 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    fc9e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    fca2:	ab06      	add	r3, sp, #24
    fca4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    fca6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    fca8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    fcac:	f7ff fe82 	bl	f9b4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    fcb0:	2001      	movs	r0, #1
    fcb2:	f7ff fe7f 	bl	f9b4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fcb6:	f8df 8098 	ldr.w	r8, [pc, #152]	; fd50 <z_cstart+0x100>
	z_sched_init();
    fcba:	f000 fb07 	bl	102cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fcbe:	4b1f      	ldr	r3, [pc, #124]	; (fd3c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    fcc0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fcc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fcc6:	491e      	ldr	r1, [pc, #120]	; (fd40 <z_cstart+0xf0>)
    fcc8:	9305      	str	r3, [sp, #20]
    fcca:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    fcce:	4643      	mov	r3, r8
    fcd0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fcd4:	9400      	str	r4, [sp, #0]
    fcd6:	4630      	mov	r0, r6
    fcd8:	f000 fbc0 	bl	1045c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fcdc:	7b73      	ldrb	r3, [r6, #13]
    fcde:	4682      	mov	sl, r0
    fce0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    fce4:	4630      	mov	r0, r6
    fce6:	7373      	strb	r3, [r6, #13]
    fce8:	f001 fc53 	bl	11592 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    fcec:	230f      	movs	r3, #15
    fcee:	4f15      	ldr	r7, [pc, #84]	; (fd44 <z_cstart+0xf4>)
    fcf0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    fcf4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    fcf8:	4b13      	ldr	r3, [pc, #76]	; (fd48 <z_cstart+0xf8>)
    fcfa:	4914      	ldr	r1, [pc, #80]	; (fd4c <z_cstart+0xfc>)
    fcfc:	e9cd b404 	strd	fp, r4, [sp, #16]
    fd00:	e9cd 4400 	strd	r4, r4, [sp]
    fd04:	4638      	mov	r0, r7
    fd06:	f000 fba9 	bl	1045c <z_setup_new_thread>
    fd0a:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    fd0c:	60ef      	str	r7, [r5, #12]
    fd0e:	f023 0304 	bic.w	r3, r3, #4
    fd12:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    fd14:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
    fd18:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    fd1a:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
    fd1e:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    fd22:	4642      	mov	r2, r8
    fd24:	4651      	mov	r1, sl
    fd26:	4630      	mov	r0, r6
    fd28:	f7fd fef2 	bl	db10 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    fd2c:	20010be8 	.word	0x20010be8
    fd30:	e000ed00 	.word	0xe000ed00
    fd34:	200104a8 	.word	0x200104a8
    fd38:	20010640 	.word	0x20010640
    fd3c:	0001259e 	.word	0x0001259e
    fd40:	200106a8 	.word	0x200106a8
    fd44:	20010428 	.word	0x20010428
    fd48:	0000fb8d 	.word	0x0000fb8d
    fd4c:	20010aa8 	.word	0x20010aa8
    fd50:	0000fc09 	.word	0x0000fc09

0000fd54 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    fd54:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    fd56:	4b0e      	ldr	r3, [pc, #56]	; (fd90 <init_mem_slab_module+0x3c>)
    fd58:	4c0e      	ldr	r4, [pc, #56]	; (fd94 <init_mem_slab_module+0x40>)
    fd5a:	42a3      	cmp	r3, r4
    fd5c:	d301      	bcc.n	fd62 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    fd5e:	2000      	movs	r0, #0
	return rc;
}
    fd60:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    fd62:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    fd66:	ea41 0200 	orr.w	r2, r1, r0
    fd6a:	f012 0203 	ands.w	r2, r2, #3
    fd6e:	d10b      	bne.n	fd88 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    fd70:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    fd72:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    fd74:	42aa      	cmp	r2, r5
    fd76:	d101      	bne.n	fd7c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    fd78:	331c      	adds	r3, #28
    fd7a:	e7ee      	b.n	fd5a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    fd7c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    fd7e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    fd80:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    fd82:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    fd84:	4401      	add	r1, r0
    fd86:	e7f5      	b.n	fd74 <init_mem_slab_module+0x20>
		return -EINVAL;
    fd88:	f06f 0015 	mvn.w	r0, #21
	return rc;
    fd8c:	e7e8      	b.n	fd60 <init_mem_slab_module+0xc>
    fd8e:	bf00      	nop
    fd90:	20010414 	.word	0x20010414
    fd94:	20010414 	.word	0x20010414

0000fd98 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    fd98:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    fd9a:	4c08      	ldr	r4, [pc, #32]	; (fdbc <z_reset_time_slice+0x24>)
    fd9c:	6823      	ldr	r3, [r4, #0]
    fd9e:	b15b      	cbz	r3, fdb8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    fda0:	f7fd fdc6 	bl	d930 <z_clock_elapsed>
    fda4:	6823      	ldr	r3, [r4, #0]
    fda6:	4a06      	ldr	r2, [pc, #24]	; (fdc0 <z_reset_time_slice+0x28>)
    fda8:	4418      	add	r0, r3
    fdaa:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    fdac:	2100      	movs	r1, #0
	}
}
    fdae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    fdb2:	4618      	mov	r0, r3
    fdb4:	f001 bca6 	b.w	11704 <z_set_timeout_expiry>
}
    fdb8:	bd10      	pop	{r4, pc}
    fdba:	bf00      	nop
    fdbc:	20010678 	.word	0x20010678
    fdc0:	20010640 	.word	0x20010640

0000fdc4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    fdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdc6:	460d      	mov	r5, r1
    fdc8:	f04f 0320 	mov.w	r3, #32
    fdcc:	f3ef 8411 	mrs	r4, BASEPRI
    fdd0:	f383 8811 	msr	BASEPRI, r3
    fdd4:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    fdd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fddc:	f240 36e7 	movw	r6, #999	; 0x3e7
    fde0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    fde2:	2200      	movs	r2, #0
    fde4:	fbe1 6700 	umlal	r6, r7, r1, r0
    fde8:	4b09      	ldr	r3, [pc, #36]	; (fe10 <k_sched_time_slice_set+0x4c>)
    fdea:	4630      	mov	r0, r6
    fdec:	611a      	str	r2, [r3, #16]
    fdee:	4639      	mov	r1, r7
    fdf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fdf4:	2300      	movs	r3, #0
    fdf6:	f7fc fa21 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    fdfa:	4b06      	ldr	r3, [pc, #24]	; (fe14 <k_sched_time_slice_set+0x50>)
    fdfc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    fdfe:	4b06      	ldr	r3, [pc, #24]	; (fe18 <k_sched_time_slice_set+0x54>)
    fe00:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    fe02:	f7ff ffc9 	bl	fd98 <z_reset_time_slice>
	__asm__ volatile(
    fe06:	f384 8811 	msr	BASEPRI, r4
    fe0a:	f3bf 8f6f 	isb	sy
	}
}
    fe0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe10:	20010640 	.word	0x20010640
    fe14:	20010678 	.word	0x20010678
    fe18:	20010674 	.word	0x20010674

0000fe1c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fe1c:	b949      	cbnz	r1, fe32 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fe1e:	f3ef 8005 	mrs	r0, IPSR
    fe22:	b930      	cbnz	r0, fe32 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    fe24:	4b05      	ldr	r3, [pc, #20]	; (fe3c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    fe26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fe28:	689b      	ldr	r3, [r3, #8]
    fe2a:	429a      	cmp	r2, r3
    fe2c:	d001      	beq.n	fe32 <z_reschedule+0x16>
	ret = arch_swap(key);
    fe2e:	f7fd bdb3 	b.w	d998 <arch_swap>
    fe32:	f381 8811 	msr	BASEPRI, r1
    fe36:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    fe3a:	4770      	bx	lr
    fe3c:	20010640 	.word	0x20010640

0000fe40 <k_sched_lock>:
	__asm__ volatile(
    fe40:	f04f 0320 	mov.w	r3, #32
    fe44:	f3ef 8111 	mrs	r1, BASEPRI
    fe48:	f383 8811 	msr	BASEPRI, r3
    fe4c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    fe50:	4b04      	ldr	r3, [pc, #16]	; (fe64 <k_sched_lock+0x24>)
    fe52:	689a      	ldr	r2, [r3, #8]
    fe54:	7bd3      	ldrb	r3, [r2, #15]
    fe56:	3b01      	subs	r3, #1
    fe58:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    fe5a:	f381 8811 	msr	BASEPRI, r1
    fe5e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    fe62:	4770      	bx	lr
    fe64:	20010640 	.word	0x20010640

0000fe68 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fe68:	4b09      	ldr	r3, [pc, #36]	; (fe90 <z_priq_dumb_remove+0x28>)
    fe6a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    fe6e:	4282      	cmp	r2, r0
    fe70:	d105      	bne.n	fe7e <z_priq_dumb_remove+0x16>
    fe72:	689b      	ldr	r3, [r3, #8]
    fe74:	428b      	cmp	r3, r1
    fe76:	d102      	bne.n	fe7e <z_priq_dumb_remove+0x16>
    fe78:	7b4b      	ldrb	r3, [r1, #13]
    fe7a:	06db      	lsls	r3, r3, #27
    fe7c:	d106      	bne.n	fe8c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fe7e:	e9d1 3200 	ldrd	r3, r2, [r1]
    fe82:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    fe84:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fe86:	2300      	movs	r3, #0
	node->prev = NULL;
    fe88:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    fe8c:	4770      	bx	lr
    fe8e:	bf00      	nop
    fe90:	20010640 	.word	0x20010640

0000fe94 <update_cache>:
{
    fe94:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    fe96:	4c10      	ldr	r4, [pc, #64]	; (fed8 <update_cache+0x44>)
{
    fe98:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    fe9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fe9e:	f001 fb72 	bl	11586 <z_priq_dumb_best>
    fea2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    fea4:	68a3      	ldr	r3, [r4, #8]
    fea6:	7b59      	ldrb	r1, [r3, #13]
    fea8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    feaa:	bf44      	itt	mi
    feac:	f041 0108 	orrmi.w	r1, r1, #8
    feb0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    feb2:	b905      	cbnz	r5, feb6 <update_cache+0x22>
    feb4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    feb6:	b94e      	cbnz	r6, fecc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    feb8:	7b5a      	ldrb	r2, [r3, #13]
    feba:	06d2      	lsls	r2, r2, #27
    febc:	d106      	bne.n	fecc <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    febe:	69aa      	ldr	r2, [r5, #24]
    fec0:	b922      	cbnz	r2, fecc <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    fec2:	89da      	ldrh	r2, [r3, #14]
    fec4:	2a7f      	cmp	r2, #127	; 0x7f
    fec6:	d901      	bls.n	fecc <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    fec8:	6263      	str	r3, [r4, #36]	; 0x24
}
    feca:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    fecc:	42ab      	cmp	r3, r5
    fece:	d001      	beq.n	fed4 <update_cache+0x40>
			z_reset_time_slice();
    fed0:	f7ff ff62 	bl	fd98 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    fed4:	6265      	str	r5, [r4, #36]	; 0x24
}
    fed6:	e7f8      	b.n	feca <update_cache+0x36>
    fed8:	20010640 	.word	0x20010640

0000fedc <k_sched_unlock>:
{
    fedc:	b510      	push	{r4, lr}
	__asm__ volatile(
    fede:	f04f 0320 	mov.w	r3, #32
    fee2:	f3ef 8411 	mrs	r4, BASEPRI
    fee6:	f383 8811 	msr	BASEPRI, r3
    feea:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    feee:	4b08      	ldr	r3, [pc, #32]	; (ff10 <k_sched_unlock+0x34>)
		update_cache(0);
    fef0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    fef2:	689a      	ldr	r2, [r3, #8]
    fef4:	7bd3      	ldrb	r3, [r2, #15]
    fef6:	3301      	adds	r3, #1
    fef8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fefa:	f7ff ffcb 	bl	fe94 <update_cache>
	__asm__ volatile(
    fefe:	f384 8811 	msr	BASEPRI, r4
    ff02:	f3bf 8f6f 	isb	sy
}
    ff06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    ff0a:	f001 bb25 	b.w	11558 <z_reschedule_unlocked>
    ff0e:	bf00      	nop
    ff10:	20010640 	.word	0x20010640

0000ff14 <ready_thread>:
{
    ff14:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    ff16:	7b43      	ldrb	r3, [r0, #13]
    ff18:	06db      	lsls	r3, r3, #27
    ff1a:	d127      	bne.n	ff6c <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    ff1c:	6983      	ldr	r3, [r0, #24]
    ff1e:	bb2b      	cbnz	r3, ff6c <ready_thread+0x58>
	return list->head == list;
    ff20:	4a13      	ldr	r2, [pc, #76]	; (ff70 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff22:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ff26:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    ff2a:	428b      	cmp	r3, r1
    ff2c:	d018      	beq.n	ff60 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff2e:	b1bb      	cbz	r3, ff60 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    ff30:	f990 500e 	ldrsb.w	r5, [r0, #14]
    ff34:	f993 600e 	ldrsb.w	r6, [r3, #14]
    ff38:	42ae      	cmp	r6, r5
    ff3a:	dd0c      	ble.n	ff56 <ready_thread+0x42>
	node->prev = successor->prev;
    ff3c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ff3e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    ff42:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ff44:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    ff46:	7b43      	ldrb	r3, [r0, #13]
    ff48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ff4c:	7343      	strb	r3, [r0, #13]
}
    ff4e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ff50:	2000      	movs	r0, #0
    ff52:	f7ff bf9f 	b.w	fe94 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ff56:	429c      	cmp	r4, r3
    ff58:	d002      	beq.n	ff60 <ready_thread+0x4c>
    ff5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff5c:	2b00      	cmp	r3, #0
    ff5e:	d1e9      	bne.n	ff34 <ready_thread+0x20>
	node->prev = list->tail;
    ff60:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    ff64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ff66:	6018      	str	r0, [r3, #0]
	list->tail = node;
    ff68:	62d0      	str	r0, [r2, #44]	; 0x2c
    ff6a:	e7ec      	b.n	ff46 <ready_thread+0x32>
}
    ff6c:	bc70      	pop	{r4, r5, r6}
    ff6e:	4770      	bx	lr
    ff70:	20010640 	.word	0x20010640

0000ff74 <z_sched_start>:
{
    ff74:	b510      	push	{r4, lr}
	__asm__ volatile(
    ff76:	f04f 0320 	mov.w	r3, #32
    ff7a:	f3ef 8411 	mrs	r4, BASEPRI
    ff7e:	f383 8811 	msr	BASEPRI, r3
    ff82:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    ff86:	7b43      	ldrb	r3, [r0, #13]
    ff88:	0759      	lsls	r1, r3, #29
    ff8a:	d404      	bmi.n	ff96 <z_sched_start+0x22>
	__asm__ volatile(
    ff8c:	f384 8811 	msr	BASEPRI, r4
    ff90:	f3bf 8f6f 	isb	sy
}
    ff94:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ff96:	f023 0304 	bic.w	r3, r3, #4
    ff9a:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    ff9c:	f7ff ffba 	bl	ff14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ffa0:	4621      	mov	r1, r4
}
    ffa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    ffa6:	4801      	ldr	r0, [pc, #4]	; (ffac <z_sched_start+0x38>)
    ffa8:	f7ff bf38 	b.w	fe1c <z_reschedule>
    ffac:	200106a6 	.word	0x200106a6

0000ffb0 <move_thread_to_end_of_prio_q>:
{
    ffb0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ffb2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    ffb6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    ffb8:	2b00      	cmp	r3, #0
    ffba:	da03      	bge.n	ffc4 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    ffbc:	4601      	mov	r1, r0
    ffbe:	4816      	ldr	r0, [pc, #88]	; (10018 <move_thread_to_end_of_prio_q+0x68>)
    ffc0:	f7ff ff52 	bl	fe68 <z_priq_dumb_remove>
	return list->head == list;
    ffc4:	4a15      	ldr	r2, [pc, #84]	; (1001c <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ffc6:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ffca:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    ffce:	428b      	cmp	r3, r1
    ffd0:	d01c      	beq.n	1000c <move_thread_to_end_of_prio_q+0x5c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ffd2:	b1db      	cbz	r3, 1000c <move_thread_to_end_of_prio_q+0x5c>
	if (thread_1->base.prio < thread_2->base.prio) {
    ffd4:	f994 500e 	ldrsb.w	r5, [r4, #14]
    ffd8:	f993 600e 	ldrsb.w	r6, [r3, #14]
    ffdc:	42ae      	cmp	r6, r5
    ffde:	dd10      	ble.n	10002 <move_thread_to_end_of_prio_q+0x52>
	node->prev = successor->prev;
    ffe0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    ffe2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    ffe6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    ffe8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    ffea:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
    ffec:	6890      	ldr	r0, [r2, #8]
    ffee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fff2:	7363      	strb	r3, [r4, #13]
    fff4:	1b03      	subs	r3, r0, r4
    fff6:	4258      	negs	r0, r3
    fff8:	4158      	adcs	r0, r3
}
    fffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    fffe:	f7ff bf49 	b.w	fe94 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10002:	4298      	cmp	r0, r3
   10004:	d002      	beq.n	1000c <move_thread_to_end_of_prio_q+0x5c>
   10006:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10008:	2b00      	cmp	r3, #0
   1000a:	d1e5      	bne.n	ffd8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = list->tail;
   1000c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   10010:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10012:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10014:	62d4      	str	r4, [r2, #44]	; 0x2c
   10016:	e7e8      	b.n	ffea <move_thread_to_end_of_prio_q+0x3a>
   10018:	20010668 	.word	0x20010668
   1001c:	20010640 	.word	0x20010640

00010020 <z_time_slice>:
{
   10020:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   10022:	f04f 0320 	mov.w	r3, #32
   10026:	f3ef 8411 	mrs	r4, BASEPRI
   1002a:	f383 8811 	msr	BASEPRI, r3
   1002e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   10032:	4a17      	ldr	r2, [pc, #92]	; (10090 <z_time_slice+0x70>)
   10034:	4917      	ldr	r1, [pc, #92]	; (10094 <z_time_slice+0x74>)
   10036:	6893      	ldr	r3, [r2, #8]
   10038:	680d      	ldr	r5, [r1, #0]
   1003a:	42ab      	cmp	r3, r5
   1003c:	4615      	mov	r5, r2
   1003e:	d106      	bne.n	1004e <z_time_slice+0x2e>
			z_reset_time_slice();
   10040:	f7ff feaa 	bl	fd98 <z_reset_time_slice>
	__asm__ volatile(
   10044:	f384 8811 	msr	BASEPRI, r4
   10048:	f3bf 8f6f 	isb	sy
}
   1004c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1004e:	2600      	movs	r6, #0
   10050:	600e      	str	r6, [r1, #0]
	if (slice_time && sliceable(_current)) {
   10052:	4911      	ldr	r1, [pc, #68]	; (10098 <z_time_slice+0x78>)
   10054:	6809      	ldr	r1, [r1, #0]
   10056:	b1c1      	cbz	r1, 1008a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10058:	89d9      	ldrh	r1, [r3, #14]
   1005a:	297f      	cmp	r1, #127	; 0x7f
   1005c:	d815      	bhi.n	1008a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1005e:	7b59      	ldrb	r1, [r3, #13]
   10060:	06c9      	lsls	r1, r1, #27
   10062:	d112      	bne.n	1008a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10064:	490d      	ldr	r1, [pc, #52]	; (1009c <z_time_slice+0x7c>)
   10066:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1006a:	6809      	ldr	r1, [r1, #0]
   1006c:	428e      	cmp	r6, r1
   1006e:	db0c      	blt.n	1008a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10070:	490b      	ldr	r1, [pc, #44]	; (100a0 <z_time_slice+0x80>)
   10072:	428b      	cmp	r3, r1
   10074:	d009      	beq.n	1008a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   10076:	6911      	ldr	r1, [r2, #16]
   10078:	4281      	cmp	r1, r0
   1007a:	dc03      	bgt.n	10084 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1007c:	4618      	mov	r0, r3
   1007e:	f7ff ff97 	bl	ffb0 <move_thread_to_end_of_prio_q>
   10082:	e7dd      	b.n	10040 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   10084:	1a09      	subs	r1, r1, r0
   10086:	6111      	str	r1, [r2, #16]
   10088:	e7dc      	b.n	10044 <z_time_slice+0x24>
		_current_cpu->slice_ticks = 0;
   1008a:	2300      	movs	r3, #0
   1008c:	612b      	str	r3, [r5, #16]
   1008e:	e7d9      	b.n	10044 <z_time_slice+0x24>
   10090:	20010640 	.word	0x20010640
   10094:	20010670 	.word	0x20010670
   10098:	20010678 	.word	0x20010678
   1009c:	20010674 	.word	0x20010674
   100a0:	20010428 	.word	0x20010428

000100a4 <z_impl_k_thread_suspend>:
{
   100a4:	b570      	push	{r4, r5, r6, lr}
   100a6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   100a8:	3018      	adds	r0, #24
   100aa:	f001 fb05 	bl	116b8 <z_abort_timeout>
	__asm__ volatile(
   100ae:	f04f 0320 	mov.w	r3, #32
   100b2:	f3ef 8611 	mrs	r6, BASEPRI
   100b6:	f383 8811 	msr	BASEPRI, r3
   100ba:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   100be:	f994 300d 	ldrsb.w	r3, [r4, #13]
   100c2:	2b00      	cmp	r3, #0
   100c4:	da07      	bge.n	100d6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   100c6:	4621      	mov	r1, r4
   100c8:	480e      	ldr	r0, [pc, #56]	; (10104 <z_impl_k_thread_suspend+0x60>)
   100ca:	f7ff fecd 	bl	fe68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   100ce:	7b63      	ldrb	r3, [r4, #13]
   100d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   100d4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   100d6:	4d0c      	ldr	r5, [pc, #48]	; (10108 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   100d8:	7b63      	ldrb	r3, [r4, #13]
   100da:	68a8      	ldr	r0, [r5, #8]
   100dc:	f043 0310 	orr.w	r3, r3, #16
   100e0:	7363      	strb	r3, [r4, #13]
   100e2:	1b03      	subs	r3, r0, r4
   100e4:	4258      	negs	r0, r3
   100e6:	4158      	adcs	r0, r3
   100e8:	f7ff fed4 	bl	fe94 <update_cache>
	__asm__ volatile(
   100ec:	f386 8811 	msr	BASEPRI, r6
   100f0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   100f4:	68ab      	ldr	r3, [r5, #8]
   100f6:	42a3      	cmp	r3, r4
   100f8:	d103      	bne.n	10102 <z_impl_k_thread_suspend+0x5e>
}
   100fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   100fe:	f001 ba2b 	b.w	11558 <z_reschedule_unlocked>
}
   10102:	bd70      	pop	{r4, r5, r6, pc}
   10104:	20010668 	.word	0x20010668
   10108:	20010640 	.word	0x20010640

0001010c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1010c:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1010e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10112:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   10114:	b103      	cbz	r3, 10118 <z_thread_single_abort+0xc>
		thread->fn_abort();
   10116:	4798      	blx	r3
   10118:	f104 0018 	add.w	r0, r4, #24
   1011c:	f001 facc 	bl	116b8 <z_abort_timeout>
	__asm__ volatile(
   10120:	f04f 0320 	mov.w	r3, #32
   10124:	f3ef 8611 	mrs	r6, BASEPRI
   10128:	f383 8811 	msr	BASEPRI, r3
   1012c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10130:	7b63      	ldrb	r3, [r4, #13]
   10132:	06d8      	lsls	r0, r3, #27
   10134:	d123      	bne.n	1017e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   10136:	69a2      	ldr	r2, [r4, #24]
   10138:	bb0a      	cbnz	r2, 1017e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1013a:	0619      	lsls	r1, r3, #24
   1013c:	d507      	bpl.n	1014e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1013e:	4621      	mov	r1, r4
   10140:	481e      	ldr	r0, [pc, #120]	; (101bc <z_thread_single_abort+0xb0>)
   10142:	f7ff fe91 	bl	fe68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10146:	7b63      	ldrb	r3, [r4, #13]
   10148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1014c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1014e:	4b1c      	ldr	r3, [pc, #112]	; (101c0 <z_thread_single_abort+0xb4>)
   10150:	6898      	ldr	r0, [r3, #8]
   10152:	1b02      	subs	r2, r0, r4
   10154:	4250      	negs	r0, r2
   10156:	4150      	adcs	r0, r2
   10158:	f7ff fe9c 	bl	fe94 <update_cache>
			waiter->base.pended_on = NULL;
   1015c:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1015e:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10160:	f104 0830 	add.w	r8, r4, #48	; 0x30
   10164:	f043 0308 	orr.w	r3, r3, #8
   10168:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1016a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1016c:	4545      	cmp	r5, r8
   1016e:	d000      	beq.n	10172 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   10170:	b995      	cbnz	r5, 10198 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   10172:	f386 8811 	msr	BASEPRI, r6
   10176:	f3bf 8f6f 	isb	sy
}
   1017a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1017e:	079b      	lsls	r3, r3, #30
   10180:	d5ec      	bpl.n	1015c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   10182:	4621      	mov	r1, r4
   10184:	68a0      	ldr	r0, [r4, #8]
   10186:	f7ff fe6f 	bl	fe68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1018a:	7b63      	ldrb	r3, [r4, #13]
   1018c:	f023 0302 	bic.w	r3, r3, #2
   10190:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   10192:	2300      	movs	r3, #0
   10194:	60a3      	str	r3, [r4, #8]
   10196:	e7e1      	b.n	1015c <z_thread_single_abort+0x50>
   10198:	f105 0018 	add.w	r0, r5, #24
   1019c:	f001 fa8c 	bl	116b8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   101a0:	68a8      	ldr	r0, [r5, #8]
   101a2:	4629      	mov	r1, r5
   101a4:	f7ff fe60 	bl	fe68 <z_priq_dumb_remove>
   101a8:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   101aa:	60af      	str	r7, [r5, #8]
   101ac:	f023 0302 	bic.w	r3, r3, #2
   101b0:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   101b2:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   101b4:	4628      	mov	r0, r5
   101b6:	f7ff fead 	bl	ff14 <ready_thread>
   101ba:	e7d6      	b.n	1016a <z_thread_single_abort+0x5e>
   101bc:	20010668 	.word	0x20010668
   101c0:	20010640 	.word	0x20010640

000101c4 <unready_thread>:
{
   101c4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   101c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   101ca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   101cc:	2b00      	cmp	r3, #0
   101ce:	da07      	bge.n	101e0 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   101d0:	4601      	mov	r1, r0
   101d2:	4808      	ldr	r0, [pc, #32]	; (101f4 <unready_thread+0x30>)
   101d4:	f7ff fe48 	bl	fe68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   101d8:	7b63      	ldrb	r3, [r4, #13]
   101da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   101de:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   101e0:	4b05      	ldr	r3, [pc, #20]	; (101f8 <unready_thread+0x34>)
   101e2:	6898      	ldr	r0, [r3, #8]
   101e4:	1b03      	subs	r3, r0, r4
   101e6:	4258      	negs	r0, r3
   101e8:	4158      	adcs	r0, r3
}
   101ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   101ee:	f7ff be51 	b.w	fe94 <update_cache>
   101f2:	bf00      	nop
   101f4:	20010668 	.word	0x20010668
   101f8:	20010640 	.word	0x20010640

000101fc <pend>:
{
   101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10200:	4606      	mov	r6, r0
   10202:	4614      	mov	r4, r2
   10204:	461d      	mov	r5, r3
	__asm__ volatile(
   10206:	f04f 0320 	mov.w	r3, #32
   1020a:	f3ef 8711 	mrs	r7, BASEPRI
   1020e:	f383 8811 	msr	BASEPRI, r3
   10212:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   10216:	f001 f9ec 	bl	115f2 <add_to_waitq_locked>
	__asm__ volatile(
   1021a:	f387 8811 	msr	BASEPRI, r7
   1021e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10222:	1c6b      	adds	r3, r5, #1
   10224:	bf08      	it	eq
   10226:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1022a:	d008      	beq.n	1023e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1022c:	4622      	mov	r2, r4
   1022e:	462b      	mov	r3, r5
   10230:	f106 0018 	add.w	r0, r6, #24
   10234:	4903      	ldr	r1, [pc, #12]	; (10244 <pend+0x48>)
}
   10236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1023a:	f000 b9e7 	b.w	1060c <z_add_timeout>
   1023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10242:	bf00      	nop
   10244:	000115b3 	.word	0x000115b3

00010248 <z_pend_curr>:
{
   10248:	b510      	push	{r4, lr}
   1024a:	460c      	mov	r4, r1
	pending_current = _current;
   1024c:	4b06      	ldr	r3, [pc, #24]	; (10268 <z_pend_curr+0x20>)
{
   1024e:	4611      	mov	r1, r2
	pending_current = _current;
   10250:	6898      	ldr	r0, [r3, #8]
   10252:	4b06      	ldr	r3, [pc, #24]	; (1026c <z_pend_curr+0x24>)
   10254:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   10256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1025a:	f7ff ffcf 	bl	101fc <pend>
   1025e:	4620      	mov	r0, r4
}
   10260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10264:	f7fd bb98 	b.w	d998 <arch_swap>
   10268:	20010640 	.word	0x20010640
   1026c:	20010670 	.word	0x20010670

00010270 <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   10270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10272:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   10274:	f001 fa60 	bl	11738 <z_tick_get_32>
   10278:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1027a:	f04f 0320 	mov.w	r3, #32
   1027e:	f3ef 8711 	mrs	r7, BASEPRI
   10282:	f383 8811 	msr	BASEPRI, r3
   10286:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1028a:	4d0d      	ldr	r5, [pc, #52]	; (102c0 <z_tick_sleep.part.21+0x50>)
   1028c:	4b0d      	ldr	r3, [pc, #52]	; (102c4 <z_tick_sleep.part.21+0x54>)
   1028e:	68a8      	ldr	r0, [r5, #8]
   10290:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   10292:	f7ff ff97 	bl	101c4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   10296:	68a8      	ldr	r0, [r5, #8]
   10298:	490b      	ldr	r1, [pc, #44]	; (102c8 <z_tick_sleep.part.21+0x58>)
   1029a:	4632      	mov	r2, r6
   1029c:	17f3      	asrs	r3, r6, #31
   1029e:	3018      	adds	r0, #24
   102a0:	f000 f9b4 	bl	1060c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   102a4:	68aa      	ldr	r2, [r5, #8]
   102a6:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   102a8:	7b53      	ldrb	r3, [r2, #13]
   102aa:	f043 0310 	orr.w	r3, r3, #16
   102ae:	7353      	strb	r3, [r2, #13]
   102b0:	f7fd fb72 	bl	d998 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   102b4:	f001 fa40 	bl	11738 <z_tick_get_32>
   102b8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   102ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   102be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102c0:	20010640 	.word	0x20010640
   102c4:	20010670 	.word	0x20010670
   102c8:	000115b3 	.word	0x000115b3

000102cc <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   102cc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   102ce:	4b04      	ldr	r3, [pc, #16]	; (102e0 <z_sched_init+0x14>)
   102d0:	4608      	mov	r0, r1
   102d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   102d6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   102da:	f7ff bd73 	b.w	fdc4 <k_sched_time_slice_set>
   102de:	bf00      	nop
   102e0:	20010640 	.word	0x20010640

000102e4 <z_impl_k_yield>:
{
   102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   102e6:	4c23      	ldr	r4, [pc, #140]	; (10374 <z_impl_k_yield+0x90>)
   102e8:	4b23      	ldr	r3, [pc, #140]	; (10378 <z_impl_k_yield+0x94>)
   102ea:	68a2      	ldr	r2, [r4, #8]
   102ec:	429a      	cmp	r2, r3
   102ee:	d029      	beq.n	10344 <z_impl_k_yield+0x60>
   102f0:	f04f 0320 	mov.w	r3, #32
   102f4:	f3ef 8611 	mrs	r6, BASEPRI
   102f8:	f383 8811 	msr	BASEPRI, r3
   102fc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   10300:	f104 0528 	add.w	r5, r4, #40	; 0x28
   10304:	68a1      	ldr	r1, [r4, #8]
   10306:	4628      	mov	r0, r5
   10308:	f7ff fdae 	bl	fe68 <z_priq_dumb_remove>
	return list->head == list;
   1030c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1030e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10310:	42aa      	cmp	r2, r5
   10312:	d028      	beq.n	10366 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10314:	b33a      	cbz	r2, 10366 <z_impl_k_yield+0x82>
   10316:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   10318:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1031c:	f992 700e 	ldrsb.w	r7, [r2, #14]
   10320:	428f      	cmp	r7, r1
   10322:	dd1b      	ble.n	1035c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   10324:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   10326:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1032a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1032c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1032e:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   10330:	2001      	movs	r0, #1
   10332:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10336:	735a      	strb	r2, [r3, #13]
   10338:	f7ff fdac 	bl	fe94 <update_cache>
	__asm__ volatile(
   1033c:	f386 8811 	msr	BASEPRI, r6
   10340:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   10344:	f04f 0320 	mov.w	r3, #32
   10348:	f3ef 8011 	mrs	r0, BASEPRI
   1034c:	f383 8811 	msr	BASEPRI, r3
   10350:	f3bf 8f6f 	isb	sy
}
   10354:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10358:	f7fd bb1e 	b.w	d998 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1035c:	4282      	cmp	r2, r0
   1035e:	d002      	beq.n	10366 <z_impl_k_yield+0x82>
   10360:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10362:	2a00      	cmp	r2, #0
   10364:	d1da      	bne.n	1031c <z_impl_k_yield+0x38>
	node->prev = list->tail;
   10366:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   10368:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1036a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1036c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1036e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10370:	62e3      	str	r3, [r4, #44]	; 0x2c
   10372:	e7dc      	b.n	1032e <z_impl_k_yield+0x4a>
   10374:	20010640 	.word	0x20010640
   10378:	20010428 	.word	0x20010428

0001037c <z_impl_k_sleep>:
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1037c:	3101      	adds	r1, #1
   1037e:	bf08      	it	eq
   10380:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   10384:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10386:	d106      	bne.n	10396 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
   10388:	4b0b      	ldr	r3, [pc, #44]	; (103b8 <z_impl_k_sleep+0x3c>)
   1038a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1038c:	f7ff fe8a 	bl	100a4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   10390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   10394:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   10396:	4604      	mov	r4, r0
	if (ticks == 0) {
   10398:	b948      	cbnz	r0, 103ae <z_impl_k_sleep+0x32>
	z_impl_k_yield();
   1039a:	f7ff ffa3 	bl	102e4 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   103a2:	fb84 3400 	smull	r3, r4, r4, r0
   103a6:	0bd8      	lsrs	r0, r3, #15
   103a8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   103ac:	e7f2      	b.n	10394 <z_impl_k_sleep+0x18>
   103ae:	f7ff ff5f 	bl	10270 <z_tick_sleep.part.21>
   103b2:	4604      	mov	r4, r0
   103b4:	e7f3      	b.n	1039e <z_impl_k_sleep+0x22>
   103b6:	bf00      	nop
   103b8:	20010640 	.word	0x20010640

000103bc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   103bc:	4b01      	ldr	r3, [pc, #4]	; (103c4 <z_impl_k_current_get+0x8>)
   103be:	6898      	ldr	r0, [r3, #8]
   103c0:	4770      	bx	lr
   103c2:	bf00      	nop
   103c4:	20010640 	.word	0x20010640

000103c8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   103c8:	b538      	push	{r3, r4, r5, lr}
   103ca:	4604      	mov	r4, r0
   103cc:	f04f 0320 	mov.w	r3, #32
   103d0:	f3ef 8511 	mrs	r5, BASEPRI
   103d4:	f383 8811 	msr	BASEPRI, r3
   103d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   103dc:	f001 f931 	bl	11642 <z_unpend_first_thread>

	if (thread != NULL) {
   103e0:	b148      	cbz	r0, 103f6 <z_impl_k_sem_give+0x2e>
   103e2:	2200      	movs	r2, #0
   103e4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   103e6:	f001 f8d4 	bl	11592 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   103ea:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   103ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   103f0:	4804      	ldr	r0, [pc, #16]	; (10404 <z_impl_k_sem_give+0x3c>)
   103f2:	f7ff bd13 	b.w	fe1c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   103f6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   103fa:	429a      	cmp	r2, r3
   103fc:	bf18      	it	ne
   103fe:	3301      	addne	r3, #1
   10400:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   10402:	e7f2      	b.n	103ea <z_impl_k_sem_give+0x22>
   10404:	200106a6 	.word	0x200106a6

00010408 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10408:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1040a:	4614      	mov	r4, r2
   1040c:	461d      	mov	r5, r3
   1040e:	f04f 0320 	mov.w	r3, #32
   10412:	f3ef 8111 	mrs	r1, BASEPRI
   10416:	f383 8811 	msr	BASEPRI, r3
   1041a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1041e:	6883      	ldr	r3, [r0, #8]
   10420:	b143      	cbz	r3, 10434 <z_impl_k_sem_take+0x2c>
		sem->count--;
   10422:	3b01      	subs	r3, #1
   10424:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   10426:	f381 8811 	msr	BASEPRI, r1
   1042a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1042e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   10430:	b003      	add	sp, #12
   10432:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10434:	ea54 0305 	orrs.w	r3, r4, r5
   10438:	d106      	bne.n	10448 <z_impl_k_sem_take+0x40>
   1043a:	f381 8811 	msr	BASEPRI, r1
   1043e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10442:	f06f 000f 	mvn.w	r0, #15
		goto out;
   10446:	e7f3      	b.n	10430 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10448:	4602      	mov	r2, r0
   1044a:	e9cd 4500 	strd	r4, r5, [sp]
   1044e:	4802      	ldr	r0, [pc, #8]	; (10458 <z_impl_k_sem_take+0x50>)
   10450:	f7ff fefa 	bl	10248 <z_pend_curr>
	return ret;
   10454:	e7ec      	b.n	10430 <z_impl_k_sem_take+0x28>
   10456:	bf00      	nop
   10458:	200106a6 	.word	0x200106a6

0001045c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1045c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   1045e:	f100 0530 	add.w	r5, r0, #48	; 0x30
   10462:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   10464:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   10468:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1046a:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1046c:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1046e:	2504      	movs	r5, #4
   10470:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   10472:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10474:	3207      	adds	r2, #7
	thread_base->prio = priority;
   10476:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   10478:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1047a:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1047e:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   10482:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   10486:	73c5      	strb	r5, [r0, #15]
	node->prev = NULL;
   10488:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.delta = delta;
   1048c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1048e:	9202      	str	r2, [sp, #8]
   10490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10492:	9201      	str	r2, [sp, #4]
   10494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10496:	9200      	str	r2, [sp, #0]
   10498:	4632      	mov	r2, r6
   1049a:	f7fd fb1d 	bl	dad8 <arch_new_thread>
	if (!_current) {
   1049e:	4b05      	ldr	r3, [pc, #20]	; (104b4 <z_setup_new_thread+0x58>)
	new_thread->fn_abort = NULL;
   104a0:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   104a4:	689b      	ldr	r3, [r3, #8]
   104a6:	b103      	cbz	r3, 104aa <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
   104a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   104aa:	4630      	mov	r0, r6
   104ac:	6763      	str	r3, [r4, #116]	; 0x74
   104ae:	b005      	add	sp, #20
   104b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104b2:	bf00      	nop
   104b4:	20010640 	.word	0x20010640

000104b8 <z_init_static_threads>:
{
   104b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   104bc:	4e2a      	ldr	r6, [pc, #168]	; (10568 <z_init_static_threads+0xb0>)
   104be:	4d2b      	ldr	r5, [pc, #172]	; (1056c <z_init_static_threads+0xb4>)
   104c0:	46b0      	mov	r8, r6
{
   104c2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   104c4:	42b5      	cmp	r5, r6
   104c6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   104ca:	d310      	bcc.n	104ee <z_init_static_threads+0x36>
	k_sched_lock();
   104cc:	f7ff fcb8 	bl	fe40 <k_sched_lock>
   104d0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   104d4:	f240 36e7 	movw	r6, #999	; 0x3e7
   104d8:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   104da:	4c24      	ldr	r4, [pc, #144]	; (1056c <z_init_static_threads+0xb4>)
   104dc:	f8df a090 	ldr.w	sl, [pc, #144]	; 10570 <z_init_static_threads+0xb8>
   104e0:	4544      	cmp	r4, r8
   104e2:	d321      	bcc.n	10528 <z_init_static_threads+0x70>
}
   104e4:	b006      	add	sp, #24
   104e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   104ea:	f7ff bcf7 	b.w	fedc <k_sched_unlock>
		z_setup_new_thread(
   104ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   104f2:	9305      	str	r3, [sp, #20]
   104f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   104f8:	9304      	str	r3, [sp, #16]
   104fa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   104fe:	9303      	str	r3, [sp, #12]
   10500:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10504:	9302      	str	r3, [sp, #8]
   10506:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1050a:	9301      	str	r3, [sp, #4]
   1050c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10510:	9300      	str	r3, [sp, #0]
   10512:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10516:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1051a:	f7ff ff9f 	bl	1045c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1051e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   10522:	65dd      	str	r5, [r3, #92]	; 0x5c
   10524:	4625      	mov	r5, r4
   10526:	e7cd      	b.n	104c4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10528:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1052a:	1c5a      	adds	r2, r3, #1
   1052c:	d00d      	beq.n	1054a <z_init_static_threads+0x92>
   1052e:	4630      	mov	r0, r6
   10530:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   10532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10536:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1053a:	42b9      	cmp	r1, r7
   1053c:	bf08      	it	eq
   1053e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   10540:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10542:	d104      	bne.n	1054e <z_init_static_threads+0x96>
	z_sched_start(thread);
   10544:	4628      	mov	r0, r5
   10546:	f7ff fd15 	bl	ff74 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1054a:	3430      	adds	r4, #48	; 0x30
   1054c:	e7c8      	b.n	104e0 <z_init_static_threads+0x28>
   1054e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10552:	2300      	movs	r3, #0
   10554:	f7fb fe72 	bl	c23c <__aeabi_uldivmod>
   10558:	4602      	mov	r2, r0
   1055a:	460b      	mov	r3, r1
   1055c:	f105 0018 	add.w	r0, r5, #24
   10560:	4651      	mov	r1, sl
   10562:	f000 f853 	bl	1060c <z_add_timeout>
   10566:	e7f0      	b.n	1054a <z_init_static_threads+0x92>
   10568:	20010414 	.word	0x20010414
   1056c:	20010414 	.word	0x20010414
   10570:	000115b3 	.word	0x000115b3

00010574 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   10574:	4b03      	ldr	r3, [pc, #12]	; (10584 <elapsed+0x10>)
   10576:	681b      	ldr	r3, [r3, #0]
   10578:	b90b      	cbnz	r3, 1057e <elapsed+0xa>
   1057a:	f7fd b9d9 	b.w	d930 <z_clock_elapsed>
}
   1057e:	2000      	movs	r0, #0
   10580:	4770      	bx	lr
   10582:	bf00      	nop
   10584:	2001067c 	.word	0x2001067c

00010588 <remove_timeout>:
{
   10588:	b530      	push	{r4, r5, lr}
   1058a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1058c:	b168      	cbz	r0, 105aa <remove_timeout+0x22>
   1058e:	4a0a      	ldr	r2, [pc, #40]	; (105b8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   10590:	6852      	ldr	r2, [r2, #4]
   10592:	4290      	cmp	r0, r2
   10594:	d009      	beq.n	105aa <remove_timeout+0x22>
	if (next(t) != NULL) {
   10596:	b143      	cbz	r3, 105aa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   10598:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1059c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   105a0:	1912      	adds	r2, r2, r4
   105a2:	eb45 0101 	adc.w	r1, r5, r1
   105a6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   105aa:	6842      	ldr	r2, [r0, #4]
   105ac:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   105ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   105b0:	2300      	movs	r3, #0
	node->prev = NULL;
   105b2:	e9c0 3300 	strd	r3, r3, [r0]
}
   105b6:	bd30      	pop	{r4, r5, pc}
   105b8:	20010344 	.word	0x20010344

000105bc <next_timeout>:

static int32_t next_timeout(void)
{
   105bc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   105be:	4b11      	ldr	r3, [pc, #68]	; (10604 <next_timeout+0x48>)
   105c0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   105c2:	429c      	cmp	r4, r3
   105c4:	bf08      	it	eq
   105c6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   105c8:	f7ff ffd4 	bl	10574 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   105cc:	b1b4      	cbz	r4, 105fc <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   105ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   105d2:	1a14      	subs	r4, r2, r0
   105d4:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   105d8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   105dc:	f175 0300 	sbcs.w	r3, r5, #0
   105e0:	da0c      	bge.n	105fc <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   105e2:	2c00      	cmp	r4, #0
   105e4:	f175 0300 	sbcs.w	r3, r5, #0
   105e8:	4620      	mov	r0, r4
   105ea:	da00      	bge.n	105ee <next_timeout+0x32>
   105ec:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   105ee:	4b06      	ldr	r3, [pc, #24]	; (10608 <next_timeout+0x4c>)
   105f0:	691b      	ldr	r3, [r3, #16]
   105f2:	b113      	cbz	r3, 105fa <next_timeout+0x3e>
   105f4:	4298      	cmp	r0, r3
   105f6:	bfa8      	it	ge
   105f8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   105fa:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   105fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10600:	e7f5      	b.n	105ee <next_timeout+0x32>
   10602:	bf00      	nop
   10604:	20010344 	.word	0x20010344
   10608:	20010640 	.word	0x20010640

0001060c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1060c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10610:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10612:	1c59      	adds	r1, r3, #1
   10614:	bf08      	it	eq
   10616:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1061a:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1061c:	d06e      	beq.n	106fc <z_add_timeout+0xf0>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1061e:	1c54      	adds	r4, r2, #1
   10620:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   10624:	f06f 0301 	mvn.w	r3, #1
   10628:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1062c:	ebb3 0804 	subs.w	r8, r3, r4
   10630:	eb6b 0905 	sbc.w	r9, fp, r5
   10634:	f1b8 0f00 	cmp.w	r8, #0
   10638:	f179 0300 	sbcs.w	r3, r9, #0
   1063c:	db0f      	blt.n	1065e <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1063e:	f7ff ff99 	bl	10574 <elapsed>
   10642:	f06f 0301 	mvn.w	r3, #1
   10646:	4a34      	ldr	r2, [pc, #208]	; (10718 <z_add_timeout+0x10c>)
   10648:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1064c:	1a5b      	subs	r3, r3, r1
   1064e:	eb6b 020c 	sbc.w	r2, fp, ip
   10652:	1b1e      	subs	r6, r3, r4
   10654:	eb62 0705 	sbc.w	r7, r2, r5
   10658:	1a34      	subs	r4, r6, r0
   1065a:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1065e:	9b01      	ldr	r3, [sp, #4]
   10660:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   10664:	f04f 0320 	mov.w	r3, #32
   10668:	f3ef 8611 	mrs	r6, BASEPRI
   1066c:	f383 8811 	msr	BASEPRI, r3
   10670:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   10674:	f7ff ff7e 	bl	10574 <elapsed>
	ticks = MAX(1, ticks);
   10678:	2c01      	cmp	r4, #1
   1067a:	f175 0300 	sbcs.w	r3, r5, #0
   1067e:	4621      	mov	r1, r4
   10680:	bfb8      	it	lt
   10682:	2101      	movlt	r1, #1
   10684:	462a      	mov	r2, r5
   10686:	bfb8      	it	lt
   10688:	2200      	movlt	r2, #0
	return list->head == list;
   1068a:	4b24      	ldr	r3, [pc, #144]	; (1071c <z_add_timeout+0x110>)
		to->dticks = ticks + elapsed();
   1068c:	180c      	adds	r4, r1, r0
   1068e:	eb42 75e0 	adc.w	r5, r2, r0, asr #31
   10692:	681a      	ldr	r2, [r3, #0]
   10694:	e9ca 4504 	strd	r4, r5, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10698:	429a      	cmp	r2, r3
   1069a:	d001      	beq.n	106a0 <z_add_timeout+0x94>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1069c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1069e:	b952      	cbnz	r2, 106b6 <z_add_timeout+0xaa>
	node->prev = list->tail;
   106a0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   106a2:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   106a6:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   106aa:	685a      	ldr	r2, [r3, #4]
   106ac:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   106b0:	f8c3 a004 	str.w	sl, [r3, #4]
   106b4:	e014      	b.n	106e0 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   106b6:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   106ba:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   106be:	4544      	cmp	r4, r8
   106c0:	eb75 0109 	sbcs.w	r1, r5, r9
   106c4:	da1d      	bge.n	10702 <z_add_timeout+0xf6>
				t->dticks -= to->dticks;
   106c6:	ebb8 0004 	subs.w	r0, r8, r4
   106ca:	eb69 0105 	sbc.w	r1, r9, r5
   106ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   106d2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   106d4:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   106d8:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   106dc:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   106e0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   106e2:	429a      	cmp	r2, r3
   106e4:	d006      	beq.n	106f4 <z_add_timeout+0xe8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   106e6:	4592      	cmp	sl, r2
   106e8:	d104      	bne.n	106f4 <z_add_timeout+0xe8>
			z_clock_set_timeout(next_timeout(), false);
   106ea:	f7ff ff67 	bl	105bc <next_timeout>
   106ee:	2100      	movs	r1, #0
   106f0:	f7fd f8b8 	bl	d864 <z_clock_set_timeout>
	__asm__ volatile(
   106f4:	f386 8811 	msr	BASEPRI, r6
   106f8:	f3bf 8f6f 	isb	sy
		}
	}
}
   106fc:	b003      	add	sp, #12
   106fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   10702:	ebb4 0008 	subs.w	r0, r4, r8
   10706:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1070a:	42ba      	cmp	r2, r7
   1070c:	e9ca 0104 	strd	r0, r1, [sl, #16]
   10710:	d0c6      	beq.n	106a0 <z_add_timeout+0x94>
   10712:	6812      	ldr	r2, [r2, #0]
   10714:	e7c3      	b.n	1069e <z_add_timeout+0x92>
   10716:	bf00      	nop
   10718:	20010528 	.word	0x20010528
   1071c:	20010344 	.word	0x20010344

00010720 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   10720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10724:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10726:	f7ff fc7b 	bl	10020 <z_time_slice>
	__asm__ volatile(
   1072a:	f04f 0320 	mov.w	r3, #32
   1072e:	f3ef 8511 	mrs	r5, BASEPRI
   10732:	f383 8811 	msr	BASEPRI, r3
   10736:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1073a:	4b2c      	ldr	r3, [pc, #176]	; (107ec <z_clock_announce+0xcc>)
   1073c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 107f0 <z_clock_announce+0xd0>
   10740:	4698      	mov	r8, r3
   10742:	46cb      	mov	fp, r9
	return list->head == list;
   10744:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 107f4 <z_clock_announce+0xd4>
   10748:	601c      	str	r4, [r3, #0]
   1074a:	f8d8 c000 	ldr.w	ip, [r8]
   1074e:	f8da 4000 	ldr.w	r4, [sl]
   10752:	4666      	mov	r6, ip
   10754:	e9d9 2300 	ldrd	r2, r3, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10758:	4554      	cmp	r4, sl
   1075a:	e9cd 2300 	strd	r2, r3, [sp]
   1075e:	ea4f 77e6 	mov.w	r7, r6, asr #31
   10762:	d00c      	beq.n	1077e <z_clock_announce+0x5e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   10764:	b15c      	cbz	r4, 1077e <z_clock_announce+0x5e>
   10766:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1076a:	458c      	cmp	ip, r1
   1076c:	eb77 0302 	sbcs.w	r3, r7, r2
   10770:	da1b      	bge.n	107aa <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   10772:	ebb1 000c 	subs.w	r0, r1, ip
   10776:	eb62 0107 	sbc.w	r1, r2, r7
   1077a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1077e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10780:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   10782:	f8c8 4000 	str.w	r4, [r8]
	curr_tick += announce_remaining;
   10786:	18f2      	adds	r2, r6, r3
   10788:	9b01      	ldr	r3, [sp, #4]
   1078a:	eb47 0303 	adc.w	r3, r7, r3
   1078e:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
   10792:	f7ff ff13 	bl	105bc <next_timeout>
   10796:	4621      	mov	r1, r4
   10798:	f7fd f864 	bl	d864 <z_clock_set_timeout>
	__asm__ volatile(
   1079c:	f385 8811 	msr	BASEPRI, r5
   107a0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   107a4:	b003      	add	sp, #12
   107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   107aa:	2200      	movs	r2, #0
		curr_tick += dt;
   107ac:	e9dd 6700 	ldrd	r6, r7, [sp]
		t->dticks = 0;
   107b0:	2300      	movs	r3, #0
		curr_tick += dt;
   107b2:	1876      	adds	r6, r6, r1
		announce_remaining -= dt;
   107b4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   107b8:	eb47 77e1 	adc.w	r7, r7, r1, asr #31
		announce_remaining -= dt;
   107bc:	f8c8 0000 	str.w	r0, [r8]
		t->dticks = 0;
   107c0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   107c4:	4620      	mov	r0, r4
		curr_tick += dt;
   107c6:	e9c9 6700 	strd	r6, r7, [r9]
		remove_timeout(t);
   107ca:	f7ff fedd 	bl	10588 <remove_timeout>
   107ce:	f385 8811 	msr	BASEPRI, r5
   107d2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   107d6:	68a3      	ldr	r3, [r4, #8]
   107d8:	4798      	blx	r3
	__asm__ volatile(
   107da:	f04f 0320 	mov.w	r3, #32
   107de:	f3ef 8511 	mrs	r5, BASEPRI
   107e2:	f383 8811 	msr	BASEPRI, r3
   107e6:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   107ea:	e7ae      	b.n	1074a <z_clock_announce+0x2a>
   107ec:	2001067c 	.word	0x2001067c
   107f0:	20010528 	.word	0x20010528
   107f4:	20010344 	.word	0x20010344

000107f8 <z_tick_get>:

int64_t z_tick_get(void)
{
   107f8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   107fc:	f04f 0320 	mov.w	r3, #32
   10800:	f3ef 8411 	mrs	r4, BASEPRI
   10804:	f383 8811 	msr	BASEPRI, r3
   10808:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1080c:	f7fd f890 	bl	d930 <z_clock_elapsed>
   10810:	4b07      	ldr	r3, [pc, #28]	; (10830 <z_tick_get+0x38>)
   10812:	e9d3 2300 	ldrd	r2, r3, [r3]
   10816:	eb12 0b00 	adds.w	fp, r2, r0
   1081a:	f143 0c00 	adc.w	ip, r3, #0
   1081e:	4658      	mov	r0, fp
   10820:	4661      	mov	r1, ip
	__asm__ volatile(
   10822:	f384 8811 	msr	BASEPRI, r4
   10826:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1082a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1082e:	bf00      	nop
   10830:	20010528 	.word	0x20010528

00010834 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   10834:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   10836:	4c06      	ldr	r4, [pc, #24]	; (10850 <statics_init+0x1c>)
   10838:	4d06      	ldr	r5, [pc, #24]	; (10854 <statics_init+0x20>)
   1083a:	42ac      	cmp	r4, r5
   1083c:	d301      	bcc.n	10842 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1083e:	2000      	movs	r0, #0
   10840:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   10842:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   10846:	4620      	mov	r0, r4
   10848:	f000 ff7a 	bl	11740 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1084c:	3414      	adds	r4, #20
   1084e:	e7f4      	b.n	1083a <statics_init+0x6>
   10850:	20010414 	.word	0x20010414
   10854:	20010414 	.word	0x20010414

00010858 <spi_flash_at45_write_protection>:
}
   10858:	2000      	movs	r0, #0
   1085a:	4770      	bx	lr

0001085c <spi_flash_at45_pages_layout>:
	*layout = &get_dev_config(dev)->pages_layout;
   1085c:	6843      	ldr	r3, [r0, #4]
   1085e:	3318      	adds	r3, #24
   10860:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   10862:	2301      	movs	r3, #1
   10864:	6013      	str	r3, [r2, #0]
}
   10866:	4770      	bx	lr

00010868 <release>:
	k_sem_give(&get_dev_data(dev)->lock);
   10868:	68c0      	ldr	r0, [r0, #12]
   1086a:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   1086c:	f7ff bdac 	b.w	103c8 <z_impl_k_sem_give>

00010870 <acquire>:
	k_sem_take(&get_dev_data(dev)->lock, K_FOREVER);
   10870:	68c0      	ldr	r0, [r0, #12]
   10872:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
   10874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1087c:	f7ff bdc4 	b.w	10408 <z_impl_k_sem_take>

00010880 <wait_until_ready>:
{
   10880:	b513      	push	{r0, r1, r4, lr}
   10882:	4604      	mov	r4, r0
		err = read_status_register(dev, &status);
   10884:	f10d 0106 	add.w	r1, sp, #6
   10888:	4620      	mov	r0, r4
   1088a:	f7fb fe59 	bl	c540 <read_status_register>
	} while (err == 0 && !(status & STATUS_REG_LSB_RDY_BUSY_BIT));
   1088e:	b918      	cbnz	r0, 10898 <wait_until_ready+0x18>
   10890:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10894:	061b      	lsls	r3, r3, #24
   10896:	d5f5      	bpl.n	10884 <wait_until_ready+0x4>
}
   10898:	b002      	add	sp, #8
   1089a:	bd10      	pop	{r4, pc}

0001089c <spi_write>:
 * @note This function is an helper function calling spi_transceive.
 */
static inline int spi_write(const struct device *dev,
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
   1089c:	b410      	push	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1089e:	6883      	ldr	r3, [r0, #8]
   108a0:	681c      	ldr	r4, [r3, #0]
   108a2:	2300      	movs	r3, #0
   108a4:	46a4      	mov	ip, r4
	return spi_transceive(dev, config, tx_bufs, NULL);
}
   108a6:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   108a8:	4760      	bx	ip

000108aa <spi_flash_at45_pm_control>:
{
   108aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct spi_flash_at45_data *dev_data = get_dev_data(dev);
   108ae:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   108b2:	2901      	cmp	r1, #1
{
   108b4:	461d      	mov	r5, r3
   108b6:	4604      	mov	r4, r0
   108b8:	4616      	mov	r6, r2
   108ba:	f8d9 3020 	ldr.w	r3, [r9, #32]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   108be:	d12d      	bne.n	1091c <spi_flash_at45_pm_control+0x72>
		uint32_t new_state = *((const uint32_t *)context);
   108c0:	6817      	ldr	r7, [r2, #0]
		if (new_state != dev_data->pm_state) {
   108c2:	429f      	cmp	r7, r3
   108c4:	d016      	beq.n	108f4 <spi_flash_at45_pm_control+0x4a>
			switch (new_state) {
   108c6:	1e7b      	subs	r3, r7, #1
	const struct spi_flash_at45_config *dev_config = get_dev_config(dev);
   108c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
			switch (new_state) {
   108cc:	2b04      	cmp	r3, #4
   108ce:	d827      	bhi.n	10920 <spi_flash_at45_pm_control+0x76>
   108d0:	e8df f003 	tbb	[pc, r3]
   108d4:	26191903 	.word	0x26191903
   108d8:	19          	.byte	0x19
   108d9:	00          	.byte	0x00
				acquire(dev);
   108da:	f7ff ffc9 	bl	10870 <acquire>
				power_down_op(dev, CMD_EXIT_DPD,
   108de:	21ab      	movs	r1, #171	; 0xab
   108e0:	f8b8 202e 	ldrh.w	r2, [r8, #46]	; 0x2e
				power_down_op(dev,
   108e4:	4620      	mov	r0, r4
   108e6:	f7fb ff11 	bl	c70c <power_down_op>
				release(dev);
   108ea:	4620      	mov	r0, r4
   108ec:	f7ff ffbc 	bl	10868 <release>
			dev_data->pm_state = new_state;
   108f0:	f8c9 7020 	str.w	r7, [r9, #32]
	if (cb) {
   108f4:	b1bd      	cbz	r5, 10926 <spi_flash_at45_pm_control+0x7c>
		cb(dev, err, context, arg);
   108f6:	4620      	mov	r0, r4
   108f8:	9b08      	ldr	r3, [sp, #32]
   108fa:	4632      	mov	r2, r6
   108fc:	2100      	movs	r1, #0
   108fe:	47a8      	blx	r5
	return err;
   10900:	2000      	movs	r0, #0
}
   10902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				acquire(dev);
   10906:	f7ff ffb3 	bl	10870 <acquire>
				power_down_op(dev,
   1090a:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   1090e:	f8b8 202c 	ldrh.w	r2, [r8, #44]	; 0x2c
   10912:	2b00      	cmp	r3, #0
   10914:	bf14      	ite	ne
   10916:	2179      	movne	r1, #121	; 0x79
   10918:	21b9      	moveq	r1, #185	; 0xb9
   1091a:	e7e3      	b.n	108e4 <spi_flash_at45_pm_control+0x3a>
		*((uint32_t *)context) = dev_data->pm_state;
   1091c:	6013      	str	r3, [r2, #0]
   1091e:	e7e9      	b.n	108f4 <spi_flash_at45_pm_control+0x4a>
				return -ENOTSUP;
   10920:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10924:	e7ed      	b.n	10902 <spi_flash_at45_pm_control+0x58>
	return err;
   10926:	4628      	mov	r0, r5
   10928:	e7eb      	b.n	10902 <spi_flash_at45_pm_control+0x58>

0001092a <gpio_pin_set.constprop.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1092a:	2301      	movs	r3, #1
   1092c:	fa03 f101 	lsl.w	r1, r3, r1
   10930:	68c3      	ldr	r3, [r0, #12]
   10932:	681b      	ldr	r3, [r3, #0]
   10934:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
   10936:	6883      	ldr	r3, [r0, #8]
   10938:	bf0c      	ite	eq
   1093a:	68db      	ldreq	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1093c:	691b      	ldrne	r3, [r3, #16]
   1093e:	4718      	bx	r3

00010940 <gpio_pin_configure.constprop.1>:
static inline int gpio_pin_configure(const struct device *port,
   10940:	b538      	push	{r3, r4, r5, lr}
   10942:	460d      	mov	r5, r1
	struct gpio_driver_data *data =
   10944:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   10946:	6883      	ldr	r3, [r0, #8]
   10948:	f44f 7200 	mov.w	r2, #512	; 0x200
   1094c:	681b      	ldr	r3, [r3, #0]
   1094e:	4798      	blx	r3
	if (ret != 0) {
   10950:	b930      	cbnz	r0, 10960 <gpio_pin_configure.constprop.1+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10952:	2301      	movs	r3, #1
   10954:	fa03 f105 	lsl.w	r1, r3, r5
   10958:	6823      	ldr	r3, [r4, #0]
   1095a:	ea23 0301 	bic.w	r3, r3, r1
   1095e:	6023      	str	r3, [r4, #0]
}
   10960:	bd38      	pop	{r3, r4, r5, pc}

00010962 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   10962:	b160      	cbz	r0, 1097e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10964:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10966:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1096a:	2b01      	cmp	r3, #1
   1096c:	d003      	beq.n	10976 <sys_notify_validate+0x14>
   1096e:	2b03      	cmp	r3, #3
   10970:	d105      	bne.n	1097e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   10972:	6803      	ldr	r3, [r0, #0]
   10974:	b11b      	cbz	r3, 1097e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   10976:	2300      	movs	r3, #0
   10978:	6083      	str	r3, [r0, #8]
   1097a:	4618      	mov	r0, r3
   1097c:	4770      	bx	lr
		return -EINVAL;
   1097e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   10982:	4770      	bx	lr

00010984 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10984:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   10986:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   10988:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1098c:	2a03      	cmp	r2, #3
   1098e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   10992:	6081      	str	r1, [r0, #8]
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   10994:	bf0c      	ite	eq
   10996:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   10998:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1099a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1099c:	4770      	bx	lr

0001099e <arch_printk_char_out>:
}
   1099e:	2000      	movs	r0, #0
   109a0:	4770      	bx	lr

000109a2 <z_vprintk>:
{
   109a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   109a6:	2500      	movs	r5, #0
{
   109a8:	4606      	mov	r6, r0
   109aa:	460f      	mov	r7, r1
   109ac:	461c      	mov	r4, r3
	int min_width = -1;
   109ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   109b2:	46a8      	mov	r8, r5
{
   109b4:	b087      	sub	sp, #28
   109b6:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   109ba:	f04f 0a00 	mov.w	sl, #0
					break;
   109be:	e007      	b.n	109d0 <z_vprintk+0x2e>
		if (!might_format) {
   109c0:	f1ba 0f00 	cmp.w	sl, #0
   109c4:	d10b      	bne.n	109de <z_vprintk+0x3c>
			if (*fmt != '%') {
   109c6:	2825      	cmp	r0, #37	; 0x25
   109c8:	f000 80f0 	beq.w	10bac <z_vprintk+0x20a>
				out((int)*fmt, ctx);
   109cc:	4639      	mov	r1, r7
   109ce:	47b0      	blx	r6
	while (*fmt) {
   109d0:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   109d4:	2800      	cmp	r0, #0
   109d6:	d1f3      	bne.n	109c0 <z_vprintk+0x1e>
}
   109d8:	b007      	add	sp, #28
   109da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   109de:	2864      	cmp	r0, #100	; 0x64
   109e0:	d06c      	beq.n	10abc <z_vprintk+0x11a>
   109e2:	d81a      	bhi.n	10a1a <z_vprintk+0x78>
   109e4:	2839      	cmp	r0, #57	; 0x39
   109e6:	d80a      	bhi.n	109fe <z_vprintk+0x5c>
   109e8:	2831      	cmp	r0, #49	; 0x31
   109ea:	d25e      	bcs.n	10aaa <z_vprintk+0x108>
   109ec:	282d      	cmp	r0, #45	; 0x2d
   109ee:	f000 80e4 	beq.w	10bba <z_vprintk+0x218>
   109f2:	2830      	cmp	r0, #48	; 0x30
   109f4:	d04a      	beq.n	10a8c <z_vprintk+0xea>
   109f6:	2825      	cmp	r0, #37	; 0x25
   109f8:	d107      	bne.n	10a0a <z_vprintk+0x68>
				out((int)'%', ctx);
   109fa:	4639      	mov	r1, r7
   109fc:	e00b      	b.n	10a16 <z_vprintk+0x74>
			switch (*fmt) {
   109fe:	2858      	cmp	r0, #88	; 0x58
   10a00:	f000 80a5 	beq.w	10b4e <z_vprintk+0x1ac>
   10a04:	2863      	cmp	r0, #99	; 0x63
   10a06:	f000 80cd 	beq.w	10ba4 <z_vprintk+0x202>
					out((int)'%', ctx);
   10a0a:	4639      	mov	r1, r7
   10a0c:	2025      	movs	r0, #37	; 0x25
   10a0e:	47b0      	blx	r6
					out((int)*fmt, ctx);
   10a10:	4639      	mov	r1, r7
   10a12:	f89b 0000 	ldrb.w	r0, [fp]
   10a16:	47b0      	blx	r6
   10a18:	e7cf      	b.n	109ba <z_vprintk+0x18>
			switch (*fmt) {
   10a1a:	2870      	cmp	r0, #112	; 0x70
   10a1c:	f000 808d 	beq.w	10b3a <z_vprintk+0x198>
   10a20:	d80d      	bhi.n	10a3e <z_vprintk+0x9c>
   10a22:	2869      	cmp	r0, #105	; 0x69
   10a24:	d04a      	beq.n	10abc <z_vprintk+0x11a>
   10a26:	286c      	cmp	r0, #108	; 0x6c
   10a28:	d103      	bne.n	10a32 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   10a2a:	2d6c      	cmp	r5, #108	; 0x6c
   10a2c:	d12a      	bne.n	10a84 <z_vprintk+0xe2>
					length_mod = 'L';
   10a2e:	254c      	movs	r5, #76	; 0x4c
   10a30:	e7ce      	b.n	109d0 <z_vprintk+0x2e>
			switch (*fmt) {
   10a32:	2868      	cmp	r0, #104	; 0x68
   10a34:	d1e9      	bne.n	10a0a <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   10a36:	2d68      	cmp	r5, #104	; 0x68
   10a38:	d124      	bne.n	10a84 <z_vprintk+0xe2>
					length_mod = 'H';
   10a3a:	2548      	movs	r5, #72	; 0x48
   10a3c:	e7c8      	b.n	109d0 <z_vprintk+0x2e>
			switch (*fmt) {
   10a3e:	2875      	cmp	r0, #117	; 0x75
   10a40:	d03c      	beq.n	10abc <z_vprintk+0x11a>
   10a42:	d81b      	bhi.n	10a7c <z_vprintk+0xda>
   10a44:	2873      	cmp	r0, #115	; 0x73
   10a46:	d1e0      	bne.n	10a0a <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   10a48:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   10a4c:	469a      	mov	sl, r3
   10a4e:	4652      	mov	r2, sl
   10a50:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10a54:	2800      	cmp	r0, #0
   10a56:	f040 80a0 	bne.w	10b9a <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
   10a5a:	f1b8 0f03 	cmp.w	r8, #3
   10a5e:	f040 80b2 	bne.w	10bc6 <z_vprintk+0x224>
					int remaining = min_width - (s - start);
   10a62:	eba2 0a03 	sub.w	sl, r2, r3
   10a66:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
   10a6a:	f1ba 0f00 	cmp.w	sl, #0
   10a6e:	dda4      	ble.n	109ba <z_vprintk+0x18>
						out(' ', ctx);
   10a70:	4639      	mov	r1, r7
   10a72:	2020      	movs	r0, #32
   10a74:	47b0      	blx	r6
   10a76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   10a7a:	e7f6      	b.n	10a6a <z_vprintk+0xc8>
			switch (*fmt) {
   10a7c:	2878      	cmp	r0, #120	; 0x78
   10a7e:	d066      	beq.n	10b4e <z_vprintk+0x1ac>
   10a80:	287a      	cmp	r0, #122	; 0x7a
   10a82:	d1c2      	bne.n	10a0a <z_vprintk+0x68>
				} else if (length_mod == 0) {
   10a84:	2d00      	cmp	r5, #0
   10a86:	d1c0      	bne.n	10a0a <z_vprintk+0x68>
   10a88:	4605      	mov	r5, r0
   10a8a:	e7a1      	b.n	109d0 <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
   10a8c:	f1b9 0f00 	cmp.w	r9, #0
   10a90:	da0e      	bge.n	10ab0 <z_vprintk+0x10e>
   10a92:	f1b8 0f00 	cmp.w	r8, #0
   10a96:	f000 8093 	beq.w	10bc0 <z_vprintk+0x21e>
					min_width = *fmt - '0';
   10a9a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   10a9e:	f1b8 0f00 	cmp.w	r8, #0
   10aa2:	bf08      	it	eq
   10aa4:	f04f 0802 	moveq.w	r8, #2
   10aa8:	e792      	b.n	109d0 <z_vprintk+0x2e>
				if (min_width < 0) {
   10aaa:	f1b9 0f00 	cmp.w	r9, #0
   10aae:	dbf4      	blt.n	10a9a <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   10ab0:	230a      	movs	r3, #10
   10ab2:	fb03 0909 	mla	r9, r3, r9, r0
   10ab6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   10aba:	e7f0      	b.n	10a9e <z_vprintk+0xfc>
				if (length_mod == 'z') {
   10abc:	2d7a      	cmp	r5, #122	; 0x7a
   10abe:	d106      	bne.n	10ace <z_vprintk+0x12c>
					d = va_arg(ap, long);
   10ac0:	46a2      	mov	sl, r4
   10ac2:	f85a 2b04 	ldr.w	r2, [sl], #4
   10ac6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   10ac8:	2875      	cmp	r0, #117	; 0x75
   10aca:	d125      	bne.n	10b18 <z_vprintk+0x176>
   10acc:	e00f      	b.n	10aee <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
   10ace:	2d6c      	cmp	r5, #108	; 0x6c
   10ad0:	d0f6      	beq.n	10ac0 <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   10ad2:	2d4c      	cmp	r5, #76	; 0x4c
   10ad4:	d105      	bne.n	10ae2 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
   10ad6:	3407      	adds	r4, #7
   10ad8:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
   10adc:	e8fa 2302 	ldrd	r2, r3, [sl], #8
   10ae0:	e7f2      	b.n	10ac8 <z_vprintk+0x126>
				} else if (*fmt == 'u') {
   10ae2:	2875      	cmp	r0, #117	; 0x75
   10ae4:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
   10ae8:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
   10aea:	d114      	bne.n	10b16 <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
   10aec:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   10aee:	f1b8 0103 	subs.w	r1, r8, #3
   10af2:	bf18      	it	ne
   10af4:	2101      	movne	r1, #1
   10af6:	f1b8 0f01 	cmp.w	r8, #1
   10afa:	bf0c      	ite	eq
   10afc:	2030      	moveq	r0, #48	; 0x30
   10afe:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   10b00:	9101      	str	r1, [sp, #4]
   10b02:	210a      	movs	r1, #10
   10b04:	e9cd 0902 	strd	r0, r9, [sp, #8]
   10b08:	9100      	str	r1, [sp, #0]
   10b0a:	4630      	mov	r0, r6
   10b0c:	4639      	mov	r1, r7
   10b0e:	f7fc f863 	bl	cbd8 <print_digits.part.0>
   10b12:	4654      	mov	r4, sl
   10b14:	e751      	b.n	109ba <z_vprintk+0x18>
					d = va_arg(ap, int);
   10b16:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   10b18:	2a00      	cmp	r2, #0
   10b1a:	f173 0100 	sbcs.w	r1, r3, #0
   10b1e:	dae6      	bge.n	10aee <z_vprintk+0x14c>
					out((int)'-', ctx);
   10b20:	4639      	mov	r1, r7
   10b22:	202d      	movs	r0, #45	; 0x2d
   10b24:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10b28:	47b0      	blx	r6
					d = -d;
   10b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10b2e:	4252      	negs	r2, r2
   10b30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   10b34:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   10b38:	e7d9      	b.n	10aee <z_vprintk+0x14c>
				out('0', ctx);
   10b3a:	4639      	mov	r1, r7
   10b3c:	2030      	movs	r0, #48	; 0x30
   10b3e:	47b0      	blx	r6
				out('x', ctx);
   10b40:	4639      	mov	r1, r7
   10b42:	2078      	movs	r0, #120	; 0x78
   10b44:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
   10b46:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   10b4a:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   10b4e:	f89b 3000 	ldrb.w	r3, [fp]
   10b52:	2b70      	cmp	r3, #112	; 0x70
   10b54:	d103      	bne.n	10b5e <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
   10b56:	f854 2b04 	ldr.w	r2, [r4], #4
   10b5a:	2300      	movs	r3, #0
   10b5c:	e00a      	b.n	10b74 <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
   10b5e:	2d6c      	cmp	r5, #108	; 0x6c
   10b60:	d0f9      	beq.n	10b56 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
   10b62:	2d4c      	cmp	r5, #76	; 0x4c
   10b64:	d1f7      	bne.n	10b56 <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
   10b66:	3407      	adds	r4, #7
   10b68:	f024 0307 	bic.w	r3, r4, #7
   10b6c:	461c      	mov	r4, r3
   10b6e:	685b      	ldr	r3, [r3, #4]
   10b70:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   10b74:	f1b8 0103 	subs.w	r1, r8, #3
   10b78:	bf18      	it	ne
   10b7a:	2101      	movne	r1, #1
   10b7c:	f1b8 0f01 	cmp.w	r8, #1
   10b80:	bf0c      	ite	eq
   10b82:	2030      	moveq	r0, #48	; 0x30
   10b84:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   10b86:	9101      	str	r1, [sp, #4]
   10b88:	2110      	movs	r1, #16
   10b8a:	e9cd 0902 	strd	r0, r9, [sp, #8]
   10b8e:	9100      	str	r1, [sp, #0]
   10b90:	4630      	mov	r0, r6
   10b92:	4639      	mov	r1, r7
   10b94:	f7fc f820 	bl	cbd8 <print_digits.part.0>
   10b98:	e70f      	b.n	109ba <z_vprintk+0x18>
					out((int)(*s++), ctx);
   10b9a:	4639      	mov	r1, r7
   10b9c:	9304      	str	r3, [sp, #16]
   10b9e:	47b0      	blx	r6
   10ba0:	9b04      	ldr	r3, [sp, #16]
   10ba2:	e754      	b.n	10a4e <z_vprintk+0xac>
				out(c, ctx);
   10ba4:	4639      	mov	r1, r7
   10ba6:	f854 0b04 	ldr.w	r0, [r4], #4
   10baa:	e734      	b.n	10a16 <z_vprintk+0x74>
				length_mod = 0;
   10bac:	4655      	mov	r5, sl
				padding = PAD_NONE;
   10bae:	46d0      	mov	r8, sl
				min_width = -1;
   10bb0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   10bb4:	f04f 0a01 	mov.w	sl, #1
   10bb8:	e70a      	b.n	109d0 <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
   10bba:	f04f 0803 	mov.w	r8, #3
   10bbe:	e707      	b.n	109d0 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   10bc0:	f04f 0801 	mov.w	r8, #1
   10bc4:	e704      	b.n	109d0 <z_vprintk+0x2e>
			might_format = 0;
   10bc6:	4682      	mov	sl, r0
   10bc8:	e702      	b.n	109d0 <z_vprintk+0x2e>

00010bca <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   10bca:	b40f      	push	{r0, r1, r2, r3}
   10bcc:	b507      	push	{r0, r1, r2, lr}
   10bce:	a904      	add	r1, sp, #16
   10bd0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   10bd4:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   10bd6:	f7fc f84f 	bl	cc78 <vprintk>
	}
	va_end(ap);
}
   10bda:	b003      	add	sp, #12
   10bdc:	f85d eb04 	ldr.w	lr, [sp], #4
   10be0:	b004      	add	sp, #16
   10be2:	4770      	bx	lr

00010be4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10be4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   10be6:	f013 0307 	ands.w	r3, r3, #7
   10bea:	d105      	bne.n	10bf8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   10bec:	6803      	ldr	r3, [r0, #0]
   10bee:	2b00      	cmp	r3, #0
		evt = EVT_START;
   10bf0:	bf0c      	ite	eq
   10bf2:	2000      	moveq	r0, #0
   10bf4:	2003      	movne	r0, #3
   10bf6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   10bf8:	2b02      	cmp	r3, #2
   10bfa:	d105      	bne.n	10c08 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   10bfc:	8b43      	ldrh	r3, [r0, #26]
   10bfe:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   10c00:	bf14      	ite	ne
   10c02:	2000      	movne	r0, #0
   10c04:	2004      	moveq	r0, #4
   10c06:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   10c08:	2b01      	cmp	r3, #1
   10c0a:	d105      	bne.n	10c18 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   10c0c:	6803      	ldr	r3, [r0, #0]
   10c0e:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   10c10:	bf0c      	ite	eq
   10c12:	2000      	moveq	r0, #0
   10c14:	2005      	movne	r0, #5
   10c16:	4770      	bx	lr
	int evt = EVT_NOP;
   10c18:	2000      	movs	r0, #0
}
   10c1a:	4770      	bx	lr

00010c1c <notify_one>:
{
   10c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c20:	460d      	mov	r5, r1
   10c22:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10c24:	4619      	mov	r1, r3
   10c26:	1d28      	adds	r0, r5, #4
{
   10c28:	4690      	mov	r8, r2
   10c2a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10c2c:	f7ff feaa 	bl	10984 <sys_notify_finalize>
	if (cb) {
   10c30:	4604      	mov	r4, r0
   10c32:	b138      	cbz	r0, 10c44 <notify_one+0x28>
		cb(mgr, cli, state, res);
   10c34:	4633      	mov	r3, r6
   10c36:	4642      	mov	r2, r8
   10c38:	4629      	mov	r1, r5
   10c3a:	4638      	mov	r0, r7
   10c3c:	46a4      	mov	ip, r4
}
   10c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   10c42:	4760      	bx	ip
}
   10c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c48 <transition_complete>:
{
   10c48:	b410      	push	{r4}
	__asm__ volatile(
   10c4a:	f04f 0420 	mov.w	r4, #32
   10c4e:	f3ef 8211 	mrs	r2, BASEPRI
   10c52:	f384 8811 	msr	BASEPRI, r4
   10c56:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10c5a:	6141      	str	r1, [r0, #20]
}
   10c5c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   10c5e:	2101      	movs	r1, #1
   10c60:	f7fc b818 	b.w	cc94 <process_event>

00010c64 <validate_args>:
{
   10c64:	b510      	push	{r4, lr}
   10c66:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   10c68:	b140      	cbz	r0, 10c7c <validate_args+0x18>
   10c6a:	b139      	cbz	r1, 10c7c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   10c6c:	1d08      	adds	r0, r1, #4
   10c6e:	f7ff fe78 	bl	10962 <sys_notify_validate>
	if ((rv == 0)
   10c72:	b928      	cbnz	r0, 10c80 <validate_args+0x1c>
	    && ((cli->notify.flags
   10c74:	68a3      	ldr	r3, [r4, #8]
   10c76:	f033 0303 	bics.w	r3, r3, #3
   10c7a:	d001      	beq.n	10c80 <validate_args+0x1c>
		rv = -EINVAL;
   10c7c:	f06f 0015 	mvn.w	r0, #21
}
   10c80:	bd10      	pop	{r4, pc}

00010c82 <onoff_manager_init>:
{
   10c82:	b538      	push	{r3, r4, r5, lr}
   10c84:	460c      	mov	r4, r1
	if ((mgr == NULL)
   10c86:	4605      	mov	r5, r0
   10c88:	b158      	cbz	r0, 10ca2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10c8a:	b151      	cbz	r1, 10ca2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   10c8c:	680b      	ldr	r3, [r1, #0]
   10c8e:	b143      	cbz	r3, 10ca2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   10c90:	684b      	ldr	r3, [r1, #4]
   10c92:	b133      	cbz	r3, 10ca2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10c94:	221c      	movs	r2, #28
   10c96:	2100      	movs	r1, #0
   10c98:	f000 fa9a 	bl	111d0 <memset>
	return 0;
   10c9c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10c9e:	612c      	str	r4, [r5, #16]
}
   10ca0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10ca2:	f06f 0015 	mvn.w	r0, #21
   10ca6:	e7fb      	b.n	10ca0 <onoff_manager_init+0x1e>

00010ca8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10ca8:	b570      	push	{r4, r5, r6, lr}
   10caa:	4604      	mov	r4, r0
   10cac:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10cae:	f7ff ffd9 	bl	10c64 <validate_args>

	if (rv < 0) {
   10cb2:	1e06      	subs	r6, r0, #0
   10cb4:	db31      	blt.n	10d1a <onoff_request+0x72>
   10cb6:	f04f 0320 	mov.w	r3, #32
   10cba:	f3ef 8111 	mrs	r1, BASEPRI
   10cbe:	f383 8811 	msr	BASEPRI, r3
   10cc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10cc6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   10cca:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10ccc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   10cce:	42b3      	cmp	r3, r6
   10cd0:	f000 0207 	and.w	r2, r0, #7
   10cd4:	d02e      	beq.n	10d34 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10cd6:	2a02      	cmp	r2, #2
   10cd8:	d10e      	bne.n	10cf8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10cda:	3301      	adds	r3, #1
   10cdc:	8363      	strh	r3, [r4, #26]
	rv = state;
   10cde:	4616      	mov	r6, r2
		notify = true;
   10ce0:	2301      	movs	r3, #1
	__asm__ volatile(
   10ce2:	f381 8811 	msr	BASEPRI, r1
   10ce6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10cea:	b1b3      	cbz	r3, 10d1a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   10cec:	2300      	movs	r3, #0
   10cee:	4629      	mov	r1, r5
   10cf0:	4620      	mov	r0, r4
   10cf2:	f7ff ff93 	bl	10c1c <notify_one>
   10cf6:	e010      	b.n	10d1a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   10cf8:	0783      	lsls	r3, r0, #30
   10cfa:	d001      	beq.n	10d00 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   10cfc:	2a06      	cmp	r2, #6
   10cfe:	d10e      	bne.n	10d1e <onoff_request+0x76>
	parent->next = child;
   10d00:	2300      	movs	r3, #0
   10d02:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10d04:	6863      	ldr	r3, [r4, #4]
   10d06:	b993      	cbnz	r3, 10d2e <onoff_request+0x86>
	list->head = node;
   10d08:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
   10d0c:	4616      	mov	r6, r2
   10d0e:	b962      	cbnz	r2, 10d2a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   10d10:	460a      	mov	r2, r1
   10d12:	4620      	mov	r0, r4
   10d14:	2102      	movs	r1, #2
   10d16:	f7fb ffbd 	bl	cc94 <process_event>
		}
	}

	return rv;
}
   10d1a:	4630      	mov	r0, r6
   10d1c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   10d1e:	2a05      	cmp	r2, #5
   10d20:	bf0c      	ite	eq
   10d22:	f06f 0622 	mvneq.w	r6, #34	; 0x22
   10d26:	f06f 0604 	mvnne.w	r6, #4
   10d2a:	2300      	movs	r3, #0
   10d2c:	e7d9      	b.n	10ce2 <onoff_request+0x3a>
	parent->next = child;
   10d2e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10d30:	6065      	str	r5, [r4, #4]
   10d32:	e7eb      	b.n	10d0c <onoff_request+0x64>
		rv = -EAGAIN;
   10d34:	f06f 060a 	mvn.w	r6, #10
   10d38:	e7f7      	b.n	10d2a <onoff_request+0x82>

00010d3a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10d3a:	4604      	mov	r4, r0
   10d3c:	b508      	push	{r3, lr}
   10d3e:	4608      	mov	r0, r1
   10d40:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   10d42:	461a      	mov	r2, r3
   10d44:	47a0      	blx	r4
	return z_impl_k_current_get();
   10d46:	f7ff fb39 	bl	103bc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   10d4a:	f7fd faad 	bl	e2a8 <z_impl_k_thread_abort>

00010d4e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10d4e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10d50:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   10d58:	bf2c      	ite	cs
   10d5a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   10d5e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   10d62:	4770      	bx	lr

00010d64 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10d64:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   10d68:	6880      	ldr	r0, [r0, #8]
   10d6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   10d6e:	bf2c      	ite	cs
   10d70:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   10d74:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   10d78:	4770      	bx	lr

00010d7a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   10d7a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   10d7c:	2201      	movs	r2, #1
   10d7e:	f7ff ffe6 	bl	10d4e <chunk_field>
}
   10d82:	0840      	lsrs	r0, r0, #1
   10d84:	bd08      	pop	{r3, pc}

00010d86 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10d86:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10d88:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10d90:	d308      	bcc.n	10da4 <set_chunk_used+0x1e>
		if (used) {
   10d92:	684b      	ldr	r3, [r1, #4]
   10d94:	b11a      	cbz	r2, 10d9e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   10d96:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   10d9a:	604b      	str	r3, [r1, #4]
   10d9c:	4770      	bx	lr
   10d9e:	f023 0301 	bic.w	r3, r3, #1
   10da2:	e7fa      	b.n	10d9a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   10da4:	884b      	ldrh	r3, [r1, #2]
   10da6:	b11a      	cbz	r2, 10db0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   10da8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   10dac:	804b      	strh	r3, [r1, #2]
		}
	}
}
   10dae:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   10db0:	f023 0301 	bic.w	r3, r3, #1
   10db4:	e7fa      	b.n	10dac <set_chunk_used+0x26>

00010db6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10db6:	0053      	lsls	r3, r2, #1
   10db8:	2201      	movs	r2, #1
   10dba:	f7ff bfd3 	b.w	10d64 <chunk_set>

00010dbe <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   10dbe:	6883      	ldr	r3, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   10dc0:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   10dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10dc6:	bf2c      	ite	cs
   10dc8:	2302      	movcs	r3, #2
   10dca:	2301      	movcc	r3, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   10dcc:	1ac0      	subs	r0, r0, r3
	return 31 - __builtin_clz(usable_sz);
   10dce:	fab0 f080 	clz	r0, r0
}
   10dd2:	f1c0 001f 	rsb	r0, r0, #31
   10dd6:	4770      	bx	lr

00010dd8 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   10dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ddc:	4604      	mov	r4, r0
   10dde:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   10de0:	f7ff ffcb 	bl	10d7a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   10de4:	68a3      	ldr	r3, [r4, #8]
   10de6:	4601      	mov	r1, r0
   10de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10dec:	d301      	bcc.n	10df2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   10dee:	2801      	cmp	r0, #1
   10df0:	d035      	beq.n	10e5e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   10df2:	4620      	mov	r0, r4
   10df4:	f7ff ffe3 	bl	10dbe <bucket_idx>
	if (b->next == 0) {
   10df8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   10dfc:	6916      	ldr	r6, [r2, #16]
   10dfe:	b99e      	cbnz	r6, 10e28 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   10e00:	2301      	movs	r3, #1
   10e02:	fa03 f000 	lsl.w	r0, r3, r0
   10e06:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   10e08:	4629      	mov	r1, r5
   10e0a:	4303      	orrs	r3, r0
   10e0c:	60e3      	str	r3, [r4, #12]
   10e0e:	4620      	mov	r0, r4
		b->next = c;
   10e10:	6115      	str	r5, [r2, #16]
   10e12:	462b      	mov	r3, r5
   10e14:	2202      	movs	r2, #2
   10e16:	f7ff ffa5 	bl	10d64 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10e1a:	2203      	movs	r2, #3
   10e1c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   10e1e:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   10e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10e24:	f7ff bf9e 	b.w	10d64 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   10e28:	2202      	movs	r2, #2
   10e2a:	4631      	mov	r1, r6
   10e2c:	4620      	mov	r0, r4
   10e2e:	f7ff ff8e 	bl	10d4e <chunk_field>
   10e32:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   10e34:	4603      	mov	r3, r0
   10e36:	2202      	movs	r2, #2
   10e38:	4629      	mov	r1, r5
   10e3a:	4620      	mov	r0, r4
   10e3c:	f7ff ff92 	bl	10d64 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10e40:	4633      	mov	r3, r6
   10e42:	2203      	movs	r2, #3
   10e44:	4629      	mov	r1, r5
   10e46:	4620      	mov	r0, r4
   10e48:	f7ff ff8c 	bl	10d64 <chunk_set>
   10e4c:	2203      	movs	r2, #3
   10e4e:	4639      	mov	r1, r7
   10e50:	462b      	mov	r3, r5
   10e52:	4620      	mov	r0, r4
   10e54:	f7ff ff86 	bl	10d64 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   10e58:	2202      	movs	r2, #2
   10e5a:	4631      	mov	r1, r6
   10e5c:	e7df      	b.n	10e1e <free_list_add+0x46>
   10e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e62 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   10e62:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e68:	bf2c      	ite	cs
   10e6a:	2508      	movcs	r5, #8
   10e6c:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   10e6e:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   10e70:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   10e72:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10e74:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10e76:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10e78:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10e7c:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   10e80:	1b2d      	subs	r5, r5, r4
   10e82:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   10e84:	6004      	str	r4, [r0, #0]
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   10e86:	4629      	mov	r1, r5
	h->chunk0_hdr_area = 0;
   10e88:	e9c4 2300 	strd	r2, r3, [r4]
	h->avail_buckets = 0;
   10e8c:	e9c4 5202 	strd	r5, r2, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   10e90:	4620      	mov	r0, r4
   10e92:	f7ff ff94 	bl	10dbe <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   10e96:	4613      	mov	r3, r2
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10e98:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   10e9a:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   10e9c:	1c47      	adds	r7, r0, #1
   10e9e:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   10ea0:	f104 0110 	add.w	r1, r4, #16
   10ea4:	42bb      	cmp	r3, r7
   10ea6:	db29      	blt.n	10efc <sys_heap_init+0x9a>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   10ea8:	4632      	mov	r2, r6
   10eaa:	4620      	mov	r0, r4
   10eac:	2100      	movs	r1, #0
   10eae:	f7ff ff82 	bl	10db6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   10eb2:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   10eb4:	4620      	mov	r0, r4
   10eb6:	2201      	movs	r2, #1
   10eb8:	2100      	movs	r1, #0
   10eba:	f7ff ff64 	bl	10d86 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   10ebe:	463a      	mov	r2, r7
   10ec0:	4631      	mov	r1, r6
   10ec2:	f7ff ff78 	bl	10db6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10ec6:	4633      	mov	r3, r6
   10ec8:	4631      	mov	r1, r6
   10eca:	4620      	mov	r0, r4
   10ecc:	2200      	movs	r2, #0
   10ece:	f7ff ff49 	bl	10d64 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   10ed2:	4629      	mov	r1, r5
   10ed4:	4620      	mov	r0, r4
   10ed6:	2200      	movs	r2, #0
   10ed8:	f7ff ff6d 	bl	10db6 <set_chunk_size>
   10edc:	463b      	mov	r3, r7
   10ede:	4629      	mov	r1, r5
   10ee0:	4620      	mov	r0, r4
   10ee2:	2200      	movs	r2, #0
   10ee4:	f7ff ff3e 	bl	10d64 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   10ee8:	4629      	mov	r1, r5
   10eea:	4620      	mov	r0, r4
   10eec:	2201      	movs	r2, #1
   10eee:	f7ff ff4a 	bl	10d86 <set_chunk_used>

	free_list_add(h, chunk0_size);
   10ef2:	4631      	mov	r1, r6
}
   10ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   10ef8:	f7ff bf6e 	b.w	10dd8 <free_list_add>
		h->buckets[i].next = 0;
   10efc:	f841 2b04 	str.w	r2, [r1], #4
	for (int i = 0; i < nb_buckets; i++) {
   10f00:	3301      	adds	r3, #1
   10f02:	e7cf      	b.n	10ea4 <sys_heap_init+0x42>

00010f04 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_SPI_FLASH_EN25, 1);
GEN_ABSOLUTE_SYM(CONFIG_SPI_FLASH_EN25_USE_READ_MODIFY_WRITE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SPI_FLASH_EN25_INIT_PRIORITY, 80);

GEN_ABS_SYM_END
   10f04:	4770      	bx	lr

00010f06 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   10f06:	f7fe baa3 	b.w	f450 <SystemInit>

00010f0a <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   10f0a:	f7fc bd2b 	b.w	d964 <z_timer_cycle_get_32>

00010f0e <dummy_timestamp>:
   10f0e:	2000      	movs	r0, #0
   10f10:	4770      	bx	lr

00010f12 <log_string_sync>:
{
   10f12:	b40e      	push	{r1, r2, r3}
   10f14:	b503      	push	{r0, r1, lr}
   10f16:	aa03      	add	r2, sp, #12
   10f18:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   10f1c:	2300      	movs	r3, #0
	va_start(ap, fmt);
   10f1e:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   10f20:	f7fb ffb4 	bl	ce8c <log_generic>
}
   10f24:	b002      	add	sp, #8
   10f26:	f85d eb04 	ldr.w	lr, [sp], #4
   10f2a:	b003      	add	sp, #12
   10f2c:	4770      	bx	lr

00010f2e <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   10f2e:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   10f30:	f7fc f80e 	bl	cf50 <log_init>
	}

	return 0;
}
   10f34:	2000      	movs	r0, #0
   10f36:	bd08      	pop	{r3, pc}

00010f38 <log_strdup>:
}
   10f38:	4770      	bx	lr

00010f3a <out_func>:
{
   10f3a:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   10f3c:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   10f40:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   10f42:	6852      	ldr	r2, [r2, #4]
   10f44:	2101      	movs	r1, #1
   10f46:	a801      	add	r0, sp, #4
   10f48:	4798      	blx	r3
}
   10f4a:	2000      	movs	r0, #0
   10f4c:	b003      	add	sp, #12
   10f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00010f52 <buffer_write>:
{
   10f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f54:	4606      	mov	r6, r0
   10f56:	460d      	mov	r5, r1
   10f58:	4614      	mov	r4, r2
   10f5a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   10f5c:	4621      	mov	r1, r4
   10f5e:	4628      	mov	r0, r5
   10f60:	463a      	mov	r2, r7
   10f62:	47b0      	blx	r6
	} while (len != 0);
   10f64:	1a24      	subs	r4, r4, r0
		buf += processed;
   10f66:	4405      	add	r5, r0
	} while (len != 0);
   10f68:	d1f8      	bne.n	10f5c <buffer_write+0xa>
}
   10f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010f6c <log_output_flush>:
		     log_output->control_block->offset,
   10f6c:	6842      	ldr	r2, [r0, #4]
{
   10f6e:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   10f70:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   10f74:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   10f76:	6881      	ldr	r1, [r0, #8]
   10f78:	6800      	ldr	r0, [r0, #0]
   10f7a:	f7ff ffea 	bl	10f52 <buffer_write>
	log_output->control_block->offset = 0;
   10f7e:	2200      	movs	r2, #0
   10f80:	6863      	ldr	r3, [r4, #4]
   10f82:	601a      	str	r2, [r3, #0]
}
   10f84:	bd10      	pop	{r4, pc}

00010f86 <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(const struct device *dev)
{
   10f86:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   10f88:	f7fc fa1e 	bl	d3c8 <sys_pm_create_device_list>
	return 0;
}
   10f8c:	2000      	movs	r0, #0
   10f8e:	bd08      	pop	{r3, pc}

00010f90 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   10f90:	230c      	movs	r3, #12
   10f92:	68c2      	ldr	r2, [r0, #12]
   10f94:	b2c9      	uxtb	r1, r1
   10f96:	fb01 2303 	mla	r3, r1, r3, r2
   10f9a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   10f9c:	f000 0007 	and.w	r0, r0, #7
   10fa0:	4770      	bx	lr

00010fa2 <set_off_state>:
	__asm__ volatile(
   10fa2:	f04f 0320 	mov.w	r3, #32
   10fa6:	f3ef 8211 	mrs	r2, BASEPRI
   10faa:	f383 8811 	msr	BASEPRI, r3
   10fae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   10fb2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   10fb4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   10fb8:	d001      	beq.n	10fbe <set_off_state+0x1c>
   10fba:	428b      	cmp	r3, r1
   10fbc:	d107      	bne.n	10fce <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   10fbe:	2301      	movs	r3, #1
   10fc0:	6003      	str	r3, [r0, #0]
	int err = 0;
   10fc2:	2000      	movs	r0, #0
	__asm__ volatile(
   10fc4:	f382 8811 	msr	BASEPRI, r2
   10fc8:	f3bf 8f6f 	isb	sy
}
   10fcc:	4770      	bx	lr
		err = -EPERM;
   10fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10fd2:	e7f7      	b.n	10fc4 <set_off_state+0x22>

00010fd4 <set_starting_state>:
{
   10fd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   10fd6:	f04f 0320 	mov.w	r3, #32
   10fda:	f3ef 8211 	mrs	r2, BASEPRI
   10fde:	f383 8811 	msr	BASEPRI, r3
   10fe2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   10fe6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   10fe8:	f003 0407 	and.w	r4, r3, #7
   10fec:	2c01      	cmp	r4, #1
   10fee:	d106      	bne.n	10ffe <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   10ff0:	6001      	str	r1, [r0, #0]
	int err = 0;
   10ff2:	2000      	movs	r0, #0
	__asm__ volatile(
   10ff4:	f382 8811 	msr	BASEPRI, r2
   10ff8:	f3bf 8f6f 	isb	sy
}
   10ffc:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   10ffe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   11002:	428b      	cmp	r3, r1
		err = -EBUSY;
   11004:	bf14      	ite	ne
   11006:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1100a:	f06f 000f 	mvneq.w	r0, #15
   1100e:	e7f1      	b.n	10ff4 <set_starting_state+0x20>

00011010 <set_on_state>:
	__asm__ volatile(
   11010:	f04f 0320 	mov.w	r3, #32
   11014:	f3ef 8211 	mrs	r2, BASEPRI
   11018:	f383 8811 	msr	BASEPRI, r3
   1101c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   11020:	6803      	ldr	r3, [r0, #0]
   11022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11026:	f043 0302 	orr.w	r3, r3, #2
   1102a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1102c:	f382 8811 	msr	BASEPRI, r2
   11030:	f3bf 8f6f 	isb	sy
}
   11034:	4770      	bx	lr

00011036 <onoff_started_callback>:
	return &data->mgr[type];
   11036:	68c3      	ldr	r3, [r0, #12]
	notify(mgr, 0);
   11038:	201c      	movs	r0, #28
{
   1103a:	b410      	push	{r4}
	return &data->mgr[type];
   1103c:	b2cc      	uxtb	r4, r1
	notify(mgr, 0);
   1103e:	fb04 3000 	mla	r0, r4, r0, r3
   11042:	2100      	movs	r1, #0
}
   11044:	bc10      	pop	{r4}
	notify(mgr, 0);
   11046:	4710      	bx	r2

00011048 <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   11048:	4610      	mov	r0, r2
   1104a:	f7ff b9bd 	b.w	103c8 <z_impl_k_sem_give>

0001104e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1104e:	2000      	movs	r0, #0
   11050:	f7fe ba48 	b.w	f4e4 <nrfx_clock_stop>

00011054 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   11054:	2000      	movs	r0, #0
   11056:	f7fe ba13 	b.w	f480 <nrfx_clock_start>

0001105a <api_stop>:
{
   1105a:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1105c:	240c      	movs	r4, #12
   1105e:	b2c9      	uxtb	r1, r1
   11060:	434c      	muls	r4, r1
{
   11062:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   11064:	68c0      	ldr	r0, [r0, #12]
   11066:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1106a:	2180      	movs	r1, #128	; 0x80
   1106c:	4418      	add	r0, r3
   1106e:	f7ff ff98 	bl	10fa2 <set_off_state>
	if (err < 0) {
   11072:	2800      	cmp	r0, #0
   11074:	db04      	blt.n	11080 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   11076:	6869      	ldr	r1, [r5, #4]
   11078:	440c      	add	r4, r1
   1107a:	6863      	ldr	r3, [r4, #4]
   1107c:	4798      	blx	r3
	return 0;
   1107e:	2000      	movs	r0, #0
}
   11080:	bd38      	pop	{r3, r4, r5, pc}

00011082 <api_start>:
{
   11082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   11084:	240c      	movs	r4, #12
   11086:	b2c9      	uxtb	r1, r1
   11088:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1108a:	68c5      	ldr	r5, [r0, #12]
{
   1108c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1108e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   11092:	2180      	movs	r1, #128	; 0x80
   11094:	4428      	add	r0, r5
{
   11096:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   11098:	f7ff ff9c 	bl	10fd4 <set_starting_state>
	if (err < 0) {
   1109c:	2800      	cmp	r0, #0
   1109e:	db08      	blt.n	110b2 <api_start+0x30>
	subdata->cb = data->cb;
   110a0:	687b      	ldr	r3, [r7, #4]
   110a2:	4425      	add	r5, r4
   110a4:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   110a6:	68bb      	ldr	r3, [r7, #8]
   110a8:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   110aa:	6873      	ldr	r3, [r6, #4]
   110ac:	591b      	ldr	r3, [r3, r4]
   110ae:	4798      	blx	r3
	return 0;
   110b0:	2000      	movs	r0, #0
}
   110b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000110b4 <z_clock_device_ctrl>:
int __weak z_clock_device_ctrl(const struct device *device,
			       uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
   110b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   110b8:	4770      	bx	lr

000110ba <z_clock_isr>:
}
   110ba:	4770      	bx	lr

000110bc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   110bc:	4770      	bx	lr

000110be <spm_request_read>:
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   110be:	b510      	push	{r4, lr}
   110c0:	b40f      	push	{r0, r1, r2, r3}
   110c2:	f7fe febd 	bl	fe40 <k_sched_lock>
   110c6:	bc0f      	pop	{r0, r1, r2, r3}
   110c8:	f7f6 ff92 	bl	7ff0 <spm_request_read_nse>
   110cc:	b40f      	push	{r0, r1, r2, r3}
   110ce:	f7fe ff05 	bl	fedc <k_sched_unlock>
   110d2:	bc0f      	pop	{r0, r1, r2, r3}
   110d4:	bd10      	pop	{r4, pc}

000110d6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   110d6:	2100      	movs	r1, #0
   110d8:	2001      	movs	r0, #1
   110da:	f7fc bd51 	b.w	db80 <z_arm_fatal_error>

000110de <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   110de:	6e83      	ldr	r3, [r0, #104]	; 0x68
   110e0:	f383 880b 	msr	PSPLIM, r3
}
   110e4:	4770      	bx	lr

000110e6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   110e6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   110e8:	6800      	ldr	r0, [r0, #0]
   110ea:	f7fc bd49 	b.w	db80 <z_arm_fatal_error>

000110ee <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   110ee:	b508      	push	{r3, lr}
	handler();
   110f0:	f7fc fd96 	bl	dc20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   110f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   110f8:	f7fd b8aa 	b.w	e250 <z_arm_exc_exit>

000110fc <mpu_configure_region>:
{
   110fc:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   110fe:	684b      	ldr	r3, [r1, #4]
{
   11100:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   11102:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   11104:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11108:	890d      	ldrh	r5, [r1, #8]
   1110a:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1110c:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1110e:	f024 041f 	bic.w	r4, r4, #31
   11112:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   11114:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   11118:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   1111a:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1111e:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   11122:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   11124:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   11128:	9303      	str	r3, [sp, #12]
   1112a:	f7fd f92b 	bl	e384 <region_allocate_and_init>
}
   1112e:	b005      	add	sp, #20
   11130:	bd30      	pop	{r4, r5, pc}

00011132 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   11132:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   11136:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1113a:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1113c:	bf08      	it	eq
   1113e:	f06f 0015 	mvneq.w	r0, #21
   11142:	4770      	bx	lr

00011144 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   11144:	3801      	subs	r0, #1
   11146:	3901      	subs	r1, #1
   11148:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1114c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   11150:	4293      	cmp	r3, r2
   11152:	d101      	bne.n	11158 <strcmp+0x14>
   11154:	2b00      	cmp	r3, #0
   11156:	d1f7      	bne.n	11148 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   11158:	1a98      	subs	r0, r3, r2
   1115a:	4770      	bx	lr

0001115c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1115c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1115e:	b15a      	cbz	r2, 11178 <memcmp+0x1c>
   11160:	3901      	subs	r1, #1
   11162:	1884      	adds	r4, r0, r2
   11164:	f810 2b01 	ldrb.w	r2, [r0], #1
   11168:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1116c:	42a0      	cmp	r0, r4
   1116e:	d001      	beq.n	11174 <memcmp+0x18>
   11170:	429a      	cmp	r2, r3
   11172:	d0f7      	beq.n	11164 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   11174:	1ad0      	subs	r0, r2, r3
}
   11176:	bd10      	pop	{r4, pc}
		return 0;
   11178:	4610      	mov	r0, r2
   1117a:	e7fc      	b.n	11176 <memcmp+0x1a>

0001117c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1117c:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1117e:	ea81 0400 	eor.w	r4, r1, r0
   11182:	07a5      	lsls	r5, r4, #30
   11184:	4603      	mov	r3, r0
   11186:	d00b      	beq.n	111a0 <memcpy+0x24>
   11188:	3b01      	subs	r3, #1
   1118a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1118c:	4291      	cmp	r1, r2
   1118e:	d11a      	bne.n	111c6 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   11190:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   11192:	2a00      	cmp	r2, #0
   11194:	d0fc      	beq.n	11190 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   11196:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1119a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1119c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   111a0:	079c      	lsls	r4, r3, #30
   111a2:	d1f6      	bne.n	11192 <memcpy+0x16>
   111a4:	0895      	lsrs	r5, r2, #2
   111a6:	00ac      	lsls	r4, r5, #2
   111a8:	1f1e      	subs	r6, r3, #4
   111aa:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   111ac:	42b9      	cmp	r1, r7
   111ae:	d105      	bne.n	111bc <memcpy+0x40>
   111b0:	f06f 0603 	mvn.w	r6, #3
   111b4:	4423      	add	r3, r4
   111b6:	fb06 2205 	mla	r2, r6, r5, r2
   111ba:	e7e5      	b.n	11188 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   111bc:	f851 cb04 	ldr.w	ip, [r1], #4
   111c0:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   111c4:	e7f2      	b.n	111ac <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   111c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   111ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   111ce:	e7dd      	b.n	1118c <memcpy+0x10>

000111d0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   111d0:	4603      	mov	r3, r0
{
   111d2:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   111d4:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   111d6:	079c      	lsls	r4, r3, #30
   111d8:	d110      	bne.n	111fc <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   111da:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   111de:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   111e2:	0894      	lsrs	r4, r2, #2
   111e4:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   111e8:	42b3      	cmp	r3, r6
   111ea:	d10d      	bne.n	11208 <memset+0x38>
   111ec:	f06f 0503 	mvn.w	r5, #3
   111f0:	fb05 2404 	mla	r4, r5, r4, r2
   111f4:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   111f6:	42a3      	cmp	r3, r4
   111f8:	d109      	bne.n	1120e <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   111fa:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   111fc:	2a00      	cmp	r2, #0
   111fe:	d0fc      	beq.n	111fa <memset+0x2a>
		*(d_byte++) = c_byte;
   11200:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   11204:	3a01      	subs	r2, #1
   11206:	e7e6      	b.n	111d6 <memset+0x6>
		*(d_word++) = c_word;
   11208:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1120c:	e7ec      	b.n	111e8 <memset+0x18>
		*(d_byte++) = c_byte;
   1120e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   11212:	e7f0      	b.n	111f6 <memset+0x26>

00011214 <_stdout_hook_default>:
}
   11214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11218:	4770      	bx	lr

0001121a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1121a:	6843      	ldr	r3, [r0, #4]
}
   1121c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1121e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   11220:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   11222:	600b      	str	r3, [r1, #0]
}
   11224:	4770      	bx	lr

00011226 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11226:	6843      	ldr	r3, [r0, #4]
   11228:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1122a:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1122c:	4042      	eors	r2, r0
   1122e:	400a      	ands	r2, r1
   11230:	4042      	eors	r2, r0
    p_reg->OUT = value;
   11232:	605a      	str	r2, [r3, #4]
}
   11234:	2000      	movs	r0, #0
   11236:	4770      	bx	lr

00011238 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11238:	6843      	ldr	r3, [r0, #4]
}
   1123a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1123c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1123e:	6099      	str	r1, [r3, #8]
}
   11240:	4770      	bx	lr

00011242 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11242:	6843      	ldr	r3, [r0, #4]
}
   11244:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11246:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   11248:	60d9      	str	r1, [r3, #12]
}
   1124a:	4770      	bx	lr

0001124c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1124c:	6843      	ldr	r3, [r0, #4]
}
   1124e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11250:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11252:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   11254:	4059      	eors	r1, r3
    p_reg->OUT = value;
   11256:	6051      	str	r1, [r2, #4]
}
   11258:	4770      	bx	lr

0001125a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1125a:	68c3      	ldr	r3, [r0, #12]
{
   1125c:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1125e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11260:	b158      	cbz	r0, 1127a <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11262:	2400      	movs	r4, #0
   11264:	4281      	cmp	r1, r0
   11266:	d113      	bne.n	11290 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   11268:	6808      	ldr	r0, [r1, #0]
   1126a:	b95c      	cbnz	r4, 11284 <gpio_nrfx_manage_callback+0x2a>
   1126c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1126e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   11270:	42a1      	cmp	r1, r4
   11272:	d100      	bne.n	11276 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   11274:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11276:	2000      	movs	r0, #0
   11278:	6008      	str	r0, [r1, #0]
	if (set) {
   1127a:	b972      	cbnz	r2, 1129a <gpio_nrfx_manage_callback+0x40>
	return 0;
   1127c:	2000      	movs	r0, #0
}
   1127e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11280:	4628      	mov	r0, r5
   11282:	e7ef      	b.n	11264 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   11284:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11286:	6898      	ldr	r0, [r3, #8]
   11288:	4281      	cmp	r1, r0
	list->tail = node;
   1128a:	bf08      	it	eq
   1128c:	609c      	streq	r4, [r3, #8]
   1128e:	e7f2      	b.n	11276 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11290:	6805      	ldr	r5, [r0, #0]
	return node->next;
   11292:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11294:	2d00      	cmp	r5, #0
   11296:	d1f3      	bne.n	11280 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   11298:	b13a      	cbz	r2, 112aa <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1129a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1129c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1129e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   112a0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   112a2:	2800      	cmp	r0, #0
   112a4:	d1ea      	bne.n	1127c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   112a6:	6099      	str	r1, [r3, #8]
   112a8:	e7e9      	b.n	1127e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   112aa:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   112ae:	e7e6      	b.n	1127e <gpio_nrfx_manage_callback+0x24>

000112b0 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   112b0:	2301      	movs	r3, #1
   112b2:	fa03 f101 	lsl.w	r1, r3, r1
   112b6:	68c3      	ldr	r3, [r0, #12]
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   112bc:	bf18      	it	ne
   112be:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   112c2:	b112      	cbz	r2, 112ca <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   112c4:	6883      	ldr	r3, [r0, #8]
   112c6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   112c8:	4718      	bx	r3
   112ca:	6883      	ldr	r3, [r0, #8]
   112cc:	691b      	ldr	r3, [r3, #16]
   112ce:	e7fb      	b.n	112c8 <gpio_pin_set+0x18>

000112d0 <_spi_context_cs_control.isra.5>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   112d0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   112d2:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   112d4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   112d6:	b1fd      	cbz	r5, 11318 <_spi_context_cs_control.isra.5+0x48>
   112d8:	68ab      	ldr	r3, [r5, #8]
   112da:	b1eb      	cbz	r3, 11318 <_spi_context_cs_control.isra.5+0x48>
   112dc:	6818      	ldr	r0, [r3, #0]
   112de:	b1d8      	cbz	r0, 11318 <_spi_context_cs_control.isra.5+0x48>
		if (on) {
   112e0:	b151      	cbz	r1, 112f8 <_spi_context_cs_control.isra.5+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   112e2:	7a19      	ldrb	r1, [r3, #8]
   112e4:	2201      	movs	r2, #1
   112e6:	f7ff ffe3 	bl	112b0 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   112ea:	6823      	ldr	r3, [r4, #0]
   112ec:	689b      	ldr	r3, [r3, #8]
   112ee:	6858      	ldr	r0, [r3, #4]
}
   112f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   112f4:	f000 b9dc 	b.w	116b0 <z_impl_k_busy_wait>
			if (!force_off &&
   112f8:	b912      	cbnz	r2, 11300 <_spi_context_cs_control.isra.5+0x30>
   112fa:	88aa      	ldrh	r2, [r5, #4]
   112fc:	0492      	lsls	r2, r2, #18
   112fe:	d40b      	bmi.n	11318 <_spi_context_cs_control.isra.5+0x48>
			k_busy_wait(ctx->config->cs->delay);
   11300:	6858      	ldr	r0, [r3, #4]
   11302:	f000 f9d5 	bl	116b0 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   11306:	6823      	ldr	r3, [r4, #0]
   11308:	2200      	movs	r2, #0
   1130a:	689b      	ldr	r3, [r3, #8]
   1130c:	7a19      	ldrb	r1, [r3, #8]
   1130e:	6818      	ldr	r0, [r3, #0]
}
   11310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   11314:	f7ff bfcc 	b.w	112b0 <gpio_pin_set>
}
   11318:	bd38      	pop	{r3, r4, r5, pc}

0001131a <spi_context_unlock_unconditionally>:
{
   1131a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1131c:	2201      	movs	r2, #1
   1131e:	2100      	movs	r1, #0
{
   11320:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   11322:	f7ff ffd5 	bl	112d0 <_spi_context_cs_control.isra.5>
	if (!k_sem_count_get(&ctx->lock)) {
   11326:	68e3      	ldr	r3, [r4, #12]
   11328:	b923      	cbnz	r3, 11334 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   1132a:	1d20      	adds	r0, r4, #4
}
   1132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11330:	f7ff b84a 	b.w	103c8 <z_impl_k_sem_give>
   11334:	bd10      	pop	{r4, pc}

00011336 <spim_nrfx_pm_control>:

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
static int spim_nrfx_pm_control(const struct device *dev,
				uint32_t ctrl_command,
				void *context, device_pm_cb cb, void *arg)
{
   11336:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
   1133a:	68c7      	ldr	r7, [r0, #12]
	const struct spi_nrfx_config *config = get_dev_config(dev);

	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   1133c:	2901      	cmp	r1, #1
{
   1133e:	4699      	mov	r9, r3
   11340:	4605      	mov	r5, r0
   11342:	4616      	mov	r6, r2
   11344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   11346:	d126      	bne.n	11396 <spim_nrfx_pm_control+0x60>
		uint32_t new_state = *((const uint32_t *)context);
   11348:	f8d2 8000 	ldr.w	r8, [r2]

		if (new_state != data->pm_state) {
   1134c:	4598      	cmp	r8, r3
   1134e:	d010      	beq.n	11372 <spim_nrfx_pm_control+0x3c>
			switch (new_state) {
   11350:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   11354:	2a04      	cmp	r2, #4
   11356:	d820      	bhi.n	1139a <spim_nrfx_pm_control+0x64>
   11358:	e8df f002 	tbb	[pc, r2]
   1135c:	1f171703 	.word	0x1f171703
   11360:	17          	.byte	0x17
   11361:	00          	.byte	0x00
			case DEVICE_PM_ACTIVE_STATE:
				ret = init_spim(dev);
   11362:	f7fd fb73 	bl	ea4c <init_spim>
				/* Force reconfiguration before next transfer */
				data->ctx.config = NULL;
   11366:	2300      	movs	r3, #0
				break;

			default:
				ret = -ENOTSUP;
			}
			if (!ret) {
   11368:	4604      	mov	r4, r0
				data->ctx.config = NULL;
   1136a:	603b      	str	r3, [r7, #0]
			if (!ret) {
   1136c:	b910      	cbnz	r0, 11374 <spim_nrfx_pm_control+0x3e>
				data->pm_state = new_state;
   1136e:	f8c7 8054 	str.w	r8, [r7, #84]	; 0x54
	int ret = 0;
   11372:	2400      	movs	r4, #0
	} else {
		__ASSERT_NO_MSG(ctrl_command == DEVICE_PM_GET_POWER_STATE);
		*((uint32_t *)context) = data->pm_state;
	}

	if (cb) {
   11374:	f1b9 0f00 	cmp.w	r9, #0
   11378:	d004      	beq.n	11384 <spim_nrfx_pm_control+0x4e>
		cb(dev, ret, context, arg);
   1137a:	9b08      	ldr	r3, [sp, #32]
   1137c:	4632      	mov	r2, r6
   1137e:	4621      	mov	r1, r4
   11380:	4628      	mov	r0, r5
   11382:	47c8      	blx	r9
	}

	return ret;
}
   11384:	4620      	mov	r0, r4
   11386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (data->pm_state == DEVICE_PM_ACTIVE_STATE) {
   1138a:	2b01      	cmp	r3, #1
   1138c:	d1ef      	bne.n	1136e <spim_nrfx_pm_control+0x38>
					nrfx_spim_uninit(&config->spim);
   1138e:	6840      	ldr	r0, [r0, #4]
   11390:	f7fe f9f8 	bl	f784 <nrfx_spim_uninit>
			if (!ret) {
   11394:	e7eb      	b.n	1136e <spim_nrfx_pm_control+0x38>
		*((uint32_t *)context) = data->pm_state;
   11396:	6013      	str	r3, [r2, #0]
   11398:	e7eb      	b.n	11372 <spim_nrfx_pm_control+0x3c>
				ret = -ENOTSUP;
   1139a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1139e:	e7e9      	b.n	11374 <spim_nrfx_pm_control+0x3e>

000113a0 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   113a0:	b510      	push	{r4, lr}
   113a2:	4604      	mov	r4, r0
   113a4:	2200      	movs	r2, #0
   113a6:	200b      	movs	r0, #11
   113a8:	2101      	movs	r1, #1
   113aa:	f7fc fb7d 	bl	daa8 <z_arm_irq_priority_set>
   113ae:	4620      	mov	r0, r4
   113b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   113b4:	f7fd bb4a 	b.w	ea4c <init_spim>

000113b8 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   113b8:	68c0      	ldr	r0, [r0, #12]
{
   113ba:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   113bc:	6803      	ldr	r3, [r0, #0]
   113be:	428b      	cmp	r3, r1
   113c0:	d106      	bne.n	113d0 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   113c2:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
   113c6:	b934      	cbnz	r4, 113d6 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   113c8:	f7ff ffa7 	bl	1131a <spi_context_unlock_unconditionally>
	return 0;
   113cc:	4620      	mov	r0, r4
}
   113ce:	bd10      	pop	{r4, pc}
		return -EINVAL;
   113d0:	f06f 0015 	mvn.w	r0, #21
   113d4:	e7fb      	b.n	113ce <spi_nrfx_release+0x16>
		return -EBUSY;
   113d6:	f06f 000f 	mvn.w	r0, #15
   113da:	e7f8      	b.n	113ce <spi_nrfx_release+0x16>

000113dc <flash_nrf_write_protection>:
}
   113dc:	2000      	movs	r0, #0
   113de:	4770      	bx	lr

000113e0 <is_regular_addr_valid>:
{
   113e0:	b538      	push	{r3, r4, r5, lr}
   113e2:	4604      	mov	r4, r0
   113e4:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   113e6:	f000 f89d 	bl	11524 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   113ea:	4284      	cmp	r4, r0
   113ec:	d209      	bcs.n	11402 <is_regular_addr_valid+0x22>
   113ee:	2c00      	cmp	r4, #0
   113f0:	db07      	blt.n	11402 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   113f2:	42a8      	cmp	r0, r5
   113f4:	d305      	bcc.n	11402 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   113f6:	442c      	add	r4, r5
	    len > flash_size ||
   113f8:	4284      	cmp	r4, r0
   113fa:	bf8c      	ite	hi
   113fc:	2000      	movhi	r0, #0
   113fe:	2001      	movls	r0, #1
}
   11400:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   11402:	2000      	movs	r0, #0
   11404:	e7fc      	b.n	11400 <is_regular_addr_valid+0x20>

00011406 <flash_nrf_read>:
{
   11406:	b570      	push	{r4, r5, r6, lr}
   11408:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1140a:	4619      	mov	r1, r3
   1140c:	4628      	mov	r0, r5
{
   1140e:	4616      	mov	r6, r2
   11410:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   11412:	f7ff ffe5 	bl	113e0 <is_regular_addr_valid>
   11416:	b170      	cbz	r0, 11436 <flash_nrf_read+0x30>
	if (!len) {
   11418:	b184      	cbz	r4, 1143c <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   1141a:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
		return spm_request_read(data, addr, len);
   1141e:	4622      	mov	r2, r4
   11420:	4629      	mov	r1, r5
   11422:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   11424:	da03      	bge.n	1142e <flash_nrf_read+0x28>
}
   11426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   1142a:	f7ff be48 	b.w	110be <spm_request_read>
	memcpy(data, (void *)addr, len);
   1142e:	f7ff fea5 	bl	1117c <memcpy>
	return 0;
   11432:	2000      	movs	r0, #0
}
   11434:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11436:	f06f 0015 	mvn.w	r0, #21
   1143a:	e7fb      	b.n	11434 <flash_nrf_read+0x2e>
		return 0;
   1143c:	4620      	mov	r0, r4
   1143e:	e7f9      	b.n	11434 <flash_nrf_read+0x2e>

00011440 <uarte_nrfx_config_get>:
{
   11440:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   11442:	68c3      	ldr	r3, [r0, #12]
   11444:	3304      	adds	r3, #4
   11446:	e893 0003 	ldmia.w	r3, {r0, r1}
   1144a:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1144e:	2000      	movs	r0, #0
   11450:	4770      	bx	lr

00011452 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   11452:	6843      	ldr	r3, [r0, #4]
   11454:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   11456:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1145a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1145e:	4770      	bx	lr

00011460 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   11460:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   11462:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   11464:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11466:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1146a:	b148      	cbz	r0, 11480 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1146c:	2000      	movs	r0, #0
	*c = data->rx_data;
   1146e:	7d12      	ldrb	r2, [r2, #20]
   11470:	700a      	strb	r2, [r1, #0]
   11472:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   11476:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1147a:	2201      	movs	r2, #1
   1147c:	601a      	str	r2, [r3, #0]
	return 0;
   1147e:	4770      	bx	lr
		return -1;
   11480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11484:	4770      	bx	lr

00011486 <uarte_nrfx_poll_out>:
{
   11486:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1148a:	6843      	ldr	r3, [r0, #4]
{
   1148c:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   11490:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11492:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   11494:	f000 f906 	bl	116a4 <k_is_in_isr>
   11498:	bb98      	cbnz	r0, 11502 <uarte_nrfx_poll_out+0x7c>
   1149a:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1149c:	f04f 0801 	mov.w	r8, #1
   114a0:	f106 070c 	add.w	r7, r6, #12
   114a4:	e8d7 3fef 	ldaex	r3, [r7]
   114a8:	2b00      	cmp	r3, #0
   114aa:	d103      	bne.n	114b4 <uarte_nrfx_poll_out+0x2e>
   114ac:	e8c7 8fe2 	stlex	r2, r8, [r7]
   114b0:	2a00      	cmp	r2, #0
   114b2:	d1f7      	bne.n	114a4 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   114b4:	d007      	beq.n	114c6 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   114b6:	2021      	movs	r0, #33	; 0x21
   114b8:	2100      	movs	r1, #0
   114ba:	3d01      	subs	r5, #1
   114bc:	f7fe ff5e 	bl	1037c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   114c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   114c4:	d1ee      	bne.n	114a4 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   114c6:	2300      	movs	r3, #0
   114c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   114cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   114d0:	f10d 0307 	add.w	r3, sp, #7
   114d4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   114d8:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   114da:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   114de:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   114e2:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   114e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   114e8:	b923      	cbnz	r3, 114f4 <uarte_nrfx_poll_out+0x6e>
   114ea:	2001      	movs	r0, #1
   114ec:	f000 f80d 	bl	1150a <nrfx_busy_wait>
   114f0:	3d01      	subs	r5, #1
   114f2:	d1f7      	bne.n	114e4 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   114f4:	2301      	movs	r3, #1
   114f6:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   114f8:	2300      	movs	r3, #0
   114fa:	60f3      	str	r3, [r6, #12]
}
   114fc:	b002      	add	sp, #8
   114fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   11502:	2301      	movs	r3, #1
   11504:	60f3      	str	r3, [r6, #12]
   11506:	e7de      	b.n	114c6 <uarte_nrfx_poll_out+0x40>

00011508 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11508:	4700      	bx	r0

0001150a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1150a:	f000 b8d1 	b.w	116b0 <z_impl_k_busy_wait>

0001150e <nrfx_clock_enable>:
{
   1150e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   11510:	2005      	movs	r0, #5
   11512:	f7fc fabb 	bl	da8c <arch_irq_is_enabled>
   11516:	b920      	cbnz	r0, 11522 <nrfx_clock_enable+0x14>
}
   11518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1151c:	2005      	movs	r0, #5
   1151e:	f7fc ba91 	b.w	da44 <arch_irq_enable>
   11522:	bd08      	pop	{r3, pc}

00011524 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   11524:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   11528:	4770      	bx	lr

0001152a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1152a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1152e:	4770      	bx	lr

00011530 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   11530:	f44f 7080 	mov.w	r0, #256	; 0x100
   11534:	4770      	bx	lr

00011536 <device_pm_control_nop>:
			  void *unused_context,
			  device_pm_cb cb,
			  void *unused_arg)
{
	return -ENOTSUP;
}
   11536:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1153a:	4770      	bx	lr

0001153c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1153c:	f7ff bdbe 	b.w	110bc <z_clock_idle_exit>

00011540 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11540:	4603      	mov	r3, r0
   11542:	b920      	cbnz	r0, 1154e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11544:	f3ef 8205 	mrs	r2, IPSR
   11548:	b90a      	cbnz	r2, 1154e <z_reschedule_irqlock+0xe>
   1154a:	f7fc ba25 	b.w	d998 <arch_swap>
   1154e:	f383 8811 	msr	BASEPRI, r3
   11552:	f3bf 8f6f 	isb	sy
}
   11556:	4770      	bx	lr

00011558 <z_reschedule_unlocked>:
	__asm__ volatile(
   11558:	f04f 0320 	mov.w	r3, #32
   1155c:	f3ef 8011 	mrs	r0, BASEPRI
   11560:	f383 8811 	msr	BASEPRI, r3
   11564:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   11568:	f7ff bfea 	b.w	11540 <z_reschedule_irqlock>

0001156c <unpend_thread_no_timeout>:
{
   1156c:	b510      	push	{r4, lr}
   1156e:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   11570:	4601      	mov	r1, r0
   11572:	6880      	ldr	r0, [r0, #8]
   11574:	f7fe fc78 	bl	fe68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11578:	7b63      	ldrb	r3, [r4, #13]
   1157a:	f023 0302 	bic.w	r3, r3, #2
   1157e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   11580:	2300      	movs	r3, #0
   11582:	60a3      	str	r3, [r4, #8]
}
   11584:	bd10      	pop	{r4, pc}

00011586 <z_priq_dumb_best>:
	return list->head == list;
   11586:	6803      	ldr	r3, [r0, #0]
}
   11588:	4298      	cmp	r0, r3
   1158a:	bf14      	ite	ne
   1158c:	4618      	movne	r0, r3
   1158e:	2000      	moveq	r0, #0
   11590:	4770      	bx	lr

00011592 <z_ready_thread>:
{
   11592:	b510      	push	{r4, lr}
   11594:	f04f 0320 	mov.w	r3, #32
   11598:	f3ef 8411 	mrs	r4, BASEPRI
   1159c:	f383 8811 	msr	BASEPRI, r3
   115a0:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   115a4:	f7fe fcb6 	bl	ff14 <ready_thread>
	__asm__ volatile(
   115a8:	f384 8811 	msr	BASEPRI, r4
   115ac:	f3bf 8f6f 	isb	sy
}
   115b0:	bd10      	pop	{r4, pc}

000115b2 <z_thread_timeout>:
{
   115b2:	b570      	push	{r4, r5, r6, lr}
   115b4:	4604      	mov	r4, r0
	__asm__ volatile(
   115b6:	f04f 0320 	mov.w	r3, #32
   115ba:	f3ef 8611 	mrs	r6, BASEPRI
   115be:	f383 8811 	msr	BASEPRI, r3
   115c2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   115c6:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   115ca:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   115ce:	b113      	cbz	r3, 115d6 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   115d0:	4628      	mov	r0, r5
   115d2:	f7ff ffcb 	bl	1156c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   115d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   115da:	4628      	mov	r0, r5
   115dc:	f023 0314 	bic.w	r3, r3, #20
   115e0:	f804 3c0b 	strb.w	r3, [r4, #-11]
   115e4:	f7fe fc96 	bl	ff14 <ready_thread>
	__asm__ volatile(
   115e8:	f386 8811 	msr	BASEPRI, r6
   115ec:	f3bf 8f6f 	isb	sy
}
   115f0:	bd70      	pop	{r4, r5, r6, pc}

000115f2 <add_to_waitq_locked>:
{
   115f2:	b538      	push	{r3, r4, r5, lr}
   115f4:	4604      	mov	r4, r0
   115f6:	460d      	mov	r5, r1
	unready_thread(thread);
   115f8:	f7fe fde4 	bl	101c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   115fc:	7b63      	ldrb	r3, [r4, #13]
   115fe:	f043 0302 	orr.w	r3, r3, #2
   11602:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11604:	b17d      	cbz	r5, 11626 <add_to_waitq_locked+0x34>
   11606:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   11608:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1160a:	429d      	cmp	r5, r3
   1160c:	d012      	beq.n	11634 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1160e:	b18b      	cbz	r3, 11634 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   11610:	f994 200e 	ldrsb.w	r2, [r4, #14]
   11614:	f993 100e 	ldrsb.w	r1, [r3, #14]
   11618:	4291      	cmp	r1, r2
   1161a:	dd05      	ble.n	11628 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   1161c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1161e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   11622:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11624:	605c      	str	r4, [r3, #4]
}
   11626:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   11628:	6869      	ldr	r1, [r5, #4]
   1162a:	428b      	cmp	r3, r1
   1162c:	d002      	beq.n	11634 <add_to_waitq_locked+0x42>
   1162e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11630:	2b00      	cmp	r3, #0
   11632:	d1ef      	bne.n	11614 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   11634:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   11636:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   11638:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1163a:	686b      	ldr	r3, [r5, #4]
   1163c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1163e:	606c      	str	r4, [r5, #4]
}
   11640:	e7f1      	b.n	11626 <add_to_waitq_locked+0x34>

00011642 <z_unpend_first_thread>:
{
   11642:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11644:	f04f 0320 	mov.w	r3, #32
   11648:	f3ef 8211 	mrs	r2, BASEPRI
   1164c:	f383 8811 	msr	BASEPRI, r3
   11650:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   11654:	f7ff ff97 	bl	11586 <z_priq_dumb_best>
   11658:	4604      	mov	r4, r0
	__asm__ volatile(
   1165a:	f382 8811 	msr	BASEPRI, r2
   1165e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   11662:	b188      	cbz	r0, 11688 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   11664:	f04f 0320 	mov.w	r3, #32
   11668:	f3ef 8511 	mrs	r5, BASEPRI
   1166c:	f383 8811 	msr	BASEPRI, r3
   11670:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   11674:	f7ff ff7a 	bl	1156c <unpend_thread_no_timeout>
	__asm__ volatile(
   11678:	f385 8811 	msr	BASEPRI, r5
   1167c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   11680:	f104 0018 	add.w	r0, r4, #24
   11684:	f000 f818 	bl	116b8 <z_abort_timeout>
}
   11688:	4620      	mov	r0, r4
   1168a:	bd38      	pop	{r3, r4, r5, pc}

0001168c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1168c:	b13a      	cbz	r2, 1169e <z_impl_k_sem_init+0x12>
   1168e:	428a      	cmp	r2, r1
   11690:	d305      	bcc.n	1169e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   11692:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   11696:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   1169a:	2000      	movs	r0, #0
   1169c:	4770      	bx	lr
		return -EINVAL;
   1169e:	f06f 0015 	mvn.w	r0, #21
}
   116a2:	4770      	bx	lr

000116a4 <k_is_in_isr>:
   116a4:	f3ef 8005 	mrs	r0, IPSR
}
   116a8:	3000      	adds	r0, #0
   116aa:	bf18      	it	ne
   116ac:	2001      	movne	r0, #1
   116ae:	4770      	bx	lr

000116b0 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   116b0:	f7fb bbe2 	b.w	ce78 <arch_busy_wait>

000116b4 <k_thread_name_get>:
}
   116b4:	2000      	movs	r0, #0
   116b6:	4770      	bx	lr

000116b8 <z_abort_timeout>:
{
   116b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   116ba:	f04f 0220 	mov.w	r2, #32
   116be:	f3ef 8411 	mrs	r4, BASEPRI
   116c2:	f382 8811 	msr	BASEPRI, r2
   116c6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   116ca:	6803      	ldr	r3, [r0, #0]
   116cc:	b13b      	cbz	r3, 116de <z_abort_timeout+0x26>
			remove_timeout(to);
   116ce:	f7fe ff5b 	bl	10588 <remove_timeout>
			ret = 0;
   116d2:	2000      	movs	r0, #0
	__asm__ volatile(
   116d4:	f384 8811 	msr	BASEPRI, r4
   116d8:	f3bf 8f6f 	isb	sy
}
   116dc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   116de:	f06f 0015 	mvn.w	r0, #21
   116e2:	e7f7      	b.n	116d4 <z_abort_timeout+0x1c>

000116e4 <z_get_next_timeout_expiry>:
{
   116e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   116e6:	f04f 0320 	mov.w	r3, #32
   116ea:	f3ef 8411 	mrs	r4, BASEPRI
   116ee:	f383 8811 	msr	BASEPRI, r3
   116f2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   116f6:	f7fe ff61 	bl	105bc <next_timeout>
	__asm__ volatile(
   116fa:	f384 8811 	msr	BASEPRI, r4
   116fe:	f3bf 8f6f 	isb	sy
}
   11702:	bd10      	pop	{r4, pc}

00011704 <z_set_timeout_expiry>:
{
   11704:	b570      	push	{r4, r5, r6, lr}
   11706:	4604      	mov	r4, r0
   11708:	460e      	mov	r6, r1
	__asm__ volatile(
   1170a:	f04f 0320 	mov.w	r3, #32
   1170e:	f3ef 8511 	mrs	r5, BASEPRI
   11712:	f383 8811 	msr	BASEPRI, r3
   11716:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1171a:	f7fe ff4f 	bl	105bc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1171e:	2801      	cmp	r0, #1
   11720:	dd05      	ble.n	1172e <z_set_timeout_expiry+0x2a>
   11722:	42a0      	cmp	r0, r4
   11724:	dd03      	ble.n	1172e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   11726:	4631      	mov	r1, r6
   11728:	4620      	mov	r0, r4
   1172a:	f7fc f89b 	bl	d864 <z_clock_set_timeout>
	__asm__ volatile(
   1172e:	f385 8811 	msr	BASEPRI, r5
   11732:	f3bf 8f6f 	isb	sy
}
   11736:	bd70      	pop	{r4, r5, r6, pc}

00011738 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   11738:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1173a:	f7ff f85d 	bl	107f8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1173e:	bd08      	pop	{r3, pc}

00011740 <k_heap_init>:
{
   11740:	b410      	push	{r4}
   11742:	f100 040c 	add.w	r4, r0, #12
   11746:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1174a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1174c:	f7ff bb89 	b.w	10e62 <sys_heap_init>

00011750 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   11750:	4770      	bx	lr
