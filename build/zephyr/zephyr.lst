
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	200112a8 	.word	0x200112a8
    c004:	0000de55 	.word	0x0000de55
    c008:	0001128f 	.word	0x0001128f
    c00c:	0000de85 	.word	0x0000de85
    c010:	0000de85 	.word	0x0000de85
    c014:	0000de85 	.word	0x0000de85
    c018:	0000de85 	.word	0x0000de85
    c01c:	0000de85 	.word	0x0000de85
	...
    c02c:	0000dbcd 	.word	0x0000dbcd
    c030:	0000de85 	.word	0x0000de85
    c034:	00000000 	.word	0x00000000
    c038:	0000db75 	.word	0x0000db75
    c03c:	0001125b 	.word	0x0001125b

0000c040 <_irq_vector_table>:
    c040:	0000de15 0000de15 0000de15 0000de15     ................
    c050:	0000de15 0000de15 0000de15 0000de15     ................
    c060:	0000de15 0000de15 0000de15 0000de15     ................
    c070:	0000de15 0000de15 0000de15 0000de15     ................
    c080:	0000de15 0000de15 0000de15 0000de15     ................
    c090:	0000de15 0000de15 0000de15 0000de15     ................
    c0a0:	0000de15 0000de15 0000de15 0000de15     ................
    c0b0:	0000de15 0000de15 0000de15 0000de15     ................
    c0c0:	0000de15 0000de15 0000de15 0000de15     ................
    c0d0:	0000de15 0000de15 0000de15 0000de15     ................
    c0e0:	0000de15 0000de15 0000de15 0000de15     ................
    c0f0:	0000de15 0000de15 0000de15 0000de15     ................
    c100:	0000de15 0000de15 0000de15 0000de15     ................
    c110:	0000de15 0000de15 0000de15 0000de15     ................
    c120:	0000de15 0000de15 0000de15 0000de15     ................
    c130:	0000de15 0000de15 0000de15 0000de15     ................
    c140:	0000de15                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00006e58 00000001 0000c000 0000c000     Xn..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <flash_at45_get_parameters>:
flash_at45_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_at45_parameters;
}
    c538:	4800      	ldr	r0, [pc, #0]	; (c53c <flash_at45_get_parameters+0x4>)
    c53a:	4770      	bx	lr
    c53c:	00011ce8 	.word	0x00011ce8

0000c540 <wait_until_ready>:
{
    c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c544:	4605      	mov	r5, r0
	const uint8_t opcode = CMD_READ_STATUS;
    c546:	2605      	movs	r6, #5
	const struct spi_buf tx_buf[] = {
    c548:	2401      	movs	r4, #1
{
    c54a:	b08c      	sub	sp, #48	; 0x30
	const struct spi_buf tx_buf[] = {
    c54c:	f10d 0707 	add.w	r7, sp, #7
	const struct spi_buf rx_buf[] = {
    c550:	2300      	movs	r3, #0
    c552:	e9cd 3408 	strd	r3, r4, [sp, #32]
    c556:	f10d 0306 	add.w	r3, sp, #6
    c55a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c55e:	ab02      	add	r3, sp, #8
    c560:	e9cd 3404 	strd	r3, r4, [sp, #16]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c564:	ab08      	add	r3, sp, #32
    c566:	9306      	str	r3, [sp, #24]
    c568:	2302      	movs	r3, #2
	err = spi_transceive(get_dev_data(dev)->spi,
    c56a:	6869      	ldr	r1, [r5, #4]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c56c:	9307      	str	r3, [sp, #28]
	err = spi_transceive(get_dev_data(dev)->spi,
    c56e:	68eb      	ldr	r3, [r5, #12]
	const uint8_t opcode = CMD_READ_STATUS;
    c570:	f88d 6007 	strb.w	r6, [sp, #7]
	const struct spi_buf tx_buf[] = {
    c574:	e9cd 7402 	strd	r7, r4, [sp, #8]
	err = spi_transceive(get_dev_data(dev)->spi,
    c578:	6818      	ldr	r0, [r3, #0]
    c57a:	3104      	adds	r1, #4
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    c57c:	6883      	ldr	r3, [r0, #8]
    c57e:	aa04      	add	r2, sp, #16
    c580:	f8d3 8000 	ldr.w	r8, [r3]
    c584:	ab06      	add	r3, sp, #24
    c586:	47c0      	blx	r8
	if (err != 0) {
    c588:	4602      	mov	r2, r0
    c58a:	b938      	cbnz	r0, c59c <wait_until_ready+0x5c>
	} while (err == 0 && (status & STATUS_REG_WRITE_IN_PROGRESS));
    c58c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c590:	07db      	lsls	r3, r3, #31
    c592:	d4dd      	bmi.n	c550 <wait_until_ready+0x10>
}
    c594:	4610      	mov	r0, r2
    c596:	b00c      	add	sp, #48	; 0x30
    c598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c59c:	2301      	movs	r3, #1
    c59e:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    c5a2:	4907      	ldr	r1, [pc, #28]	; (c5c0 <wait_until_ready+0x80>)
    c5a4:	f363 0007 	bfi	r0, r3, #0, #8
    c5a8:	4b06      	ldr	r3, [pc, #24]	; (c5c4 <wait_until_ready+0x84>)
    c5aa:	1a5b      	subs	r3, r3, r1
    c5ac:	08db      	lsrs	r3, r3, #3
    c5ae:	f363 108f 	bfi	r0, r3, #6, #10
    c5b2:	4905      	ldr	r1, [pc, #20]	; (c5c8 <wait_until_ready+0x88>)
    c5b4:	23bd      	movs	r3, #189	; 0xbd
    c5b6:	f004 fd7c 	bl	110b2 <log_string_sync>
		return -EIO;
    c5ba:	f06f 0204 	mvn.w	r2, #4
	return err;
    c5be:	e7e9      	b.n	c594 <wait_until_ready+0x54>
    c5c0:	00011c34 	.word	0x00011c34
    c5c4:	00011c6c 	.word	0x00011c6c
    c5c8:	00011fcb 	.word	0x00011fcb

0000c5cc <perform_erase_op>:
{
    c5cc:	b510      	push	{r4, lr}
		(offset >> 16) & 0xFF,
    c5ce:	1413      	asrs	r3, r2, #16
{
    c5d0:	b086      	sub	sp, #24
	uint8_t const op_and_addr[] = {
    c5d2:	f88d 3005 	strb.w	r3, [sp, #5]
	const struct spi_buf tx_buf[] = {
    c5d6:	ab01      	add	r3, sp, #4
    c5d8:	9302      	str	r3, [sp, #8]
    c5da:	2304      	movs	r3, #4
    c5dc:	9303      	str	r3, [sp, #12]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c5de:	ab02      	add	r3, sp, #8
    c5e0:	9304      	str	r3, [sp, #16]
    c5e2:	2301      	movs	r3, #1
	uint8_t const op_and_addr[] = {
    c5e4:	f88d 1004 	strb.w	r1, [sp, #4]
    c5e8:	ba52      	rev16	r2, r2
	err = spi_write(get_dev_data(dev)->spi,
    c5ea:	6841      	ldr	r1, [r0, #4]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c5ec:	9305      	str	r3, [sp, #20]
	err = spi_write(get_dev_data(dev)->spi,
    c5ee:	68c3      	ldr	r3, [r0, #12]
	uint8_t const op_and_addr[] = {
    c5f0:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    c5f4:	4604      	mov	r4, r0
	err = spi_write(get_dev_data(dev)->spi,
    c5f6:	aa04      	add	r2, sp, #16
    c5f8:	3104      	adds	r1, #4
    c5fa:	6818      	ldr	r0, [r3, #0]
    c5fc:	f004 fa14 	bl	10a28 <spi_write>
	if (err != 0) {
    c600:	4602      	mov	r2, r0
    c602:	b198      	cbz	r0, c62c <perform_erase_op+0x60>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c604:	2301      	movs	r3, #1
    c606:	f04f 0000 	mov.w	r0, #0
    c60a:	490c      	ldr	r1, [pc, #48]	; (c63c <perform_erase_op+0x70>)
    c60c:	f363 0007 	bfi	r0, r3, #0, #8
    c610:	4b0b      	ldr	r3, [pc, #44]	; (c640 <perform_erase_op+0x74>)
    c612:	1a5b      	subs	r3, r3, r1
    c614:	08db      	lsrs	r3, r3, #3
    c616:	f363 108f 	bfi	r0, r3, #6, #10
    c61a:	490a      	ldr	r1, [pc, #40]	; (c644 <perform_erase_op+0x78>)
    c61c:	f240 13d5 	movw	r3, #469	; 0x1d5
    c620:	f004 fd47 	bl	110b2 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c624:	f06f 0004 	mvn.w	r0, #4
}
    c628:	b006      	add	sp, #24
    c62a:	bd10      	pop	{r4, pc}
		err = wait_until_ready(dev);
    c62c:	4620      	mov	r0, r4
    c62e:	f7ff ff87 	bl	c540 <wait_until_ready>
	return (err != 0) ? -EIO : 0;
    c632:	2800      	cmp	r0, #0
    c634:	bf18      	it	ne
    c636:	f06f 0004 	mvnne.w	r0, #4
    c63a:	e7f5      	b.n	c628 <perform_erase_op+0x5c>
    c63c:	00011c34 	.word	0x00011c34
    c640:	00011c6c 	.word	0x00011c6c
    c644:	00011fcb 	.word	0x00011fcb

0000c648 <spi_flash_at45_write>:
{
    c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (addr >= 0 && (addr + size) <= chip_size);
    c64c:	f1b1 0a00 	subs.w	sl, r1, #0
{
    c650:	b089      	sub	sp, #36	; 0x24
    c652:	4606      	mov	r6, r0
    c654:	4617      	mov	r7, r2
    c656:	461d      	mov	r5, r3
	return (addr >= 0 && (addr + size) <= chip_size);
    c658:	db59      	blt.n	c70e <spi_flash_at45_write+0xc6>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    c65a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return (addr >= 0 && (addr + size) <= chip_size);
    c65e:	eb0a 0203 	add.w	r2, sl, r3
    c662:	f8d8 1020 	ldr.w	r1, [r8, #32]
    c666:	4291      	cmp	r1, r2
    c668:	d351      	bcc.n	c70e <spi_flash_at45_write+0xc6>
	acquire(dev);
    c66a:	f004 f9d5 	bl	10a18 <acquire>
	uint8_t const op_and_addr[] = {
    c66e:	f04f 0958 	mov.w	r9, #88	; 0x58
	const struct spi_buf tx_buf[] = {
    c672:	f04f 0b04 	mov.w	fp, #4
	while (len) {
    c676:	2d00      	cmp	r5, #0
    c678:	d039      	beq.n	c6ee <spi_flash_at45_write+0xa6>
			offset - (offset & (cfg->page_size - 1));
    c67a:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
	err = spi_write(get_dev_data(dev)->spi,
    c67e:	6871      	ldr	r1, [r6, #4]
			offset - (offset & (cfg->page_size - 1));
    c680:	4254      	negs	r4, r2
		off_t current_page_start =
    c682:	ea04 040a 	and.w	r4, r4, sl
		if (chunk_len > (current_page_end - offset)) {
    c686:	eba4 040a 	sub.w	r4, r4, sl
    c68a:	4414      	add	r4, r2
		(offset >> 16) & 0xFF,
    c68c:	ea4f 422a 	mov.w	r2, sl, asr #16
	uint8_t const op_and_addr[] = {
    c690:	f88d 2005 	strb.w	r2, [sp, #5]
    c694:	fa9a f29a 	rev16.w	r2, sl
    c698:	f8ad 2006 	strh.w	r2, [sp, #6]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c69c:	aa04      	add	r2, sp, #16
    c69e:	42ac      	cmp	r4, r5
    c6a0:	9202      	str	r2, [sp, #8]
    c6a2:	f04f 0202 	mov.w	r2, #2
    c6a6:	bf28      	it	cs
    c6a8:	462c      	movcs	r4, r5
	err = spi_write(get_dev_data(dev)->spi,
    c6aa:	68f0      	ldr	r0, [r6, #12]
	uint8_t const op_and_addr[] = {
    c6ac:	f88d 9004 	strb.w	r9, [sp, #4]
	const struct spi_buf tx_buf[] = {
    c6b0:	ab01      	add	r3, sp, #4
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c6b2:	9203      	str	r2, [sp, #12]
	err = spi_write(get_dev_data(dev)->spi,
    c6b4:	3104      	adds	r1, #4
    c6b6:	aa02      	add	r2, sp, #8
    c6b8:	6800      	ldr	r0, [r0, #0]
	const struct spi_buf tx_buf[] = {
    c6ba:	e9cd 3b04 	strd	r3, fp, [sp, #16]
    c6be:	e9cd 7406 	strd	r7, r4, [sp, #24]
	err = spi_write(get_dev_data(dev)->spi,
    c6c2:	f004 f9b1 	bl	10a28 <spi_write>
	if (err != 0) {
    c6c6:	4602      	mov	r2, r0
    c6c8:	b1c0      	cbz	r0, c6fc <spi_flash_at45_write+0xb4>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c6ca:	2301      	movs	r3, #1
    c6cc:	f04f 0000 	mov.w	r0, #0
    c6d0:	4910      	ldr	r1, [pc, #64]	; (c714 <spi_flash_at45_write+0xcc>)
    c6d2:	f363 0007 	bfi	r0, r3, #0, #8
    c6d6:	4b10      	ldr	r3, [pc, #64]	; (c718 <spi_flash_at45_write+0xd0>)
    c6d8:	1a5b      	subs	r3, r3, r1
    c6da:	08db      	lsrs	r3, r3, #3
    c6dc:	f363 108f 	bfi	r0, r3, #6, #10
    c6e0:	490e      	ldr	r1, [pc, #56]	; (c71c <spi_flash_at45_write+0xd4>)
    c6e2:	f240 1349 	movw	r3, #329	; 0x149
    c6e6:	f004 fce4 	bl	110b2 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c6ea:	f06f 0504 	mvn.w	r5, #4
	release(dev);
    c6ee:	4630      	mov	r0, r6
    c6f0:	f004 f98e 	bl	10a10 <release>
}
    c6f4:	4628      	mov	r0, r5
    c6f6:	b009      	add	sp, #36	; 0x24
    c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = wait_until_ready(dev);
    c6fc:	4630      	mov	r0, r6
    c6fe:	f7ff ff1f 	bl	c540 <wait_until_ready>
	return (err != 0) ? -EIO : 0;
    c702:	2800      	cmp	r0, #0
    c704:	d1f1      	bne.n	c6ea <spi_flash_at45_write+0xa2>
		data    = (uint8_t *)data + chunk_len;
    c706:	4427      	add	r7, r4
		offset += chunk_len;
    c708:	44a2      	add	sl, r4
		len    -= chunk_len;
    c70a:	1b2d      	subs	r5, r5, r4
    c70c:	e7b3      	b.n	c676 <spi_flash_at45_write+0x2e>
		return -ENODEV;
    c70e:	f06f 0512 	mvn.w	r5, #18
    c712:	e7ef      	b.n	c6f4 <spi_flash_at45_write+0xac>
    c714:	00011c34 	.word	0x00011c34
    c718:	00011c6c 	.word	0x00011c6c
    c71c:	00011fcb 	.word	0x00011fcb

0000c720 <send_cmd_op>:
{
    c720:	b530      	push	{r4, r5, lr}
    c722:	b087      	sub	sp, #28
	const struct spi_buf tx_buf[] = {
    c724:	f10d 0307 	add.w	r3, sp, #7
    c728:	9302      	str	r3, [sp, #8]
    c72a:	2301      	movs	r3, #1
{
    c72c:	4615      	mov	r5, r2
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c72e:	aa02      	add	r2, sp, #8
{
    c730:	f88d 1007 	strb.w	r1, [sp, #7]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c734:	e9cd 2304 	strd	r2, r3, [sp, #16]
	err = spi_write(get_dev_data(dev)->spi,
    c738:	6841      	ldr	r1, [r0, #4]
	const struct spi_buf tx_buf[] = {
    c73a:	9303      	str	r3, [sp, #12]
	err = spi_write(get_dev_data(dev)->spi,
    c73c:	68c3      	ldr	r3, [r0, #12]
    c73e:	aa04      	add	r2, sp, #16
    c740:	3104      	adds	r1, #4
    c742:	6818      	ldr	r0, [r3, #0]
    c744:	f004 f970 	bl	10a28 <spi_write>
	if (err != 0) {
    c748:	4604      	mov	r4, r0
    c74a:	b1a8      	cbz	r0, c778 <send_cmd_op+0x58>
		LOG_ERR("SPI transaction failed with code: %d/%u", err, __LINE__);
    c74c:	2301      	movs	r3, #1
    c74e:	f04f 0000 	mov.w	r0, #0
    c752:	4a0b      	ldr	r2, [pc, #44]	; (c780 <send_cmd_op+0x60>)
    c754:	f363 0007 	bfi	r0, r3, #0, #8
    c758:	4b0a      	ldr	r3, [pc, #40]	; (c784 <send_cmd_op+0x64>)
    c75a:	490b      	ldr	r1, [pc, #44]	; (c788 <send_cmd_op+0x68>)
    c75c:	1a9b      	subs	r3, r3, r2
    c75e:	08db      	lsrs	r3, r3, #3
    c760:	f363 108f 	bfi	r0, r3, #6, #10
    c764:	4622      	mov	r2, r4
    c766:	f240 1387 	movw	r3, #391	; 0x187
    c76a:	f004 fca2 	bl	110b2 <log_string_sync>
		return -EIO;
    c76e:	f06f 0404 	mvn.w	r4, #4
}
    c772:	4620      	mov	r0, r4
    c774:	b007      	add	sp, #28
    c776:	bd30      	pop	{r4, r5, pc}
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    c778:	4628      	mov	r0, r5
    c77a:	f005 f8c1 	bl	11900 <z_impl_k_busy_wait>
    c77e:	e7f8      	b.n	c772 <send_cmd_op+0x52>
    c780:	00011c34 	.word	0x00011c34
    c784:	00011c6c 	.word	0x00011c6c
    c788:	00011fcb 	.word	0x00011fcb

0000c78c <spi_flash_at45_init>:
{
    c78c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct spi_flash_at45_config *dev_config = get_dev_config(dev);
    c790:	6845      	ldr	r5, [r0, #4]
{
    c792:	4604      	mov	r4, r0
	struct spi_flash_at45_data *dev_data = get_dev_data(dev);
    c794:	68c6      	ldr	r6, [r0, #12]
{
    c796:	b091      	sub	sp, #68	; 0x44
	dev_data->spi = device_get_binding(dev_config->spi_bus);
    c798:	6828      	ldr	r0, [r5, #0]
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c79a:	f003 fa33 	bl	fc04 <z_impl_device_get_binding>
    c79e:	6030      	str	r0, [r6, #0]
	if (!dev_data->spi) {
    c7a0:	b990      	cbnz	r0, c7c8 <spi_flash_at45_init+0x3c>
		LOG_ERR("Cannot find %s", dev_config->spi_bus);
    c7a2:	2301      	movs	r3, #1
    c7a4:	4a49      	ldr	r2, [pc, #292]	; (c8cc <spi_flash_at45_init+0x140>)
    c7a6:	f363 0007 	bfi	r0, r3, #0, #8
    c7aa:	4b49      	ldr	r3, [pc, #292]	; (c8d0 <spi_flash_at45_init+0x144>)
    c7ac:	1a9b      	subs	r3, r3, r2
    c7ae:	08db      	lsrs	r3, r3, #3
    c7b0:	682a      	ldr	r2, [r5, #0]
    c7b2:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot find %s", dev_config->cs_gpio);
    c7b6:	4947      	ldr	r1, [pc, #284]	; (c8d4 <spi_flash_at45_init+0x148>)
    c7b8:	f004 fc7b 	bl	110b2 <log_string_sync>
			return -ENODEV;
    c7bc:	f06f 0512 	mvn.w	r5, #18
}
    c7c0:	4628      	mov	r0, r5
    c7c2:	b011      	add	sp, #68	; 0x44
    c7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dev_config->cs_gpio) {
    c7c8:	6928      	ldr	r0, [r5, #16]
    c7ca:	b1a0      	cbz	r0, c7f6 <spi_flash_at45_init+0x6a>
    c7cc:	f003 fa1a 	bl	fc04 <z_impl_device_get_binding>
		dev_data->spi_cs.gpio_dev =
    c7d0:	6070      	str	r0, [r6, #4]
		if (!dev_data->spi_cs.gpio_dev) {
    c7d2:	b950      	cbnz	r0, c7ea <spi_flash_at45_init+0x5e>
			LOG_ERR("Cannot find %s", dev_config->cs_gpio);
    c7d4:	2301      	movs	r3, #1
    c7d6:	4a3d      	ldr	r2, [pc, #244]	; (c8cc <spi_flash_at45_init+0x140>)
    c7d8:	f363 0007 	bfi	r0, r3, #0, #8
    c7dc:	4b3c      	ldr	r3, [pc, #240]	; (c8d0 <spi_flash_at45_init+0x144>)
    c7de:	1a9b      	subs	r3, r3, r2
    c7e0:	08db      	lsrs	r3, r3, #3
    c7e2:	f363 108f 	bfi	r0, r3, #6, #10
    c7e6:	692a      	ldr	r2, [r5, #16]
    c7e8:	e7e5      	b.n	c7b6 <spi_flash_at45_init+0x2a>
		dev_data->spi_cs.gpio_pin = dev_config->cs_pin;
    c7ea:	7d2b      	ldrb	r3, [r5, #20]
    c7ec:	7333      	strb	r3, [r6, #12]
		dev_data->spi_cs.gpio_dt_flags = dev_config->cs_dt_flags;
    c7ee:	7d6b      	ldrb	r3, [r5, #21]
    c7f0:	7373      	strb	r3, [r6, #13]
		dev_data->spi_cs.delay = 0;
    c7f2:	2300      	movs	r3, #0
    c7f4:	60b3      	str	r3, [r6, #8]
	acquire(dev);
    c7f6:	4620      	mov	r0, r4
    c7f8:	f004 f90e 	bl	10a18 <acquire>
	send_cmd_op(dev, CMD_EXIT_DPD, dev_config->t_exit_dpd);
    c7fc:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    c7fe:	21ab      	movs	r1, #171	; 0xab
    c800:	4620      	mov	r0, r4
    c802:	f7ff ff8d 	bl	c720 <send_cmd_op>
	const uint8_t opcode = CMD_READ_ID;
    c806:	239f      	movs	r3, #159	; 0x9f
    c808:	f88d 3013 	strb.w	r3, [sp, #19]
	const struct spi_buf tx_buf[] = {
    c80c:	f10d 0313 	add.w	r3, sp, #19
    c810:	9306      	str	r3, [sp, #24]
	const struct spi_buf rx_buf[] = {
    c812:	2200      	movs	r2, #0
	const struct spi_buf tx_buf[] = {
    c814:	2301      	movs	r3, #1
	const struct spi_buf rx_buf[] = {
    c816:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c81a:	aa06      	add	r2, sp, #24
	const struct spi_buf tx_buf[] = {
    c81c:	9307      	str	r3, [sp, #28]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c81e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c822:	ab0c      	add	r3, sp, #48	; 0x30
    c824:	930a      	str	r3, [sp, #40]	; 0x28
    c826:	2302      	movs	r3, #2
	const struct spi_buf rx_buf[] = {
    c828:	2703      	movs	r7, #3
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    c82a:	6866      	ldr	r6, [r4, #4]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    c82c:	930b      	str	r3, [sp, #44]	; 0x2c
	err = spi_transceive(get_dev_data(dev)->spi,
    c82e:	68e3      	ldr	r3, [r4, #12]
	const struct spi_buf rx_buf[] = {
    c830:	ad05      	add	r5, sp, #20
	uint8_t const *expected_id = cfg->jedec_id;
    c832:	f106 0831 	add.w	r8, r6, #49	; 0x31
	const struct spi_buf rx_buf[] = {
    c836:	950e      	str	r5, [sp, #56]	; 0x38
    c838:	970f      	str	r7, [sp, #60]	; 0x3c
	err = spi_transceive(get_dev_data(dev)->spi,
    c83a:	6818      	ldr	r0, [r3, #0]
    c83c:	6883      	ldr	r3, [r0, #8]
    c83e:	aa08      	add	r2, sp, #32
    c840:	f8d3 9000 	ldr.w	r9, [r3]
    c844:	1d31      	adds	r1, r6, #4
    c846:	ab0a      	add	r3, sp, #40	; 0x28
    c848:	47c8      	blx	r9
	if (err != 0) {
    c84a:	4602      	mov	r2, r0
    c84c:	b1a0      	cbz	r0, c878 <spi_flash_at45_init+0xec>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c84e:	2301      	movs	r3, #1
    c850:	f04f 0000 	mov.w	r0, #0
    c854:	491d      	ldr	r1, [pc, #116]	; (c8cc <spi_flash_at45_init+0x140>)
    c856:	f363 0007 	bfi	r0, r3, #0, #8
    c85a:	4b1d      	ldr	r3, [pc, #116]	; (c8d0 <spi_flash_at45_init+0x144>)
		return -EIO;
    c85c:	f06f 0504 	mvn.w	r5, #4
    c860:	1a5b      	subs	r3, r3, r1
    c862:	40fb      	lsrs	r3, r7
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c864:	f363 108f 	bfi	r0, r3, #6, #10
    c868:	491b      	ldr	r1, [pc, #108]	; (c8d8 <spi_flash_at45_init+0x14c>)
    c86a:	2390      	movs	r3, #144	; 0x90
    c86c:	f004 fc21 	bl	110b2 <log_string_sync>
	release(dev);
    c870:	4620      	mov	r0, r4
    c872:	f004 f8cd 	bl	10a10 <release>
	return err;
    c876:	e7a3      	b.n	c7c0 <spi_flash_at45_init+0x34>
	if (memcmp(expected_id, read_id, sizeof(read_id)) != 0) {
    c878:	4629      	mov	r1, r5
    c87a:	463a      	mov	r2, r7
    c87c:	4640      	mov	r0, r8
    c87e:	f004 fd3d 	bl	112fc <memcmp>
    c882:	4605      	mov	r5, r0
    c884:	2800      	cmp	r0, #0
    c886:	d0f3      	beq.n	c870 <spi_flash_at45_init+0xe4>
		LOG_ERR("Wrong JEDEC ID: %02X %02X %02X, "
    c888:	2301      	movs	r3, #1
    c88a:	f04f 0000 	mov.w	r0, #0
    c88e:	4a0f      	ldr	r2, [pc, #60]	; (c8cc <spi_flash_at45_init+0x140>)
    c890:	f363 0007 	bfi	r0, r3, #0, #8
    c894:	4b0e      	ldr	r3, [pc, #56]	; (c8d0 <spi_flash_at45_init+0x144>)
    c896:	4911      	ldr	r1, [pc, #68]	; (c8dc <spi_flash_at45_init+0x150>)
    c898:	1a9b      	subs	r3, r3, r2
    c89a:	08db      	lsrs	r3, r3, #3
    c89c:	f363 108f 	bfi	r0, r3, #6, #10
    c8a0:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    c8a4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    c8a8:	9303      	str	r3, [sp, #12]
    c8aa:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
		return -ENODEV;
    c8ae:	f06f 0512 	mvn.w	r5, #18
		LOG_ERR("Wrong JEDEC ID: %02X %02X %02X, "
    c8b2:	9302      	str	r3, [sp, #8]
    c8b4:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    c8b8:	9301      	str	r3, [sp, #4]
    c8ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c8be:	9300      	str	r3, [sp, #0]
    c8c0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c8c4:	f004 fbf5 	bl	110b2 <log_string_sync>
		return -ENODEV;
    c8c8:	e7d2      	b.n	c870 <spi_flash_at45_init+0xe4>
    c8ca:	bf00      	nop
    c8cc:	00011c34 	.word	0x00011c34
    c8d0:	00011c6c 	.word	0x00011c6c
    c8d4:	00011f5d 	.word	0x00011f5d
    c8d8:	00011fcb 	.word	0x00011fcb
    c8dc:	00011f6c 	.word	0x00011f6c

0000c8e0 <spi_flash_at45_erase>:
{
    c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (addr >= 0 && (addr + size) <= chip_size);
    c8e4:	1e0e      	subs	r6, r1, #0
{
    c8e6:	b086      	sub	sp, #24
    c8e8:	4607      	mov	r7, r0
    c8ea:	4615      	mov	r5, r2
	return (addr >= 0 && (addr + size) <= chip_size);
    c8ec:	f2c0 80c2 	blt.w	ca74 <spi_flash_at45_erase+0x194>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    c8f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return (addr >= 0 && (addr + size) <= chip_size);
    c8f4:	18b3      	adds	r3, r6, r2
    c8f6:	f8d8 2020 	ldr.w	r2, [r8, #32]
    c8fa:	429a      	cmp	r2, r3
    c8fc:	f0c0 80ba 	bcc.w	ca74 <spi_flash_at45_erase+0x194>
	if (((offset % cfg->page_size) != 0)
    c900:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    c904:	fb96 f2f3 	sdiv	r2, r6, r3
    c908:	fb03 6212 	mls	r2, r3, r2, r6
    c90c:	2a00      	cmp	r2, #0
    c90e:	f040 80b4 	bne.w	ca7a <spi_flash_at45_erase+0x19a>
	    || ((size % cfg->page_size) != 0)) {
    c912:	fbb5 f2f3 	udiv	r2, r5, r3
    c916:	fb03 5312 	mls	r3, r3, r2, r5
    c91a:	2b00      	cmp	r3, #0
    c91c:	f040 80ad 	bne.w	ca7a <spi_flash_at45_erase+0x19a>
	acquire(dev);
    c920:	f004 f87a 	bl	10a18 <acquire>
	if (size == cfg->chip_size) {
    c924:	f8d8 3020 	ldr.w	r3, [r8, #32]
    c928:	42ab      	cmp	r3, r5
    c92a:	d16c      	bne.n	ca06 <spi_flash_at45_erase+0x126>
	LOG_INF("Entered perform chip erase function\n");
    c92c:	2303      	movs	r3, #3
    c92e:	f04f 0000 	mov.w	r0, #0
    c932:	4d53      	ldr	r5, [pc, #332]	; (ca80 <spi_flash_at45_erase+0x1a0>)
    c934:	f363 0007 	bfi	r0, r3, #0, #8
    c938:	4b52      	ldr	r3, [pc, #328]	; (ca84 <spi_flash_at45_erase+0x1a4>)
    c93a:	4953      	ldr	r1, [pc, #332]	; (ca88 <spi_flash_at45_erase+0x1a8>)
    c93c:	1aed      	subs	r5, r5, r3
    c93e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    c942:	f365 108f 	bfi	r0, r5, #6, #10
    c946:	f004 fbb4 	bl	110b2 <log_string_sync>
    return send_cmd_op(dev, CMD_WRITE_ENABLE, 1);
    c94a:	2201      	movs	r2, #1
    c94c:	2106      	movs	r1, #6
    c94e:	4638      	mov	r0, r7
    c950:	f7ff fee6 	bl	c720 <send_cmd_op>
	if (err != 0) {
    c954:	4604      	mov	r4, r0
    c956:	bb08      	cbnz	r0, c99c <spi_flash_at45_erase+0xbc>
	uint8_t const chip_erase_cmd = CMD_CHIP_ERASE;
    c958:	23c7      	movs	r3, #199	; 0xc7
    c95a:	f88d 3007 	strb.w	r3, [sp, #7]
	const struct spi_buf tx_buf[] = {
    c95e:	f10d 0307 	add.w	r3, sp, #7
    c962:	9302      	str	r3, [sp, #8]
    c964:	2301      	movs	r3, #1
	DEF_BUF_SET(tx_buf_set, tx_buf);
    c966:	aa02      	add	r2, sp, #8
    c968:	e9cd 2304 	strd	r2, r3, [sp, #16]
	const struct spi_buf tx_buf[] = {
    c96c:	9303      	str	r3, [sp, #12]
	err = spi_write(get_dev_data(dev)->spi,
    c96e:	6879      	ldr	r1, [r7, #4]
    c970:	68fb      	ldr	r3, [r7, #12]
    c972:	aa04      	add	r2, sp, #16
    c974:	3104      	adds	r1, #4
    c976:	6818      	ldr	r0, [r3, #0]
    c978:	f004 f856 	bl	10a28 <spi_write>
	if (err != 0) {
    c97c:	4602      	mov	r2, r0
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c97e:	f04f 0000 	mov.w	r0, #0
	if (err != 0) {
    c982:	b192      	cbz	r2, c9aa <spi_flash_at45_erase+0xca>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    c984:	2301      	movs	r3, #1
    c986:	f363 0007 	bfi	r0, r3, #0, #8
    c98a:	f365 108f 	bfi	r0, r5, #6, #10
    c98e:	f240 13ad 	movw	r3, #429	; 0x1ad
    c992:	493e      	ldr	r1, [pc, #248]	; (ca8c <spi_flash_at45_erase+0x1ac>)
    c994:	f004 fb8d 	bl	110b2 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c998:	f06f 0404 	mvn.w	r4, #4
	release(dev);
    c99c:	4638      	mov	r0, r7
    c99e:	f004 f837 	bl	10a10 <release>
}
    c9a2:	4620      	mov	r0, r4
    c9a4:	b006      	add	sp, #24
    c9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_INF("Full chip erase started, waiting for it to end\n");
    c9aa:	2303      	movs	r3, #3
    c9ac:	f363 0007 	bfi	r0, r3, #0, #8
    c9b0:	4937      	ldr	r1, [pc, #220]	; (ca90 <spi_flash_at45_erase+0x1b0>)
    c9b2:	f365 108f 	bfi	r0, r5, #6, #10
    c9b6:	f004 fb7c 	bl	110b2 <log_string_sync>
		err = wait_until_ready(dev);
    c9ba:	4638      	mov	r0, r7
    c9bc:	f7ff fdc0 	bl	c540 <wait_until_ready>
		LOG_INF("Full chip erase finished!\n");
    c9c0:	2303      	movs	r3, #3
		err = wait_until_ready(dev);
    c9c2:	4604      	mov	r4, r0
		LOG_INF("Full chip erase finished!\n");
    c9c4:	f04f 0000 	mov.w	r0, #0
    c9c8:	f363 0007 	bfi	r0, r3, #0, #8
    c9cc:	f365 108f 	bfi	r0, r5, #6, #10
    c9d0:	4930      	ldr	r1, [pc, #192]	; (ca94 <spi_flash_at45_erase+0x1b4>)
    c9d2:	f004 fb6e 	bl	110b2 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    c9d6:	2c00      	cmp	r4, #0
    c9d8:	bf18      	it	ne
    c9da:	f06f 0404 	mvnne.w	r4, #4
    c9de:	e7dd      	b.n	c99c <spi_flash_at45_erase+0xbc>
			if (is_erase_possible(cfg->sector_size,
    c9e0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
	return (requested_size >= entity_size &&
    c9e4:	42ab      	cmp	r3, r5
    c9e6:	d812      	bhi.n	ca0e <spi_flash_at45_erase+0x12e>
		(offset & (entity_size - 1)) == 0);
    c9e8:	3b01      	subs	r3, #1
			if (is_erase_possible(cfg->sector_size,
    c9ea:	4233      	tst	r3, r6
    c9ec:	d10f      	bne.n	ca0e <spi_flash_at45_erase+0x12e>
				err = perform_erase_op(dev, CMD_SECTOR_ERASE,
    c9ee:	4632      	mov	r2, r6
    c9f0:	217c      	movs	r1, #124	; 0x7c
    c9f2:	4638      	mov	r0, r7
    c9f4:	f7ff fdea 	bl	c5cc <perform_erase_op>
    c9f8:	4604      	mov	r4, r0
				offset += cfg->sector_size;
    c9fa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
				offset += cfg->page_size;
    c9fe:	441e      	add	r6, r3
				size   -= cfg->page_size;
    ca00:	1aed      	subs	r5, r5, r3
			if (err != 0) {
    ca02:	2c00      	cmp	r4, #0
    ca04:	d1ca      	bne.n	c99c <spi_flash_at45_erase+0xbc>
		while (size) {
    ca06:	2d00      	cmp	r5, #0
    ca08:	d1ea      	bne.n	c9e0 <spi_flash_at45_erase+0x100>
    ca0a:	462c      	mov	r4, r5
    ca0c:	e7c6      	b.n	c99c <spi_flash_at45_erase+0xbc>
			} else if (is_erase_possible(cfg->block_size,
    ca0e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
	return (requested_size >= entity_size &&
    ca12:	42ab      	cmp	r3, r5
    ca14:	d80b      	bhi.n	ca2e <spi_flash_at45_erase+0x14e>
		(offset & (entity_size - 1)) == 0);
    ca16:	3b01      	subs	r3, #1
			} else if (is_erase_possible(cfg->block_size,
    ca18:	4233      	tst	r3, r6
    ca1a:	d108      	bne.n	ca2e <spi_flash_at45_erase+0x14e>
				err = perform_erase_op(dev, CMD_BLOCK_ERASE,
    ca1c:	4632      	mov	r2, r6
    ca1e:	2150      	movs	r1, #80	; 0x50
    ca20:	4638      	mov	r0, r7
    ca22:	f7ff fdd3 	bl	c5cc <perform_erase_op>
				offset += cfg->block_size;
    ca26:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
				err = perform_erase_op(dev, CMD_BLOCK_ERASE,
    ca2a:	4604      	mov	r4, r0
				offset += cfg->block_size;
    ca2c:	e7e7      	b.n	c9fe <spi_flash_at45_erase+0x11e>
			} else if (is_erase_possible(cfg->page_size,
    ca2e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
	return (requested_size >= entity_size &&
    ca32:	42ab      	cmp	r3, r5
    ca34:	d80b      	bhi.n	ca4e <spi_flash_at45_erase+0x16e>
		(offset & (entity_size - 1)) == 0);
    ca36:	3b01      	subs	r3, #1
			} else if (is_erase_possible(cfg->page_size,
    ca38:	4233      	tst	r3, r6
    ca3a:	d108      	bne.n	ca4e <spi_flash_at45_erase+0x16e>
				err = perform_erase_op(dev, CMD_PAGE_ERASE,
    ca3c:	4632      	mov	r2, r6
    ca3e:	2181      	movs	r1, #129	; 0x81
    ca40:	4638      	mov	r0, r7
    ca42:	f7ff fdc3 	bl	c5cc <perform_erase_op>
				offset += cfg->page_size;
    ca46:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
				err = perform_erase_op(dev, CMD_PAGE_ERASE,
    ca4a:	4604      	mov	r4, r0
				offset += cfg->page_size;
    ca4c:	e7d7      	b.n	c9fe <spi_flash_at45_erase+0x11e>
				LOG_ERR("Unsupported erase request: "
    ca4e:	2301      	movs	r3, #1
    ca50:	f04f 0000 	mov.w	r0, #0
    ca54:	4a0b      	ldr	r2, [pc, #44]	; (ca84 <spi_flash_at45_erase+0x1a4>)
    ca56:	f363 0007 	bfi	r0, r3, #0, #8
    ca5a:	4b09      	ldr	r3, [pc, #36]	; (ca80 <spi_flash_at45_erase+0x1a0>)
    ca5c:	490e      	ldr	r1, [pc, #56]	; (ca98 <spi_flash_at45_erase+0x1b8>)
    ca5e:	1a9b      	subs	r3, r3, r2
    ca60:	08db      	lsrs	r3, r3, #3
    ca62:	f363 108f 	bfi	r0, r3, #6, #10
    ca66:	462a      	mov	r2, r5
    ca68:	4633      	mov	r3, r6
    ca6a:	f004 fb22 	bl	110b2 <log_string_sync>
				err = -EINVAL;
    ca6e:	f06f 0415 	mvn.w	r4, #21
    ca72:	e793      	b.n	c99c <spi_flash_at45_erase+0xbc>
		return -ENODEV;
    ca74:	f06f 0412 	mvn.w	r4, #18
    ca78:	e793      	b.n	c9a2 <spi_flash_at45_erase+0xc2>
		return -EINVAL;
    ca7a:	f06f 0415 	mvn.w	r4, #21
    ca7e:	e790      	b.n	c9a2 <spi_flash_at45_erase+0xc2>
    ca80:	00011c6c 	.word	0x00011c6c
    ca84:	00011c34 	.word	0x00011c34
    ca88:	00011ec0 	.word	0x00011ec0
    ca8c:	00011fcb 	.word	0x00011fcb
    ca90:	00011ee5 	.word	0x00011ee5
    ca94:	00011f15 	.word	0x00011f15
    ca98:	00011f30 	.word	0x00011f30

0000ca9c <spi_flash_at45_read>:
{
    ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (addr >= 0 && (addr + size) <= chip_size);
    ca9e:	2900      	cmp	r1, #0
{
    caa0:	b08d      	sub	sp, #52	; 0x34
    caa2:	4605      	mov	r5, r0
	return (addr >= 0 && (addr + size) <= chip_size);
    caa4:	db43      	blt.n	cb2e <spi_flash_at45_read+0x92>
	const struct spi_flash_at45_config *cfg = get_dev_config(dev);
    caa6:	6846      	ldr	r6, [r0, #4]
	return (addr >= 0 && (addr + size) <= chip_size);
    caa8:	18cc      	adds	r4, r1, r3
    caaa:	6a37      	ldr	r7, [r6, #32]
    caac:	42a7      	cmp	r7, r4
    caae:	d33e      	bcc.n	cb2e <spi_flash_at45_read+0x92>
	const struct spi_buf rx_buf[] = {
    cab0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	uint8_t const op_and_addr[] = {
    cab4:	2403      	movs	r4, #3
	DEF_BUF_SET(tx_buf_set, tx_buf);
    cab6:	ab02      	add	r3, sp, #8
    cab8:	9304      	str	r3, [sp, #16]
    caba:	2301      	movs	r3, #1
	uint8_t const op_and_addr[] = {
    cabc:	f88d 4004 	strb.w	r4, [sp, #4]
		(offset >> 16) & 0xFF,
    cac0:	140c      	asrs	r4, r1, #16
	uint8_t const op_and_addr[] = {
    cac2:	ba49      	rev16	r1, r1
    cac4:	f8ad 1006 	strh.w	r1, [sp, #6]
	DEF_BUF_SET(tx_buf_set, tx_buf);
    cac8:	9305      	str	r3, [sp, #20]
	const struct spi_buf tx_buf[] = {
    caca:	a901      	add	r1, sp, #4
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cacc:	ab08      	add	r3, sp, #32
	uint8_t const op_and_addr[] = {
    cace:	f88d 4005 	strb.w	r4, [sp, #5]
	const struct spi_buf tx_buf[] = {
    cad2:	9102      	str	r1, [sp, #8]
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cad4:	9306      	str	r3, [sp, #24]
	const struct spi_buf tx_buf[] = {
    cad6:	2104      	movs	r1, #4
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cad8:	2302      	movs	r3, #2
	const struct spi_buf rx_buf[] = {
    cada:	2400      	movs	r4, #0
	DEF_BUF_SET(rx_buf_set, rx_buf);
    cadc:	9307      	str	r3, [sp, #28]
	const struct spi_buf tx_buf[] = {
    cade:	9103      	str	r1, [sp, #12]
	const struct spi_buf rx_buf[] = {
    cae0:	e9cd 4108 	strd	r4, r1, [sp, #32]
	acquire(dev);
    cae4:	f003 ff98 	bl	10a18 <acquire>
	err = spi_transceive(get_dev_data(dev)->spi,
    cae8:	68eb      	ldr	r3, [r5, #12]
    caea:	6818      	ldr	r0, [r3, #0]
    caec:	6883      	ldr	r3, [r0, #8]
    caee:	aa04      	add	r2, sp, #16
    caf0:	681c      	ldr	r4, [r3, #0]
    caf2:	1d31      	adds	r1, r6, #4
    caf4:	ab06      	add	r3, sp, #24
    caf6:	47a0      	blx	r4
    caf8:	4604      	mov	r4, r0
	release(dev);
    cafa:	4628      	mov	r0, r5
    cafc:	f003 ff88 	bl	10a10 <release>
	if (err != 0) {
    cb00:	b194      	cbz	r4, cb28 <spi_flash_at45_read+0x8c>
		LOG_ERR("SPI transaction failed with code: %d/%u",
    cb02:	2301      	movs	r3, #1
    cb04:	f04f 0000 	mov.w	r0, #0
    cb08:	4a0a      	ldr	r2, [pc, #40]	; (cb34 <spi_flash_at45_read+0x98>)
    cb0a:	f363 0007 	bfi	r0, r3, #0, #8
    cb0e:	4b0a      	ldr	r3, [pc, #40]	; (cb38 <spi_flash_at45_read+0x9c>)
    cb10:	490a      	ldr	r1, [pc, #40]	; (cb3c <spi_flash_at45_read+0xa0>)
    cb12:	1a9b      	subs	r3, r3, r2
    cb14:	08db      	lsrs	r3, r3, #3
    cb16:	f363 108f 	bfi	r0, r3, #6, #10
    cb1a:	4622      	mov	r2, r4
    cb1c:	f44f 7393 	mov.w	r3, #294	; 0x126
    cb20:	f004 fac7 	bl	110b2 <log_string_sync>
	return (err != 0) ? -EIO : 0;
    cb24:	f06f 0404 	mvn.w	r4, #4
}
    cb28:	4620      	mov	r0, r4
    cb2a:	b00d      	add	sp, #52	; 0x34
    cb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
    cb2e:	f06f 0412 	mvn.w	r4, #18
    cb32:	e7f9      	b.n	cb28 <spi_flash_at45_read+0x8c>
    cb34:	00011c34 	.word	0x00011c34
    cb38:	00011c6c 	.word	0x00011c6c
    cb3c:	00011fcb 	.word	0x00011fcb

0000cb40 <main>:

static uint8_t write_buf[TEST_REGION_SIZE];
static uint8_t read_buf[TEST_REGION_SIZE];

void main(void)
{
    cb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printk("Hello world, using: %s\n", CONFIG_BOARD);
    cb44:	4975      	ldr	r1, [pc, #468]	; (cd1c <main+0x1dc>)
{
    cb46:	b088      	sub	sp, #32
	printk("Hello world, using: %s\n", CONFIG_BOARD);
    cb48:	4875      	ldr	r0, [pc, #468]	; (cd20 <main+0x1e0>)
    cb4a:	f004 f90e 	bl	10d6a <printk>
    cb4e:	4875      	ldr	r0, [pc, #468]	; (cd24 <main+0x1e4>)
    cb50:	f003 f858 	bl	fc04 <z_impl_device_get_binding>

	const struct device * dev;
	dev = device_get_binding("GPIO_0");
	if (dev == NULL) {
    cb54:	4604      	mov	r4, r0
    cb56:	b930      	cbnz	r0, cb66 <main+0x26>
		printk("Device %s not found!\n", "GPIO_0");
    cb58:	4972      	ldr	r1, [pc, #456]	; (cd24 <main+0x1e4>)
	struct flash_pages_info pages_info;
	size_t page_count, chip_size;

	flash_dev = device_get_binding(FLASH_DEVICE);
	if (!flash_dev) {
		printk("Device %s not found!\n", FLASH_DEVICE);
    cb5a:	4873      	ldr	r0, [pc, #460]	; (cd28 <main+0x1e8>)
    cb5c:	f004 f905 	bl	10d6a <printk>

	printk("OK\n");
#endif

	k_sleep(K_FOREVER);
}
    cb60:	b008      	add	sp, #32
    cb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	gpio_pin_configure(dev, 16, GPIO_OUTPUT);
    cb66:	2110      	movs	r1, #16
    cb68:	f003 ffb0 	bl	10acc <gpio_pin_configure.constprop.1>
	gpio_pin_set(dev, 16, 1);
    cb6c:	2110      	movs	r1, #16
    cb6e:	4620      	mov	r0, r4
    cb70:	f003 ffa1 	bl	10ab6 <gpio_pin_set.constprop.0>
	gpio_pin_configure(dev, 0, GPIO_OUTPUT);
    cb74:	2100      	movs	r1, #0
    cb76:	4620      	mov	r0, r4
    cb78:	f003 ffa8 	bl	10acc <gpio_pin_configure.constprop.1>
	gpio_pin_set(dev, 0, 1);
    cb7c:	2100      	movs	r1, #0
    cb7e:	4620      	mov	r0, r4
    cb80:	f003 ff99 	bl	10ab6 <gpio_pin_set.constprop.0>
	gpio_pin_configure(dev, 31, GPIO_OUTPUT);
    cb84:	211f      	movs	r1, #31
    cb86:	4620      	mov	r0, r4
    cb88:	f003 ffa0 	bl	10acc <gpio_pin_configure.constprop.1>
	gpio_pin_set(dev, 31, 1);
    cb8c:	211f      	movs	r1, #31
    cb8e:	4620      	mov	r0, r4
    cb90:	f003 ff91 	bl	10ab6 <gpio_pin_set.constprop.0>
    cb94:	4865      	ldr	r0, [pc, #404]	; (cd2c <main+0x1ec>)
    cb96:	f003 f835 	bl	fc04 <z_impl_device_get_binding>
	if (!flash_dev) {
    cb9a:	4604      	mov	r4, r0
    cb9c:	b908      	cbnz	r0, cba2 <main+0x62>
		printk("Device %s not found!\n", FLASH_DEVICE);
    cb9e:	4963      	ldr	r1, [pc, #396]	; (cd2c <main+0x1ec>)
    cba0:	e7db      	b.n	cb5a <main+0x1a>
	if (z_syscall_trap()) {
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_PAGE_COUNT);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_count(dev);
    cba2:	f004 fd62 	bl	1166a <z_impl_flash_get_page_count>
    cba6:	4606      	mov	r6, r0
	return z_impl_flash_get_page_info_by_idx(dev, page_index, info);
    cba8:	2100      	movs	r1, #0
    cbaa:	aa05      	add	r2, sp, #20
    cbac:	4620      	mov	r0, r4
    cbae:	f004 fd58 	bl	11662 <z_impl_flash_get_page_info_by_idx>
	chip_size = page_count * pages_info.size;
    cbb2:	9b06      	ldr	r3, [sp, #24]
	printk("Using %s, chip size: %u bytes (page: %u)\n",
    cbb4:	495d      	ldr	r1, [pc, #372]	; (cd2c <main+0x1ec>)
	chip_size = page_count * pages_info.size;
    cbb6:	435e      	muls	r6, r3
	printk("Using %s, chip size: %u bytes (page: %u)\n",
    cbb8:	485d      	ldr	r0, [pc, #372]	; (cd30 <main+0x1f0>)
    cbba:	4632      	mov	r2, r6
    cbbc:	f004 f8d5 	bl	10d6a <printk>
	printk("Reading the first byte of the test region ... ");
    cbc0:	485c      	ldr	r0, [pc, #368]	; (cd34 <main+0x1f4>)
    cbc2:	f004 f8d2 	bl	10d6a <printk>
	err = flash_read(flash_dev, TEST_REGION_OFFSET, &data, 1);
    cbc6:	2201      	movs	r2, #1
    cbc8:	f10d 010f 	add.w	r1, sp, #15
    cbcc:	4620      	mov	r0, r4
    cbce:	f003 ff8e 	bl	10aee <flash_read.constprop.5>
	if (err != 0) {
    cbd2:	4605      	mov	r5, r0
    cbd4:	b118      	cbz	r0, cbde <main+0x9e>
		printk("FAILED\n");
    cbd6:	4858      	ldr	r0, [pc, #352]	; (cd38 <main+0x1f8>)
    cbd8:	f004 f8c7 	bl	10d6a <printk>
		return;
    cbdc:	e7c0      	b.n	cb60 <main+0x20>
	printk("OK\n");
    cbde:	4857      	ldr	r0, [pc, #348]	; (cd3c <main+0x1fc>)
    cbe0:	f004 f8c3 	bl	10d6a <printk>
	++data;
    cbe4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cbe8:	4f55      	ldr	r7, [pc, #340]	; (cd40 <main+0x200>)
    cbea:	3101      	adds	r1, #1
    cbec:	b2c9      	uxtb	r1, r1
	printk("Preparing test content starting with 0x%02X.\n", data);
    cbee:	4855      	ldr	r0, [pc, #340]	; (cd44 <main+0x204>)
	++data;
    cbf0:	f88d 100f 	strb.w	r1, [sp, #15]
	printk("Preparing test content starting with 0x%02X.\n", data);
    cbf4:	f004 f8b9 	bl	10d6a <printk>
		write_buf[i] = (uint8_t)(data + i);
    cbf8:	463b      	mov	r3, r7
    cbfa:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cbfe:	194a      	adds	r2, r1, r5
	for (i = 0; i < TEST_REGION_SIZE; ++i) {
    cc00:	3501      	adds	r5, #1
    cc02:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
		write_buf[i] = (uint8_t)(data + i);
    cc06:	f803 2b01 	strb.w	r2, [r3], #1
	for (i = 0; i < TEST_REGION_SIZE; ++i) {
    cc0a:	d1f8      	bne.n	cbfe <main+0xbe>
		printk("Erasing the whole chip... ");
    cc0c:	484e      	ldr	r0, [pc, #312]	; (cd48 <main+0x208>)
    cc0e:	f004 f8ac 	bl	10d6a <printk>
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
    cc12:	68a3      	ldr	r3, [r4, #8]
    cc14:	4632      	mov	r2, r6
    cc16:	689b      	ldr	r3, [r3, #8]
    cc18:	2100      	movs	r1, #0
    cc1a:	4620      	mov	r0, r4
    cc1c:	4798      	blx	r3
	if (err != 0) {
    cc1e:	2800      	cmp	r0, #0
    cc20:	d1d9      	bne.n	cbd6 <main+0x96>
	printk("OK\n");
    cc22:	4846      	ldr	r0, [pc, #280]	; (cd3c <main+0x1fc>)
    cc24:	f004 f8a1 	bl	10d6a <printk>
	printk("Checking if the test region is erased... ");
    cc28:	4848      	ldr	r0, [pc, #288]	; (cd4c <main+0x20c>)
    cc2a:	f004 f89e 	bl	10d6a <printk>
	err = flash_read(flash_dev, TEST_REGION_OFFSET,
    cc2e:	462a      	mov	r2, r5
    cc30:	4947      	ldr	r1, [pc, #284]	; (cd50 <main+0x210>)
    cc32:	4620      	mov	r0, r4
    cc34:	f003 ff5b 	bl	10aee <flash_read.constprop.5>
	if (err != 0) {
    cc38:	4605      	mov	r5, r0
    cc3a:	2800      	cmp	r0, #0
    cc3c:	d1cb      	bne.n	cbd6 <main+0x96>
    cc3e:	4e44      	ldr	r6, [pc, #272]	; (cd50 <main+0x210>)
    cc40:	4632      	mov	r2, r6
		if (read_buf[i] != 0xFF) {
    cc42:	f812 3b01 	ldrb.w	r3, [r2], #1
    cc46:	2bff      	cmp	r3, #255	; 0xff
    cc48:	d005      	beq.n	cc56 <main+0x116>
			printk("\nERROR at read_buf[%d]: "
    cc4a:	22ff      	movs	r2, #255	; 0xff
			printk("\nERROR at read_buf[%d]: "
    cc4c:	4629      	mov	r1, r5
    cc4e:	4841      	ldr	r0, [pc, #260]	; (cd54 <main+0x214>)
    cc50:	f004 f88b 	bl	10d6a <printk>
			return;
    cc54:	e784      	b.n	cb60 <main+0x20>
	for (i = 0; i < TEST_REGION_SIZE; ++i) {
    cc56:	3501      	adds	r5, #1
    cc58:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    cc5c:	d1f1      	bne.n	cc42 <main+0x102>
	printk("OK\n");
    cc5e:	4837      	ldr	r0, [pc, #220]	; (cd3c <main+0x1fc>)
    cc60:	f004 f883 	bl	10d6a <printk>
	printk("Writing the first half of the test region... ");
    cc64:	483c      	ldr	r0, [pc, #240]	; (cd58 <main+0x218>)
    cc66:	f004 f880 	bl	10d6a <printk>
	return api->write(dev, offset, data, len);
    cc6a:	68a3      	ldr	r3, [r4, #8]
    cc6c:	4a34      	ldr	r2, [pc, #208]	; (cd40 <main+0x200>)
    cc6e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    cc72:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
    cc76:	f44f 7300 	mov.w	r3, #512	; 0x200
    cc7a:	4620      	mov	r0, r4
    cc7c:	47c0      	blx	r8
	if (err != 0) {
    cc7e:	2800      	cmp	r0, #0
    cc80:	d1a9      	bne.n	cbd6 <main+0x96>
	printk("OK\n");
    cc82:	482e      	ldr	r0, [pc, #184]	; (cd3c <main+0x1fc>)
    cc84:	f004 f871 	bl	10d6a <printk>
	printk("Writing the second half of the test region... ");
    cc88:	4834      	ldr	r0, [pc, #208]	; (cd5c <main+0x21c>)
    cc8a:	f004 f86e 	bl	10d6a <printk>
    cc8e:	68a3      	ldr	r3, [r4, #8]
    cc90:	4a33      	ldr	r2, [pc, #204]	; (cd60 <main+0x220>)
    cc92:	f8d3 8004 	ldr.w	r8, [r3, #4]
    cc96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cc9a:	f44f 7300 	mov.w	r3, #512	; 0x200
    cc9e:	4620      	mov	r0, r4
    cca0:	47c0      	blx	r8
	if (err != 0) {
    cca2:	2800      	cmp	r0, #0
    cca4:	d197      	bne.n	cbd6 <main+0x96>
	printk("OK\n");
    cca6:	4825      	ldr	r0, [pc, #148]	; (cd3c <main+0x1fc>)
    cca8:	f004 f85f 	bl	10d6a <printk>
	printk("Reading the whole test region... ");
    ccac:	482d      	ldr	r0, [pc, #180]	; (cd64 <main+0x224>)
    ccae:	f004 f85c 	bl	10d6a <printk>
	err = flash_read(flash_dev, TEST_REGION_OFFSET,
    ccb2:	462a      	mov	r2, r5
    ccb4:	4926      	ldr	r1, [pc, #152]	; (cd50 <main+0x210>)
    ccb6:	4620      	mov	r0, r4
    ccb8:	f003 ff19 	bl	10aee <flash_read.constprop.5>
	if (err != 0) {
    ccbc:	4605      	mov	r5, r0
    ccbe:	2800      	cmp	r0, #0
    ccc0:	d189      	bne.n	cbd6 <main+0x96>
	printk("OK\n");
    ccc2:	481e      	ldr	r0, [pc, #120]	; (cd3c <main+0x1fc>)
    ccc4:	f004 f851 	bl	10d6a <printk>
	printk("Checking the read content... ");
    ccc8:	4827      	ldr	r0, [pc, #156]	; (cd68 <main+0x228>)
    ccca:	f004 f84e 	bl	10d6a <printk>
		if (read_buf[i] != write_buf[i]) {
    ccce:	f816 3b01 	ldrb.w	r3, [r6], #1
    ccd2:	f817 2b01 	ldrb.w	r2, [r7], #1
    ccd6:	4293      	cmp	r3, r2
    ccd8:	d1b8      	bne.n	cc4c <main+0x10c>
	for (i = 0; i < TEST_REGION_SIZE; ++i) {
    ccda:	3501      	adds	r5, #1
    ccdc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    cce0:	d1f5      	bne.n	ccce <main+0x18e>
	printk("OK\n");
    cce2:	4816      	ldr	r0, [pc, #88]	; (cd3c <main+0x1fc>)
    cce4:	f004 f841 	bl	10d6a <printk>
	printk("Putting the flash device into low power state... ");
    cce8:	4820      	ldr	r0, [pc, #128]	; (cd6c <main+0x22c>)
    ccea:	f004 f83e 	bl	10d6a <printk>
 * @param arg Caller passed argument to callback function
 *
 * @retval 0 If successful in queuing the request or changing the state.
 * @retval Errno Negative errno code if failure. Callback will not be called.
 */
static inline int device_set_power_state(const struct device *dev,
    ccee:	2302      	movs	r3, #2
    ccf0:	9304      	str	r3, [sp, #16]
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	return dev->device_pm_control(dev,
    ccf2:	2300      	movs	r3, #0
    ccf4:	9300      	str	r3, [sp, #0]
    ccf6:	6925      	ldr	r5, [r4, #16]
    ccf8:	aa04      	add	r2, sp, #16
    ccfa:	2101      	movs	r1, #1
    ccfc:	4620      	mov	r0, r4
    ccfe:	47a8      	blx	r5
	if (err != 0) {
    cd00:	2800      	cmp	r0, #0
    cd02:	f47f af68 	bne.w	cbd6 <main+0x96>
	printk("OK\n");
    cd06:	480d      	ldr	r0, [pc, #52]	; (cd3c <main+0x1fc>)
    cd08:	f004 f82f 	bl	10d6a <printk>
	return z_impl_k_sleep(timeout);
    cd0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cd10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cd14:	f003 fc06 	bl	10524 <z_impl_k_sleep>
    cd18:	e722      	b.n	cb60 <main+0x20>
    cd1a:	bf00      	nop
    cd1c:	00011ff3 	.word	0x00011ff3
    cd20:	00012005 	.word	0x00012005
    cd24:	00011fb5 	.word	0x00011fb5
    cd28:	0001201d 	.word	0x0001201d
    cd2c:	00011fa5 	.word	0x00011fa5
    cd30:	00012033 	.word	0x00012033
    cd34:	0001205d 	.word	0x0001205d
    cd38:	0001208c 	.word	0x0001208c
    cd3c:	00012094 	.word	0x00012094
    cd40:	20010aa0 	.word	0x20010aa0
    cd44:	00012098 	.word	0x00012098
    cd48:	000120c6 	.word	0x000120c6
    cd4c:	000120e1 	.word	0x000120e1
    cd50:	200106a0 	.word	0x200106a0
    cd54:	0001210b 	.word	0x0001210b
    cd58:	00012140 	.word	0x00012140
    cd5c:	0001216e 	.word	0x0001216e
    cd60:	20010ca0 	.word	0x20010ca0
    cd64:	0001219d 	.word	0x0001219d
    cd68:	000121bf 	.word	0x000121bf
    cd6c:	000121dd 	.word	0x000121dd

0000cd70 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    cd70:	680b      	ldr	r3, [r1, #0]
    cd72:	3301      	adds	r3, #1
    cd74:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    cd76:	4b01      	ldr	r3, [pc, #4]	; (cd7c <char_out+0xc>)
    cd78:	681b      	ldr	r3, [r3, #0]
    cd7a:	4718      	bx	r3
    cd7c:	20010074 	.word	0x20010074

0000cd80 <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd84:	b087      	sub	sp, #28
    cd86:	460f      	mov	r7, r1
    cd88:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
    cd8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cd8c:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    cd8e:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cd90:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    cd92:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    cd94:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    cd98:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    cd9c:	4c1c      	ldr	r4, [pc, #112]	; (ce10 <print_digits.part.0+0x90>)
    cd9e:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    cda2:	ea50 0301 	orrs.w	r3, r0, r1
    cda6:	d11a      	bne.n	cdde <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
    cda8:	2d14      	cmp	r5, #20
		buf[i] = '0';
    cdaa:	bf08      	it	eq
    cdac:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cdae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    cdb0:	bf18      	it	ne
    cdb2:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cdb4:	442c      	add	r4, r5
		buf[i] = '0';
    cdb6:	bf08      	it	eq
    cdb8:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cdbc:	2c15      	cmp	r4, #21
    cdbe:	d017      	beq.n	cdf0 <print_digits.part.0+0x70>
    cdc0:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
    cdc2:	2c00      	cmp	r4, #0
    cdc4:	dc16      	bgt.n	cdf4 <print_digits.part.0+0x74>
		out(buf[i], ctx);
    cdc6:	f81d 0005 	ldrb.w	r0, [sp, r5]
    cdca:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    cdcc:	3501      	adds	r5, #1
		out(buf[i], ctx);
    cdce:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    cdd0:	2d15      	cmp	r5, #21
    cdd2:	d1f8      	bne.n	cdc6 <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
    cdd4:	2c00      	cmp	r4, #0
    cdd6:	dc15      	bgt.n	ce04 <print_digits.part.0+0x84>
}
    cdd8:	b007      	add	sp, #28
    cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    cdde:	4642      	mov	r2, r8
    cde0:	464b      	mov	r3, r9
    cde2:	f7ff fa2b 	bl	c23c <__aeabi_uldivmod>
    cde6:	5ca3      	ldrb	r3, [r4, r2]
    cde8:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    cdec:	3d01      	subs	r5, #1
    cdee:	e7d8      	b.n	cda2 <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    cdf0:	2400      	movs	r4, #0
    cdf2:	e7e8      	b.n	cdc6 <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
    cdf4:	f1bb 0f00 	cmp.w	fp, #0
    cdf8:	d0e5      	beq.n	cdc6 <print_digits.part.0+0x46>
		out(pad_char, ctx);
    cdfa:	4639      	mov	r1, r7
    cdfc:	4650      	mov	r0, sl
    cdfe:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    ce00:	3c01      	subs	r4, #1
    ce02:	e7de      	b.n	cdc2 <print_digits.part.0+0x42>
		out(pad_char, ctx);
    ce04:	4639      	mov	r1, r7
    ce06:	4650      	mov	r0, sl
    ce08:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    ce0a:	3c01      	subs	r4, #1
    ce0c:	e7e2      	b.n	cdd4 <print_digits.part.0+0x54>
    ce0e:	bf00      	nop
    ce10:	0001220f 	.word	0x0001220f

0000ce14 <__printk_hook_install>:
	_char_out = fn;
    ce14:	4b01      	ldr	r3, [pc, #4]	; (ce1c <__printk_hook_install+0x8>)
    ce16:	6018      	str	r0, [r3, #0]
}
    ce18:	4770      	bx	lr
    ce1a:	bf00      	nop
    ce1c:	20010074 	.word	0x20010074

0000ce20 <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
    ce20:	2300      	movs	r3, #0
{
    ce22:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    ce24:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    ce26:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    ce28:	4803      	ldr	r0, [pc, #12]	; (ce38 <vprintk+0x18>)
    ce2a:	460b      	mov	r3, r1
    ce2c:	a901      	add	r1, sp, #4
    ce2e:	f003 fe88 	bl	10b42 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    ce32:	b003      	add	sp, #12
    ce34:	f85d fb04 	ldr.w	pc, [sp], #4
    ce38:	0000cd71 	.word	0x0000cd71

0000ce3c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    ce3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ce40:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    ce44:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    ce46:	f019 0808 	ands.w	r8, r9, #8
    ce4a:	d00d      	beq.n	ce68 <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
    ce4c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    ce4e:	bf0c      	ite	eq
    ce50:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    ce54:	f049 0920 	orrne.w	r9, r9, #32
    ce58:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ce5c:	f382 8811 	msr	BASEPRI, r2
    ce60:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ce64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ce68:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    ce6c:	2902      	cmp	r1, #2
    ce6e:	d107      	bne.n	ce80 <process_event+0x44>
			evt = process_recheck(mgr);
    ce70:	4620      	mov	r0, r4
    ce72:	f003 ff87 	bl	10d84 <process_recheck>
		if (evt == EVT_NOP) {
    ce76:	2800      	cmp	r0, #0
    ce78:	d0f0      	beq.n	ce5c <process_event+0x20>
		if (evt == EVT_COMPLETE) {
    ce7a:	2801      	cmp	r0, #1
    ce7c:	8b23      	ldrh	r3, [r4, #24]
    ce7e:	d14a      	bne.n	cf16 <process_event+0xda>
			res = mgr->last_res;
    ce80:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ce82:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
    ce84:	2f00      	cmp	r7, #0
    ce86:	da15      	bge.n	ceb4 <process_event+0x78>
		*clients = mgr->clients;
    ce88:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    ce8a:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce8e:	f023 0307 	bic.w	r3, r3, #7
    ce92:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce96:	8323      	strh	r3, [r4, #24]
		onoff_transition_fn transit = NULL;
    ce98:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce9a:	8b23      	ldrh	r3, [r4, #24]
    ce9c:	f003 0a07 	and.w	sl, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cea0:	45ca      	cmp	sl, r9
    cea2:	d002      	beq.n	ceaa <process_event+0x6e>
		if (do_monitors
    cea4:	68a1      	ldr	r1, [r4, #8]
    cea6:	2900      	cmp	r1, #0
    cea8:	d156      	bne.n	cf58 <process_event+0x11c>
		    || !sys_slist_is_empty(&clients)
    ceaa:	b90d      	cbnz	r5, ceb0 <process_event+0x74>
		    || (transit != NULL)) {
    ceac:	2e00      	cmp	r6, #0
    ceae:	d06d      	beq.n	cf8c <process_event+0x150>
    ceb0:	2100      	movs	r1, #0
    ceb2:	e052      	b.n	cf5a <process_event+0x11e>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ceb4:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ceb8:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ceba:	2801      	cmp	r0, #1
    cebc:	d81c      	bhi.n	cef8 <process_event+0xbc>
		*clients = mgr->clients;
    cebe:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    cec2:	2906      	cmp	r1, #6
		*clients = mgr->clients;
    cec4:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    cec6:	b29b      	uxth	r3, r3
	list->tail = NULL;
    cec8:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cecc:	d10a      	bne.n	cee4 <process_event+0xa8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cece:	b13d      	cbz	r5, cee0 <process_event+0xa4>
    ced0:	4628      	mov	r0, r5
    ced2:	8b61      	ldrh	r1, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ced4:	6800      	ldr	r0, [r0, #0]
				mgr->refs += 1U;
    ced6:	3101      	adds	r1, #1
    ced8:	b289      	uxth	r1, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ceda:	2800      	cmp	r0, #0
    cedc:	d1fa      	bne.n	ced4 <process_event+0x98>
    cede:	8361      	strh	r1, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cee0:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    cee4:	8323      	strh	r3, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    cee6:	4620      	mov	r0, r4
    cee8:	f003 ff4c 	bl	10d84 <process_recheck>
    ceec:	2800      	cmp	r0, #0
    ceee:	d0d3      	beq.n	ce98 <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cef0:	8b23      	ldrh	r3, [r4, #24]
    cef2:	f043 0320 	orr.w	r3, r3, #32
    cef6:	e7ce      	b.n	ce96 <process_event+0x5a>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cef8:	2904      	cmp	r1, #4
    cefa:	d10a      	bne.n	cf12 <process_event+0xd6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cefc:	f023 0307 	bic.w	r3, r3, #7
    cf00:	b299      	uxth	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf02:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    cf04:	4620      	mov	r0, r4
    cf06:	f003 ff3d 	bl	10d84 <process_recheck>
    cf0a:	b110      	cbz	r0, cf12 <process_event+0xd6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cf0c:	f041 0120 	orr.w	r1, r1, #32
    cf10:	8321      	strh	r1, [r4, #24]
    cf12:	2500      	movs	r5, #0
    cf14:	e7c0      	b.n	ce98 <process_event+0x5c>
		} else if (evt == EVT_START) {
    cf16:	2803      	cmp	r0, #3
    cf18:	d109      	bne.n	cf2e <process_event+0xf2>
			transit = mgr->transitions->start;
    cf1a:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf1c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    cf20:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf22:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf26:	2500      	movs	r5, #0
    cf28:	8323      	strh	r3, [r4, #24]
		res = 0;
    cf2a:	462f      	mov	r7, r5
    cf2c:	e7b5      	b.n	ce9a <process_event+0x5e>
		} else if (evt == EVT_STOP) {
    cf2e:	2804      	cmp	r0, #4
    cf30:	d106      	bne.n	cf40 <process_event+0x104>
			transit = mgr->transitions->stop;
    cf32:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf34:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    cf38:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf3a:	f043 0304 	orr.w	r3, r3, #4
    cf3e:	e7f2      	b.n	cf26 <process_event+0xea>
		} else if (evt == EVT_RESET) {
    cf40:	2805      	cmp	r0, #5
    cf42:	d106      	bne.n	cf52 <process_event+0x116>
			transit = mgr->transitions->reset;
    cf44:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf46:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    cf4a:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf4c:	f043 0305 	orr.w	r3, r3, #5
    cf50:	e7e9      	b.n	cf26 <process_event+0xea>
    cf52:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    cf54:	462e      	mov	r6, r5
    cf56:	e7e8      	b.n	cf2a <process_event+0xee>
				   && !sys_slist_is_empty(&mgr->monitors);
    cf58:	2101      	movs	r1, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cf5a:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    cf5e:	8323      	strh	r3, [r4, #24]
    cf60:	f382 8811 	msr	BASEPRI, r2
    cf64:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cf68:	b9f9      	cbnz	r1, cfaa <process_event+0x16e>
	while (!sys_slist_is_empty(list)) {
    cf6a:	bb85      	cbnz	r5, cfce <process_event+0x192>
			if (transit != NULL) {
    cf6c:	b116      	cbz	r6, cf74 <process_event+0x138>
				transit(mgr, transition_complete);
    cf6e:	4921      	ldr	r1, [pc, #132]	; (cff4 <process_event+0x1b8>)
    cf70:	4620      	mov	r0, r4
    cf72:	47b0      	blx	r6
	__asm__ volatile(
    cf74:	f04f 0320 	mov.w	r3, #32
    cf78:	f3ef 8211 	mrs	r2, BASEPRI
    cf7c:	f383 8811 	msr	BASEPRI, r3
    cf80:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cf84:	8b23      	ldrh	r3, [r4, #24]
    cf86:	f023 0308 	bic.w	r3, r3, #8
    cf8a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cf8c:	8b23      	ldrh	r3, [r4, #24]
    cf8e:	06d9      	lsls	r1, r3, #27
    cf90:	d527      	bpl.n	cfe2 <process_event+0x1a6>
			evt = EVT_COMPLETE;
    cf92:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cf94:	f023 0310 	bic.w	r3, r3, #16
    cf98:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    cf9a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    cf9e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    cfa2:	2900      	cmp	r1, #0
    cfa4:	f47f af62 	bne.w	ce6c <process_event+0x30>
out:
    cfa8:	e758      	b.n	ce5c <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cfaa:	68a1      	ldr	r1, [r4, #8]
    cfac:	2900      	cmp	r1, #0
    cfae:	d0dc      	beq.n	cf6a <process_event+0x12e>
    cfb0:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    cfb4:	f8d1 b004 	ldr.w	fp, [r1, #4]
    cfb8:	463b      	mov	r3, r7
    cfba:	4652      	mov	r2, sl
    cfbc:	4620      	mov	r0, r4
    cfbe:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cfc0:	f1b9 0f00 	cmp.w	r9, #0
    cfc4:	d0d1      	beq.n	cf6a <process_event+0x12e>
    cfc6:	4649      	mov	r1, r9
    cfc8:	f8d9 9000 	ldr.w	r9, [r9]
    cfcc:	e7f2      	b.n	cfb4 <process_event+0x178>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cfce:	f8d5 9000 	ldr.w	r9, [r5]
		notify_one(mgr, cli, state, res);
    cfd2:	4629      	mov	r1, r5
    cfd4:	463b      	mov	r3, r7
    cfd6:	4652      	mov	r2, sl
    cfd8:	4620      	mov	r0, r4
    cfda:	f003 feef 	bl	10dbc <notify_one>
	while (!sys_slist_is_empty(list)) {
    cfde:	464d      	mov	r5, r9
    cfe0:	e7c3      	b.n	cf6a <process_event+0x12e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cfe2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cfe6:	bf1e      	ittt	ne
    cfe8:	f023 0320 	bicne.w	r3, r3, #32
    cfec:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    cfee:	2102      	movne	r1, #2
    cff0:	e7d3      	b.n	cf9a <process_event+0x15e>
    cff2:	bf00      	nop
    cff4:	00010de9 	.word	0x00010de9

0000cff8 <nordicsemi_nrf91_init>:
    cff8:	f04f 0220 	mov.w	r2, #32
    cffc:	f3ef 8311 	mrs	r3, BASEPRI
    d000:	f382 8811 	msr	BASEPRI, r2
    d004:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d008:	2101      	movs	r1, #1
    d00a:	4a04      	ldr	r2, [pc, #16]	; (d01c <nordicsemi_nrf91_init+0x24>)
    d00c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    d010:	f383 8811 	msr	BASEPRI, r3
    d014:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d018:	2000      	movs	r0, #0
    d01a:	4770      	bx	lr
    d01c:	40039000 	.word	0x40039000

0000d020 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d020:	b120      	cbz	r0, d02c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    d022:	4b03      	ldr	r3, [pc, #12]	; (d030 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    d024:	0180      	lsls	r0, r0, #6
    d026:	f043 0301 	orr.w	r3, r3, #1
    d02a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    d02c:	4770      	bx	lr
    d02e:	bf00      	nop
    d030:	00011ce0 	.word	0x00011ce0

0000d034 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
    d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
    d038:	4b12      	ldr	r3, [pc, #72]	; (d084 <log_generic+0x50>)
{
    d03a:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
    d03c:	681b      	ldr	r3, [r3, #0]
{
    d03e:	4681      	mov	r9, r0
    d040:	468a      	mov	sl, r1
    d042:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
    d044:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
    d046:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
    d048:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    d04a:	4c0f      	ldr	r4, [pc, #60]	; (d088 <log_generic+0x54>)
    d04c:	4d0f      	ldr	r5, [pc, #60]	; (d08c <log_generic+0x58>)
    d04e:	1b2d      	subs	r5, r5, r4
    d050:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    d052:	42ae      	cmp	r6, r5
    d054:	db02      	blt.n	d05c <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
    d056:	b005      	add	sp, #20
    d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    d05c:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend)) {
    d05e:	795b      	ldrb	r3, [r3, #5]
    d060:	b163      	cbz	r3, d07c <log_generic+0x48>
	if (backend->api->put_sync_string) {
    d062:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
    d064:	9703      	str	r7, [sp, #12]
    d066:	f8d3 b004 	ldr.w	fp, [r3, #4]
    d06a:	f1bb 0f00 	cmp.w	fp, #0
    d06e:	d005      	beq.n	d07c <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
    d070:	9700      	str	r7, [sp, #0]
    d072:	4653      	mov	r3, sl
    d074:	4642      	mov	r2, r8
    d076:	4649      	mov	r1, r9
    d078:	4620      	mov	r0, r4
    d07a:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
    d07c:	3601      	adds	r6, #1
    d07e:	3410      	adds	r4, #16
    d080:	e7e7      	b.n	d052 <log_generic+0x1e>
    d082:	bf00      	nop
    d084:	20010078 	.word	0x20010078
    d088:	00011c84 	.word	0x00011c84
    d08c:	00011c94 	.word	0x00011c94

0000d090 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    d090:	4b03      	ldr	r3, [pc, #12]	; (d0a0 <log_core_init+0x10>)
    d092:	4a04      	ldr	r2, [pc, #16]	; (d0a4 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    d094:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    d098:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    d09a:	f000 ba0f 	b.w	d4bc <log_output_timestamp_freq_set>
    d09e:	bf00      	nop
    d0a0:	20010078 	.word	0x20010078
    d0a4:	000110ab 	.word	0x000110ab

0000d0a8 <log_source_name_get>:
    d0a8:	4a04      	ldr	r2, [pc, #16]	; (d0bc <log_source_name_get+0x14>)
    d0aa:	4b05      	ldr	r3, [pc, #20]	; (d0c0 <log_source_name_get+0x18>)
    d0ac:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    d0ae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    d0b2:	bf34      	ite	cc
    d0b4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    d0b8:	2000      	movcs	r0, #0
}
    d0ba:	4770      	bx	lr
    d0bc:	00011c34 	.word	0x00011c34
    d0c0:	00011c84 	.word	0x00011c84

0000d0c4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    d0c4:	4b09      	ldr	r3, [pc, #36]	; (d0ec <log_backend_enable+0x28>)

	log_backend_id_set(backend, id);
    d0c6:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    d0c8:	1ac3      	subs	r3, r0, r3
    d0ca:	111b      	asrs	r3, r3, #4
    d0cc:	3301      	adds	r3, #1
{
    d0ce:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    d0d0:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    d0d2:	2201      	movs	r2, #1
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
    d0d4:	6843      	ldr	r3, [r0, #4]

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    d0d6:	4c06      	ldr	r4, [pc, #24]	; (d0f0 <log_backend_enable+0x2c>)
    d0d8:	715a      	strb	r2, [r3, #5]
    d0da:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    d0dc:	6019      	str	r1, [r3, #0]
    d0de:	b912      	cbnz	r2, d0e6 <log_backend_enable+0x22>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d0e0:	4804      	ldr	r0, [pc, #16]	; (d0f4 <log_backend_enable+0x30>)
    d0e2:	f003 fa45 	bl	10570 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    d0e6:	2301      	movs	r3, #1
    d0e8:	7023      	strb	r3, [r4, #0]
}
    d0ea:	bd10      	pop	{r4, pc}
    d0ec:	00011c84 	.word	0x00011c84
    d0f0:	20010ea0 	.word	0x20010ea0
    d0f4:	20010414 	.word	0x20010414

0000d0f8 <log_init>:
{
    d0f8:	b570      	push	{r4, r5, r6, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d0fa:	4b0f      	ldr	r3, [pc, #60]	; (d138 <log_init+0x40>)
    d0fc:	e8d3 5fef 	ldaex	r5, [r3]
    d100:	1c6a      	adds	r2, r5, #1
    d102:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d106:	2900      	cmp	r1, #0
    d108:	d1f8      	bne.n	d0fc <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    d10a:	b92d      	cbnz	r5, d118 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    d10c:	4c0b      	ldr	r4, [pc, #44]	; (d13c <log_init+0x44>)
    d10e:	4e0c      	ldr	r6, [pc, #48]	; (d140 <log_init+0x48>)
    d110:	1b36      	subs	r6, r6, r4
    d112:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    d114:	42b5      	cmp	r5, r6
    d116:	db00      	blt.n	d11a <log_init+0x22>
}
    d118:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    d11a:	7b23      	ldrb	r3, [r4, #12]
    d11c:	b143      	cbz	r3, d130 <log_init+0x38>
			if (backend->api->init != NULL) {
    d11e:	6823      	ldr	r3, [r4, #0]
    d120:	695b      	ldr	r3, [r3, #20]
    d122:	b103      	cbz	r3, d126 <log_init+0x2e>
				backend->api->init();
    d124:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    d126:	2204      	movs	r2, #4
    d128:	2100      	movs	r1, #0
    d12a:	4620      	mov	r0, r4
    d12c:	f7ff ffca 	bl	d0c4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    d130:	3501      	adds	r5, #1
    d132:	3410      	adds	r4, #16
    d134:	e7ee      	b.n	d114 <log_init+0x1c>
    d136:	bf00      	nop
    d138:	20010530 	.word	0x20010530
    d13c:	00011c84 	.word	0x00011c84
    d140:	00011c94 	.word	0x00011c94

0000d144 <z_impl_log_panic>:
{
    d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    d146:	4f0c      	ldr	r7, [pc, #48]	; (d178 <z_impl_log_panic+0x34>)
    d148:	783d      	ldrb	r5, [r7, #0]
    d14a:	b94d      	cbnz	r5, d160 <z_impl_log_panic+0x1c>
	log_init();
    d14c:	f7ff ffd4 	bl	d0f8 <log_init>
    d150:	4c0a      	ldr	r4, [pc, #40]	; (d17c <z_impl_log_panic+0x38>)
    d152:	4e0b      	ldr	r6, [pc, #44]	; (d180 <z_impl_log_panic+0x3c>)
    d154:	1b36      	subs	r6, r6, r4
    d156:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d158:	42b5      	cmp	r5, r6
    d15a:	db02      	blt.n	d162 <z_impl_log_panic+0x1e>
	panic_mode = true;
    d15c:	2301      	movs	r3, #1
    d15e:	703b      	strb	r3, [r7, #0]
}
    d160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    d162:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d164:	795b      	ldrb	r3, [r3, #5]
    d166:	b11b      	cbz	r3, d170 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    d168:	6823      	ldr	r3, [r4, #0]
    d16a:	4620      	mov	r0, r4
    d16c:	691b      	ldr	r3, [r3, #16]
    d16e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d170:	3501      	adds	r5, #1
    d172:	3410      	adds	r4, #16
    d174:	e7f0      	b.n	d158 <z_impl_log_panic+0x14>
    d176:	bf00      	nop
    d178:	20010ea1 	.word	0x20010ea1
    d17c:	00011c84 	.word	0x00011c84
    d180:	00011c94 	.word	0x00011c94

0000d184 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    d184:	b40e      	push	{r1, r2, r3}
    d186:	b503      	push	{r0, r1, lr}
    d188:	ab03      	add	r3, sp, #12
    d18a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d18e:	4601      	mov	r1, r0
    d190:	4804      	ldr	r0, [pc, #16]	; (d1a4 <print_formatted+0x20>)
	va_start(args, fmt);
    d192:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d194:	f003 fcd5 	bl	10b42 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    d198:	2000      	movs	r0, #0
    d19a:	b002      	add	sp, #8
    d19c:	f85d eb04 	ldr.w	lr, [sp], #4
    d1a0:	b003      	add	sp, #12
    d1a2:	4770      	bx	lr
    d1a4:	000110db 	.word	0x000110db

0000d1a8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    d1ac:	f011 0402 	ands.w	r4, r1, #2
{
    d1b0:	b085      	sub	sp, #20
    d1b2:	4606      	mov	r6, r0
    d1b4:	4690      	mov	r8, r2
    d1b6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    d1ba:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    d1be:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    d1c2:	d007      	beq.n	d1d4 <prefix_print+0x2c>
	if (!format) {
    d1c4:	f011 0f44 	tst.w	r1, #68	; 0x44
    d1c8:	d137      	bne.n	d23a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    d1ca:	461a      	mov	r2, r3
    d1cc:	4932      	ldr	r1, [pc, #200]	; (d298 <prefix_print+0xf0>)
    d1ce:	f7ff ffd9 	bl	d184 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    d1d2:	4604      	mov	r4, r0
	if (color) {
    d1d4:	f1b9 0f00 	cmp.w	r9, #0
    d1d8:	d00a      	beq.n	d1f0 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    d1da:	4b30      	ldr	r3, [pc, #192]	; (d29c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    d1dc:	4930      	ldr	r1, [pc, #192]	; (d2a0 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    d1de:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    d1e2:	4b30      	ldr	r3, [pc, #192]	; (d2a4 <prefix_print+0xfc>)
    d1e4:	4630      	mov	r0, r6
    d1e6:	2a00      	cmp	r2, #0
    d1e8:	bf08      	it	eq
    d1ea:	461a      	moveq	r2, r3
    d1ec:	f7ff ffca 	bl	d184 <print_formatted>
	if (level_on) {
    d1f0:	b13d      	cbz	r5, d202 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    d1f2:	4b2d      	ldr	r3, [pc, #180]	; (d2a8 <prefix_print+0x100>)
    d1f4:	492d      	ldr	r1, [pc, #180]	; (d2ac <prefix_print+0x104>)
    d1f6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    d1fa:	4630      	mov	r0, r6
    d1fc:	f7ff ffc2 	bl	d184 <print_formatted>
    d200:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    d202:	f1b8 0f00 	cmp.w	r8, #0
    d206:	d044      	beq.n	d292 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    d208:	2301      	movs	r3, #1
    d20a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    d20e:	4b28      	ldr	r3, [pc, #160]	; (d2b0 <prefix_print+0x108>)
    d210:	f017 0f10 	tst.w	r7, #16
    d214:	4f27      	ldr	r7, [pc, #156]	; (d2b4 <prefix_print+0x10c>)
    d216:	bf18      	it	ne
    d218:	461f      	movne	r7, r3
    d21a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    d21e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    d222:	f7ff ff41 	bl	d0a8 <log_source_name_get>
    d226:	4639      	mov	r1, r7
    d228:	4602      	mov	r2, r0
    d22a:	4630      	mov	r0, r6
    d22c:	f7ff ffaa 	bl	d184 <print_formatted>
    d230:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    d232:	4420      	add	r0, r4
    d234:	b005      	add	sp, #20
    d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    d23a:	4a1f      	ldr	r2, [pc, #124]	; (d2b8 <prefix_print+0x110>)
    d23c:	6811      	ldr	r1, [r2, #0]
    d23e:	b331      	cbz	r1, d28e <prefix_print+0xe6>
		timestamp /= timestamp_div;
    d240:	4a1e      	ldr	r2, [pc, #120]	; (d2bc <prefix_print+0x114>)
    d242:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    d246:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    d248:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    d24c:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
    d250:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    d254:	fbb4 f2fe 	udiv	r2, r4, lr
    d258:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    d25c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    d260:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d264:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    d268:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d26c:	fb01 441b 	mls	r4, r1, fp, r4
    d270:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    d274:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d278:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    d27c:	e9cd b101 	strd	fp, r1, [sp, #4]
    d280:	fb0a e113 	mls	r1, sl, r3, lr
    d284:	9100      	str	r1, [sp, #0]
    d286:	490e      	ldr	r1, [pc, #56]	; (d2c0 <prefix_print+0x118>)
    d288:	f7ff ff7c 	bl	d184 <print_formatted>
    d28c:	e7a1      	b.n	d1d2 <prefix_print+0x2a>
		length = 0;
    d28e:	4608      	mov	r0, r1
    d290:	e79f      	b.n	d1d2 <prefix_print+0x2a>
	total += print_formatted(log_output,
    d292:	4f08      	ldr	r7, [pc, #32]	; (d2b4 <prefix_print+0x10c>)
    d294:	e7c1      	b.n	d21a <prefix_print+0x72>
    d296:	bf00      	nop
    d298:	00012247 	.word	0x00012247
    d29c:	00011d3c 	.word	0x00011d3c
    d2a0:	00012794 	.word	0x00012794
    d2a4:	00012239 	.word	0x00012239
    d2a8:	00011d50 	.word	0x00011d50
    d2ac:	0001226c 	.word	0x0001226c
    d2b0:	00012243 	.word	0x00012243
    d2b4:	0001223e 	.word	0x0001223e
    d2b8:	20010534 	.word	0x20010534
    d2bc:	20010538 	.word	0x20010538
    d2c0:	00012250 	.word	0x00012250

0000d2c4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    d2c4:	b538      	push	{r3, r4, r5, lr}
    d2c6:	460c      	mov	r4, r1
	if (color) {
    d2c8:	07e1      	lsls	r1, r4, #31
{
    d2ca:	4605      	mov	r5, r0
	if (color) {
    d2cc:	d503      	bpl.n	d2d6 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    d2ce:	4a08      	ldr	r2, [pc, #32]	; (d2f0 <postfix_print+0x2c>)
    d2d0:	4908      	ldr	r1, [pc, #32]	; (d2f4 <postfix_print+0x30>)
    d2d2:	f7ff ff57 	bl	d184 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d2d6:	06e2      	lsls	r2, r4, #27
    d2d8:	d408      	bmi.n	d2ec <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d2da:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    d2dc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    d2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    d2e2:	bf4c      	ite	mi
    d2e4:	4904      	ldrmi	r1, [pc, #16]	; (d2f8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    d2e6:	4905      	ldrpl	r1, [pc, #20]	; (d2fc <postfix_print+0x38>)
    d2e8:	f7ff bf4c 	b.w	d184 <print_formatted>
}
    d2ec:	bd38      	pop	{r3, r4, r5, pc}
    d2ee:	bf00      	nop
    d2f0:	00012239 	.word	0x00012239
    d2f4:	00012794 	.word	0x00012794
    d2f8:	00012930 	.word	0x00012930
    d2fc:	0001292f 	.word	0x0001292f

0000d300 <hexdump_line_print>:
{
    d300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d304:	4698      	mov	r8, r3
    d306:	9b08      	ldr	r3, [sp, #32]
    d308:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d30a:	06dd      	lsls	r5, r3, #27
{
    d30c:	460e      	mov	r6, r1
    d30e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d310:	d405      	bmi.n	d31e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d312:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    d314:	bf4c      	ite	mi
    d316:	4929      	ldrmi	r1, [pc, #164]	; (d3bc <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    d318:	4929      	ldrpl	r1, [pc, #164]	; (d3c0 <hexdump_line_print+0xc0>)
    d31a:	f7ff ff33 	bl	d184 <print_formatted>
{
    d31e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    d320:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d3c8 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    d324:	4545      	cmp	r5, r8
    d326:	db2a      	blt.n	d37e <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d328:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    d32a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d3cc <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    d32e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d3d0 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    d332:	f8df a094 	ldr.w	sl, [pc, #148]	; d3c8 <hexdump_line_print+0xc8>
		if (i < length) {
    d336:	42bd      	cmp	r5, r7
    d338:	d22e      	bcs.n	d398 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    d33a:	5d72      	ldrb	r2, [r6, r5]
    d33c:	4649      	mov	r1, r9
    d33e:	4620      	mov	r0, r4
    d340:	f7ff ff20 	bl	d184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d344:	3501      	adds	r5, #1
    d346:	2d10      	cmp	r5, #16
    d348:	d11f      	bne.n	d38a <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    d34a:	491e      	ldr	r1, [pc, #120]	; (d3c4 <hexdump_line_print+0xc4>)
    d34c:	4620      	mov	r0, r4
    d34e:	f7ff ff19 	bl	d184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d352:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    d354:	f8df 8070 	ldr.w	r8, [pc, #112]	; d3c8 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    d358:	f8df 9078 	ldr.w	r9, [pc, #120]	; d3d4 <hexdump_line_print+0xd4>
		if (i < length) {
    d35c:	42af      	cmp	r7, r5
    d35e:	d927      	bls.n	d3b0 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    d360:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    d362:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    d364:	f1a2 0320 	sub.w	r3, r2, #32
    d368:	2b5f      	cmp	r3, #95	; 0x5f
    d36a:	bf28      	it	cs
    d36c:	222e      	movcs	r2, #46	; 0x2e
    d36e:	4620      	mov	r0, r4
    d370:	f7ff ff08 	bl	d184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d374:	3501      	adds	r5, #1
    d376:	2d10      	cmp	r5, #16
    d378:	d113      	bne.n	d3a2 <hexdump_line_print+0xa2>
}
    d37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    d37e:	4649      	mov	r1, r9
    d380:	4620      	mov	r0, r4
    d382:	f7ff feff 	bl	d184 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d386:	3501      	adds	r5, #1
    d388:	e7cc      	b.n	d324 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    d38a:	076a      	lsls	r2, r5, #29
    d38c:	d1d3      	bne.n	d336 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    d38e:	4651      	mov	r1, sl
    d390:	4620      	mov	r0, r4
    d392:	f7ff fef7 	bl	d184 <print_formatted>
    d396:	e7ce      	b.n	d336 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    d398:	4641      	mov	r1, r8
    d39a:	4620      	mov	r0, r4
    d39c:	f7ff fef2 	bl	d184 <print_formatted>
    d3a0:	e7d0      	b.n	d344 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    d3a2:	076b      	lsls	r3, r5, #29
    d3a4:	d1da      	bne.n	d35c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d3a6:	4641      	mov	r1, r8
    d3a8:	4620      	mov	r0, r4
    d3aa:	f7ff feeb 	bl	d184 <print_formatted>
    d3ae:	e7d5      	b.n	d35c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d3b0:	4641      	mov	r1, r8
    d3b2:	4620      	mov	r0, r4
    d3b4:	f7ff fee6 	bl	d184 <print_formatted>
    d3b8:	e7dc      	b.n	d374 <hexdump_line_print+0x74>
    d3ba:	bf00      	nop
    d3bc:	00012930 	.word	0x00012930
    d3c0:	0001292f 	.word	0x0001292f
    d3c4:	00012232 	.word	0x00012232
    d3c8:	00012230 	.word	0x00012230
    d3cc:	0001222e 	.word	0x0001222e
    d3d0:	00012228 	.word	0x00012228
    d3d4:	00012234 	.word	0x00012234

0000d3d8 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
    d3d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    d3dc:	f011 0407 	ands.w	r4, r1, #7
{
    d3e0:	4606      	mov	r6, r0
    d3e2:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
    d3e6:	461d      	mov	r5, r3
	if (!raw_string) {
    d3e8:	d00b      	beq.n	d402 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
    d3ea:	f3c1 1389 	ubfx	r3, r1, #6, #10
    d3ee:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    d3f2:	9302      	str	r3, [sp, #8]
    d3f4:	e9cd 4100 	strd	r4, r1, [sp]
    d3f8:	4613      	mov	r3, r2
    d3fa:	4639      	mov	r1, r7
    d3fc:	2201      	movs	r2, #1
    d3fe:	f7ff fed3 	bl	d1a8 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    d402:	4643      	mov	r3, r8
    d404:	462a      	mov	r2, r5
    d406:	4631      	mov	r1, r6
    d408:	480d      	ldr	r0, [pc, #52]	; (d440 <log_output_string+0x68>)
    d40a:	f003 fb9a 	bl	10b42 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    d40e:	b98c      	cbnz	r4, d434 <log_output_string+0x5c>
    d410:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
    d412:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    d416:	b95b      	cbnz	r3, d430 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    d418:	2c0a      	cmp	r4, #10
    d41a:	d103      	bne.n	d424 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
    d41c:	4909      	ldr	r1, [pc, #36]	; (d444 <log_output_string+0x6c>)
    d41e:	4630      	mov	r0, r6
    d420:	f7ff feb0 	bl	d184 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
    d424:	4630      	mov	r0, r6
}
    d426:	b004      	add	sp, #16
    d428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
    d42c:	f003 be6e 	b.w	1110c <log_output_flush>
	while (*fmt != '\0') {
    d430:	461c      	mov	r4, r3
    d432:	e7ee      	b.n	d412 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
    d434:	4622      	mov	r2, r4
    d436:	4639      	mov	r1, r7
    d438:	4630      	mov	r0, r6
    d43a:	f7ff ff43 	bl	d2c4 <postfix_print>
    d43e:	e7f1      	b.n	d424 <log_output_string+0x4c>
    d440:	000110db 	.word	0x000110db
    d444:	00012237 	.word	0x00012237

0000d448 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
    d448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d44c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    d44e:	4698      	mov	r8, r3
    d450:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d454:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
    d458:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d45c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    d460:	9302      	str	r3, [sp, #8]
    d462:	e9cd 9100 	strd	r9, r1, [sp]
    d466:	4613      	mov	r3, r2
    d468:	4631      	mov	r1, r6
    d46a:	2201      	movs	r2, #1
{
    d46c:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d46e:	f7ff fe9b 	bl	d1a8 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    d472:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    d474:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
    d476:	4910      	ldr	r1, [pc, #64]	; (d4b8 <log_output_hexdump+0x70>)
    d478:	4620      	mov	r0, r4
    d47a:	f7ff fe83 	bl	d184 <print_formatted>

	while (length) {
    d47e:	b955      	cbnz	r5, d496 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
    d480:	4620      	mov	r0, r4
    d482:	464a      	mov	r2, r9
    d484:	4631      	mov	r1, r6
    d486:	f7ff ff1d 	bl	d2c4 <postfix_print>
	log_output_flush(log_output);
    d48a:	4620      	mov	r0, r4
}
    d48c:	b004      	add	sp, #16
    d48e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    d492:	f003 be3b 	b.w	1110c <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    d496:	2d10      	cmp	r5, #16
    d498:	46a8      	mov	r8, r5
    d49a:	bf28      	it	cs
    d49c:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
    d4a0:	4639      	mov	r1, r7
    d4a2:	9600      	str	r6, [sp, #0]
    d4a4:	4653      	mov	r3, sl
    d4a6:	4642      	mov	r2, r8
    d4a8:	4620      	mov	r0, r4
    d4aa:	f7ff ff29 	bl	d300 <hexdump_line_print>
		data += part_len;
    d4ae:	4447      	add	r7, r8
		length -= part_len;
    d4b0:	eba5 0508 	sub.w	r5, r5, r8
    d4b4:	e7e3      	b.n	d47e <log_output_hexdump+0x36>
    d4b6:	bf00      	nop
    d4b8:	00012794 	.word	0x00012794

0000d4bc <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    d4bc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d4be:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d4c0:	4a07      	ldr	r2, [pc, #28]	; (d4e0 <log_output_timestamp_freq_set+0x24>)
{
    d4c2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d4c4:	4c07      	ldr	r4, [pc, #28]	; (d4e4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d4c6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d4c8:	42a0      	cmp	r0, r4
    d4ca:	d804      	bhi.n	d4d6 <log_output_timestamp_freq_set+0x1a>
    d4cc:	b101      	cbz	r1, d4d0 <log_output_timestamp_freq_set+0x14>
    d4ce:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d4d0:	4b05      	ldr	r3, [pc, #20]	; (d4e8 <log_output_timestamp_freq_set+0x2c>)
    d4d2:	6018      	str	r0, [r3, #0]
}
    d4d4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    d4d6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d4d8:	005b      	lsls	r3, r3, #1
    d4da:	2101      	movs	r1, #1
    d4dc:	e7f4      	b.n	d4c8 <log_output_timestamp_freq_set+0xc>
    d4de:	bf00      	nop
    d4e0:	20010538 	.word	0x20010538
    d4e4:	000f4240 	.word	0x000f4240
    d4e8:	20010534 	.word	0x20010534

0000d4ec <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4ee:	460d      	mov	r5, r1
    d4f0:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    d4f2:	4f06      	ldr	r7, [pc, #24]	; (d50c <char_out+0x20>)
    d4f4:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    d4f6:	42b4      	cmp	r4, r6
    d4f8:	d101      	bne.n	d4fe <char_out+0x12>
	}

	return length;
}
    d4fa:	4628      	mov	r0, r5
    d4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    d4fe:	6838      	ldr	r0, [r7, #0]
    d500:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    d504:	6883      	ldr	r3, [r0, #8]
    d506:	685b      	ldr	r3, [r3, #4]
    d508:	4798      	blx	r3
    d50a:	e7f4      	b.n	d4f6 <char_out+0xa>
    d50c:	20010550 	.word	0x20010550

0000d510 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    d510:	4801      	ldr	r0, [pc, #4]	; (d518 <panic+0x8>)
    d512:	f003 bdfb 	b.w	1110c <log_output_flush>
    d516:	bf00      	nop
    d518:	00011d7c 	.word	0x00011d7c

0000d51c <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    d51c:	b508      	push	{r3, lr}
    d51e:	4803      	ldr	r0, [pc, #12]	; (d52c <log_backend_uart_init+0x10>)
    d520:	f002 fb70 	bl	fc04 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d524:	4b02      	ldr	r3, [pc, #8]	; (d530 <log_backend_uart_init+0x14>)
    d526:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    d528:	bd08      	pop	{r3, pc}
    d52a:	bf00      	nop
    d52c:	00012292 	.word	0x00012292
    d530:	20010550 	.word	0x20010550

0000d534 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
    d534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    d536:	200f      	movs	r0, #15
    d538:	9002      	str	r0, [sp, #8]
    d53a:	9807      	ldr	r0, [sp, #28]
    d53c:	9001      	str	r0, [sp, #4]
    d53e:	9806      	ldr	r0, [sp, #24]
    d540:	9000      	str	r0, [sp, #0]
    d542:	4803      	ldr	r0, [pc, #12]	; (d550 <sync_hexdump+0x1c>)
    d544:	f7ff ff80 	bl	d448 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
    d548:	b005      	add	sp, #20
    d54a:	f85d fb04 	ldr.w	pc, [sp], #4
    d54e:	bf00      	nop
    d550:	00011d7c 	.word	0x00011d7c

0000d554 <sync_string>:
{
    d554:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    d556:	200f      	movs	r0, #15
    d558:	9001      	str	r0, [sp, #4]
    d55a:	9804      	ldr	r0, [sp, #16]
    d55c:	9000      	str	r0, [sp, #0]
    d55e:	4803      	ldr	r0, [pc, #12]	; (d56c <sync_string+0x18>)
    d560:	f7ff ff3a 	bl	d3d8 <log_output_string>
}
    d564:	b003      	add	sp, #12
    d566:	f85d fb04 	ldr.w	pc, [sp], #4
    d56a:	bf00      	nop
    d56c:	00011d7c 	.word	0x00011d7c

0000d570 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
    d570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
    d574:	481f      	ldr	r0, [pc, #124]	; (d5f4 <sys_pm_create_device_list+0x84>)
    d576:	f002 fb1d 	bl	fbb4 <z_device_get_all_static>

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
	while (z_pm_core_devices[core_dev]) {
    d57a:	2300      	movs	r3, #0
    d57c:	4a1e      	ldr	r2, [pc, #120]	; (d5f8 <sys_pm_create_device_list+0x88>)
	size_t count = z_device_get_all_static(&all_devices);
    d57e:	9000      	str	r0, [sp, #0]
	while (z_pm_core_devices[core_dev]) {
    d580:	fa1f f983 	uxth.w	r9, r3
    d584:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
    d588:	3301      	adds	r3, #1
    d58a:	2c00      	cmp	r4, #0
    d58c:	d1f8      	bne.n	d580 <sys_pm_create_device_list+0x10>
		core_dev++;
	}

	num_pm = core_dev;
    d58e:	4e1b      	ldr	r6, [pc, #108]	; (d5fc <sys_pm_create_device_list+0x8c>)
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
    d590:	4b18      	ldr	r3, [pc, #96]	; (d5f4 <sys_pm_create_device_list+0x84>)
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
    d592:	f8df a070 	ldr.w	sl, [pc, #112]	; d604 <sys_pm_create_device_list+0x94>
	num_pm = core_dev;
    d596:	f8a6 9000 	strh.w	r9, [r6]
	for (pmi = 0; pmi < count; pmi++) {
    d59a:	9a00      	ldr	r2, [sp, #0]
    d59c:	fa1f f884 	uxth.w	r8, r4
    d5a0:	4542      	cmp	r2, r8
    d5a2:	4645      	mov	r5, r8
    d5a4:	d802      	bhi.n	d5ac <sys_pm_create_device_list+0x3c>
		}
	}
}
    d5a6:	b003      	add	sp, #12
    d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
    d5ac:	2118      	movs	r1, #24
    d5ae:	681a      	ldr	r2, [r3, #0]
    d5b0:	fb01 2505 	mla	r5, r1, r5, r2
		if (dev->device_pm_control == device_pm_control_nop) {
    d5b4:	4912      	ldr	r1, [pc, #72]	; (d600 <sys_pm_create_device_list+0x90>)
    d5b6:	692a      	ldr	r2, [r5, #16]
    d5b8:	428a      	cmp	r2, r1
    d5ba:	d101      	bne.n	d5c0 <sys_pm_create_device_list+0x50>
    d5bc:	3401      	adds	r4, #1
    d5be:	e7ec      	b.n	d59a <sys_pm_create_device_list+0x2a>
    d5c0:	2700      	movs	r7, #0
		while (z_pm_core_devices[cdi]) {
    d5c2:	490d      	ldr	r1, [pc, #52]	; (d5f8 <sys_pm_create_device_list+0x88>)
    d5c4:	b2ba      	uxth	r2, r7
    d5c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    d5ca:	4693      	mov	fp, r2
    d5cc:	b151      	cbz	r1, d5e4 <sys_pm_create_device_list+0x74>
			if (strcmp(dev->name, z_pm_core_devices[cdi]) == 0) {
    d5ce:	6828      	ldr	r0, [r5, #0]
    d5d0:	9201      	str	r2, [sp, #4]
    d5d2:	f003 fe87 	bl	112e4 <strcmp>
    d5d6:	3701      	adds	r7, #1
    d5d8:	9a01      	ldr	r2, [sp, #4]
    d5da:	4b06      	ldr	r3, [pc, #24]	; (d5f4 <sys_pm_create_device_list+0x84>)
    d5dc:	2800      	cmp	r0, #0
    d5de:	d1f0      	bne.n	d5c2 <sys_pm_create_device_list+0x52>
				pm_devices[cdi] = pmi;
    d5e0:	f82a 801b 	strh.w	r8, [sl, fp, lsl #1]
		if (cdi == core_dev) {
    d5e4:	454a      	cmp	r2, r9
			pm_devices[num_pm++] = pmi;
    d5e6:	bf01      	itttt	eq
    d5e8:	8832      	ldrheq	r2, [r6, #0]
    d5ea:	1c51      	addeq	r1, r2, #1
    d5ec:	8031      	strheq	r1, [r6, #0]
    d5ee:	f82a 8012 	strheq.w	r8, [sl, r2, lsl #1]
    d5f2:	e7e3      	b.n	d5bc <sys_pm_create_device_list+0x4c>
    d5f4:	20010554 	.word	0x20010554
    d5f8:	00011d8c 	.word	0x00011d8c
    d5fc:	20010680 	.word	0x20010680
    d600:	00011787 	.word	0x00011787
    d604:	20010682 	.word	0x20010682

0000d608 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    d608:	b510      	push	{r4, lr}
    d60a:	4807      	ldr	r0, [pc, #28]	; (d628 <uart_console_init+0x20>)
    d60c:	f002 fafa 	bl	fc04 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    d610:	4c06      	ldr	r4, [pc, #24]	; (d62c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d612:	4b07      	ldr	r3, [pc, #28]	; (d630 <uart_console_init+0x28>)
    d614:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    d616:	4620      	mov	r0, r4
    d618:	f001 f900 	bl	e81c <__stdout_hook_install>
	__printk_hook_install(console_out);
    d61c:	4620      	mov	r0, r4
    d61e:	f7ff fbf9 	bl	ce14 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    d622:	2000      	movs	r0, #0
    d624:	bd10      	pop	{r4, pc}
    d626:	bf00      	nop
    d628:	00012292 	.word	0x00012292
    d62c:	0000d635 	.word	0x0000d635
    d630:	20010558 	.word	0x20010558

0000d634 <console_out>:
	if ('\n' == c) {
    d634:	280a      	cmp	r0, #10
{
    d636:	b538      	push	{r3, r4, r5, lr}
    d638:	4604      	mov	r4, r0
    d63a:	4d07      	ldr	r5, [pc, #28]	; (d658 <console_out+0x24>)
	if ('\n' == c) {
    d63c:	d104      	bne.n	d648 <console_out+0x14>
    d63e:	6828      	ldr	r0, [r5, #0]
    d640:	6883      	ldr	r3, [r0, #8]
    d642:	210d      	movs	r1, #13
    d644:	685b      	ldr	r3, [r3, #4]
    d646:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    d648:	6828      	ldr	r0, [r5, #0]
    d64a:	6883      	ldr	r3, [r0, #8]
    d64c:	b2e1      	uxtb	r1, r4
    d64e:	685b      	ldr	r3, [r3, #4]
    d650:	4798      	blx	r3
}
    d652:	4620      	mov	r0, r4
    d654:	bd38      	pop	{r3, r4, r5, pc}
    d656:	bf00      	nop
    d658:	20010558 	.word	0x20010558

0000d65c <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d65c:	b570      	push	{r4, r5, r6, lr}
    d65e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    d660:	240c      	movs	r4, #12
	size_t offset = (size_t)(mgr - data->mgr);
    d662:	480d      	ldr	r0, [pc, #52]	; (d698 <onoff_stop+0x3c>)
{
    d664:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    d666:	1a2b      	subs	r3, r5, r0
    d668:	109a      	asrs	r2, r3, #2
    d66a:	4b0c      	ldr	r3, [pc, #48]	; (d69c <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    d66c:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    d66e:	4353      	muls	r3, r2
    d670:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    d672:	435c      	muls	r4, r3
    d674:	f104 0340 	add.w	r3, r4, #64	; 0x40
    d678:	4418      	add	r0, r3
    d67a:	f003 fd62 	bl	11142 <set_off_state>
	if (err < 0) {
    d67e:	1e01      	subs	r1, r0, #0
    d680:	db04      	blt.n	d68c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    d682:	4b07      	ldr	r3, [pc, #28]	; (d6a0 <onoff_stop+0x44>)
    d684:	4423      	add	r3, r4
    d686:	685b      	ldr	r3, [r3, #4]
    d688:	4798      	blx	r3
	return 0;
    d68a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    d68c:	4628      	mov	r0, r5
    d68e:	4633      	mov	r3, r6
}
    d690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d694:	4718      	bx	r3
    d696:	bf00      	nop
    d698:	2001056c 	.word	0x2001056c
    d69c:	b6db6db7 	.word	0xb6db6db7
    d6a0:	00011db0 	.word	0x00011db0

0000d6a4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d6a8:	4c0f      	ldr	r4, [pc, #60]	; (d6e8 <onoff_start+0x44>)
    d6aa:	4d10      	ldr	r5, [pc, #64]	; (d6ec <onoff_start+0x48>)
    d6ac:	1b03      	subs	r3, r0, r4
    d6ae:	109b      	asrs	r3, r3, #2
    d6b0:	435d      	muls	r5, r3
    d6b2:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    d6b4:	250c      	movs	r5, #12
    d6b6:	435d      	muls	r5, r3
{
    d6b8:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    d6ba:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    d6be:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    d6c0:	4420      	add	r0, r4
    d6c2:	2140      	movs	r1, #64	; 0x40
    d6c4:	f003 fd56 	bl	11174 <set_starting_state>
	if (err < 0) {
    d6c8:	1e01      	subs	r1, r0, #0
    d6ca:	db08      	blt.n	d6de <onoff_start+0x3a>
	subdata->cb = data->cb;
    d6cc:	4b08      	ldr	r3, [pc, #32]	; (d6f0 <onoff_start+0x4c>)
    d6ce:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    d6d0:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d6d4:	4b07      	ldr	r3, [pc, #28]	; (d6f4 <onoff_start+0x50>)
    d6d6:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    d6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    d6dc:	4718      	bx	r3
		notify(mgr, err);
    d6de:	4638      	mov	r0, r7
    d6e0:	4633      	mov	r3, r6
}
    d6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    d6e6:	4718      	bx	r3
    d6e8:	2001056c 	.word	0x2001056c
    d6ec:	b6db6db7 	.word	0xb6db6db7
    d6f0:	000111d7 	.word	0x000111d7
    d6f4:	00011db0 	.word	0x00011db0

0000d6f8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    d6f8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d6fa:	2200      	movs	r2, #0
    d6fc:	2101      	movs	r1, #1
{
    d6fe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d700:	2005      	movs	r0, #5
    d702:	f000 faa5 	bl	dc50 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    d706:	2005      	movs	r0, #5
    d708:	f000 fa70 	bl	dbec <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    d70c:	480f      	ldr	r0, [pc, #60]	; (d74c <clk_init+0x54>)
    d70e:	f001 ff7b 	bl	f608 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d712:	4b0f      	ldr	r3, [pc, #60]	; (d750 <clk_init+0x58>)
    d714:	4298      	cmp	r0, r3
    d716:	d115      	bne.n	d744 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d718:	f004 f821 	bl	1175e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    d71c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d71e:	490d      	ldr	r1, [pc, #52]	; (d754 <clk_init+0x5c>)
    d720:	4630      	mov	r0, r6
    d722:	f003 fb7e 	bl	10e22 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d726:	2800      	cmp	r0, #0
    d728:	db0b      	blt.n	d742 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d72a:	2501      	movs	r5, #1
    d72c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    d72e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d730:	4908      	ldr	r1, [pc, #32]	; (d754 <clk_init+0x5c>)
    d732:	f104 001c 	add.w	r0, r4, #28
    d736:	f003 fb74 	bl	10e22 <onoff_manager_init>
		if (err < 0) {
    d73a:	2800      	cmp	r0, #0
    d73c:	db01      	blt.n	d742 <clk_init+0x4a>
	}

	return 0;
    d73e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d740:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    d742:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d744:	f06f 0004 	mvn.w	r0, #4
    d748:	e7fb      	b.n	d742 <clk_init+0x4a>
    d74a:	bf00      	nop
    d74c:	0000d7f1 	.word	0x0000d7f1
    d750:	0bad0000 	.word	0x0bad0000
    d754:	00011dc8 	.word	0x00011dc8

0000d758 <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
    d758:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d75a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d75c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d75e:	434b      	muls	r3, r1
    d760:	4808      	ldr	r0, [pc, #32]	; (d784 <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
    d762:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d764:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d766:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    d768:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d76c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d76e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d770:	f003 fd1e 	bl	111b0 <set_on_state>
	if (callback) {
    d774:	b12d      	cbz	r5, d782 <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d776:	4632      	mov	r2, r6
    d778:	462b      	mov	r3, r5
}
    d77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d77e:	4802      	ldr	r0, [pc, #8]	; (d788 <clkstarted_handle.constprop.10+0x30>)
    d780:	4718      	bx	r3
}
    d782:	bd70      	pop	{r4, r5, r6, pc}
    d784:	2001056c 	.word	0x2001056c
    d788:	2001034c 	.word	0x2001034c

0000d78c <generic_hfclk_start>:
{
    d78c:	b508      	push	{r3, lr}
	__asm__ volatile(
    d78e:	f04f 0320 	mov.w	r3, #32
    d792:	f3ef 8111 	mrs	r1, BASEPRI
    d796:	f383 8811 	msr	BASEPRI, r3
    d79a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d79e:	4a11      	ldr	r2, [pc, #68]	; (d7e4 <generic_hfclk_start+0x58>)
    d7a0:	6813      	ldr	r3, [r2, #0]
    d7a2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    d7a6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    d7aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d7ac:	d00b      	beq.n	d7c6 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d7ae:	4a0e      	ldr	r2, [pc, #56]	; (d7e8 <generic_hfclk_start+0x5c>)
    d7b0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d7b4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d7b8:	f013 0301 	ands.w	r3, r3, #1
    d7bc:	d003      	beq.n	d7c6 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    d7be:	480b      	ldr	r0, [pc, #44]	; (d7ec <generic_hfclk_start+0x60>)
    d7c0:	f003 fcf6 	bl	111b0 <set_on_state>
			already_started = true;
    d7c4:	2301      	movs	r3, #1
	__asm__ volatile(
    d7c6:	f381 8811 	msr	BASEPRI, r1
    d7ca:	f3bf 8f6f 	isb	sy
	if (already_started) {
    d7ce:	b123      	cbz	r3, d7da <generic_hfclk_start+0x4e>
}
    d7d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    d7d4:	2000      	movs	r0, #0
    d7d6:	f7ff bfbf 	b.w	d758 <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d7da:	2001      	movs	r0, #1
}
    d7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d7e0:	f001 bf22 	b.w	f628 <nrfx_clock_start>
    d7e4:	200105bc 	.word	0x200105bc
    d7e8:	40005000 	.word	0x40005000
    d7ec:	200105ac 	.word	0x200105ac

0000d7f0 <clock_event_handler>:
	switch (event) {
    d7f0:	b110      	cbz	r0, d7f8 <clock_event_handler+0x8>
    d7f2:	2801      	cmp	r0, #1
    d7f4:	d004      	beq.n	d800 <clock_event_handler+0x10>
    d7f6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d7f8:	4b03      	ldr	r3, [pc, #12]	; (d808 <clock_event_handler+0x18>)
    d7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d7fc:	075b      	lsls	r3, r3, #29
    d7fe:	d101      	bne.n	d804 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d800:	f7ff bfaa 	b.w	d758 <clkstarted_handle.constprop.10>
}
    d804:	4770      	bx	lr
    d806:	bf00      	nop
    d808:	2001056c 	.word	0x2001056c

0000d80c <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d80c:	4b07      	ldr	r3, [pc, #28]	; (d82c <generic_hfclk_stop+0x20>)
    d80e:	e8d3 2fef 	ldaex	r2, [r3]
    d812:	f022 0102 	bic.w	r1, r2, #2
    d816:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d81a:	2800      	cmp	r0, #0
    d81c:	d1f7      	bne.n	d80e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    d81e:	07d3      	lsls	r3, r2, #31
    d820:	d402      	bmi.n	d828 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d822:	2001      	movs	r0, #1
    d824:	f001 bf32 	b.w	f68c <nrfx_clock_stop>
}
    d828:	4770      	bx	lr
    d82a:	bf00      	nop
    d82c:	200105bc 	.word	0x200105bc

0000d830 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d830:	2300      	movs	r3, #0
    d832:	2201      	movs	r2, #1
{
    d834:	b510      	push	{r4, lr}
    d836:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d838:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    d83c:	9301      	str	r3, [sp, #4]
    d83e:	4b09      	ldr	r3, [pc, #36]	; (d864 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d840:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    d842:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d844:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    d848:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    d84c:	f003 fce9 	bl	11222 <api_start>
	if (err < 0) {
    d850:	2800      	cmp	r0, #0
    d852:	db05      	blt.n	d860 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d858:	2300      	movs	r3, #0
    d85a:	4620      	mov	r0, r4
    d85c:	f002 fea8 	bl	105b0 <z_impl_k_sem_take>
}
    d860:	b008      	add	sp, #32
    d862:	bd10      	pop	{r4, pc}
    d864:	000111e9 	.word	0x000111e9

0000d868 <z_nrf_clock_control_lf_on>:
{
    d868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d86c:	2201      	movs	r2, #1
    d86e:	4606      	mov	r6, r0
    d870:	4934      	ldr	r1, [pc, #208]	; (d944 <z_nrf_clock_control_lf_on+0xdc>)
    d872:	e8d1 3fef 	ldaex	r3, [r1]
    d876:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d87a:	2800      	cmp	r0, #0
    d87c:	d1f9      	bne.n	d872 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d87e:	b933      	cbnz	r3, d88e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d880:	4931      	ldr	r1, [pc, #196]	; (d948 <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    d882:	4832      	ldr	r0, [pc, #200]	; (d94c <z_nrf_clock_control_lf_on+0xe4>)
    d884:	604b      	str	r3, [r1, #4]
    d886:	60cb      	str	r3, [r1, #12]
    d888:	608a      	str	r2, [r1, #8]
    d88a:	f003 fadd 	bl	10e48 <onoff_request>
	switch (start_mode) {
    d88e:	1e73      	subs	r3, r6, #1
    d890:	2b01      	cmp	r3, #1
    d892:	d82c      	bhi.n	d8ee <z_nrf_clock_control_lf_on+0x86>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d894:	2e01      	cmp	r6, #1
    d896:	d106      	bne.n	d8a6 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d898:	4b2d      	ldr	r3, [pc, #180]	; (d950 <z_nrf_clock_control_lf_on+0xe8>)
    d89a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d89e:	f003 0303 	and.w	r3, r3, #3
    d8a2:	2b02      	cmp	r3, #2
    d8a4:	d023      	beq.n	d8ee <z_nrf_clock_control_lf_on+0x86>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d8a6:	f004 f825 	bl	118f4 <k_is_in_isr>
    d8aa:	b918      	cbnz	r0, d8b4 <z_nrf_clock_control_lf_on+0x4c>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    d8ac:	4b29      	ldr	r3, [pc, #164]	; (d954 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    d8ae:	781b      	ldrb	r3, [r3, #0]
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d140      	bne.n	d936 <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    d8b4:	f04f 0320 	mov.w	r3, #32
    d8b8:	f3ef 8911 	mrs	r9, BASEPRI
    d8bc:	f383 8811 	msr	BASEPRI, r3
    d8c0:	f3bf 8f6f 	isb	sy
    d8c4:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d8c6:	4d22      	ldr	r5, [pc, #136]	; (d950 <z_nrf_clock_control_lf_on+0xe8>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d8c8:	4f23      	ldr	r7, [pc, #140]	; (d958 <z_nrf_clock_control_lf_on+0xf0>)
    d8ca:	46a8      	mov	r8, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d8cc:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d8d0:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    d8d4:	03d2      	lsls	r2, r2, #15
    d8d6:	d50c      	bpl.n	d8f2 <z_nrf_clock_control_lf_on+0x8a>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d8d8:	f003 0303 	and.w	r3, r3, #3
    d8dc:	2b02      	cmp	r3, #2
    d8de:	d001      	beq.n	d8e4 <z_nrf_clock_control_lf_on+0x7c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d8e0:	2e01      	cmp	r6, #1
    d8e2:	d106      	bne.n	d8f2 <z_nrf_clock_control_lf_on+0x8a>
	if (isr_mode) {
    d8e4:	b31c      	cbz	r4, d92e <z_nrf_clock_control_lf_on+0xc6>
	__asm__ volatile(
    d8e6:	f389 8811 	msr	BASEPRI, r9
    d8ea:	f3bf 8f6f 	isb	sy
}
    d8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    d8f2:	b1bc      	cbz	r4, d924 <z_nrf_clock_control_lf_on+0xbc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d8f4:	4648      	mov	r0, r9
    d8f6:	f000 fa0d 	bl	dd14 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d8fa:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d8fe:	b2db      	uxtb	r3, r3
    d900:	2b01      	cmp	r3, #1
    d902:	d1e3      	bne.n	d8cc <z_nrf_clock_control_lf_on+0x64>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d904:	683a      	ldr	r2, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    d906:	2a00      	cmp	r2, #0
    d908:	d0e0      	beq.n	d8cc <z_nrf_clock_control_lf_on+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d90a:	2200      	movs	r2, #0
    d90c:	603a      	str	r2, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d90e:	683a      	ldr	r2, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    d910:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d912:	2120      	movs	r1, #32
    d914:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    d918:	4a10      	ldr	r2, [pc, #64]	; (d95c <z_nrf_clock_control_lf_on+0xf4>)
    d91a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d91e:	4a10      	ldr	r2, [pc, #64]	; (d960 <z_nrf_clock_control_lf_on+0xf8>)
    d920:	6013      	str	r3, [r2, #0]
    d922:	e7d3      	b.n	d8cc <z_nrf_clock_control_lf_on+0x64>
	return z_impl_k_sleep(timeout);
    d924:	2100      	movs	r1, #0
    d926:	2021      	movs	r0, #33	; 0x21
    d928:	f002 fdfc 	bl	10524 <z_impl_k_sleep>
    d92c:	e7e5      	b.n	d8fa <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENSET = mask;
    d92e:	2302      	movs	r3, #2
    d930:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
		__ASSERT_NO_MSG(false);
    d934:	e7db      	b.n	d8ee <z_nrf_clock_control_lf_on+0x86>
    p_reg->INTENCLR = mask;
    d936:	2202      	movs	r2, #2
    d938:	4b05      	ldr	r3, [pc, #20]	; (d950 <z_nrf_clock_control_lf_on+0xe8>)
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d93a:	4604      	mov	r4, r0
    d93c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    d940:	4681      	mov	r9, r0
    d942:	e7c0      	b.n	d8c6 <z_nrf_clock_control_lf_on+0x5e>
    d944:	200105c0 	.word	0x200105c0
    d948:	2001055c 	.word	0x2001055c
    d94c:	20010588 	.word	0x20010588
    d950:	40005000 	.word	0x40005000
    d954:	20010ea5 	.word	0x20010ea5
    d958:	40005104 	.word	0x40005104
    d95c:	e000e100 	.word	0xe000e100
    d960:	40005008 	.word	0x40005008

0000d964 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    d964:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    d966:	4b08      	ldr	r3, [pc, #32]	; (d988 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d968:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d96c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d970:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    d974:	4290      	cmp	r0, r2
    d976:	d100      	bne.n	d97a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    d978:	4770      	bx	lr
    d97a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    d97e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d980:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d984:	e7f2      	b.n	d96c <handle_next_cycle_case+0x8>
    d986:	bf00      	nop
    d988:	40015000 	.word	0x40015000

0000d98c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d98c:	2200      	movs	r2, #0
    d98e:	4b07      	ldr	r3, [pc, #28]	; (d9ac <rtc_nrf_isr+0x20>)
    d990:	601a      	str	r2, [r3, #0]
    d992:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d994:	4a06      	ldr	r2, [pc, #24]	; (d9b0 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    d996:	4b07      	ldr	r3, [pc, #28]	; (d9b4 <rtc_nrf_isr+0x28>)
    d998:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    d99c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d99e:	1ac0      	subs	r0, r0, r3
    d9a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d9a4:	4403      	add	r3, r0
    d9a6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    d9a8:	f002 bf8e 	b.w	108c8 <z_clock_announce>
    d9ac:	40015140 	.word	0x40015140
    d9b0:	200105c4 	.word	0x200105c4
    d9b4:	40015000 	.word	0x40015000

0000d9b8 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    d9b8:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d9ba:	2400      	movs	r4, #0
    d9bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d9c0:	4d0e      	ldr	r5, [pc, #56]	; (d9fc <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d9c2:	4b0f      	ldr	r3, [pc, #60]	; (da00 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    d9c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d9c8:	601c      	str	r4, [r3, #0]
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	4b0d      	ldr	r3, [pc, #52]	; (da04 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    d9ce:	2101      	movs	r1, #1
    d9d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    d9d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d9d8:	4622      	mov	r2, r4
    d9da:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    d9de:	2015      	movs	r0, #21
    d9e0:	f000 f936 	bl	dc50 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    d9e4:	2015      	movs	r0, #21
    d9e6:	f000 f901 	bl	dbec <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d9ea:	2301      	movs	r3, #1
    d9ec:	4a06      	ldr	r2, [pc, #24]	; (da08 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    d9ee:	2002      	movs	r0, #2
    d9f0:	6013      	str	r3, [r2, #0]
    d9f2:	602b      	str	r3, [r5, #0]
    d9f4:	f7ff ff38 	bl	d868 <z_nrf_clock_control_lf_on>

	return 0;
}
    d9f8:	4620      	mov	r0, r4
    d9fa:	bd38      	pop	{r3, r4, r5, pc}
    d9fc:	40015000 	.word	0x40015000
    da00:	40015140 	.word	0x40015140
    da04:	e000e100 	.word	0xe000e100
    da08:	40015008 	.word	0x40015008

0000da0c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    da0e:	4b2d      	ldr	r3, [pc, #180]	; (dac4 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    da10:	4c2d      	ldr	r4, [pc, #180]	; (dac8 <z_clock_set_timeout+0xbc>)
    da12:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    da16:	4b2d      	ldr	r3, [pc, #180]	; (dacc <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    da18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    da1c:	bf08      	it	eq
    da1e:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
    da20:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    da22:	1a52      	subs	r2, r2, r1
    da24:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    da28:	0212      	lsls	r2, r2, #8
    da2a:	d438      	bmi.n	da9e <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    da2c:	3801      	subs	r0, #1
    da2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    da32:	42a0      	cmp	r0, r4
    da34:	bfa8      	it	ge
    da36:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    da38:	3301      	adds	r3, #1
    da3a:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    da3c:	42a0      	cmp	r0, r4
    da3e:	bf94      	ite	ls
    da40:	180c      	addls	r4, r1, r0
    da42:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    da44:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da48:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
    da4a:	4a1e      	ldr	r2, [pc, #120]	; (dac4 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da4c:	4d20      	ldr	r5, [pc, #128]	; (dad0 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
    da4e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
    da52:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
    da56:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da5a:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
    da5c:	1a5b      	subs	r3, r3, r1
    da5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    da62:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
    da64:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    da66:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    da6a:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    da6e:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    da72:	d104      	bne.n	da7e <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
    da74:	200f      	movs	r0, #15
    da76:	f003 ff43 	bl	11900 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da7a:	602e      	str	r6, [r5, #0]
    da7c:	682b      	ldr	r3, [r5, #0]
    da7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    da82:	4b14      	ldr	r3, [pc, #80]	; (dad4 <z_clock_set_timeout+0xc8>)
    da84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    da88:	4b0e      	ldr	r3, [pc, #56]	; (dac4 <z_clock_set_timeout+0xb8>)
    da8a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    da8e:	1a22      	subs	r2, r4, r0
    da90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
    da94:	2a01      	cmp	r2, #1
    da96:	d104      	bne.n	daa2 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
    da98:	f7ff ff64 	bl	d964 <handle_next_cycle_case>
    da9c:	e00b      	b.n	dab6 <z_clock_set_timeout+0xaa>
		ticks = 0;
    da9e:	2000      	movs	r0, #0
    daa0:	e7ca      	b.n	da38 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    daa2:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    daa6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    daaa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    daae:	1a24      	subs	r4, r4, r0
    dab0:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
    dab2:	0223      	lsls	r3, r4, #8
    dab4:	d4f0      	bmi.n	da98 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
    dab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    daba:	4b02      	ldr	r3, [pc, #8]	; (dac4 <z_clock_set_timeout+0xb8>)
    dabc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    dac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dac2:	bf00      	nop
    dac4:	40015000 	.word	0x40015000
    dac8:	007fffff 	.word	0x007fffff
    dacc:	200105c4 	.word	0x200105c4
    dad0:	40015140 	.word	0x40015140
    dad4:	e000e100 	.word	0xe000e100

0000dad8 <z_clock_elapsed>:
	__asm__ volatile(
    dad8:	f04f 0220 	mov.w	r2, #32
    dadc:	f3ef 8311 	mrs	r3, BASEPRI
    dae0:	f382 8811 	msr	BASEPRI, r2
    dae4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    dae8:	4a06      	ldr	r2, [pc, #24]	; (db04 <z_clock_elapsed+0x2c>)
    daea:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    daee:	4a06      	ldr	r2, [pc, #24]	; (db08 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    daf0:	6812      	ldr	r2, [r2, #0]
    daf2:	1a80      	subs	r0, r0, r2
    daf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    daf8:	f383 8811 	msr	BASEPRI, r3
    dafc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    db00:	4770      	bx	lr
    db02:	bf00      	nop
    db04:	40015000 	.word	0x40015000
    db08:	200105c4 	.word	0x200105c4

0000db0c <z_timer_cycle_get_32>:
	__asm__ volatile(
    db0c:	f04f 0320 	mov.w	r3, #32
    db10:	f3ef 8211 	mrs	r2, BASEPRI
    db14:	f383 8811 	msr	BASEPRI, r3
    db18:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    db1c:	4906      	ldr	r1, [pc, #24]	; (db38 <z_timer_cycle_get_32+0x2c>)
    db1e:	4b07      	ldr	r3, [pc, #28]	; (db3c <z_timer_cycle_get_32+0x30>)
    db20:	6808      	ldr	r0, [r1, #0]
    db22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    db26:	f382 8811 	msr	BASEPRI, r2
    db2a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    db2e:	1a1b      	subs	r3, r3, r0
    db30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    db34:	4418      	add	r0, r3
    db36:	4770      	bx	lr
    db38:	200105c4 	.word	0x200105c4
    db3c:	40015000 	.word	0x40015000

0000db40 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    db40:	4a09      	ldr	r2, [pc, #36]	; (db68 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    db42:	490a      	ldr	r1, [pc, #40]	; (db6c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    db44:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    db46:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    db48:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    db4a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    db4c:	4908      	ldr	r1, [pc, #32]	; (db70 <arch_swap+0x30>)
    db4e:	684b      	ldr	r3, [r1, #4]
    db50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    db54:	604b      	str	r3, [r1, #4]
    db56:	2300      	movs	r3, #0
    db58:	f383 8811 	msr	BASEPRI, r3
    db5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    db60:	6893      	ldr	r3, [r2, #8]
}
    db62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    db64:	4770      	bx	lr
    db66:	bf00      	nop
    db68:	20010640 	.word	0x20010640
    db6c:	00011ea8 	.word	0x00011ea8
    db70:	e000ed00 	.word	0xe000ed00

0000db74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    db74:	4913      	ldr	r1, [pc, #76]	; (dbc4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    db76:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    db78:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    db7c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    db7e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    db82:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    db86:	2020      	movs	r0, #32
    msr BASEPRI, r0
    db88:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    db8c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    db90:	4f0d      	ldr	r7, [pc, #52]	; (dbc8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    db92:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    db96:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    db98:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    db9a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    db9c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    db9e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    dba0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    dba2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    dba6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    dbaa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dbae:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    dbb2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    dbb6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    dbb8:	f003 fb61 	bl	1127e <configure_builtin_stack_guard>
    pop {r2, lr}
    dbbc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    dbc0:	4770      	bx	lr
    dbc2:	0000      	.short	0x0000
    ldr r1, =_kernel
    dbc4:	20010640 	.word	0x20010640
    ldr v4, =_SCS_ICSR
    dbc8:	e000ed04 	.word	0xe000ed04

0000dbcc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    dbcc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dbd0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dbd2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dbd6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dbda:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    dbdc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dbe0:	2902      	cmp	r1, #2
    beq _oops
    dbe2:	d0ff      	beq.n	dbe4 <_oops>

0000dbe4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dbe4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dbe6:	f003 fb4e 	bl	11286 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    dbea:	bd01      	pop	{r0, pc}

0000dbec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dbec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dbee:	2b00      	cmp	r3, #0
    dbf0:	db08      	blt.n	dc04 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dbf2:	2201      	movs	r2, #1
    dbf4:	f000 001f 	and.w	r0, r0, #31
    dbf8:	fa02 f000 	lsl.w	r0, r2, r0
    dbfc:	4a02      	ldr	r2, [pc, #8]	; (dc08 <arch_irq_enable+0x1c>)
    dbfe:	095b      	lsrs	r3, r3, #5
    dc00:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dc04:	4770      	bx	lr
    dc06:	bf00      	nop
    dc08:	e000e100 	.word	0xe000e100

0000dc0c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    dc0c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dc0e:	2b00      	cmp	r3, #0
    dc10:	db0d      	blt.n	dc2e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc12:	2201      	movs	r2, #1
    dc14:	f000 001f 	and.w	r0, r0, #31
    dc18:	fa02 f000 	lsl.w	r0, r2, r0
    dc1c:	095b      	lsrs	r3, r3, #5
    dc1e:	4a04      	ldr	r2, [pc, #16]	; (dc30 <arch_irq_disable+0x24>)
    dc20:	3320      	adds	r3, #32
    dc22:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dc26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dc2a:	f3bf 8f6f 	isb	sy
}
    dc2e:	4770      	bx	lr
    dc30:	e000e100 	.word	0xe000e100

0000dc34 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    dc34:	4b05      	ldr	r3, [pc, #20]	; (dc4c <arch_irq_is_enabled+0x18>)
    dc36:	0942      	lsrs	r2, r0, #5
    dc38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    dc3c:	2301      	movs	r3, #1
    dc3e:	f000 001f 	and.w	r0, r0, #31
    dc42:	fa03 f000 	lsl.w	r0, r3, r0
}
    dc46:	4010      	ands	r0, r2
    dc48:	4770      	bx	lr
    dc4a:	bf00      	nop
    dc4c:	e000e100 	.word	0xe000e100

0000dc50 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dc50:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dc52:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    dc54:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc58:	bfa8      	it	ge
    dc5a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    dc5e:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc62:	bfb8      	it	lt
    dc64:	4b05      	ldrlt	r3, [pc, #20]	; (dc7c <z_arm_irq_priority_set+0x2c>)
    dc66:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc68:	bfab      	itete	ge
    dc6a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc6e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc72:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc76:	5419      	strblt	r1, [r3, r0]
}
    dc78:	4770      	bx	lr
    dc7a:	bf00      	nop
    dc7c:	e000ed14 	.word	0xe000ed14

0000dc80 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dc80:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dc84:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dc86:	490b      	ldr	r1, [pc, #44]	; (dcb4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dc88:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dc8c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dc8e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    dc92:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dc96:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dc98:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dc9c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dca4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dca8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dcaa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dcac:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    dcae:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dcb0:	4770      	bx	lr
    dcb2:	bf00      	nop
    dcb4:	00010edb 	.word	0x00010edb

0000dcb8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    dcb8:	4604      	mov	r4, r0
    dcba:	b508      	push	{r3, lr}
    dcbc:	460e      	mov	r6, r1
    dcbe:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    dcc0:	f000 fbf2 	bl	e4a8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dcc4:	4b08      	ldr	r3, [pc, #32]	; (dce8 <arch_switch_to_main_thread+0x30>)
    dcc6:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dcc8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    dcca:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dcce:	4628      	mov	r0, r5
    dcd0:	f386 8809 	msr	PSP, r6
    dcd4:	2100      	movs	r1, #0
    dcd6:	b663      	cpsie	if
    dcd8:	f381 8811 	msr	BASEPRI, r1
    dcdc:	f3bf 8f6f 	isb	sy
    dce0:	2200      	movs	r2, #0
    dce2:	2300      	movs	r3, #0
    dce4:	f003 f8f9 	bl	10eda <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dce8:	20010640 	.word	0x20010640

0000dcec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    dcec:	4901      	ldr	r1, [pc, #4]	; (dcf4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    dcee:	2210      	movs	r2, #16
	str	r2, [r1]
    dcf0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    dcf2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    dcf4:	e000ed10 	.word	0xe000ed10

0000dcf8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    dcf8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    dcfa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    dcfc:	f380 8811 	msr	BASEPRI, r0
	isb
    dd00:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    dd04:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dd08:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dd0a:	b662      	cpsie	i
	isb
    dd0c:	f3bf 8f6f 	isb	sy

	bx	lr
    dd10:	4770      	bx	lr
    dd12:	bf00      	nop

0000dd14 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    dd14:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    dd16:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    dd18:	f381 8811 	msr	BASEPRI, r1

	wfe
    dd1c:	bf20      	wfe

	msr	BASEPRI, r0
    dd1e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    dd22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    dd24:	4770      	bx	lr
    dd26:	bf00      	nop

0000dd28 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dd28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dd2a:	4606      	mov	r6, r0

	if (esf != NULL) {
    dd2c:	460c      	mov	r4, r1
    dd2e:	2900      	cmp	r1, #0
    dd30:	d036      	beq.n	dda0 <z_arm_fatal_error+0x78>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dd32:	2301      	movs	r3, #1
    dd34:	f04f 0000 	mov.w	r0, #0
    dd38:	4d1d      	ldr	r5, [pc, #116]	; (ddb0 <z_arm_fatal_error+0x88>)
    dd3a:	f363 0007 	bfi	r0, r3, #0, #8
    dd3e:	4b1d      	ldr	r3, [pc, #116]	; (ddb4 <z_arm_fatal_error+0x8c>)
    dd40:	1aed      	subs	r5, r5, r3
    dd42:	688b      	ldr	r3, [r1, #8]
    dd44:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    dd48:	9300      	str	r3, [sp, #0]
    dd4a:	e9d1 2300 	ldrd	r2, r3, [r1]
    dd4e:	f365 108f 	bfi	r0, r5, #6, #10
    dd52:	4919      	ldr	r1, [pc, #100]	; (ddb8 <z_arm_fatal_error+0x90>)
    dd54:	f003 f9ad 	bl	110b2 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dd58:	2301      	movs	r3, #1
    dd5a:	f04f 0000 	mov.w	r0, #0
    dd5e:	f363 0007 	bfi	r0, r3, #0, #8
    dd62:	6963      	ldr	r3, [r4, #20]
    dd64:	f365 108f 	bfi	r0, r5, #6, #10
    dd68:	9300      	str	r3, [sp, #0]
    dd6a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    dd6e:	4913      	ldr	r1, [pc, #76]	; (ddbc <z_arm_fatal_error+0x94>)
    dd70:	f003 f99f 	bl	110b2 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dd74:	2301      	movs	r3, #1
    dd76:	f04f 0000 	mov.w	r0, #0
    dd7a:	f363 0007 	bfi	r0, r3, #0, #8
    dd7e:	f365 108f 	bfi	r0, r5, #6, #10
    dd82:	69e2      	ldr	r2, [r4, #28]
    dd84:	490e      	ldr	r1, [pc, #56]	; (ddc0 <z_arm_fatal_error+0x98>)
    dd86:	f003 f994 	bl	110b2 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    dd8a:	f04f 0000 	mov.w	r0, #0
    dd8e:	2301      	movs	r3, #1
    dd90:	f363 0007 	bfi	r0, r3, #0, #8
    dd94:	f365 108f 	bfi	r0, r5, #6, #10
    dd98:	69a2      	ldr	r2, [r4, #24]
    dd9a:	490a      	ldr	r1, [pc, #40]	; (ddc4 <z_arm_fatal_error+0x9c>)
    dd9c:	f003 f989 	bl	110b2 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    dda0:	4621      	mov	r1, r4
    dda2:	4630      	mov	r0, r6
}
    dda4:	b002      	add	sp, #8
    dda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    ddaa:	f001 bf53 	b.w	fc54 <z_fatal_error>
    ddae:	bf00      	nop
    ddb0:	00011c54 	.word	0x00011c54
    ddb4:	00011c34 	.word	0x00011c34
    ddb8:	000122f7 	.word	0x000122f7
    ddbc:	00012326 	.word	0x00012326
    ddc0:	00012355 	.word	0x00012355
    ddc4:	00012364 	.word	0x00012364

0000ddc8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    ddc8:	bf30      	wfi
    b z_SysNmiOnReset
    ddca:	f7ff bffd 	b.w	ddc8 <z_SysNmiOnReset>
    ddce:	bf00      	nop

0000ddd0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ddd0:	4a0e      	ldr	r2, [pc, #56]	; (de0c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ddd2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ddd4:	4b0e      	ldr	r3, [pc, #56]	; (de10 <z_arm_prep_c+0x40>)
    ddd6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ddda:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    dddc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dde0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    dde4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dde8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ddec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    ddf0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ddf4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ddf8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ddfc:	f001 ffb4 	bl	fd68 <z_bss_zero>
	z_data_copy();
    de00:	f001 ffbc 	bl	fd7c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    de04:	f000 fb18 	bl	e438 <z_arm_interrupt_init>
	z_cstart();
    de08:	f001 fff6 	bl	fdf8 <z_cstart>
    de0c:	0000c000 	.word	0x0000c000
    de10:	e000ed00 	.word	0xe000ed00

0000de14 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    de14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    de16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    de18:	4a0b      	ldr	r2, [pc, #44]	; (de48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    de1a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    de1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    de1e:	bf1e      	ittt	ne
	movne	r1, #0
    de20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    de22:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    de24:	f003 fcb2 	blne	1178c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    de28:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    de2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    de2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    de32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    de36:	4905      	ldr	r1, [pc, #20]	; (de4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    de38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    de3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    de3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    de3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    de42:	4903      	ldr	r1, [pc, #12]	; (de50 <_isr_wrapper+0x3c>)
	bx r1
    de44:	4708      	bx	r1
    de46:	0000      	.short	0x0000
	ldr r2, =_kernel
    de48:	20010640 	.word	0x20010640
	ldr r1, =_sw_isr_table
    de4c:	00011a2c 	.word	0x00011a2c
	ldr r1, =z_arm_int_exit
    de50:	0000e3f9 	.word	0x0000e3f9

0000de54 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    de54:	f003 f927 	bl	110a6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    de58:	2020      	movs	r0, #32
    msr BASEPRI, r0
    de5a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    de5e:	4808      	ldr	r0, [pc, #32]	; (de80 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    de60:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    de64:	1840      	adds	r0, r0, r1
    msr PSP, r0
    de66:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    de6a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    de6e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    de70:	4308      	orrs	r0, r1
    msr CONTROL, r0
    de72:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    de76:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    de7a:	f7ff ffa9 	bl	ddd0 <z_arm_prep_c>
    de7e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    de80:	200113e8 	.word	0x200113e8

0000de84 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    de84:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    de88:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    de8c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    de8e:	4672      	mov	r2, lr
	bl z_arm_fault
    de90:	f000 f9b4 	bl	e1fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    de94:	bd01      	pop	{r0, pc}
    de96:	bf00      	nop

0000de98 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    de9a:	2301      	movs	r3, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    de9c:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    de9e:	f04f 0000 	mov.w	r0, #0
    dea2:	4c37      	ldr	r4, [pc, #220]	; (df80 <mem_manage_fault.isra.2+0xe8>)
    dea4:	f363 0007 	bfi	r0, r3, #0, #8
    dea8:	4b36      	ldr	r3, [pc, #216]	; (df84 <mem_manage_fault.isra.2+0xec>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    deaa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    deac:	1ae4      	subs	r4, r4, r3
    deae:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    deb2:	f364 108f 	bfi	r0, r4, #6, #10
    deb6:	4934      	ldr	r1, [pc, #208]	; (df88 <mem_manage_fault.isra.2+0xf0>)
    deb8:	f003 f8fb 	bl	110b2 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    debc:	4b33      	ldr	r3, [pc, #204]	; (df8c <mem_manage_fault.isra.2+0xf4>)
    debe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dec0:	06db      	lsls	r3, r3, #27
    dec2:	d509      	bpl.n	ded8 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dec4:	f04f 0000 	mov.w	r0, #0
    dec8:	2301      	movs	r3, #1
    deca:	f363 0007 	bfi	r0, r3, #0, #8
    dece:	f364 108f 	bfi	r0, r4, #6, #10
    ded2:	492f      	ldr	r1, [pc, #188]	; (df90 <mem_manage_fault.isra.2+0xf8>)
    ded4:	f003 f8ed 	bl	110b2 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ded8:	4b2c      	ldr	r3, [pc, #176]	; (df8c <mem_manage_fault.isra.2+0xf4>)
    deda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dedc:	071d      	lsls	r5, r3, #28
    dede:	d509      	bpl.n	def4 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    dee0:	f04f 0000 	mov.w	r0, #0
    dee4:	2301      	movs	r3, #1
    dee6:	f363 0007 	bfi	r0, r3, #0, #8
    deea:	f364 108f 	bfi	r0, r4, #6, #10
    deee:	4929      	ldr	r1, [pc, #164]	; (df94 <mem_manage_fault.isra.2+0xfc>)
    def0:	f003 f8df 	bl	110b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    def4:	4d25      	ldr	r5, [pc, #148]	; (df8c <mem_manage_fault.isra.2+0xf4>)
    def6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    def8:	0798      	lsls	r0, r3, #30
    defa:	d51c      	bpl.n	df36 <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    defc:	2301      	movs	r3, #1
    defe:	f04f 0000 	mov.w	r0, #0
    df02:	f363 0007 	bfi	r0, r3, #0, #8
    df06:	4924      	ldr	r1, [pc, #144]	; (df98 <mem_manage_fault.isra.2+0x100>)
    df08:	f364 108f 	bfi	r0, r4, #6, #10
    df0c:	f003 f8d1 	bl	110b2 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    df10:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    df12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df14:	0619      	lsls	r1, r3, #24
    df16:	d50e      	bpl.n	df36 <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    df18:	f04f 0000 	mov.w	r0, #0
    df1c:	2301      	movs	r3, #1
    df1e:	f363 0007 	bfi	r0, r3, #0, #8
    df22:	f364 108f 	bfi	r0, r4, #6, #10
    df26:	491d      	ldr	r1, [pc, #116]	; (df9c <mem_manage_fault.isra.2+0x104>)
    df28:	f003 f8c3 	bl	110b2 <log_string_sync>
			if (from_hard_fault) {
    df2c:	b11f      	cbz	r7, df36 <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    df2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    df34:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    df36:	4b15      	ldr	r3, [pc, #84]	; (df8c <mem_manage_fault.isra.2+0xf4>)
    df38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df3a:	07da      	lsls	r2, r3, #31
    df3c:	d509      	bpl.n	df52 <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    df3e:	f04f 0000 	mov.w	r0, #0
    df42:	2301      	movs	r3, #1
    df44:	f363 0007 	bfi	r0, r3, #0, #8
    df48:	f364 108f 	bfi	r0, r4, #6, #10
    df4c:	4914      	ldr	r1, [pc, #80]	; (dfa0 <mem_manage_fault.isra.2+0x108>)
    df4e:	f003 f8b0 	bl	110b2 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    df52:	4b0e      	ldr	r3, [pc, #56]	; (df8c <mem_manage_fault.isra.2+0xf4>)
    df54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df56:	069b      	lsls	r3, r3, #26
    df58:	d509      	bpl.n	df6e <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
    df5a:	f04f 0000 	mov.w	r0, #0
    df5e:	2301      	movs	r3, #1
    df60:	f363 0007 	bfi	r0, r3, #0, #8
    df64:	f364 108f 	bfi	r0, r4, #6, #10
    df68:	490e      	ldr	r1, [pc, #56]	; (dfa4 <mem_manage_fault.isra.2+0x10c>)
    df6a:	f003 f8a2 	bl	110b2 <log_string_sync>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    df6e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    df70:	4b06      	ldr	r3, [pc, #24]	; (df8c <mem_manage_fault.isra.2+0xf4>)
    df72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    df74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df76:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    df7a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df7c:	7030      	strb	r0, [r6, #0]

	return reason;
}
    df7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df80:	00011c54 	.word	0x00011c54
    df84:	00011c34 	.word	0x00011c34
    df88:	0001241a 	.word	0x0001241a
    df8c:	e000ed00 	.word	0xe000ed00
    df90:	00012430 	.word	0x00012430
    df94:	00012463 	.word	0x00012463
    df98:	00012476 	.word	0x00012476
    df9c:	0001248e 	.word	0x0001248e
    dfa0:	000124a4 	.word	0x000124a4
    dfa4:	000124c3 	.word	0x000124c3

0000dfa8 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    dfaa:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dfac:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    dfae:	f04f 0000 	mov.w	r0, #0
    dfb2:	4c3d      	ldr	r4, [pc, #244]	; (e0a8 <bus_fault.isra.3+0x100>)
    dfb4:	f363 0007 	bfi	r0, r3, #0, #8
    dfb8:	4b3c      	ldr	r3, [pc, #240]	; (e0ac <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dfba:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dfbc:	1ae4      	subs	r4, r4, r3
    dfbe:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dfc2:	493b      	ldr	r1, [pc, #236]	; (e0b0 <bus_fault.isra.3+0x108>)
    dfc4:	f364 108f 	bfi	r0, r4, #6, #10
    dfc8:	f003 f873 	bl	110b2 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dfcc:	4b39      	ldr	r3, [pc, #228]	; (e0b4 <bus_fault.isra.3+0x10c>)
    dfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfd0:	04d9      	lsls	r1, r3, #19
    dfd2:	d509      	bpl.n	dfe8 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
    dfd4:	f04f 0000 	mov.w	r0, #0
    dfd8:	2301      	movs	r3, #1
    dfda:	f363 0007 	bfi	r0, r3, #0, #8
    dfde:	f364 108f 	bfi	r0, r4, #6, #10
    dfe2:	4935      	ldr	r1, [pc, #212]	; (e0b8 <bus_fault.isra.3+0x110>)
    dfe4:	f003 f865 	bl	110b2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dfe8:	4b32      	ldr	r3, [pc, #200]	; (e0b4 <bus_fault.isra.3+0x10c>)
    dfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfec:	051a      	lsls	r2, r3, #20
    dfee:	d509      	bpl.n	e004 <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    dff0:	f04f 0000 	mov.w	r0, #0
    dff4:	2301      	movs	r3, #1
    dff6:	f363 0007 	bfi	r0, r3, #0, #8
    dffa:	f364 108f 	bfi	r0, r4, #6, #10
    dffe:	492f      	ldr	r1, [pc, #188]	; (e0bc <bus_fault.isra.3+0x114>)
    e000:	f003 f857 	bl	110b2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    e004:	4d2b      	ldr	r5, [pc, #172]	; (e0b4 <bus_fault.isra.3+0x10c>)
    e006:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e008:	059b      	lsls	r3, r3, #22
    e00a:	d51c      	bpl.n	e046 <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    e00c:	2301      	movs	r3, #1
    e00e:	f04f 0000 	mov.w	r0, #0
    e012:	f363 0007 	bfi	r0, r3, #0, #8
    e016:	f364 108f 	bfi	r0, r4, #6, #10
    e01a:	4929      	ldr	r1, [pc, #164]	; (e0c0 <bus_fault.isra.3+0x118>)
    e01c:	f003 f849 	bl	110b2 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    e020:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    e022:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e024:	0418      	lsls	r0, r3, #16
    e026:	d50e      	bpl.n	e046 <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    e028:	f04f 0000 	mov.w	r0, #0
    e02c:	2301      	movs	r3, #1
    e02e:	f363 0007 	bfi	r0, r3, #0, #8
    e032:	f364 108f 	bfi	r0, r4, #6, #10
    e036:	4923      	ldr	r1, [pc, #140]	; (e0c4 <bus_fault.isra.3+0x11c>)
    e038:	f003 f83b 	bl	110b2 <log_string_sync>
			if (from_hard_fault) {
    e03c:	b11f      	cbz	r7, e046 <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    e03e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e044:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    e046:	4b1b      	ldr	r3, [pc, #108]	; (e0b4 <bus_fault.isra.3+0x10c>)
    e048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e04a:	0559      	lsls	r1, r3, #21
    e04c:	d509      	bpl.n	e062 <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    e04e:	f04f 0000 	mov.w	r0, #0
    e052:	2301      	movs	r3, #1
    e054:	f363 0007 	bfi	r0, r3, #0, #8
    e058:	f364 108f 	bfi	r0, r4, #6, #10
    e05c:	491a      	ldr	r1, [pc, #104]	; (e0c8 <bus_fault.isra.3+0x120>)
    e05e:	f003 f828 	bl	110b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    e062:	4b14      	ldr	r3, [pc, #80]	; (e0b4 <bus_fault.isra.3+0x10c>)
    e064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e066:	05d2      	lsls	r2, r2, #23
    e068:	d511      	bpl.n	e08e <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    e06a:	f04f 0000 	mov.w	r0, #0
    e06e:	2301      	movs	r3, #1
    e070:	4916      	ldr	r1, [pc, #88]	; (e0cc <bus_fault.isra.3+0x124>)
    e072:	f363 0007 	bfi	r0, r3, #0, #8
    e076:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e07a:	f003 f81a 	bl	110b2 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    e07e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    e080:	4a0c      	ldr	r2, [pc, #48]	; (e0b4 <bus_fault.isra.3+0x10c>)
    e082:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e084:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    e088:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e08a:	7030      	strb	r0, [r6, #0]

	return reason;
}
    e08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    e08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e090:	049b      	lsls	r3, r3, #18
    e092:	d5f4      	bpl.n	e07e <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e094:	f04f 0000 	mov.w	r0, #0
    e098:	2301      	movs	r3, #1
    e09a:	f363 0007 	bfi	r0, r3, #0, #8
    e09e:	f364 108f 	bfi	r0, r4, #6, #10
    e0a2:	490b      	ldr	r1, [pc, #44]	; (e0d0 <bus_fault.isra.3+0x128>)
    e0a4:	e7e9      	b.n	e07a <bus_fault.isra.3+0xd2>
    e0a6:	bf00      	nop
    e0a8:	00011c54 	.word	0x00011c54
    e0ac:	00011c34 	.word	0x00011c34
    e0b0:	00012392 	.word	0x00012392
    e0b4:	e000ed00 	.word	0xe000ed00
    e0b8:	000123a8 	.word	0x000123a8
    e0bc:	00012463 	.word	0x00012463
    e0c0:	000123b9 	.word	0x000123b9
    e0c4:	000123d2 	.word	0x000123d2
    e0c8:	000123e7 	.word	0x000123e7
    e0cc:	00012402 	.word	0x00012402
    e0d0:	000124c3 	.word	0x000124c3

0000e0d4 <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    e0d4:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    e0d6:	f04f 0000 	mov.w	r0, #0
    e0da:	2301      	movs	r3, #1
    e0dc:	4c3c      	ldr	r4, [pc, #240]	; (e1d0 <usage_fault.isra.4+0xfc>)
    e0de:	f363 0007 	bfi	r0, r3, #0, #8
    e0e2:	4b3c      	ldr	r3, [pc, #240]	; (e1d4 <usage_fault.isra.4+0x100>)
    e0e4:	493c      	ldr	r1, [pc, #240]	; (e1d8 <usage_fault.isra.4+0x104>)
    e0e6:	1ae4      	subs	r4, r4, r3
    e0e8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    e0ec:	f364 108f 	bfi	r0, r4, #6, #10
    e0f0:	f002 ffdf 	bl	110b2 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    e0f4:	4b39      	ldr	r3, [pc, #228]	; (e1dc <usage_fault.isra.4+0x108>)
    e0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e0f8:	019b      	lsls	r3, r3, #6
    e0fa:	d509      	bpl.n	e110 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
    e0fc:	f04f 0000 	mov.w	r0, #0
    e100:	2301      	movs	r3, #1
    e102:	f363 0007 	bfi	r0, r3, #0, #8
    e106:	f364 108f 	bfi	r0, r4, #6, #10
    e10a:	4935      	ldr	r1, [pc, #212]	; (e1e0 <usage_fault.isra.4+0x10c>)
    e10c:	f002 ffd1 	bl	110b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    e110:	4b32      	ldr	r3, [pc, #200]	; (e1dc <usage_fault.isra.4+0x108>)
    e112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e114:	01dd      	lsls	r5, r3, #7
    e116:	d509      	bpl.n	e12c <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    e118:	f04f 0000 	mov.w	r0, #0
    e11c:	2301      	movs	r3, #1
    e11e:	f363 0007 	bfi	r0, r3, #0, #8
    e122:	f364 108f 	bfi	r0, r4, #6, #10
    e126:	492f      	ldr	r1, [pc, #188]	; (e1e4 <usage_fault.isra.4+0x110>)
    e128:	f002 ffc3 	bl	110b2 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    e12c:	4b2b      	ldr	r3, [pc, #172]	; (e1dc <usage_fault.isra.4+0x108>)
    e12e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    e130:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
    e134:	d00a      	beq.n	e14c <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    e136:	2301      	movs	r3, #1
    e138:	f04f 0000 	mov.w	r0, #0
    e13c:	f363 0007 	bfi	r0, r3, #0, #8
    e140:	f364 108f 	bfi	r0, r4, #6, #10
    e144:	4928      	ldr	r1, [pc, #160]	; (e1e8 <usage_fault.isra.4+0x114>)
    e146:	f002 ffb4 	bl	110b2 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    e14a:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    e14c:	4b23      	ldr	r3, [pc, #140]	; (e1dc <usage_fault.isra.4+0x108>)
    e14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e150:	0318      	lsls	r0, r3, #12
    e152:	d509      	bpl.n	e168 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
    e154:	f04f 0000 	mov.w	r0, #0
    e158:	2301      	movs	r3, #1
    e15a:	f363 0007 	bfi	r0, r3, #0, #8
    e15e:	f364 108f 	bfi	r0, r4, #6, #10
    e162:	4922      	ldr	r1, [pc, #136]	; (e1ec <usage_fault.isra.4+0x118>)
    e164:	f002 ffa5 	bl	110b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    e168:	4b1c      	ldr	r3, [pc, #112]	; (e1dc <usage_fault.isra.4+0x108>)
    e16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e16c:	0359      	lsls	r1, r3, #13
    e16e:	d509      	bpl.n	e184 <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    e170:	f04f 0000 	mov.w	r0, #0
    e174:	2301      	movs	r3, #1
    e176:	f363 0007 	bfi	r0, r3, #0, #8
    e17a:	f364 108f 	bfi	r0, r4, #6, #10
    e17e:	491c      	ldr	r1, [pc, #112]	; (e1f0 <usage_fault.isra.4+0x11c>)
    e180:	f002 ff97 	bl	110b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    e184:	4b15      	ldr	r3, [pc, #84]	; (e1dc <usage_fault.isra.4+0x108>)
    e186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e188:	039a      	lsls	r2, r3, #14
    e18a:	d509      	bpl.n	e1a0 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    e18c:	f04f 0000 	mov.w	r0, #0
    e190:	2301      	movs	r3, #1
    e192:	f363 0007 	bfi	r0, r3, #0, #8
    e196:	f364 108f 	bfi	r0, r4, #6, #10
    e19a:	4916      	ldr	r1, [pc, #88]	; (e1f4 <usage_fault.isra.4+0x120>)
    e19c:	f002 ff89 	bl	110b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    e1a0:	4b0e      	ldr	r3, [pc, #56]	; (e1dc <usage_fault.isra.4+0x108>)
    e1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e1a4:	03db      	lsls	r3, r3, #15
    e1a6:	d509      	bpl.n	e1bc <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    e1a8:	f04f 0000 	mov.w	r0, #0
    e1ac:	2301      	movs	r3, #1
    e1ae:	f363 0007 	bfi	r0, r3, #0, #8
    e1b2:	f364 108f 	bfi	r0, r4, #6, #10
    e1b6:	4910      	ldr	r1, [pc, #64]	; (e1f8 <usage_fault.isra.4+0x124>)
    e1b8:	f002 ff7b 	bl	110b2 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e1bc:	4a07      	ldr	r2, [pc, #28]	; (e1dc <usage_fault.isra.4+0x108>)

	return reason;
}
    e1be:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e1c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e1c2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    e1c6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    e1ca:	6293      	str	r3, [r2, #40]	; 0x28
}
    e1cc:	bd38      	pop	{r3, r4, r5, pc}
    e1ce:	bf00      	nop
    e1d0:	00011c54 	.word	0x00011c54
    e1d4:	00011c34 	.word	0x00011c34
    e1d8:	000124f2 	.word	0x000124f2
    e1dc:	e000ed00 	.word	0xe000ed00
    e1e0:	0001250a 	.word	0x0001250a
    e1e4:	0001251d 	.word	0x0001251d
    e1e8:	00012537 	.word	0x00012537
    e1ec:	00012561 	.word	0x00012561
    e1f0:	0001257f 	.word	0x0001257f
    e1f4:	000125a4 	.word	0x000125a4
    e1f8:	000125be 	.word	0x000125be

0000e1fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    e1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e200:	4b69      	ldr	r3, [pc, #420]	; (e3a8 <z_arm_fault+0x1ac>)
{
    e202:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e204:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    e208:	4606      	mov	r6, r0
    e20a:	4689      	mov	r9, r1
    e20c:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e20e:	f3c8 0708 	ubfx	r7, r8, #0, #9
    e212:	2500      	movs	r5, #0
    e214:	f385 8811 	msr	BASEPRI, r5
    e218:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e21c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e220:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e224:	d128      	bne.n	e278 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e226:	07d0      	lsls	r0, r2, #31
    e228:	d426      	bmi.n	e278 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e22a:	0651      	lsls	r1, r2, #25
    e22c:	d403      	bmi.n	e236 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e22e:	0722      	lsls	r2, r4, #28
    e230:	d412      	bmi.n	e258 <z_arm_fault+0x5c>
			*nested_exc = true;
    e232:	2501      	movs	r5, #1
    e234:	e012      	b.n	e25c <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e236:	2301      	movs	r3, #1
    e238:	f04f 0000 	mov.w	r0, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    e23c:	4a5b      	ldr	r2, [pc, #364]	; (e3ac <z_arm_fault+0x1b0>)
    e23e:	f363 0007 	bfi	r0, r3, #0, #8
    e242:	4b5b      	ldr	r3, [pc, #364]	; (e3b0 <z_arm_fault+0x1b4>)
    e244:	495b      	ldr	r1, [pc, #364]	; (e3b4 <z_arm_fault+0x1b8>)
    e246:	1ad2      	subs	r2, r2, r3
    e248:	08d2      	lsrs	r2, r2, #3
    e24a:	f362 108f 	bfi	r0, r2, #6, #10
    e24e:	f002 ff30 	bl	110b2 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e252:	f014 0504 	ands.w	r5, r4, #4
    e256:	d001      	beq.n	e25c <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    e258:	464e      	mov	r6, r9
	*nested_exc = false;
    e25a:	2500      	movs	r5, #0
	*recoverable = false;
    e25c:	2300      	movs	r3, #0
    e25e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    e262:	1efb      	subs	r3, r7, #3
    e264:	2b09      	cmp	r3, #9
    e266:	f200 8082 	bhi.w	e36e <z_arm_fault+0x172>
    e26a:	e8df f003 	tbb	[pc, r3]
    e26e:	6b07      	.short	0x6b07
    e270:	80804e6f 	.word	0x80804e6f
    e274:	73808080 	.word	0x73808080
		return NULL;
    e278:	462e      	mov	r6, r5
    e27a:	e7ef      	b.n	e25c <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    e27c:	2301      	movs	r3, #1
    e27e:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
    e282:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    e286:	f363 0007 	bfi	r0, r3, #0, #8
    e28a:	4f48      	ldr	r7, [pc, #288]	; (e3ac <z_arm_fault+0x1b0>)
    e28c:	4b48      	ldr	r3, [pc, #288]	; (e3b0 <z_arm_fault+0x1b4>)
    e28e:	494a      	ldr	r1, [pc, #296]	; (e3b8 <z_arm_fault+0x1bc>)
    e290:	1aff      	subs	r7, r7, r3
    e292:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    e296:	f367 108f 	bfi	r0, r7, #6, #10
    e29a:	f002 ff0a 	bl	110b2 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e29e:	4b42      	ldr	r3, [pc, #264]	; (e3a8 <z_arm_fault+0x1ac>)
	*recoverable = false;
    e2a0:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e2a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e2a6:	f014 0402 	ands.w	r4, r4, #2
    e2aa:	d00b      	beq.n	e2c4 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    e2ac:	f04f 0000 	mov.w	r0, #0
    e2b0:	2301      	movs	r3, #1
    e2b2:	4942      	ldr	r1, [pc, #264]	; (e3bc <z_arm_fault+0x1c0>)
    e2b4:	f363 0007 	bfi	r0, r3, #0, #8
    e2b8:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
    e2bc:	f002 fef9 	bl	110b2 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e2c0:	2400      	movs	r4, #0
    e2c2:	e025      	b.n	e310 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e2c6:	005b      	lsls	r3, r3, #1
    e2c8:	d522      	bpl.n	e310 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    e2ca:	2301      	movs	r3, #1
    e2cc:	f04f 0000 	mov.w	r0, #0
    e2d0:	f363 0007 	bfi	r0, r3, #0, #8
    e2d4:	f367 108f 	bfi	r0, r7, #6, #10
    e2d8:	4939      	ldr	r1, [pc, #228]	; (e3c0 <z_arm_fault+0x1c4>)
    e2da:	f002 feea 	bl	110b2 <log_string_sync>
		if (SCB_MMFSR != 0) {
    e2de:	4b39      	ldr	r3, [pc, #228]	; (e3c4 <z_arm_fault+0x1c8>)
    e2e0:	781b      	ldrb	r3, [r3, #0]
    e2e2:	b12b      	cbz	r3, e2f0 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    e2e4:	2001      	movs	r0, #1
    e2e6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e2ea:	f7ff fdd5 	bl	de98 <mem_manage_fault.isra.2>
    e2ee:	e00e      	b.n	e30e <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    e2f0:	4b35      	ldr	r3, [pc, #212]	; (e3c8 <z_arm_fault+0x1cc>)
    e2f2:	781b      	ldrb	r3, [r3, #0]
    e2f4:	b12b      	cbz	r3, e302 <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    e2f6:	2001      	movs	r0, #1
    e2f8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e2fc:	f7ff fe54 	bl	dfa8 <bus_fault.isra.3>
    e300:	e005      	b.n	e30e <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    e302:	4b32      	ldr	r3, [pc, #200]	; (e3cc <z_arm_fault+0x1d0>)
    e304:	881b      	ldrh	r3, [r3, #0]
    e306:	b29b      	uxth	r3, r3
    e308:	b113      	cbz	r3, e310 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    e30a:	f7ff fee3 	bl	e0d4 <usage_fault.isra.4>
    e30e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e310:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e314:	b99b      	cbnz	r3, e33e <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e316:	2220      	movs	r2, #32
    e318:	4631      	mov	r1, r6
    e31a:	a802      	add	r0, sp, #8
    e31c:	f002 fffe 	bl	1131c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e320:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e322:	2d00      	cmp	r5, #0
    e324:	d03a      	beq.n	e39c <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e326:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e32a:	b922      	cbnz	r2, e336 <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e32c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e330:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e334:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e336:	a902      	add	r1, sp, #8
    e338:	4620      	mov	r0, r4
    e33a:	f7ff fcf5 	bl	dd28 <z_arm_fatal_error>
}
    e33e:	b00b      	add	sp, #44	; 0x2c
    e340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e344:	f10d 0107 	add.w	r1, sp, #7
    e348:	2000      	movs	r0, #0
    e34a:	e7ce      	b.n	e2ea <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    e34c:	f10d 0107 	add.w	r1, sp, #7
    e350:	2000      	movs	r0, #0
    e352:	e7d3      	b.n	e2fc <z_arm_fault+0x100>
	PR_FAULT_INFO(
    e354:	2301      	movs	r3, #1
    e356:	f04f 0000 	mov.w	r0, #0
    e35a:	4a15      	ldr	r2, [pc, #84]	; (e3b0 <z_arm_fault+0x1b4>)
    e35c:	f363 0007 	bfi	r0, r3, #0, #8
    e360:	4b12      	ldr	r3, [pc, #72]	; (e3ac <z_arm_fault+0x1b0>)
    e362:	491b      	ldr	r1, [pc, #108]	; (e3d0 <z_arm_fault+0x1d4>)
    e364:	1a9b      	subs	r3, r3, r2
    e366:	08db      	lsrs	r3, r3, #3
    e368:	f363 108f 	bfi	r0, r3, #6, #10
    e36c:	e7a6      	b.n	e2bc <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    e36e:	2301      	movs	r3, #1
    e370:	f04f 0000 	mov.w	r0, #0
    e374:	4a0d      	ldr	r2, [pc, #52]	; (e3ac <z_arm_fault+0x1b0>)
    e376:	f363 0007 	bfi	r0, r3, #0, #8
    e37a:	4b0d      	ldr	r3, [pc, #52]	; (e3b0 <z_arm_fault+0x1b4>)
    e37c:	4915      	ldr	r1, [pc, #84]	; (e3d4 <z_arm_fault+0x1d8>)
    e37e:	1ad2      	subs	r2, r2, r3
    e380:	08d2      	lsrs	r2, r2, #3
    e382:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e386:	f362 108f 	bfi	r0, r2, #6, #10
    e38a:	f1a7 0310 	sub.w	r3, r7, #16
    e38e:	4a12      	ldr	r2, [pc, #72]	; (e3d8 <z_arm_fault+0x1dc>)
    e390:	bf08      	it	eq
    e392:	460a      	moveq	r2, r1
    e394:	4911      	ldr	r1, [pc, #68]	; (e3dc <z_arm_fault+0x1e0>)
    e396:	f002 fe8c 	bl	110b2 <log_string_sync>
    e39a:	e791      	b.n	e2c0 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e39c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e3a0:	f023 0301 	bic.w	r3, r3, #1
    e3a4:	e7c6      	b.n	e334 <z_arm_fault+0x138>
    e3a6:	bf00      	nop
    e3a8:	e000ed00 	.word	0xe000ed00
    e3ac:	00011c54 	.word	0x00011c54
    e3b0:	00011c34 	.word	0x00011c34
    e3b4:	00012617 	.word	0x00012617
    e3b8:	0001263a 	.word	0x0001263a
    e3bc:	00012651 	.word	0x00012651
    e3c0:	00012672 	.word	0x00012672
    e3c4:	e000ed28 	.word	0xe000ed28
    e3c8:	e000ed29 	.word	0xe000ed29
    e3cc:	e000ed2a 	.word	0xe000ed2a
    e3d0:	00012691 	.word	0x00012691
    e3d4:	000125e9 	.word	0x000125e9
    e3d8:	000125fe 	.word	0x000125fe
    e3dc:	000126c7 	.word	0x000126c7

0000e3e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e3e0:	4b04      	ldr	r3, [pc, #16]	; (e3f4 <z_arm_fault_init+0x14>)
    e3e2:	695a      	ldr	r2, [r3, #20]
    e3e4:	f042 0210 	orr.w	r2, r2, #16
    e3e8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e3ea:	695a      	ldr	r2, [r3, #20]
    e3ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e3f0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e3f2:	4770      	bx	lr
    e3f4:	e000ed00 	.word	0xe000ed00

0000e3f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e3f8:	4b04      	ldr	r3, [pc, #16]	; (e40c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e3fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e3fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    e3fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e400:	d003      	beq.n	e40a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e402:	4903      	ldr	r1, [pc, #12]	; (e410 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e408:	600a      	str	r2, [r1, #0]

0000e40a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e40a:	4770      	bx	lr
	ldr r3, =_kernel
    e40c:	20010640 	.word	0x20010640
	ldr r1, =_SCS_ICSR
    e410:	e000ed04 	.word	0xe000ed04

0000e414 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e414:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e418:	4905      	ldr	r1, [pc, #20]	; (e430 <sys_arch_reboot+0x1c>)
    e41a:	4b06      	ldr	r3, [pc, #24]	; (e434 <sys_arch_reboot+0x20>)
    e41c:	68ca      	ldr	r2, [r1, #12]
    e41e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e422:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e424:	60cb      	str	r3, [r1, #12]
    e426:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e42a:	bf00      	nop
    e42c:	e7fd      	b.n	e42a <sys_arch_reboot+0x16>
    e42e:	bf00      	nop
    e430:	e000ed00 	.word	0xe000ed00
    e434:	05fa0004 	.word	0x05fa0004

0000e438 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e438:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e43a:	2120      	movs	r1, #32
    e43c:	4803      	ldr	r0, [pc, #12]	; (e44c <z_arm_interrupt_init+0x14>)
    e43e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e440:	3301      	adds	r3, #1
    e442:	2b41      	cmp	r3, #65	; 0x41
    e444:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e448:	d1f9      	bne.n	e43e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e44a:	4770      	bx	lr
    e44c:	e000e100 	.word	0xe000e100

0000e450 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e450:	b510      	push	{r4, lr}
    e452:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    e454:	f001 ff2e 	bl	102b4 <z_thread_single_abort>

	if (_current == thread) {
    e458:	4b11      	ldr	r3, [pc, #68]	; (e4a0 <z_impl_k_thread_abort+0x50>)
    e45a:	689b      	ldr	r3, [r3, #8]
    e45c:	42a3      	cmp	r3, r4
    e45e:	d107      	bne.n	e470 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e460:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e464:	b183      	cbz	r3, e488 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e466:	4a0f      	ldr	r2, [pc, #60]	; (e4a4 <z_impl_k_thread_abort+0x54>)
    e468:	6853      	ldr	r3, [r2, #4]
    e46a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e46e:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    e470:	f04f 0320 	mov.w	r3, #32
    e474:	f3ef 8011 	mrs	r0, BASEPRI
    e478:	f383 8811 	msr	BASEPRI, r3
    e47c:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e484:	f003 b984 	b.w	11790 <z_reschedule_irqlock>
    e488:	f04f 0320 	mov.w	r3, #32
    e48c:	f3ef 8011 	mrs	r0, BASEPRI
    e490:	f383 8811 	msr	BASEPRI, r3
    e494:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    e498:	f7ff fb52 	bl	db40 <arch_swap>
	return ret;
    e49c:	e7e8      	b.n	e470 <z_impl_k_thread_abort+0x20>
    e49e:	bf00      	nop
    e4a0:	20010640 	.word	0x20010640
    e4a4:	e000ed00 	.word	0xe000ed00

0000e4a8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e4a8:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e4aa:	4b0e      	ldr	r3, [pc, #56]	; (e4e4 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e4ac:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e4ae:	9302      	str	r3, [sp, #8]
    e4b0:	4b0d      	ldr	r3, [pc, #52]	; (e4e8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e4b2:	4c0e      	ldr	r4, [pc, #56]	; (e4ec <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e4b4:	9303      	str	r3, [sp, #12]
    e4b6:	4b0e      	ldr	r3, [pc, #56]	; (e4f0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e4b8:	4a0e      	ldr	r2, [pc, #56]	; (e4f4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e4ba:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e4bc:	ab02      	add	r3, sp, #8
    e4be:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e4c0:	a801      	add	r0, sp, #4
    e4c2:	4623      	mov	r3, r4
    e4c4:	2101      	movs	r1, #1
    e4c6:	f000 f94b 	bl	e760 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e4ca:	2300      	movs	r3, #0
    e4cc:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e4ce:	4b0a      	ldr	r3, [pc, #40]	; (e4f8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e4d0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e4d2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e4d4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e4d6:	9305      	str	r3, [sp, #20]
    e4d8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e4da:	f000 f94b 	bl	e774 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e4de:	b008      	add	sp, #32
    e4e0:	bd10      	pop	{r4, pc}
    e4e2:	bf00      	nop
    e4e4:	20010000 	.word	0x20010000
    e4e8:	00000000 	.word	0x00000000
    e4ec:	20040000 	.word	0x20040000
    e4f0:	00010006 	.word	0x00010006
    e4f4:	20010000 	.word	0x20010000
    e4f8:	20010428 	.word	0x20010428

0000e4fc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e4fc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e4fe:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e500:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e502:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e506:	f004 031f 	and.w	r3, r4, #31
    e50a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e50c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e50e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e510:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e514:	4904      	ldr	r1, [pc, #16]	; (e528 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e516:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e51a:	f043 0301 	orr.w	r3, r3, #1
    e51e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e520:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e522:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e524:	bd10      	pop	{r4, pc}
    e526:	bf00      	nop
    e528:	e000ed90 	.word	0xe000ed90

0000e52c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    e52c:	280f      	cmp	r0, #15
{
    e52e:	b510      	push	{r4, lr}
    e530:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
    e532:	d912      	bls.n	e55a <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e534:	2301      	movs	r3, #1
    e536:	f04f 0000 	mov.w	r0, #0
    e53a:	4a09      	ldr	r2, [pc, #36]	; (e560 <region_allocate_and_init+0x34>)
    e53c:	f363 0007 	bfi	r0, r3, #0, #8
    e540:	4b08      	ldr	r3, [pc, #32]	; (e564 <region_allocate_and_init+0x38>)
    e542:	4909      	ldr	r1, [pc, #36]	; (e568 <region_allocate_and_init+0x3c>)
    e544:	1a9b      	subs	r3, r3, r2
    e546:	08db      	lsrs	r3, r3, #3
    e548:	4622      	mov	r2, r4
    e54a:	f363 108f 	bfi	r0, r3, #6, #10
    e54e:	f002 fdb0 	bl	110b2 <log_string_sync>
		return -EINVAL;
    e552:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e556:	4620      	mov	r0, r4
    e558:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    e55a:	f7ff ffcf 	bl	e4fc <region_init>
	return index;
    e55e:	e7fa      	b.n	e556 <region_allocate_and_init+0x2a>
    e560:	00011c34 	.word	0x00011c34
    e564:	00011c4c 	.word	0x00011c4c
    e568:	00012724 	.word	0x00012724

0000e56c <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e570:	4607      	mov	r7, r0
    e572:	4688      	mov	r8, r1
    e574:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e576:	2600      	movs	r6, #0
	MPU->RNR = index;
    e578:	4d58      	ldr	r5, [pc, #352]	; (e6dc <mpu_configure_regions_and_partition.constprop.1+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e57a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e57c:	4546      	cmp	r6, r8
    e57e:	da3d      	bge.n	e5fc <mpu_configure_regions_and_partition.constprop.1+0x90>
		if (regions[i]->size == 0U) {
    e580:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e584:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e588:	f1b9 0f00 	cmp.w	r9, #0
    e58c:	d059      	beq.n	e642 <mpu_configure_regions_and_partition.constprop.1+0xd6>
		&&
    e58e:	f1b9 0f1f 	cmp.w	r9, #31
    e592:	d922      	bls.n	e5da <mpu_configure_regions_and_partition.constprop.1+0x6e>
		&&
    e594:	f019 0f1f 	tst.w	r9, #31
    e598:	d11f      	bne.n	e5da <mpu_configure_regions_and_partition.constprop.1+0x6e>
		((part->start &
    e59a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e59e:	f01a 0f1f 	tst.w	sl, #31
    e5a2:	d11a      	bne.n	e5da <mpu_configure_regions_and_partition.constprop.1+0x6e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5a4:	4650      	mov	r0, sl
    e5a6:	f002 fe94 	bl	112d2 <arm_cmse_mpu_region_get>
    e5aa:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5ac:	eb09 000a 	add.w	r0, r9, sl
    e5b0:	3801      	subs	r0, #1
    e5b2:	f002 fe8e 	bl	112d2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e5b6:	4583      	cmp	fp, r0
    e5b8:	d024      	beq.n	e604 <mpu_configure_regions_and_partition.constprop.1+0x98>
	return -EINVAL;
    e5ba:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e5be:	2301      	movs	r3, #1
    e5c0:	f04f 0000 	mov.w	r0, #0
    e5c4:	4a46      	ldr	r2, [pc, #280]	; (e6e0 <mpu_configure_regions_and_partition.constprop.1+0x174>)
    e5c6:	f363 0007 	bfi	r0, r3, #0, #8
    e5ca:	4b46      	ldr	r3, [pc, #280]	; (e6e4 <mpu_configure_regions_and_partition.constprop.1+0x178>)
    e5cc:	4946      	ldr	r1, [pc, #280]	; (e6e8 <mpu_configure_regions_and_partition.constprop.1+0x17c>)
    e5ce:	1a9b      	subs	r3, r3, r2
    e5d0:	08db      	lsrs	r3, r3, #3
    e5d2:	f363 108f 	bfi	r0, r3, #6, #10
    e5d6:	465a      	mov	r2, fp
    e5d8:	e00c      	b.n	e5f4 <mpu_configure_regions_and_partition.constprop.1+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e5da:	2301      	movs	r3, #1
    e5dc:	f04f 0000 	mov.w	r0, #0
    e5e0:	4a3f      	ldr	r2, [pc, #252]	; (e6e0 <mpu_configure_regions_and_partition.constprop.1+0x174>)
    e5e2:	f363 0007 	bfi	r0, r3, #0, #8
    e5e6:	4b3f      	ldr	r3, [pc, #252]	; (e6e4 <mpu_configure_regions_and_partition.constprop.1+0x178>)
    e5e8:	4940      	ldr	r1, [pc, #256]	; (e6ec <mpu_configure_regions_and_partition.constprop.1+0x180>)
    e5ea:	1a9b      	subs	r3, r3, r2
    e5ec:	4632      	mov	r2, r6
    e5ee:	08db      	lsrs	r3, r3, #3
    e5f0:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    e5f4:	f002 fd5d 	bl	110b2 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e5f8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e5fc:	4620      	mov	r0, r4
    e5fe:	b005      	add	sp, #20
    e600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e604:	f11b 0f16 	cmn.w	fp, #22
    e608:	d0d9      	beq.n	e5be <mpu_configure_regions_and_partition.constprop.1+0x52>
			(u_reg_index > (reg_index - 1))) {
    e60a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e60c:	455b      	cmp	r3, fp
    e60e:	dbd6      	blt.n	e5be <mpu_configure_regions_and_partition.constprop.1+0x52>
	MPU->RNR = index;
    e610:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e614:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e616:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e61a:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e61c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e620:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e624:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e628:	e9d1 3200 	ldrd	r3, r2, [r1]
    e62c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e62e:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e630:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    e634:	d118      	bne.n	e668 <mpu_configure_regions_and_partition.constprop.1+0xfc>
    e636:	45ca      	cmp	sl, r9
    e638:	d105      	bne.n	e646 <mpu_configure_regions_and_partition.constprop.1+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    e63a:	fa5f f08b 	uxtb.w	r0, fp
    e63e:	f002 fe2d 	bl	1129c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e642:	3601      	adds	r6, #1
    e644:	e79a      	b.n	e57c <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    e646:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e64a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e64c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e650:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e654:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e656:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e658:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e65a:	f002 fe1f 	bl	1129c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e65e:	f110 0f16 	cmn.w	r0, #22
    e662:	d0c9      	beq.n	e5f8 <mpu_configure_regions_and_partition.constprop.1+0x8c>
			reg_index++;
    e664:	1c44      	adds	r4, r0, #1
    e666:	e7ec      	b.n	e642 <mpu_configure_regions_and_partition.constprop.1+0xd6>
	MPU->RNR = index;
    e668:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e66c:	692a      	ldr	r2, [r5, #16]
    e66e:	3b01      	subs	r3, #1
    e670:	f023 031f 	bic.w	r3, r3, #31
    e674:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e678:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e67a:	45ca      	cmp	sl, r9
    e67c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e67e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e680:	d0eb      	beq.n	e65a <mpu_configure_regions_and_partition.constprop.1+0xee>
				mpu_configure_region(reg_index, regions[i]);
    e682:	f002 fe0b 	bl	1129c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e686:	f110 0f16 	cmn.w	r0, #22
    e68a:	d0b5      	beq.n	e5f8 <mpu_configure_regions_and_partition.constprop.1+0x8c>
	MPU->RNR = index;
    e68c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e690:	68ea      	ldr	r2, [r5, #12]
    e692:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e696:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    e69a:	f362 0304 	bfi	r3, r2, #0, #5
    e69e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e6a2:	692b      	ldr	r3, [r5, #16]
    e6a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e6a8:	085b      	lsrs	r3, r3, #1
    e6aa:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e6ae:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e6b2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6ba:	4413      	add	r3, r2
    e6bc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e6be:	f023 031f 	bic.w	r3, r3, #31
    e6c2:	4453      	add	r3, sl
    e6c4:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
    e6c8:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e6ca:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    e6ce:	4669      	mov	r1, sp
    e6d0:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    e6d2:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    e6d4:	f7ff ff2a 	bl	e52c <region_allocate_and_init>
    e6d8:	e7c1      	b.n	e65e <mpu_configure_regions_and_partition.constprop.1+0xf2>
    e6da:	bf00      	nop
    e6dc:	e000ed90 	.word	0xe000ed90
    e6e0:	00011c34 	.word	0x00011c34
    e6e4:	00011c4c 	.word	0x00011c4c
    e6e8:	00012701 	.word	0x00012701
    e6ec:	000126de 	.word	0x000126de

0000e6f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e6f0:	2205      	movs	r2, #5
    e6f2:	4b03      	ldr	r3, [pc, #12]	; (e700 <arm_core_mpu_enable+0x10>)
    e6f4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e6f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e6fa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e6fe:	4770      	bx	lr
    e700:	e000ed90 	.word	0xe000ed90

0000e704 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e704:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e708:	2200      	movs	r2, #0
    e70a:	4b01      	ldr	r3, [pc, #4]	; (e710 <arm_core_mpu_disable+0xc>)
    e70c:	605a      	str	r2, [r3, #4]
}
    e70e:	4770      	bx	lr
    e710:	e000ed90 	.word	0xe000ed90

0000e714 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e714:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e716:	4d0e      	ldr	r5, [pc, #56]	; (e750 <arm_mpu_init+0x3c>)
    e718:	682e      	ldr	r6, [r5, #0]
    e71a:	2e10      	cmp	r6, #16
    e71c:	d815      	bhi.n	e74a <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e71e:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e720:	f7ff fff0 	bl	e704 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e724:	4b0b      	ldr	r3, [pc, #44]	; (e754 <arm_mpu_init+0x40>)
    e726:	4a0c      	ldr	r2, [pc, #48]	; (e758 <arm_mpu_init+0x44>)
    e728:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e72a:	42a6      	cmp	r6, r4
    e72c:	d105      	bne.n	e73a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e72e:	4b0b      	ldr	r3, [pc, #44]	; (e75c <arm_mpu_init+0x48>)
    e730:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e732:	f7ff ffdd 	bl	e6f0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e736:	2000      	movs	r0, #0
}
    e738:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e73a:	6869      	ldr	r1, [r5, #4]
    e73c:	4620      	mov	r0, r4
    e73e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e742:	f7ff fedb 	bl	e4fc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e746:	3401      	adds	r4, #1
    e748:	e7ef      	b.n	e72a <arm_mpu_init+0x16>
		return -1;
    e74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e74e:	e7f3      	b.n	e738 <arm_mpu_init+0x24>
    e750:	00011dd4 	.word	0x00011dd4
    e754:	e000ed90 	.word	0xe000ed90
    e758:	0044ffaa 	.word	0x0044ffaa
    e75c:	20010ea3 	.word	0x20010ea3

0000e760 <arm_core_mpu_configure_static_mpu_regions>:
{
    e760:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e762:	4c03      	ldr	r4, [pc, #12]	; (e770 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e764:	7822      	ldrb	r2, [r4, #0]
    e766:	f7ff ff01 	bl	e56c <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e76a:	7020      	strb	r0, [r4, #0]
}
    e76c:	bd10      	pop	{r4, pc}
    e76e:	bf00      	nop
    e770:	20010ea3 	.word	0x20010ea3

0000e774 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e778:	4c25      	ldr	r4, [pc, #148]	; (e810 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    e77a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e77c:	4680      	mov	r8, r0
    e77e:	2700      	movs	r7, #0
    e780:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    e782:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e786:	4d23      	ldr	r5, [pc, #140]	; (e814 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e788:	4557      	cmp	r7, sl
    e78a:	da1a      	bge.n	e7c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e78c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e790:	9301      	str	r3, [sp, #4]
    e792:	2b00      	cmp	r3, #0
    e794:	d036      	beq.n	e804 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e796:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e79a:	4608      	mov	r0, r1
    e79c:	9100      	str	r1, [sp, #0]
    e79e:	f002 fd98 	bl	112d2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e7a2:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e7a6:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e7a8:	1858      	adds	r0, r3, r1
    e7aa:	3801      	subs	r0, #1
    e7ac:	f002 fd91 	bl	112d2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e7b0:	4286      	cmp	r6, r0
    e7b2:	4a19      	ldr	r2, [pc, #100]	; (e818 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    e7b4:	d008      	beq.n	e7c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e7b6:	2314      	movs	r3, #20
    e7b8:	435f      	muls	r7, r3
    e7ba:	f06f 0315 	mvn.w	r3, #21
    e7be:	f849 3007 	str.w	r3, [r9, r7]
}
    e7c2:	b003      	add	sp, #12
    e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e7c8:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e7cc:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e7ce:	d0f8      	beq.n	e7c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e7d0:	7813      	ldrb	r3, [r2, #0]
    e7d2:	42b3      	cmp	r3, r6
    e7d4:	ddf5      	ble.n	e7c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e7d6:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    e7da:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e7dc:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e7de:	68e8      	ldr	r0, [r5, #12]
    e7e0:	7b19      	ldrb	r1, [r3, #12]
    e7e2:	f360 0104 	bfi	r1, r0, #0, #5
    e7e6:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e7e8:	6929      	ldr	r1, [r5, #16]
    e7ea:	7b18      	ldrb	r0, [r3, #12]
    e7ec:	0849      	lsrs	r1, r1, #1
    e7ee:	f361 1047 	bfi	r0, r1, #5, #3
    e7f2:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e7f4:	68eb      	ldr	r3, [r5, #12]
    e7f6:	f023 031f 	bic.w	r3, r3, #31
    e7fa:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e7fc:	692b      	ldr	r3, [r5, #16]
    e7fe:	f023 031f 	bic.w	r3, r3, #31
    e802:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e804:	3701      	adds	r7, #1
    e806:	3414      	adds	r4, #20
    e808:	f108 080c 	add.w	r8, r8, #12
    e80c:	e7bc      	b.n	e788 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e80e:	bf00      	nop
    e810:	200105c8 	.word	0x200105c8
    e814:	e000ed90 	.word	0xe000ed90
    e818:	20010ea3 	.word	0x20010ea3

0000e81c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e81c:	4b01      	ldr	r3, [pc, #4]	; (e824 <__stdout_hook_install+0x8>)
    e81e:	6018      	str	r0, [r3, #0]
}
    e820:	4770      	bx	lr
    e822:	bf00      	nop
    e824:	2001011c 	.word	0x2001011c

0000e828 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    e828:	4b06      	ldr	r3, [pc, #24]	; (e844 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    e82a:	f000 001f 	and.w	r0, r0, #31
    e82e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    e832:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    e836:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    e83a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    e83e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    e842:	4770      	bx	lr
    e844:	40842500 	.word	0x40842500

0000e848 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    e848:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    e84a:	4b09      	ldr	r3, [pc, #36]	; (e870 <gpio_nrfx_init+0x28>)
    e84c:	781a      	ldrb	r2, [r3, #0]
    e84e:	b96a      	cbnz	r2, e86c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    e850:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e852:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    e854:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e856:	2105      	movs	r1, #5
    e858:	f7ff f9fa 	bl	dc50 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    e85c:	2031      	movs	r0, #49	; 0x31
    e85e:	f7ff f9c5 	bl	dbec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    e862:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e866:	4b03      	ldr	r3, [pc, #12]	; (e874 <gpio_nrfx_init+0x2c>)
    e868:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    e86c:	2000      	movs	r0, #0
    e86e:	bd08      	pop	{r3, pc}
    e870:	20010ea4 	.word	0x20010ea4
    e874:	40031000 	.word	0x40031000

0000e878 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e878:	4b28      	ldr	r3, [pc, #160]	; (e91c <gpio_nrfx_config+0xa4>)
{
    e87a:	b570      	push	{r4, r5, r6, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e87c:	4013      	ands	r3, r2
    e87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e882:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e884:	d03b      	beq.n	e8fe <gpio_nrfx_config+0x86>
    e886:	d807      	bhi.n	e898 <gpio_nrfx_config+0x20>
    e888:	2b02      	cmp	r3, #2
    e88a:	d03a      	beq.n	e902 <gpio_nrfx_config+0x8a>
    e88c:	2b06      	cmp	r3, #6
    e88e:	d013      	beq.n	e8b8 <gpio_nrfx_config+0x40>
    e890:	b193      	cbz	r3, e8b8 <gpio_nrfx_config+0x40>
		return -EINVAL;
    e892:	f06f 0015 	mvn.w	r0, #21
    e896:	e031      	b.n	e8fc <gpio_nrfx_config+0x84>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    e89c:	d033      	beq.n	e906 <gpio_nrfx_config+0x8e>
    e89e:	d804      	bhi.n	e8aa <gpio_nrfx_config+0x32>
    e8a0:	481f      	ldr	r0, [pc, #124]	; (e920 <gpio_nrfx_config+0xa8>)
    e8a2:	4283      	cmp	r3, r0
    e8a4:	d1f5      	bne.n	e892 <gpio_nrfx_config+0x1a>
		drive = NRF_GPIO_PIN_H0D1;
    e8a6:	2307      	movs	r3, #7
    e8a8:	e006      	b.n	e8b8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    e8aa:	481e      	ldr	r0, [pc, #120]	; (e924 <gpio_nrfx_config+0xac>)
    e8ac:	4283      	cmp	r3, r0
    e8ae:	d02c      	beq.n	e90a <gpio_nrfx_config+0x92>
    e8b0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    e8b4:	d1ed      	bne.n	e892 <gpio_nrfx_config+0x1a>
		drive = NRF_GPIO_PIN_H0H1;
    e8b6:	2303      	movs	r3, #3
	if ((flags & GPIO_PULL_UP) != 0) {
    e8b8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    e8ba:	bf54      	ite	pl
    e8bc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    e8c0:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    e8c2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    e8c6:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    e8ca:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    e8ce:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    e8d2:	d006      	beq.n	e8e2 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    e8d4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e8d8:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    e8da:	d018      	beq.n	e90e <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    e8dc:	2201      	movs	r2, #1
    e8de:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    e8e0:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e8e2:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    e8e6:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
	return 0;
    e8ea:	2000      	movs	r0, #0
    *p_pin = pin_number & 0x1F;
    e8ec:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e8f0:	4a0d      	ldr	r2, [pc, #52]	; (e928 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e8f2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e8f6:	3180      	adds	r1, #128	; 0x80
    e8f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    e8fc:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0S1;
    e8fe:	2301      	movs	r3, #1
    e900:	e7da      	b.n	e8b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    e902:	2304      	movs	r3, #4
    e904:	e7d8      	b.n	e8b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_S0H1;
    e906:	2302      	movs	r3, #2
    e908:	e7d6      	b.n	e8b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    e90a:	2305      	movs	r3, #5
    e90c:	e7d4      	b.n	e8b8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    e90e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    e910:	bf42      	ittt	mi
    e912:	2201      	movmi	r2, #1
    e914:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    e916:	60f2      	strmi	r2, [r6, #12]
    e918:	e7e3      	b.n	e8e2 <gpio_nrfx_config+0x6a>
    e91a:	bf00      	nop
    e91c:	00f00006 	.word	0x00f00006
    e920:	00100006 	.word	0x00100006
    e924:	00400002 	.word	0x00400002
    e928:	40842500 	.word	0x40842500

0000e92c <gpio_nrfx_pin_interrupt_configure>:
{
    e92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e92e:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    e930:	6841      	ldr	r1, [r0, #4]
    e932:	f005 041f 	and.w	r4, r5, #31
    e936:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    e938:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    e93c:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    e93e:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
    e942:	d10a      	bne.n	e95a <gpio_nrfx_pin_interrupt_configure+0x2e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e944:	4866      	ldr	r0, [pc, #408]	; (eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>)
    *p_pin = pin_number & 0x1F;
    e946:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e94a:	3180      	adds	r1, #128	; 0x80
    e94c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    e950:	07c8      	lsls	r0, r1, #31
    e952:	d507      	bpl.n	e964 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -ENOTSUP;
    e954:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e958:	e0a1      	b.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    e95a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    e95e:	68f9      	ldr	r1, [r7, #12]
    e960:	f000 809e 	beq.w	eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>
    e964:	2101      	movs	r1, #1
    e966:	68f8      	ldr	r0, [r7, #12]
    e968:	40a9      	lsls	r1, r5
    e96a:	4301      	orrs	r1, r0
    e96c:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    e96e:	2101      	movs	r1, #1
    e970:	6978      	ldr	r0, [r7, #20]
    e972:	40a9      	lsls	r1, r5
    e974:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    e978:	69ba      	ldr	r2, [r7, #24]
    e97a:	bf0c      	ite	eq
    e97c:	4308      	orreq	r0, r1
    e97e:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    e980:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    e984:	bf0c      	ite	eq
    e986:	430a      	orreq	r2, r1
    e988:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    e98a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e98e:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    e992:	61ba      	str	r2, [r7, #24]
    e994:	693a      	ldr	r2, [r7, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    e996:	4e53      	ldr	r6, [pc, #332]	; (eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    e998:	bf0c      	ite	eq
    e99a:	4311      	orreq	r1, r2
    e99c:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    e9a0:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    e9a2:	6139      	str	r1, [r7, #16]
    e9a4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    e9a8:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e9aa:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    e9ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    e9b2:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    e9b6:	428c      	cmp	r4, r1
    e9b8:	d177      	bne.n	eaaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
		    && (intenset & BIT(i))) {
    e9ba:	fa22 f103 	lsr.w	r1, r2, r3
    e9be:	07c9      	lsls	r1, r1, #31
    e9c0:	d573      	bpl.n	eaaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
			(void)atomic_and(mask, ~BIT(i));
    e9c2:	2201      	movs	r2, #1
    e9c4:	409a      	lsls	r2, r3
    e9c6:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e9c8:	4947      	ldr	r1, [pc, #284]	; (eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
    e9ca:	e8d1 cfef 	ldaex	ip, [r1]
    e9ce:	ea0c 0c00 	and.w	ip, ip, r0
    e9d2:	e8c1 cfee 	stlex	lr, ip, [r1]
    e9d6:	f1be 0f00 	cmp.w	lr, #0
    e9da:	d1f6      	bne.n	e9ca <gpio_nrfx_pin_interrupt_configure+0x9e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    e9dc:	009b      	lsls	r3, r3, #2
    e9de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e9e2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    e9e6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    e9ea:	f021 0101 	bic.w	r1, r1, #1
    e9ee:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    e9f2:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    e9f6:	4620      	mov	r0, r4
    e9f8:	2100      	movs	r1, #0
    e9fa:	f7ff ff15 	bl	e828 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    e9fe:	68f8      	ldr	r0, [r7, #12]
    ea00:	40e8      	lsrs	r0, r5
    ea02:	f010 0001 	ands.w	r0, r0, #1
    ea06:	d04a      	beq.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
		if (data->trig_edge & BIT(pin)) {
    ea08:	6978      	ldr	r0, [r7, #20]
    ea0a:	40e8      	lsrs	r0, r5
    ea0c:	f010 0201 	ands.w	r2, r0, #1
    ea10:	d058      	beq.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
			if (data->double_edge & BIT(pin)) {
    ea12:	69bb      	ldr	r3, [r7, #24]
    ea14:	40eb      	lsrs	r3, r5
    ea16:	07db      	lsls	r3, r3, #31
    ea18:	d44c      	bmi.n	eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    ea1a:	693b      	ldr	r3, [r7, #16]
    ea1c:	fa23 f505 	lsr.w	r5, r3, r5
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    ea20:	f015 0f01 	tst.w	r5, #1
    ea24:	bf14      	ite	ne
    ea26:	2701      	movne	r7, #1
    ea28:	2702      	moveq	r7, #2
    ea2a:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    ea2c:	2501      	movs	r5, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ea2e:	4a2e      	ldr	r2, [pc, #184]	; (eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
    ea30:	fa05 f103 	lsl.w	r1, r5, r3
    ea34:	e8d2 0fef 	ldaex	r0, [r2]
    ea38:	ea40 0c01 	orr.w	ip, r0, r1
    ea3c:	e8c2 cfee 	stlex	lr, ip, [r2]
    ea40:	f1be 0f00 	cmp.w	lr, #0
    ea44:	d1f6      	bne.n	ea34 <gpio_nrfx_pin_interrupt_configure+0x108>
		if ((prev & BIT(channel)) == 0) {
    ea46:	40d8      	lsrs	r0, r3
    ea48:	f010 0001 	ands.w	r0, r0, #1
    ea4c:	d134      	bne.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    ea4e:	009a      	lsls	r2, r3, #2
    ea50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ea54:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    ea58:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
			nrf_gpiote_event_t evt =
    ea5c:	3340      	adds	r3, #64	; 0x40
    ea5e:	f425 3547 	bic.w	r5, r5, #203776	; 0x31c00
    ea62:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    ea66:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ea6a:	0224      	lsls	r4, r4, #8
    ea6c:	009b      	lsls	r3, r3, #2
    ea6e:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    ea72:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    ea76:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ea78:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    return ((uint32_t)p_reg + event);
    ea7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ea80:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ea84:	432c      	orrs	r4, r5
    ea86:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ea8a:	6018      	str	r0, [r3, #0]
    ea8c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    ea8e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    ea92:	f043 0301 	orr.w	r3, r3, #1
    ea96:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
    ea9a:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    ea9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    eaa0:	2001      	movs	r0, #1
    eaa2:	40a8      	lsls	r0, r5
    eaa4:	ea21 0100 	bic.w	r1, r1, r0
    eaa8:	e760      	b.n	e96c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    eaaa:	3301      	adds	r3, #1
    eaac:	2b08      	cmp	r3, #8
    eaae:	f47f af7c 	bne.w	e9aa <gpio_nrfx_pin_interrupt_configure+0x7e>
    eab2:	e7a0      	b.n	e9f6 <gpio_nrfx_pin_interrupt_configure+0xca>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    eab4:	2703      	movs	r7, #3
    eab6:	e7b8      	b.n	ea2a <gpio_nrfx_pin_interrupt_configure+0xfe>
    eab8:	3301      	adds	r3, #1
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    eaba:	2b08      	cmp	r3, #8
    eabc:	d1b8      	bne.n	ea30 <gpio_nrfx_pin_interrupt_configure+0x104>
	return -ENODEV;
    eabe:	f06f 0012 	mvn.w	r0, #18
    eac2:	e7ec      	b.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    eac4:	693b      	ldr	r3, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    eac6:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
    eac8:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    eacc:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ead0:	bf0c      	ite	eq
    ead2:	2103      	moveq	r1, #3
    ead4:	2102      	movne	r1, #2
    ead6:	f7ff fea7 	bl	e828 <nrf_gpio_cfg_sense_set>
	int res = 0;
    eada:	4610      	mov	r0, r2
    eadc:	e7df      	b.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    eade:	bf00      	nop
    eae0:	40842500 	.word	0x40842500
    eae4:	40031000 	.word	0x40031000
    eae8:	200105f8 	.word	0x200105f8

0000eaec <gpiote_event_handler>:
{
    eaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eaf0:	4d3a      	ldr	r5, [pc, #232]	; (ebdc <gpiote_event_handler+0xf0>)
    eaf2:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    eaf4:	2e00      	cmp	r6, #0
    eaf6:	d04c      	beq.n	eb92 <gpiote_event_handler+0xa6>
	uint32_t bit = 1U << pin;
    eaf8:	2701      	movs	r7, #1
	uint32_t pin = 0U;
    eafa:	f04f 0800 	mov.w	r8, #0
	uint32_t out = data->pin_int_en;
    eafe:	4b38      	ldr	r3, [pc, #224]	; (ebe0 <gpiote_event_handler+0xf4>)
    eb00:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    eb02:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    eb06:	4301      	orrs	r1, r0
    eb08:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    eb0c:	4935      	ldr	r1, [pc, #212]	; (ebe4 <gpiote_event_handler+0xf8>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    eb0e:	691b      	ldr	r3, [r3, #16]
    eb10:	690c      	ldr	r4, [r1, #16]
    eb12:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    eb14:	ea22 0404 	bic.w	r4, r2, r4
	while (level_pins) {
    eb18:	bb72      	cbnz	r2, eb78 <gpiote_event_handler+0x8c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    eb1a:	602a      	str	r2, [r5, #0]
    eb1c:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    eb1e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    eb20:	2501      	movs	r5, #1
    eb22:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    eb24:	4830      	ldr	r0, [pc, #192]	; (ebe8 <gpiote_event_handler+0xfc>)
    eb26:	4931      	ldr	r1, [pc, #196]	; (ebec <gpiote_event_handler+0x100>)
    eb28:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    eb2c:	fa05 fc03 	lsl.w	ip, r5, r3
    eb30:	ea1c 0f02 	tst.w	ip, r2
    eb34:	d00f      	beq.n	eb56 <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb36:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    eb3a:	b162      	cbz	r2, eb56 <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    eb3c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    eb40:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    eb44:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    eb48:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    eb4c:	fa05 f202 	lsl.w	r2, r5, r2
    eb50:	4314      	orrs	r4, r2
    eb52:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    eb56:	3301      	adds	r3, #1
    eb58:	2b08      	cmp	r3, #8
    eb5a:	d1e5      	bne.n	eb28 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    eb5c:	b9dc      	cbnz	r4, eb96 <gpiote_event_handler+0xaa>
	if (port_event) {
    eb5e:	b14e      	cbz	r6, eb74 <gpiote_event_handler+0x88>
	uint32_t bit = 1U << pin;
    eb60:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    eb62:	2600      	movs	r6, #0
	uint32_t out = data->pin_int_en;
    eb64:	4c1e      	ldr	r4, [pc, #120]	; (ebe0 <gpiote_event_handler+0xf4>)
    eb66:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    eb68:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
    eb6c:	4301      	orrs	r1, r0
    eb6e:	ea22 0201 	bic.w	r2, r2, r1
	while (level_pins) {
    eb72:	bb0a      	cbnz	r2, ebb8 <gpiote_event_handler+0xcc>
}
    eb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    eb78:	423a      	tst	r2, r7
    eb7a:	d006      	beq.n	eb8a <gpiote_event_handler+0x9e>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    eb7c:	2100      	movs	r1, #0
    eb7e:	f008 001f 	and.w	r0, r8, #31
    eb82:	f7ff fe51 	bl	e828 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    eb86:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    eb8a:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    eb8e:	007f      	lsls	r7, r7, #1
    eb90:	e7c2      	b.n	eb18 <gpiote_event_handler+0x2c>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    eb92:	4634      	mov	r4, r6
    eb94:	e7c3      	b.n	eb1e <gpiote_event_handler+0x32>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    eb96:	4b12      	ldr	r3, [pc, #72]	; (ebe0 <gpiote_event_handler+0xf4>)
    eb98:	6859      	ldr	r1, [r3, #4]
    eb9a:	2900      	cmp	r1, #0
    eb9c:	d0df      	beq.n	eb5e <gpiote_event_handler+0x72>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    eb9e:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    eba0:	4f13      	ldr	r7, [pc, #76]	; (ebf0 <gpiote_event_handler+0x104>)
		if (cb->pin_mask & pins) {
    eba2:	688a      	ldr	r2, [r1, #8]
    eba4:	4022      	ands	r2, r4
    eba6:	d002      	beq.n	ebae <gpiote_event_handler+0xc2>
			cb->handler(port, cb, cb->pin_mask & pins);
    eba8:	684b      	ldr	r3, [r1, #4]
    ebaa:	4638      	mov	r0, r7
    ebac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ebae:	2d00      	cmp	r5, #0
    ebb0:	d0d5      	beq.n	eb5e <gpiote_event_handler+0x72>
    ebb2:	4629      	mov	r1, r5
    ebb4:	682d      	ldr	r5, [r5, #0]
    ebb6:	e7f4      	b.n	eba2 <gpiote_event_handler+0xb6>
		if (level_pins & bit) {
    ebb8:	4215      	tst	r5, r2
    ebba:	d00c      	beq.n	ebd6 <gpiote_event_handler+0xea>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ebbc:	6923      	ldr	r3, [r4, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ebbe:	f006 001f 	and.w	r0, r6, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ebc2:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    ebc4:	f013 0f01 	tst.w	r3, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ebc8:	bf0c      	ite	eq
    ebca:	2103      	moveq	r1, #3
    ebcc:	2102      	movne	r1, #2
    ebce:	f7ff fe2b 	bl	e828 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ebd2:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    ebd6:	3601      	adds	r6, #1
		bit <<= 1;
    ebd8:	006d      	lsls	r5, r5, #1
    ebda:	e7ca      	b.n	eb72 <gpiote_event_handler+0x86>
    ebdc:	4003117c 	.word	0x4003117c
    ebe0:	200105dc 	.word	0x200105dc
    ebe4:	40842500 	.word	0x40842500
    ebe8:	40031000 	.word	0x40031000
    ebec:	40031100 	.word	0x40031100
    ebf0:	200103ac 	.word	0x200103ac

0000ebf4 <init_spim>:
		transfer_next_chunk(dev_data->dev);
	}
}

static int init_spim(const struct device *dev)
{
    ebf4:	b538      	push	{r3, r4, r5, lr}
	struct spi_nrfx_data *data = get_dev_data(dev);
    ebf6:	68c4      	ldr	r4, [r0, #12]
{
    ebf8:	4605      	mov	r5, r0
	nrfx_err_t result;

	data->dev = dev;
    ebfa:	64a0      	str	r0, [r4, #72]	; 0x48

	/* This sets only default values of frequency, mode and bit order.
	 * The proper ones are set in configure() when a transfer is started.
	 */
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    ebfc:	6840      	ldr	r0, [r0, #4]
    ebfe:	4623      	mov	r3, r4
    ec00:	4a10      	ldr	r2, [pc, #64]	; (ec44 <init_spim+0x50>)
    ec02:	f100 010c 	add.w	r1, r0, #12
    ec06:	f000 fdeb 	bl	f7e0 <nrfx_spim_init>
				&get_dev_config(dev)->config,
				event_handler,
				data);
	if (result != NRFX_SUCCESS) {
    ec0a:	4b0f      	ldr	r3, [pc, #60]	; (ec48 <init_spim+0x54>)
    ec0c:	4298      	cmp	r0, r3
    ec0e:	d011      	beq.n	ec34 <init_spim+0x40>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    ec10:	2301      	movs	r3, #1
    ec12:	f04f 0000 	mov.w	r0, #0
    ec16:	4a0d      	ldr	r2, [pc, #52]	; (ec4c <init_spim+0x58>)
    ec18:	f363 0007 	bfi	r0, r3, #0, #8
    ec1c:	4b0c      	ldr	r3, [pc, #48]	; (ec50 <init_spim+0x5c>)
    ec1e:	490d      	ldr	r1, [pc, #52]	; (ec54 <init_spim+0x60>)
    ec20:	1a9b      	subs	r3, r3, r2
    ec22:	08db      	lsrs	r3, r3, #3
    ec24:	f363 108f 	bfi	r0, r3, #6, #10
    ec28:	682a      	ldr	r2, [r5, #0]
    ec2a:	f002 fa42 	bl	110b2 <log_string_sync>
		return -EBUSY;
    ec2e:	f06f 000f 	mvn.w	r0, #15
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
    ec32:	bd38      	pop	{r3, r4, r5, pc}
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    ec34:	2301      	movs	r3, #1
	spi_context_unlock_unconditionally(&data->ctx);
    ec36:	4620      	mov	r0, r4
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    ec38:	6563      	str	r3, [r4, #84]	; 0x54
	spi_context_unlock_unconditionally(&data->ctx);
    ec3a:	f002 fc3e 	bl	114ba <spi_context_unlock_unconditionally>
	return 0;
    ec3e:	2000      	movs	r0, #0
    ec40:	e7f7      	b.n	ec32 <init_spim+0x3e>
    ec42:	bf00      	nop
    ec44:	0000ecfd 	.word	0x0000ecfd
    ec48:	0bad0000 	.word	0x0bad0000
    ec4c:	00011c34 	.word	0x00011c34
    ec50:	00011c74 	.word	0x00011c74
    ec54:	00012777 	.word	0x00012777

0000ec58 <transfer_next_chunk>:
{
    ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    ec5a:	68c5      	ldr	r5, [r0, #12]
{
    ec5c:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    ec5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    ec60:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    ec62:	b97b      	cbnz	r3, ec84 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    ec64:	b99c      	cbnz	r4, ec8e <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    ec66:	2200      	movs	r2, #0
    ec68:	4628      	mov	r0, r5
    ec6a:	4611      	mov	r1, r2
    ec6c:	f002 fc00 	bl	11470 <_spi_context_cs_control.isra.5>
	ctx->sync_status = status;
    ec70:	626c      	str	r4, [r5, #36]	; 0x24
	z_impl_k_sem_give(sem);
    ec72:	f105 0014 	add.w	r0, r5, #20
    ec76:	f001 fc7b 	bl	10570 <z_impl_k_sem_give>
	dev_data->busy = false;
    ec7a:	2300      	movs	r3, #0
    ec7c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
    ec80:	b005      	add	sp, #20
    ec82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    ec84:	2c00      	cmp	r4, #0
    ec86:	d035      	beq.n	ecf4 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    ec88:	429c      	cmp	r4, r3
    ec8a:	bf28      	it	cs
    ec8c:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    ec8e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    ec90:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    ec92:	b179      	cbz	r1, ecb4 <transfer_next_chunk+0x5c>
    ec94:	b173      	cbz	r3, ecb4 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    ec96:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    ec9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ec9e:	d009      	beq.n	ecb4 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    eca0:	2c08      	cmp	r4, #8
    eca2:	bf28      	it	cs
    eca4:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    eca6:	f105 0758 	add.w	r7, r5, #88	; 0x58
    ecaa:	4622      	mov	r2, r4
    ecac:	4638      	mov	r0, r7
    ecae:	f002 fb35 	bl	1131c <memcpy>
			tx_buf = dev_data->buffer;
    ecb2:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    ecb4:	68b3      	ldr	r3, [r6, #8]
		xfer.p_tx_buffer = tx_buf;
    ecb6:	9100      	str	r1, [sp, #0]
    ecb8:	429c      	cmp	r4, r3
    ecba:	bf28      	it	cs
    ecbc:	461c      	movcs	r4, r3
    ecbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
		dev_data->chunk_len = chunk_len;
    ecc0:	64ec      	str	r4, [r5, #76]	; 0x4c
    ecc2:	b11b      	cbz	r3, eccc <transfer_next_chunk+0x74>
    ecc4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	bf18      	it	ne
    ecca:	4623      	movne	r3, r4
    eccc:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    ecce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    ecd0:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    ecd2:	b11b      	cbz	r3, ecdc <transfer_next_chunk+0x84>
    ecd4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	bf18      	it	ne
    ecda:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    ecdc:	2200      	movs	r2, #0
    ecde:	4669      	mov	r1, sp
    ece0:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    ece2:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    ece4:	f000 fe7c 	bl	f9e0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    ece8:	4b03      	ldr	r3, [pc, #12]	; (ecf8 <transfer_next_chunk+0xa0>)
    ecea:	4298      	cmp	r0, r3
    ecec:	d0c8      	beq.n	ec80 <transfer_next_chunk+0x28>
			error = -EIO;
    ecee:	f06f 0404 	mvn.w	r4, #4
    ecf2:	e7b8      	b.n	ec66 <transfer_next_chunk+0xe>
	} else if (!ctx->rx_len) {
    ecf4:	461c      	mov	r4, r3
    ecf6:	e7ca      	b.n	ec8e <transfer_next_chunk+0x36>
    ecf8:	0bad0000 	.word	0x0bad0000

0000ecfc <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    ecfc:	7803      	ldrb	r3, [r0, #0]
{
    ecfe:	b510      	push	{r4, lr}
    ed00:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    ed02:	2b00      	cmp	r3, #0
    ed04:	d156      	bne.n	edb4 <event_handler+0xb8>
	if (!ctx->tx_len) {
    ed06:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    ed08:	b183      	cbz	r3, ed2c <event_handler+0x30>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    ed0a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	if (len > ctx->tx_len) {
    ed0c:	429a      	cmp	r2, r3
    ed0e:	d925      	bls.n	ed5c <event_handler+0x60>
		LOG_ERR("Update exceeds current buffer");
    ed10:	2301      	movs	r3, #1
    ed12:	f04f 0000 	mov.w	r0, #0
    ed16:	4a28      	ldr	r2, [pc, #160]	; (edb8 <event_handler+0xbc>)
    ed18:	f363 0007 	bfi	r0, r3, #0, #8
    ed1c:	4b27      	ldr	r3, [pc, #156]	; (edbc <event_handler+0xc0>)
    ed1e:	4928      	ldr	r1, [pc, #160]	; (edc0 <event_handler+0xc4>)
    ed20:	1a9b      	subs	r3, r3, r2
    ed22:	08db      	lsrs	r3, r3, #3
    ed24:	f363 108f 	bfi	r0, r3, #6, #10
    ed28:	f002 f9c3 	bl	110b2 <log_string_sync>
	if (!ctx->rx_len) {
    ed2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ed2e:	b183      	cbz	r3, ed52 <event_handler+0x56>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    ed30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	if (len > ctx->rx_len) {
    ed32:	429a      	cmp	r2, r3
    ed34:	d928      	bls.n	ed88 <event_handler+0x8c>
		LOG_ERR("Update exceeds current buffer");
    ed36:	2301      	movs	r3, #1
    ed38:	f04f 0000 	mov.w	r0, #0
    ed3c:	4a1e      	ldr	r2, [pc, #120]	; (edb8 <event_handler+0xbc>)
    ed3e:	f363 0007 	bfi	r0, r3, #0, #8
    ed42:	4b1e      	ldr	r3, [pc, #120]	; (edbc <event_handler+0xc0>)
    ed44:	491e      	ldr	r1, [pc, #120]	; (edc0 <event_handler+0xc4>)
    ed46:	1a9b      	subs	r3, r3, r2
    ed48:	08db      	lsrs	r3, r3, #3
    ed4a:	f363 108f 	bfi	r0, r3, #6, #10
    ed4e:	f002 f9b0 	bl	110b2 <log_string_sync>
		transfer_next_chunk(dev_data->dev);
    ed52:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    ed54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    ed58:	f7ff bf7e 	b.w	ec58 <transfer_next_chunk>
	ctx->tx_len -= len;
    ed5c:	1a9b      	subs	r3, r3, r2
    ed5e:	63cb      	str	r3, [r1, #60]	; 0x3c
	if (!ctx->tx_len) {
    ed60:	b963      	cbnz	r3, ed7c <event_handler+0x80>
		ctx->tx_count--;
    ed62:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    ed64:	3b01      	subs	r3, #1
    ed66:	62cb      	str	r3, [r1, #44]	; 0x2c
		if (ctx->tx_count) {
    ed68:	b163      	cbz	r3, ed84 <event_handler+0x88>
			ctx->current_tx++;
    ed6a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ed6c:	f103 0208 	add.w	r2, r3, #8
    ed70:	628a      	str	r2, [r1, #40]	; 0x28
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    ed72:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    ed74:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    ed76:	638a      	str	r2, [r1, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    ed78:	63cb      	str	r3, [r1, #60]	; 0x3c
    ed7a:	e7d7      	b.n	ed2c <event_handler+0x30>
	} else if (ctx->tx_buf) {
    ed7c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    ed7e:	2b00      	cmp	r3, #0
    ed80:	d0d4      	beq.n	ed2c <event_handler+0x30>
		ctx->tx_buf += dfs * len;
    ed82:	4413      	add	r3, r2
    ed84:	63a3      	str	r3, [r4, #56]	; 0x38
    ed86:	e7d1      	b.n	ed2c <event_handler+0x30>
	ctx->rx_len -= len;
    ed88:	1a9b      	subs	r3, r3, r2
    ed8a:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    ed8c:	b963      	cbnz	r3, eda8 <event_handler+0xac>
		ctx->rx_count--;
    ed8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ed90:	3b01      	subs	r3, #1
    ed92:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
    ed94:	b163      	cbz	r3, edb0 <event_handler+0xb4>
			ctx->current_rx++;
    ed96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed98:	f103 0208 	add.w	r2, r3, #8
    ed9c:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ed9e:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    eda0:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    eda2:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    eda4:	6463      	str	r3, [r4, #68]	; 0x44
    eda6:	e7d4      	b.n	ed52 <event_handler+0x56>
	} else if (ctx->rx_buf) {
    eda8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    edaa:	2b00      	cmp	r3, #0
    edac:	d0d1      	beq.n	ed52 <event_handler+0x56>
		ctx->rx_buf += dfs * len;
    edae:	4413      	add	r3, r2
    edb0:	6423      	str	r3, [r4, #64]	; 0x40
    edb2:	e7ce      	b.n	ed52 <event_handler+0x56>
}
    edb4:	bd10      	pop	{r4, pc}
    edb6:	bf00      	nop
    edb8:	00011c34 	.word	0x00011c34
    edbc:	00011c74 	.word	0x00011c74
    edc0:	00012759 	.word	0x00012759

0000edc4 <spi_nrfx_transceive>:
{
    edc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    edc8:	68c4      	ldr	r4, [r0, #12]
{
    edca:	4681      	mov	r9, r0
    edcc:	460f      	mov	r7, r1
    edce:	4616      	mov	r6, r2
    edd0:	461d      	mov	r5, r3
	k_sem_take(&ctx->lock, K_FOREVER);
    edd2:	f104 0b04 	add.w	fp, r4, #4
	return z_impl_k_sem_take(sem, timeout);
    edd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    edda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    edde:	4658      	mov	r0, fp
    ede0:	f001 fbe6 	bl	105b0 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    ede4:	f8d9 200c 	ldr.w	r2, [r9, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    ede8:	6813      	ldr	r3, [r2, #0]
    edea:	429f      	cmp	r7, r3
    edec:	f000 80bb 	beq.w	ef66 <spi_nrfx_transceive+0x1a2>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    edf0:	88bb      	ldrh	r3, [r7, #4]
    edf2:	07d8      	lsls	r0, r3, #31
    edf4:	d518      	bpl.n	ee28 <spi_nrfx_transceive+0x64>
		LOG_ERR("Slave mode is not supported on %s",
    edf6:	2301      	movs	r3, #1
    edf8:	f04f 0000 	mov.w	r0, #0
    edfc:	4a88      	ldr	r2, [pc, #544]	; (f020 <spi_nrfx_transceive+0x25c>)
    edfe:	f363 0007 	bfi	r0, r3, #0, #8
    ee02:	4b88      	ldr	r3, [pc, #544]	; (f024 <spi_nrfx_transceive+0x260>)
    ee04:	4988      	ldr	r1, [pc, #544]	; (f028 <spi_nrfx_transceive+0x264>)
    ee06:	1a9b      	subs	r3, r3, r2
    ee08:	08db      	lsrs	r3, r3, #3
    ee0a:	f363 108f 	bfi	r0, r3, #6, #10
    ee0e:	f8d9 2000 	ldr.w	r2, [r9]
    ee12:	f002 f94e 	bl	110b2 <log_string_sync>
		return -EINVAL;
    ee16:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    ee1a:	4658      	mov	r0, fp
    ee1c:	f001 fba8 	bl	10570 <z_impl_k_sem_give>
}
    ee20:	4620      	mov	r0, r4
    ee22:	b003      	add	sp, #12
    ee24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    ee28:	0719      	lsls	r1, r3, #28
    ee2a:	d50e      	bpl.n	ee4a <spi_nrfx_transceive+0x86>
		LOG_ERR("Loopback mode is not supported");
    ee2c:	2301      	movs	r3, #1
    ee2e:	f04f 0000 	mov.w	r0, #0
    ee32:	4a7b      	ldr	r2, [pc, #492]	; (f020 <spi_nrfx_transceive+0x25c>)
    ee34:	f363 0007 	bfi	r0, r3, #0, #8
    ee38:	4b7a      	ldr	r3, [pc, #488]	; (f024 <spi_nrfx_transceive+0x260>)
    ee3a:	497c      	ldr	r1, [pc, #496]	; (f02c <spi_nrfx_transceive+0x268>)
    ee3c:	1a9b      	subs	r3, r3, r2
    ee3e:	08db      	lsrs	r3, r3, #3
    ee40:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
    ee44:	f002 f935 	bl	110b2 <log_string_sync>
    ee48:	e7e5      	b.n	ee16 <spi_nrfx_transceive+0x52>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    ee4a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    ee4e:	d00c      	beq.n	ee6a <spi_nrfx_transceive+0xa6>
		LOG_ERR("Only single line mode is supported");
    ee50:	2301      	movs	r3, #1
    ee52:	f04f 0000 	mov.w	r0, #0
    ee56:	4a72      	ldr	r2, [pc, #456]	; (f020 <spi_nrfx_transceive+0x25c>)
    ee58:	f363 0007 	bfi	r0, r3, #0, #8
    ee5c:	4b71      	ldr	r3, [pc, #452]	; (f024 <spi_nrfx_transceive+0x260>)
    ee5e:	4974      	ldr	r1, [pc, #464]	; (f030 <spi_nrfx_transceive+0x26c>)
    ee60:	1a9b      	subs	r3, r3, r2
    ee62:	08db      	lsrs	r3, r3, #3
    ee64:	f363 108f 	bfi	r0, r3, #6, #10
    ee68:	e7ec      	b.n	ee44 <spi_nrfx_transceive+0x80>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    ee6a:	f3c3 1345 	ubfx	r3, r3, #5, #6
    ee6e:	2b08      	cmp	r3, #8
    ee70:	d00c      	beq.n	ee8c <spi_nrfx_transceive+0xc8>
		LOG_ERR("Word sizes other than 8 bits"
    ee72:	2301      	movs	r3, #1
    ee74:	f04f 0000 	mov.w	r0, #0
    ee78:	4a69      	ldr	r2, [pc, #420]	; (f020 <spi_nrfx_transceive+0x25c>)
    ee7a:	f363 0007 	bfi	r0, r3, #0, #8
    ee7e:	4b69      	ldr	r3, [pc, #420]	; (f024 <spi_nrfx_transceive+0x260>)
    ee80:	496c      	ldr	r1, [pc, #432]	; (f034 <spi_nrfx_transceive+0x270>)
    ee82:	1a9b      	subs	r3, r3, r2
    ee84:	08db      	lsrs	r3, r3, #3
    ee86:	f363 108f 	bfi	r0, r3, #6, #10
    ee8a:	e7db      	b.n	ee44 <spi_nrfx_transceive+0x80>
	if (spi_cfg->frequency < 125000) {
    ee8c:	6839      	ldr	r1, [r7, #0]
    ee8e:	4b6a      	ldr	r3, [pc, #424]	; (f038 <spi_nrfx_transceive+0x274>)
    ee90:	4299      	cmp	r1, r3
    ee92:	d80c      	bhi.n	eeae <spi_nrfx_transceive+0xea>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    ee94:	2301      	movs	r3, #1
    ee96:	f04f 0000 	mov.w	r0, #0
    ee9a:	4a61      	ldr	r2, [pc, #388]	; (f020 <spi_nrfx_transceive+0x25c>)
    ee9c:	f363 0007 	bfi	r0, r3, #0, #8
    eea0:	4b60      	ldr	r3, [pc, #384]	; (f024 <spi_nrfx_transceive+0x260>)
    eea2:	4966      	ldr	r1, [pc, #408]	; (f03c <spi_nrfx_transceive+0x278>)
    eea4:	1a9b      	subs	r3, r3, r2
    eea6:	08db      	lsrs	r3, r3, #3
    eea8:	f363 108f 	bfi	r0, r3, #6, #10
    eeac:	e7ca      	b.n	ee44 <spi_nrfx_transceive+0x80>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    eeae:	f8d9 3004 	ldr.w	r3, [r9, #4]
	ctx->config = spi_cfg;
    eeb2:	6017      	str	r7, [r2, #0]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    eeb4:	9301      	str	r3, [sp, #4]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    eeb6:	68bb      	ldr	r3, [r7, #8]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d07e      	beq.n	efba <spi_nrfx_transceive+0x1f6>
    eebc:	6818      	ldr	r0, [r3, #0]
    eebe:	2800      	cmp	r0, #0
    eec0:	d07b      	beq.n	efba <spi_nrfx_transceive+0x1f6>
				   ctx->config->cs->gpio_dt_flags |
    eec2:	f893 8009 	ldrb.w	r8, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    eec6:	7a1a      	ldrb	r2, [r3, #8]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    eec8:	f018 0f01 	tst.w	r8, #1
    eecc:	bf0c      	ite	eq
    eece:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    eed2:	f488 6820 	eorne.w	r8, r8, #2560	; 0xa00
    eed6:	9200      	str	r2, [sp, #0]
	struct gpio_driver_data *data =
    eed8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	return api->pin_configure(port, pin, flags);
    eedc:	6883      	ldr	r3, [r0, #8]
    eede:	4642      	mov	r2, r8
    eee0:	681b      	ldr	r3, [r3, #0]
    eee2:	9900      	ldr	r1, [sp, #0]
    eee4:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    eee6:	b958      	cbnz	r0, ef00 <spi_nrfx_transceive+0x13c>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    eee8:	2201      	movs	r2, #1
    eeea:	9900      	ldr	r1, [sp, #0]
    eeec:	f8da 3000 	ldr.w	r3, [sl]
    eef0:	408a      	lsls	r2, r1
    eef2:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    eef6:	bf14      	ite	ne
    eef8:	4313      	orrne	r3, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    eefa:	4393      	biceq	r3, r2
    eefc:	f8ca 3000 	str.w	r3, [sl]
	nrf_spim_configure(spim->p_reg,
    ef00:	9b01      	ldr	r3, [sp, #4]
    ef02:	6819      	ldr	r1, [r3, #0]
    ef04:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    ef06:	0798      	lsls	r0, r3, #30
    ef08:	f003 0204 	and.w	r2, r3, #4
    ef0c:	d564      	bpl.n	efd8 <spi_nrfx_transceive+0x214>
			return NRF_SPIM_MODE_2;
    ef0e:	2a00      	cmp	r2, #0
    ef10:	bf14      	ite	ne
    ef12:	2203      	movne	r2, #3
    ef14:	2202      	moveq	r2, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    ef16:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    ef18:	f3c3 1300 	ubfx	r3, r3, #4, #1
    ef1c:	d060      	beq.n	efe0 <spi_nrfx_transceive+0x21c>
    ef1e:	2a03      	cmp	r2, #3
    ef20:	d061      	beq.n	efe6 <spi_nrfx_transceive+0x222>
    ef22:	2a01      	cmp	r2, #1
    ef24:	d101      	bne.n	ef2a <spi_nrfx_transceive+0x166>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    ef26:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    ef2a:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    ef2e:	4a44      	ldr	r2, [pc, #272]	; (f040 <spi_nrfx_transceive+0x27c>)
	nrf_spim_frequency_set(spim->p_reg,
    ef30:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
    ef32:	4293      	cmp	r3, r2
    ef34:	d95a      	bls.n	efec <spi_nrfx_transceive+0x228>
	} else if (frequency < 500000) {
    ef36:	4a43      	ldr	r2, [pc, #268]	; (f044 <spi_nrfx_transceive+0x280>)
    ef38:	4293      	cmp	r3, r2
    ef3a:	d95a      	bls.n	eff2 <spi_nrfx_transceive+0x22e>
	} else if (frequency < 1000000) {
    ef3c:	4a42      	ldr	r2, [pc, #264]	; (f048 <spi_nrfx_transceive+0x284>)
    ef3e:	4293      	cmp	r3, r2
    ef40:	d95a      	bls.n	eff8 <spi_nrfx_transceive+0x234>
	} else if (frequency < 2000000) {
    ef42:	4a42      	ldr	r2, [pc, #264]	; (f04c <spi_nrfx_transceive+0x288>)
    ef44:	4293      	cmp	r3, r2
    ef46:	d95a      	bls.n	effe <spi_nrfx_transceive+0x23a>
	} else if (frequency < 4000000) {
    ef48:	4a41      	ldr	r2, [pc, #260]	; (f050 <spi_nrfx_transceive+0x28c>)
    ef4a:	4293      	cmp	r3, r2
    ef4c:	d95a      	bls.n	f004 <spi_nrfx_transceive+0x240>
		return NRF_SPIM_FREQ_8M;
    ef4e:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    ef52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    ef56:	4293      	cmp	r3, r2
    ef58:	bf94      	ite	ls
    ef5a:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    ef5e:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    ef62:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    ef66:	2301      	movs	r3, #1
    ef68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	if (tx_bufs) {
    ef6c:	2e00      	cmp	r6, #0
    ef6e:	d04c      	beq.n	f00a <spi_nrfx_transceive+0x246>
		ctx->current_tx = tx_bufs->buffers;
    ef70:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    ef72:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    ef74:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    ef76:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    ef78:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    ef7a:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    ef7c:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    ef7e:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    ef80:	2d00      	cmp	r5, #0
    ef82:	d047      	beq.n	f014 <spi_nrfx_transceive+0x250>
		ctx->current_rx = rx_bufs->buffers;
    ef84:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    ef86:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    ef88:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    ef8a:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ef8c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    ef8e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    ef90:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    ef92:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    ef94:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    ef96:	2101      	movs	r1, #1
	ctx->sync_status = 0;
    ef98:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    ef9a:	4620      	mov	r0, r4
    ef9c:	f002 fa68 	bl	11470 <_spi_context_cs_control.isra.5>
		transfer_next_chunk(dev);
    efa0:	4648      	mov	r0, r9
    efa2:	f7ff fe59 	bl	ec58 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    efa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    efaa:	f104 0014 	add.w	r0, r4, #20
    efae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    efb2:	f001 fafd 	bl	105b0 <z_impl_k_sem_take>
	status = ctx->sync_status;
    efb6:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return status;
    efb8:	e72f      	b.n	ee1a <spi_nrfx_transceive+0x56>
		LOG_INF("CS control inhibited (no GPIO device)");
    efba:	2303      	movs	r3, #3
    efbc:	f04f 0000 	mov.w	r0, #0
    efc0:	4a17      	ldr	r2, [pc, #92]	; (f020 <spi_nrfx_transceive+0x25c>)
    efc2:	f363 0007 	bfi	r0, r3, #0, #8
    efc6:	4b17      	ldr	r3, [pc, #92]	; (f024 <spi_nrfx_transceive+0x260>)
    efc8:	4922      	ldr	r1, [pc, #136]	; (f054 <spi_nrfx_transceive+0x290>)
    efca:	1a9b      	subs	r3, r3, r2
    efcc:	08db      	lsrs	r3, r3, #3
    efce:	f363 108f 	bfi	r0, r3, #6, #10
    efd2:	f002 f86e 	bl	110b2 <log_string_sync>
    efd6:	e793      	b.n	ef00 <spi_nrfx_transceive+0x13c>
			return NRF_SPIM_MODE_0;
    efd8:	3200      	adds	r2, #0
    efda:	bf18      	it	ne
    efdc:	2201      	movne	r2, #1
    efde:	e79a      	b.n	ef16 <spi_nrfx_transceive+0x152>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    efe0:	f043 0304 	orr.w	r3, r3, #4
        break;
    efe4:	e7a1      	b.n	ef2a <spi_nrfx_transceive+0x166>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    efe6:	f043 0306 	orr.w	r3, r3, #6
        break;
    efea:	e79e      	b.n	ef2a <spi_nrfx_transceive+0x166>
		return NRF_SPIM_FREQ_125K;
    efec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    eff0:	e7b7      	b.n	ef62 <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_250K;
    eff2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    eff6:	e7b4      	b.n	ef62 <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_500K;
    eff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    effc:	e7b1      	b.n	ef62 <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_1M;
    effe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f002:	e7ae      	b.n	ef62 <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_2M;
    f004:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    f008:	e7ab      	b.n	ef62 <spi_nrfx_transceive+0x19e>
		ctx->tx_count = 0;
    f00a:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    f00e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    f012:	e7b5      	b.n	ef80 <spi_nrfx_transceive+0x1bc>
		ctx->rx_count = 0;
    f014:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    f018:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    f01c:	e7ba      	b.n	ef94 <spi_nrfx_transceive+0x1d0>
    f01e:	bf00      	nop
    f020:	00011c34 	.word	0x00011c34
    f024:	00011c74 	.word	0x00011c74
    f028:	00012797 	.word	0x00012797
    f02c:	000127b9 	.word	0x000127b9
    f030:	000127d8 	.word	0x000127d8
    f034:	000127fb 	.word	0x000127fb
    f038:	0001e847 	.word	0x0001e847
    f03c:	0001282a 	.word	0x0001282a
    f040:	0003d08f 	.word	0x0003d08f
    f044:	0007a11f 	.word	0x0007a11f
    f048:	000f423f 	.word	0x000f423f
    f04c:	001e847f 	.word	0x001e847f
    f050:	003d08ff 	.word	0x003d08ff
    f054:	0001285b 	.word	0x0001285b

0000f058 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    f058:	4b02      	ldr	r3, [pc, #8]	; (f064 <flash_nrf_pages_layout+0xc>)
    f05a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    f05c:	2301      	movs	r3, #1
    f05e:	6013      	str	r3, [r2, #0]
}
    f060:	4770      	bx	lr
    f062:	bf00      	nop
    f064:	200105fc 	.word	0x200105fc

0000f068 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    f068:	4800      	ldr	r0, [pc, #0]	; (f06c <flash_nrf_get_parameters+0x4>)
    f06a:	4770      	bx	lr
    f06c:	00011e68 	.word	0x00011e68

0000f070 <flash_nrf_erase>:
{
    f070:	b570      	push	{r4, r5, r6, lr}
    f072:	460d      	mov	r5, r1
    f074:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    f076:	f002 fb80 	bl	1177a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    f07a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    f07c:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    f07e:	4628      	mov	r0, r5
    f080:	f002 fa7e 	bl	11580 <is_regular_addr_valid>
    f084:	b300      	cbz	r0, f0c8 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    f086:	fbb5 f3f6 	udiv	r3, r5, r6
    f08a:	fb06 5313 	mls	r3, r6, r3, r5
    f08e:	b9db      	cbnz	r3, f0c8 <flash_nrf_erase+0x58>
    f090:	fbb4 f0f6 	udiv	r0, r4, r6
    f094:	fb06 4010 	mls	r0, r6, r0, r4
    f098:	b9b0      	cbnz	r0, f0c8 <flash_nrf_erase+0x58>
		if (!n_pages) {
    f09a:	42a6      	cmp	r6, r4
    f09c:	d813      	bhi.n	f0c6 <flash_nrf_erase+0x56>
    f09e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f0a6:	480a      	ldr	r0, [pc, #40]	; (f0d0 <flash_nrf_erase+0x60>)
    f0a8:	f001 fa82 	bl	105b0 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    f0ac:	f002 fb65 	bl	1177a <nrfx_nvmc_flash_page_size_get>
    f0b0:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    f0b2:	4628      	mov	r0, r5
    f0b4:	f000 fb6a 	bl	f78c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    f0b8:	1ba4      	subs	r4, r4, r6
    f0ba:	4435      	add	r5, r6
    f0bc:	d1f9      	bne.n	f0b2 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
    f0be:	4804      	ldr	r0, [pc, #16]	; (f0d0 <flash_nrf_erase+0x60>)
    f0c0:	f001 fa56 	bl	10570 <z_impl_k_sem_give>
	return ret;
    f0c4:	4620      	mov	r0, r4
}
    f0c6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    f0c8:	f06f 0015 	mvn.w	r0, #21
    f0cc:	e7fb      	b.n	f0c6 <flash_nrf_erase+0x56>
    f0ce:	bf00      	nop
    f0d0:	20010604 	.word	0x20010604

0000f0d4 <nrf_flash_init>:
{
    f0d4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    f0d6:	2201      	movs	r2, #1
    f0d8:	4806      	ldr	r0, [pc, #24]	; (f0f4 <nrf_flash_init+0x20>)
    f0da:	4611      	mov	r1, r2
    f0dc:	f002 fbfe 	bl	118dc <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    f0e0:	f002 fb4e 	bl	11780 <nrfx_nvmc_flash_page_count_get>
    f0e4:	4c04      	ldr	r4, [pc, #16]	; (f0f8 <nrf_flash_init+0x24>)
    f0e6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    f0e8:	f002 fb47 	bl	1177a <nrfx_nvmc_flash_page_size_get>
    f0ec:	6060      	str	r0, [r4, #4]
}
    f0ee:	2000      	movs	r0, #0
    f0f0:	bd10      	pop	{r4, pc}
    f0f2:	bf00      	nop
    f0f4:	20010604 	.word	0x20010604
    f0f8:	200105fc 	.word	0x200105fc

0000f0fc <flash_nrf_write>:
{
    f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0fe:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    f100:	4619      	mov	r1, r3
    f102:	4630      	mov	r0, r6
{
    f104:	4617      	mov	r7, r2
    f106:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    f108:	f002 fa3a 	bl	11580 <is_regular_addr_valid>
    f10c:	b308      	cbz	r0, f152 <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
    f10e:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    f112:	f015 0503 	ands.w	r5, r5, #3
    f116:	d11c      	bne.n	f152 <flash_nrf_write+0x56>
	if (!len) {
    f118:	b1f4      	cbz	r4, f158 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
    f11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f122:	480e      	ldr	r0, [pc, #56]	; (f15c <flash_nrf_write+0x60>)
    f124:	f001 fa44 	bl	105b0 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    f128:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    f12c:	42a5      	cmp	r5, r4
    f12e:	eb06 0005 	add.w	r0, r6, r5
    f132:	d109      	bne.n	f148 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    f134:	4a0a      	ldr	r2, [pc, #40]	; (f160 <flash_nrf_write+0x64>)
    f136:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    f13a:	07db      	lsls	r3, r3, #31
    f13c:	d5fb      	bpl.n	f136 <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
    f13e:	4807      	ldr	r0, [pc, #28]	; (f15c <flash_nrf_write+0x60>)
    f140:	f001 fa16 	bl	10570 <z_impl_k_sem_give>
    f144:	2000      	movs	r0, #0
}
    f146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    f148:	5979      	ldr	r1, [r7, r5]
    f14a:	f000 fb3b 	bl	f7c4 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    f14e:	3504      	adds	r5, #4
    f150:	e7ec      	b.n	f12c <flash_nrf_write+0x30>
		return -EINVAL;
    f152:	f06f 0015 	mvn.w	r0, #21
    f156:	e7f6      	b.n	f146 <flash_nrf_write+0x4a>
		return 0;
    f158:	4620      	mov	r0, r4
    f15a:	e7f4      	b.n	f146 <flash_nrf_write+0x4a>
    f15c:	20010604 	.word	0x20010604
    f160:	40039000 	.word	0x40039000

0000f164 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    f164:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    f166:	794b      	ldrb	r3, [r1, #5]
    f168:	2b01      	cmp	r3, #1
    f16a:	d027      	beq.n	f1bc <uarte_nrfx_configure+0x58>
    f16c:	2b03      	cmp	r3, #3
    f16e:	d122      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f170:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f172:	798b      	ldrb	r3, [r1, #6]
    f174:	2b03      	cmp	r3, #3
    f176:	d11e      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f178:	79cc      	ldrb	r4, [r1, #7]
    f17a:	b124      	cbz	r4, f186 <uarte_nrfx_configure+0x22>
    f17c:	2c01      	cmp	r4, #1
    f17e:	d11a      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f180:	6843      	ldr	r3, [r0, #4]
    f182:	791b      	ldrb	r3, [r3, #4]
    f184:	b1bb      	cbz	r3, f1b6 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    f186:	790a      	ldrb	r2, [r1, #4]
    f188:	b112      	cbz	r2, f190 <uarte_nrfx_configure+0x2c>
    f18a:	2a02      	cmp	r2, #2
    f18c:	d113      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f18e:	220e      	movs	r2, #14
	switch (baudrate) {
    f190:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f194:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    f196:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    f198:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    f19a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    f19c:	d063      	beq.n	f266 <uarte_nrfx_configure+0x102>
    f19e:	d829      	bhi.n	f1f4 <uarte_nrfx_configure+0x90>
    f1a0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f1a4:	d062      	beq.n	f26c <uarte_nrfx_configure+0x108>
    f1a6:	d814      	bhi.n	f1d2 <uarte_nrfx_configure+0x6e>
    f1a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f1ac:	d060      	beq.n	f270 <uarte_nrfx_configure+0x10c>
    f1ae:	d807      	bhi.n	f1c0 <uarte_nrfx_configure+0x5c>
    f1b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f1b4:	d05f      	beq.n	f276 <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
    f1b6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f1ba:	e053      	b.n	f264 <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f1bc:	2600      	movs	r6, #0
    f1be:	e7d8      	b.n	f172 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f1c0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f1c4:	d05a      	beq.n	f27c <uarte_nrfx_configure+0x118>
    f1c6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f1ca:	d1f4      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f1cc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f1d0:	e03c      	b.n	f24c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f1d2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f1d6:	d054      	beq.n	f282 <uarte_nrfx_configure+0x11e>
    f1d8:	d804      	bhi.n	f1e4 <uarte_nrfx_configure+0x80>
    f1da:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f1de:	d1ea      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f1e0:	4b33      	ldr	r3, [pc, #204]	; (f2b0 <uarte_nrfx_configure+0x14c>)
    f1e2:	e033      	b.n	f24c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f1e4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f1e8:	d04d      	beq.n	f286 <uarte_nrfx_configure+0x122>
    f1ea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f1ee:	d1e2      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f1f0:	4b30      	ldr	r3, [pc, #192]	; (f2b4 <uarte_nrfx_configure+0x150>)
    f1f2:	e02b      	b.n	f24c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f1f4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f1f8:	d047      	beq.n	f28a <uarte_nrfx_configure+0x126>
    f1fa:	d812      	bhi.n	f222 <uarte_nrfx_configure+0xbe>
    f1fc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f200:	42bb      	cmp	r3, r7
    f202:	d045      	beq.n	f290 <uarte_nrfx_configure+0x12c>
    f204:	d805      	bhi.n	f212 <uarte_nrfx_configure+0xae>
    f206:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f20a:	d1d4      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f20c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f210:	e01c      	b.n	f24c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f212:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f216:	d03e      	beq.n	f296 <uarte_nrfx_configure+0x132>
    f218:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f21c:	d1cb      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f21e:	4b26      	ldr	r3, [pc, #152]	; (f2b8 <uarte_nrfx_configure+0x154>)
    f220:	e014      	b.n	f24c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f222:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f226:	d039      	beq.n	f29c <uarte_nrfx_configure+0x138>
    f228:	d808      	bhi.n	f23c <uarte_nrfx_configure+0xd8>
    f22a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f22e:	d038      	beq.n	f2a2 <uarte_nrfx_configure+0x13e>
    f230:	4f22      	ldr	r7, [pc, #136]	; (f2bc <uarte_nrfx_configure+0x158>)
    f232:	42bb      	cmp	r3, r7
    f234:	d1bf      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f23a:	e007      	b.n	f24c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    f23c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f240:	d032      	beq.n	f2a8 <uarte_nrfx_configure+0x144>
    f242:	4f1f      	ldr	r7, [pc, #124]	; (f2c0 <uarte_nrfx_configure+0x15c>)
    f244:	42bb      	cmp	r3, r7
    f246:	d1b6      	bne.n	f1b6 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f24c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    f250:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    f252:	4334      	orrs	r4, r6
    f254:	4322      	orrs	r2, r4
    f256:	3304      	adds	r3, #4
    f258:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f25a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f25e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f262:	2000      	movs	r0, #0
}
    f264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f266:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f26a:	e7ef      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f26c:	4b15      	ldr	r3, [pc, #84]	; (f2c4 <uarte_nrfx_configure+0x160>)
    f26e:	e7ed      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    f270:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f274:	e7ea      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    f276:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f27a:	e7e7      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f27c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f280:	e7e4      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f282:	4b11      	ldr	r3, [pc, #68]	; (f2c8 <uarte_nrfx_configure+0x164>)
    f284:	e7e2      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f286:	4b11      	ldr	r3, [pc, #68]	; (f2cc <uarte_nrfx_configure+0x168>)
    f288:	e7e0      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f28a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f28e:	e7dd      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f290:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f294:	e7da      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f296:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f29a:	e7d7      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f29c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f2a0:	e7d4      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f2a2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f2a6:	e7d1      	b.n	f24c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f2a8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f2ac:	e7ce      	b.n	f24c <uarte_nrfx_configure+0xe8>
    f2ae:	bf00      	nop
    f2b0:	00275000 	.word	0x00275000
    f2b4:	0075c000 	.word	0x0075c000
    f2b8:	013a9000 	.word	0x013a9000
    f2bc:	0003d090 	.word	0x0003d090
    f2c0:	000f4240 	.word	0x000f4240
    f2c4:	0013b000 	.word	0x0013b000
    f2c8:	003af000 	.word	0x003af000
    f2cc:	004ea000 	.word	0x004ea000

0000f2d0 <uarte_instance_init.isra.2>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
    f2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
    f2d2:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
    f2d4:	460e      	mov	r6, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f2d6:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f2d8:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    f2dc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f2de:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
    f2e0:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
    f2e2:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
    f2e6:	4b26      	ldr	r3, [pc, #152]	; (f380 <uarte_instance_init.isra.2+0xb0>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f2e8:	4091      	lsls	r1, r2
    f2ea:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
    f2ee:	6028      	str	r0, [r5, #0]
    p_reg->OUTSET = set_mask;
    f2f0:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f2f2:	2103      	movs	r1, #3
    f2f4:	3280      	adds	r2, #128	; 0x80
    f2f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    f2fa:	6872      	ldr	r2, [r6, #4]
    f2fc:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    f2fe:	bf1e      	ittt	ne
    f300:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f304:	3180      	addne	r1, #128	; 0x80
    f306:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    f30a:	68b1      	ldr	r1, [r6, #8]
    p_reg->PSEL.TXD = pseltxd;
    f30c:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    f310:	1c4f      	adds	r7, r1, #1
    f312:	bf18      	it	ne
    f314:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
    f316:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f31a:	bf1e      	ittt	ne
    f31c:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f320:	3280      	addne	r2, #128	; 0x80
    f322:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    f326:	68f7      	ldr	r7, [r6, #12]
    f328:	1c7a      	adds	r2, r7, #1
    f32a:	d00c      	beq.n	f346 <uarte_instance_init.isra.2+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f32c:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    f330:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f334:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    f338:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f33c:	f04f 0c03 	mov.w	ip, #3
    f340:	3280      	adds	r2, #128	; 0x80
    f342:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    f346:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    f34a:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f34e:	68c1      	ldr	r1, [r0, #12]
    f350:	3104      	adds	r1, #4
    f352:	f7ff ff07 	bl	f164 <uarte_nrfx_configure>
	if (err) {
    f356:	b988      	cbnz	r0, f37c <uarte_instance_init.isra.2+0xac>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f358:	2208      	movs	r2, #8
		return err;
	}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    f35a:	2301      	movs	r3, #1
    f35c:	612b      	str	r3, [r5, #16]
    f35e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    f362:	6872      	ldr	r2, [r6, #4]
    f364:	3201      	adds	r2, #1
    f366:	d009      	beq.n	f37c <uarte_instance_init.isra.2+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f368:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f36c:	3514      	adds	r5, #20
    f36e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f372:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f376:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f37a:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    f37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f37e:	bf00      	nop
    f380:	40842500 	.word	0x40842500

0000f384 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    f384:	b530      	push	{r4, r5, lr}
    f386:	b085      	sub	sp, #20
    f388:	4605      	mov	r5, r0
    f38a:	466c      	mov	r4, sp
    f38c:	4b04      	ldr	r3, [pc, #16]	; (f3a0 <uarte_0_init+0x1c>)
    f38e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f394:	4621      	mov	r1, r4
    f396:	4628      	mov	r0, r5
    f398:	f7ff ff9a 	bl	f2d0 <uarte_instance_init.isra.2>
    f39c:	b005      	add	sp, #20
    f39e:	bd30      	pop	{r4, r5, pc}
    f3a0:	00011ca0 	.word	0x00011ca0

0000f3a4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    f3a4:	b530      	push	{r4, r5, lr}
    f3a6:	b085      	sub	sp, #20
    f3a8:	4605      	mov	r5, r0
    f3aa:	466c      	mov	r4, sp
    f3ac:	4b04      	ldr	r3, [pc, #16]	; (f3c0 <uarte_1_init+0x1c>)
    f3ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f3b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f3b4:	4621      	mov	r1, r4
    f3b6:	4628      	mov	r0, r5
    f3b8:	f7ff ff8a 	bl	f2d0 <uarte_instance_init.isra.2>
    f3bc:	b005      	add	sp, #20
    f3be:	bd30      	pop	{r4, r5, pc}
    f3c0:	00011cb0 	.word	0x00011cb0

0000f3c4 <uarte_nrfx_pm_control>:
{
    f3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f3c8:	68c6      	ldr	r6, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    f3ca:	2901      	cmp	r1, #1
{
    f3cc:	461d      	mov	r5, r3
    f3ce:	6934      	ldr	r4, [r6, #16]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    f3d0:	f040 80a5 	bne.w	f51e <uarte_nrfx_pm_control+0x15a>
		uint32_t new_state = *((const uint32_t *)context);
    f3d4:	6817      	ldr	r7, [r2, #0]
		if (new_state != data->pm_state) {
    f3d6:	42a7      	cmp	r7, r4
    f3d8:	d04f      	beq.n	f47a <uarte_nrfx_pm_control+0xb6>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    f3da:	f8d0 e004 	ldr.w	lr, [r0, #4]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    f3de:	2f01      	cmp	r7, #1
	return config->uarte_regs;
    f3e0:	f8de 3000 	ldr.w	r3, [lr]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    f3e4:	d150      	bne.n	f488 <uarte_nrfx_pm_control+0xc4>
	if (!get_dev_config(dev)->gpio_mgmt) {
    f3e6:	f89e 1005 	ldrb.w	r1, [lr, #5]
    f3ea:	2900      	cmp	r1, #0
    f3ec:	d03b      	beq.n	f466 <uarte_nrfx_pm_control+0xa2>
    return p_reg->PSEL.TXD;
    f3ee:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
    f3f2:	f8d3 c514 	ldr.w	ip, [r3, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f3f6:	f001 091f 	and.w	r9, r1, #31
    p_reg->OUTSET = set_mask;
    f3fa:	494a      	ldr	r1, [pc, #296]	; (f524 <uarte_nrfx_pm_control+0x160>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f3fc:	fa07 fa09 	lsl.w	sl, r7, r9
    return p_reg->PSEL.CTS;
    f400:	f8d3 8510 	ldr.w	r8, [r3, #1296]	; 0x510
    return p_reg->PSEL.RTS;
    f404:	f8d3 4508 	ldr.w	r4, [r3, #1288]	; 0x508
    p_reg->OUTSET = set_mask;
    f408:	f8c1 a008 	str.w	sl, [r1, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f40c:	f04f 0a03 	mov.w	sl, #3
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    f410:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    f414:	f109 0980 	add.w	r9, r9, #128	; 0x80
    f418:	f841 a029 	str.w	sl, [r1, r9, lsl #2]
    f41c:	bf1f      	itttt	ne
    f41e:	f04f 0900 	movne.w	r9, #0
    *p_pin = pin_number & 0x1F;
    f422:	f00c 0c1f 	andne.w	ip, ip, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f426:	f10c 0c80 	addne.w	ip, ip, #128	; 0x80
    f42a:	f841 902c 	strne.w	r9, [r1, ip, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f42e:	f89e e004 	ldrb.w	lr, [lr, #4]
    f432:	f01e 0f04 	tst.w	lr, #4
    f436:	d00c      	beq.n	f452 <uarte_nrfx_pm_control+0x8e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f438:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    f43c:	f004 041f 	and.w	r4, r4, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f440:	fa0c fc04 	lsl.w	ip, ip, r4
    p_reg->OUTSET = set_mask;
    f444:	f8c1 c008 	str.w	ip, [r1, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f448:	f04f 0c03 	mov.w	ip, #3
    f44c:	3480      	adds	r4, #128	; 0x80
    f44e:	f841 c024 	str.w	ip, [r1, r4, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f452:	f01e 0f02 	tst.w	lr, #2
    f456:	bf1f      	itttt	ne
    f458:	2400      	movne	r4, #0
    *p_pin = pin_number & 0x1F;
    f45a:	f008 081f 	andne.w	r8, r8, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f45e:	f108 0880 	addne.w	r8, r8, #128	; 0x80
    f462:	f841 4028 	strne.w	r4, [r1, r8, lsl #2]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f466:	2108      	movs	r1, #8
    f468:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return p_reg->PSEL.RXD;
    f46c:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
		if (nrf_uarte_rx_pin_get(uarte) !=
    f470:	3101      	adds	r1, #1
    f472:	d001      	beq.n	f478 <uarte_nrfx_pm_control+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f474:	2101      	movs	r1, #1
    f476:	6019      	str	r1, [r3, #0]
			data->pm_state = new_state;
    f478:	6137      	str	r7, [r6, #16]
	if (cb) {
    f47a:	b115      	cbz	r5, f482 <uarte_nrfx_pm_control+0xbe>
		cb(dev, 0, context, arg);
    f47c:	9b08      	ldr	r3, [sp, #32]
    f47e:	2100      	movs	r1, #0
    f480:	47a8      	blx	r5
}
    f482:	2000      	movs	r0, #0
    f484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
    f488:	2c01      	cmp	r4, #1
    f48a:	d1f5      	bne.n	f478 <uarte_nrfx_pm_control+0xb4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f48c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    f490:	b169      	cbz	r1, f4ae <uarte_nrfx_pm_control+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f492:	605c      	str	r4, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f494:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
			while (!nrf_uarte_event_check(uarte,
    f498:	2900      	cmp	r1, #0
    f49a:	d0fb      	beq.n	f494 <uarte_nrfx_pm_control+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f49c:	2100      	movs	r1, #0
    f49e:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
    f4a2:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
    f4a6:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
    f4aa:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f4ae:	2100      	movs	r1, #0
    f4b0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	if (!get_dev_config(dev)->gpio_mgmt) {
    f4b4:	f89e 1005 	ldrb.w	r1, [lr, #5]
    f4b8:	2900      	cmp	r1, #0
    f4ba:	d0dd      	beq.n	f478 <uarte_nrfx_pm_control+0xb4>
    f4bc:	f04f 0902 	mov.w	r9, #2
    return p_reg->PSEL.TXD;
    f4c0:	f8d3 850c 	ldr.w	r8, [r3, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
    f4c4:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f4c8:	f008 081f 	and.w	r8, r8, #31
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    f4cc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f4d0:	bf18      	it	ne
    f4d2:	f001 011f 	andne.w	r1, r1, #31
    return p_reg->PSEL.CTS;
    f4d6:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
    return p_reg->PSEL.RTS;
    f4da:	f8d3 c508 	ldr.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f4de:	4b11      	ldr	r3, [pc, #68]	; (f524 <uarte_nrfx_pm_control+0x160>)
    f4e0:	bf18      	it	ne
    f4e2:	3180      	addne	r1, #128	; 0x80
    f4e4:	f108 0880 	add.w	r8, r8, #128	; 0x80
    f4e8:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
    f4ec:	bf18      	it	ne
    f4ee:	f843 9021 	strne.w	r9, [r3, r1, lsl #2]
		if (IS_RTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f4f2:	f89e e004 	ldrb.w	lr, [lr, #4]
    f4f6:	f01e 0f04 	tst.w	lr, #4
    *p_pin = pin_number & 0x1F;
    f4fa:	bf1f      	itttt	ne
    f4fc:	f00c 011f 	andne.w	r1, ip, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f500:	f04f 0c02 	movne.w	ip, #2
    f504:	3180      	addne	r1, #128	; 0x80
    f506:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		if (IS_CTS_PIN_SET(get_dev_config(dev)->rts_cts_pins_set)) {
    f50a:	f01e 0f02 	tst.w	lr, #2
    *p_pin = pin_number & 0x1F;
    f50e:	bf1f      	itttt	ne
    f510:	f004 011f 	andne.w	r1, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f514:	2402      	movne	r4, #2
    f516:	3180      	addne	r1, #128	; 0x80
    f518:	f843 4021 	strne.w	r4, [r3, r1, lsl #2]
    f51c:	e7ac      	b.n	f478 <uarte_nrfx_pm_control+0xb4>
		*((uint32_t *)context) = data->pm_state;
    f51e:	6014      	str	r4, [r2, #0]
    f520:	e7ab      	b.n	f47a <uarte_nrfx_pm_control+0xb6>
    f522:	bf00      	nop
    f524:	40842500 	.word	0x40842500

0000f528 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    f528:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    f52a:	f7fd fe0b 	bl	d144 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    f52e:	2301      	movs	r3, #1
    f530:	f04f 0000 	mov.w	r0, #0
    f534:	4a06      	ldr	r2, [pc, #24]	; (f550 <k_sys_fatal_error_handler+0x28>)
    f536:	f363 0007 	bfi	r0, r3, #0, #8
    f53a:	4b06      	ldr	r3, [pc, #24]	; (f554 <k_sys_fatal_error_handler+0x2c>)
    f53c:	4906      	ldr	r1, [pc, #24]	; (f558 <k_sys_fatal_error_handler+0x30>)
    f53e:	1a9b      	subs	r3, r3, r2
    f540:	08db      	lsrs	r3, r3, #3
    f542:	f363 108f 	bfi	r0, r3, #6, #10
    f546:	f001 fdb4 	bl	110b2 <log_string_sync>
	sys_arch_reboot(0);
    f54a:	2000      	movs	r0, #0
    f54c:	f7fe ff62 	bl	e414 <sys_arch_reboot>

	CODE_UNREACHABLE;
    f550:	00011c34 	.word	0x00011c34
    f554:	00011c3c 	.word	0x00011c3c
    f558:	000128b9 	.word	0x000128b9

0000f55c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    f55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f560:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    f562:	4c21      	ldr	r4, [pc, #132]	; (f5e8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    f564:	4e21      	ldr	r6, [pc, #132]	; (f5ec <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f566:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    f56a:	f8df 9088 	ldr.w	r9, [pc, #136]	; f5f4 <check_ext_api_requests+0x98>
{
    f56e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f570:	45a8      	cmp	r8, r5
    f572:	d803      	bhi.n	f57c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    f574:	2000      	movs	r0, #0
    f576:	b005      	add	sp, #20
    f578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    f57c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f57e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f582:	681f      	ldr	r7, [r3, #0]
    f584:	ab01      	add	r3, sp, #4
    f586:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    f58a:	220c      	movs	r2, #12
    f58c:	4619      	mov	r1, r3
    f58e:	4638      	mov	r0, r7
    f590:	f001 feb4 	bl	112fc <memcmp>
    f594:	b990      	cbnz	r0, f5bc <check_ext_api_requests+0x60>
    f596:	b18f      	cbz	r7, f5bc <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f598:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    f59a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f59c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    f59e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f5a0:	4291      	cmp	r1, r2
    f5a2:	d10b      	bne.n	f5bc <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    f5a4:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    f5a6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    f5a8:	4291      	cmp	r1, r2
    f5aa:	d807      	bhi.n	f5bc <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    f5ac:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    f5ae:	4291      	cmp	r1, r2
    f5b0:	d904      	bls.n	f5bc <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    f5b2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f5b4:	695b      	ldr	r3, [r3, #20]
    f5b6:	ea32 0303 	bics.w	r3, r2, r3
    f5ba:	d00a      	beq.n	f5d2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    f5bc:	6a27      	ldr	r7, [r4, #32]
    f5be:	b167      	cbz	r7, f5da <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    f5c0:	480b      	ldr	r0, [pc, #44]	; (f5f0 <check_ext_api_requests+0x94>)
    f5c2:	f001 fbd2 	bl	10d6a <printk>
			k_panic();
    f5c6:	4040      	eors	r0, r0
    f5c8:	f380 8811 	msr	BASEPRI, r0
    f5cc:	f04f 0004 	mov.w	r0, #4
    f5d0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    f5d2:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f5d4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    f5d6:	441c      	add	r4, r3
    f5d8:	e7ca      	b.n	f570 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    f5da:	4648      	mov	r0, r9
    f5dc:	f001 fbc5 	bl	10d6a <printk>
			*ext_api_req->ext_api = NULL;
    f5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f5e2:	601f      	str	r7, [r3, #0]
    f5e4:	e7f5      	b.n	f5d2 <check_ext_api_requests+0x76>
    f5e6:	bf00      	nop
    f5e8:	0000c23c 	.word	0x0000c23c
    f5ec:	00011cc0 	.word	0x00011cc0
    f5f0:	000128d6 	.word	0x000128d6
    f5f4:	000128ff 	.word	0x000128ff

0000f5f8 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    f5f8:	4b01      	ldr	r3, [pc, #4]	; (f600 <SystemInit+0x8>)
    f5fa:	4a02      	ldr	r2, [pc, #8]	; (f604 <SystemInit+0xc>)
    f5fc:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    f5fe:	4770      	bx	lr
    f600:	20010340 	.word	0x20010340
    f604:	03d09000 	.word	0x03d09000

0000f608 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    f608:	4b04      	ldr	r3, [pc, #16]	; (f61c <nrfx_clock_init+0x14>)
    f60a:	791a      	ldrb	r2, [r3, #4]
    f60c:	b922      	cbnz	r2, f618 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    f60e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    f610:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    f612:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    f614:	4802      	ldr	r0, [pc, #8]	; (f620 <nrfx_clock_init+0x18>)
    f616:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    f618:	4802      	ldr	r0, [pc, #8]	; (f624 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f61a:	4770      	bx	lr
    f61c:	20010614 	.word	0x20010614
    f620:	0bad0000 	.word	0x0bad0000
    f624:	0bad000c 	.word	0x0bad000c

0000f628 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    f628:	b110      	cbz	r0, f630 <nrfx_clock_start+0x8>
    f62a:	2801      	cmp	r0, #1
    f62c:	d01e      	beq.n	f66c <nrfx_clock_start+0x44>
    f62e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f630:	4b13      	ldr	r3, [pc, #76]	; (f680 <nrfx_clock_start+0x58>)
    f632:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f636:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    f63a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    f63e:	4619      	mov	r1, r3
    f640:	d010      	beq.n	f664 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    f642:	f002 0203 	and.w	r2, r2, #3
    f646:	2a02      	cmp	r2, #2
    f648:	d10c      	bne.n	f664 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f64a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f64e:	2200      	movs	r2, #0
    f650:	4b0c      	ldr	r3, [pc, #48]	; (f684 <nrfx_clock_start+0x5c>)
    f652:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    f654:	2202      	movs	r2, #2
    f656:	681b      	ldr	r3, [r3, #0]
    f658:	4b09      	ldr	r3, [pc, #36]	; (f680 <nrfx_clock_start+0x58>)
    f65a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f65e:	2201      	movs	r2, #1
    f660:	609a      	str	r2, [r3, #8]
    f662:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    f664:	2301      	movs	r3, #1
    f666:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
    f66a:	e7f0      	b.n	f64e <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f66c:	2200      	movs	r2, #0
    f66e:	4b06      	ldr	r3, [pc, #24]	; (f688 <nrfx_clock_start+0x60>)
    f670:	601a      	str	r2, [r3, #0]
    f672:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f674:	4b02      	ldr	r3, [pc, #8]	; (f680 <nrfx_clock_start+0x58>)
    f676:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f67a:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    f67c:	4770      	bx	lr
    f67e:	bf00      	nop
    f680:	40005000 	.word	0x40005000
    f684:	40005104 	.word	0x40005104
    f688:	40005100 	.word	0x40005100

0000f68c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    f68c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    f68e:	b110      	cbz	r0, f696 <nrfx_clock_stop+0xa>
    f690:	2801      	cmp	r0, #1
    f692:	d016      	beq.n	f6c2 <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    f694:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    f696:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f698:	2101      	movs	r1, #1
    f69a:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    f69e:	4c16      	ldr	r4, [pc, #88]	; (f6f8 <nrfx_clock_stop+0x6c>)
    f6a0:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6a4:	4a15      	ldr	r2, [pc, #84]	; (f6fc <nrfx_clock_stop+0x70>)
    f6a6:	6010      	str	r0, [r2, #0]
    f6a8:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6aa:	4a15      	ldr	r2, [pc, #84]	; (f700 <nrfx_clock_stop+0x74>)
    f6ac:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f6ae:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    f6b2:	03db      	lsls	r3, r3, #15
    f6b4:	d5ee      	bpl.n	f694 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    f6b6:	2001      	movs	r0, #1
    f6b8:	f002 f84f 	bl	1175a <nrfx_busy_wait>
    f6bc:	3d01      	subs	r5, #1
    f6be:	d1f6      	bne.n	f6ae <nrfx_clock_stop+0x22>
    f6c0:	e7e8      	b.n	f694 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6c2:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6c4:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6c8:	4b0e      	ldr	r3, [pc, #56]	; (f704 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
    f6ca:	4c0b      	ldr	r4, [pc, #44]	; (f6f8 <nrfx_clock_stop+0x6c>)
    f6cc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6d0:	601a      	str	r2, [r3, #0]
    f6d2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6d4:	4b0c      	ldr	r3, [pc, #48]	; (f708 <nrfx_clock_stop+0x7c>)
    f6d6:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f6d8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f6dc:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f6e0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f6e4:	03d2      	lsls	r2, r2, #15
    f6e6:	d5d5      	bpl.n	f694 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    f6e8:	2b00      	cmp	r3, #0
    f6ea:	d0d3      	beq.n	f694 <nrfx_clock_stop+0x8>
    f6ec:	2001      	movs	r0, #1
    f6ee:	f002 f834 	bl	1175a <nrfx_busy_wait>
    f6f2:	3d01      	subs	r5, #1
    f6f4:	d1f0      	bne.n	f6d8 <nrfx_clock_stop+0x4c>
    f6f6:	e7cd      	b.n	f694 <nrfx_clock_stop+0x8>
    f6f8:	40005000 	.word	0x40005000
    f6fc:	40005104 	.word	0x40005104
    f700:	4000500c 	.word	0x4000500c
    f704:	40005100 	.word	0x40005100
    f708:	40005004 	.word	0x40005004

0000f70c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f70c:	4b15      	ldr	r3, [pc, #84]	; (f764 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    f70e:	b510      	push	{r4, lr}
    f710:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    f712:	b14a      	cbz	r2, f728 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f714:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    f716:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f718:	6018      	str	r0, [r3, #0]
    f71a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    f71c:	4b12      	ldr	r3, [pc, #72]	; (f768 <nrfx_power_clock_irq_handler+0x5c>)
    f71e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f722:	4b12      	ldr	r3, [pc, #72]	; (f76c <nrfx_power_clock_irq_handler+0x60>)
    f724:	681b      	ldr	r3, [r3, #0]
    f726:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f728:	4b11      	ldr	r3, [pc, #68]	; (f770 <nrfx_power_clock_irq_handler+0x64>)
    f72a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    f72c:	b182      	cbz	r2, f750 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f72e:	2200      	movs	r2, #0
    f730:	601a      	str	r2, [r3, #0]
    f732:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f734:	4b0c      	ldr	r3, [pc, #48]	; (f768 <nrfx_power_clock_irq_handler+0x5c>)
    f736:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f73a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    f73e:	f002 0203 	and.w	r2, r2, #3
    f742:	2a01      	cmp	r2, #1
    f744:	f04f 0102 	mov.w	r1, #2
    f748:	d103      	bne.n	f752 <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f74a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f74e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    f750:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    f752:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f756:	4b05      	ldr	r3, [pc, #20]	; (f76c <nrfx_power_clock_irq_handler+0x60>)
    f758:	2001      	movs	r0, #1
}
    f75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f75e:	681b      	ldr	r3, [r3, #0]
    f760:	4718      	bx	r3
    f762:	bf00      	nop
    f764:	40005100 	.word	0x40005100
    f768:	40005000 	.word	0x40005000
    f76c:	20010614 	.word	0x20010614
    f770:	40005104 	.word	0x40005104

0000f774 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    f774:	4a04      	ldr	r2, [pc, #16]	; (f788 <nvmc_word_write+0x14>)
    f776:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    f77a:	07db      	lsls	r3, r3, #31
    f77c:	d5fb      	bpl.n	f776 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    f77e:	6001      	str	r1, [r0, #0]
    f780:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    f784:	4770      	bx	lr
    f786:	bf00      	nop
    f788:	40039000 	.word	0x40039000

0000f78c <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
    f78c:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    f790:	b97b      	cbnz	r3, f7b2 <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    f792:	2202      	movs	r2, #2
    f794:	4b08      	ldr	r3, [pc, #32]	; (f7b8 <nrfx_nvmc_page_erase+0x2c>)
    f796:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    f79a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f79e:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    f7a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    f7a4:	07d2      	lsls	r2, r2, #31
    f7a6:	d5fb      	bpl.n	f7a0 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
    f7a8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    f7aa:	4804      	ldr	r0, [pc, #16]	; (f7bc <nrfx_nvmc_page_erase+0x30>)
    f7ac:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    f7b0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    f7b2:	4803      	ldr	r0, [pc, #12]	; (f7c0 <nrfx_nvmc_page_erase+0x34>)
}
    f7b4:	4770      	bx	lr
    f7b6:	bf00      	nop
    f7b8:	40039000 	.word	0x40039000
    f7bc:	0bad0000 	.word	0x0bad0000
    f7c0:	0bad000a 	.word	0x0bad000a

0000f7c4 <nrfx_nvmc_word_write>:
    f7c4:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    f7c6:	b510      	push	{r4, lr}
    f7c8:	4c04      	ldr	r4, [pc, #16]	; (f7dc <nrfx_nvmc_word_write+0x18>)
    f7ca:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    f7ce:	f7ff ffd1 	bl	f774 <nvmc_word_write>
    f7d2:	2300      	movs	r3, #0
    f7d4:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
    f7d8:	bd10      	pop	{r4, pc}
    f7da:	bf00      	nop
    f7dc:	40039000 	.word	0x40039000

0000f7e0 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    f7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f7e4:	2424      	movs	r4, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f7e6:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f7e8:	4e4c      	ldr	r6, [pc, #304]	; (f91c <nrfx_spim_init+0x13c>)
    f7ea:	436c      	muls	r4, r5
    f7ec:	1937      	adds	r7, r6, r4
    f7ee:	f897 c01c 	ldrb.w	ip, [r7, #28]
    f7f2:	f1bc 0f00 	cmp.w	ip, #0
    f7f6:	f040 808e 	bne.w	f916 <nrfx_spim_init+0x136>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    f7fa:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    f7fc:	607b      	str	r3, [r7, #4]
    f7fe:	2701      	movs	r7, #1
    p_cb->handler = handler;
    f800:	5132      	str	r2, [r6, r4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    f802:	f891 8000 	ldrb.w	r8, [r1]
    f806:	f891 e00c 	ldrb.w	lr, [r1, #12]
    f80a:	4b45      	ldr	r3, [pc, #276]	; (f920 <nrfx_spim_init+0x140>)
    p_reg->OUTCLR = clr_mask;
    f80c:	f008 041f 	and.w	r4, r8, #31
    f810:	40a7      	lsls	r7, r4
    f812:	f1be 0f01 	cmp.w	lr, #1
    f816:	bf94      	ite	ls
    f818:	60df      	strls	r7, [r3, #12]
    p_reg->OUTSET = set_mask;
    f81a:	609f      	strhi	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f81c:	2701      	movs	r7, #1
    f81e:	3480      	adds	r4, #128	; 0x80
    f820:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    f824:	f891 c001 	ldrb.w	ip, [r1, #1]
    f828:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    f82c:	bf1f      	itttt	ne
    f82e:	f00c 041f 	andne.w	r4, ip, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    f832:	40a7      	lslne	r7, r4
    p_reg->OUTCLR = clr_mask;
    f834:	60df      	strne	r7, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f836:	2703      	movne	r7, #3
    f838:	bf1c      	itt	ne
    f83a:	3480      	addne	r4, #128	; 0x80
    f83c:	f843 7024 	strne.w	r7, [r3, r4, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    f840:	788f      	ldrb	r7, [r1, #2]
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    f842:	bf08      	it	eq
    f844:	f04f 3cff 	moveq.w	ip, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    f848:	2fff      	cmp	r7, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    f84a:	bf1f      	itttt	ne
    f84c:	f891 900e 	ldrbne.w	r9, [r1, #14]
    *p_pin = pin_number & 0x1F;
    f850:	f007 041f 	andne.w	r4, r7, #31
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    f854:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f858:	3480      	addne	r4, #128	; 0x80
    f85a:	bf18      	it	ne
    f85c:	f843 9024 	strne.w	r9, [r3, r4, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    f860:	f04f 0924 	mov.w	r9, #36	; 0x24
    f864:	fb09 6905 	mla	r9, r9, r5, r6
    f868:	78cc      	ldrb	r4, [r1, #3]
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    f86a:	bf08      	it	eq
    f86c:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f870:	2cff      	cmp	r4, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    f872:	f889 401f 	strb.w	r4, [r9, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f876:	d016      	beq.n	f8a6 <nrfx_spim_init+0xc6>
    {
        if (p_config->ss_active_high)
    f878:	f04f 0a01 	mov.w	sl, #1
    f87c:	f891 9004 	ldrb.w	r9, [r1, #4]
    f880:	f004 041f 	and.w	r4, r4, #31
    f884:	fa0a fa04 	lsl.w	sl, sl, r4
    f888:	f1b9 0f00 	cmp.w	r9, #0
    f88c:	d03a      	beq.n	f904 <nrfx_spim_init+0x124>
    p_reg->OUTCLR = clr_mask;
    f88e:	f8c3 a00c 	str.w	sl, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f892:	f04f 0a03 	mov.w	sl, #3
    f896:	3480      	adds	r4, #128	; 0x80
    f898:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    f89c:	2324      	movs	r3, #36	; 0x24
    f89e:	fb03 6305 	mla	r3, r3, r5, r6
    f8a2:	f883 901e 	strb.w	r9, [r3, #30]
    p_reg->FREQUENCY = (uint32_t)frequency;
    f8a6:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCK  = sck_pin;
    f8a8:	f8c0 8508 	str.w	r8, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    f8ac:	f8c0 c50c 	str.w	ip, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    f8b0:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    f8b4:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    f8b8:	7b4b      	ldrb	r3, [r1, #13]
    f8ba:	3300      	adds	r3, #0
    f8bc:	bf18      	it	ne
    f8be:	2301      	movne	r3, #1
    switch (spi_mode)
    f8c0:	f1be 0f02 	cmp.w	lr, #2
    f8c4:	d021      	beq.n	f90a <nrfx_spim_init+0x12a>
    f8c6:	f1be 0f03 	cmp.w	lr, #3
    f8ca:	d021      	beq.n	f910 <nrfx_spim_init+0x130>
    f8cc:	f1be 0f01 	cmp.w	lr, #1
    f8d0:	d101      	bne.n	f8d6 <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    f8d2:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    f8d6:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    f8da:	798b      	ldrb	r3, [r1, #6]
    f8dc:	f8c0 35c0 	str.w	r3, [r0, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    f8e0:	2307      	movs	r3, #7
    f8e2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    f8e6:	b11a      	cbz	r2, f8f0 <nrfx_spim_init+0x110>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    f8e8:	f340 3007 	sbfx	r0, r0, #12, #8
    f8ec:	f7fe f97e 	bl	dbec <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    f8f0:	2324      	movs	r3, #36	; 0x24
    f8f2:	fb03 6505 	mla	r5, r3, r5, r6
    f8f6:	2300      	movs	r3, #0
    f8f8:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f8fa:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f8fc:	4809      	ldr	r0, [pc, #36]	; (f924 <nrfx_spim_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f8fe:	772b      	strb	r3, [r5, #28]
}
    f900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->OUTSET = set_mask;
    f904:	f8c3 a008 	str.w	sl, [r3, #8]
    f908:	e7c3      	b.n	f892 <nrfx_spim_init+0xb2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f90a:	f043 0304 	orr.w	r3, r3, #4
        break;
    f90e:	e7e2      	b.n	f8d6 <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f910:	f043 0306 	orr.w	r3, r3, #6
        break;
    f914:	e7df      	b.n	f8d6 <nrfx_spim_init+0xf6>
        return err_code;
    f916:	4804      	ldr	r0, [pc, #16]	; (f928 <nrfx_spim_init+0x148>)
    f918:	e7f2      	b.n	f900 <nrfx_spim_init+0x120>
    f91a:	bf00      	nop
    f91c:	2001061c 	.word	0x2001061c
    f920:	40842500 	.word	0x40842500
    f924:	0bad0000 	.word	0x0bad0000
    f928:	0bad0005 	.word	0x0bad0005

0000f92c <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    f92e:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f930:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    f932:	4d28      	ldr	r5, [pc, #160]	; (f9d4 <nrfx_spim_uninit+0xa8>)
    f934:	4373      	muls	r3, r6
    f936:	18ef      	adds	r7, r5, r3
    f938:	58eb      	ldr	r3, [r5, r3]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    f93a:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    f93c:	b1c3      	cbz	r3, f970 <nrfx_spim_uninit+0x44>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    f93e:	f344 3007 	sbfx	r0, r4, #12, #8
    f942:	f7fe f963 	bl	dc0c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    f946:	4b24      	ldr	r3, [pc, #144]	; (f9d8 <nrfx_spim_uninit+0xac>)
    f948:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    f94c:	7f7b      	ldrb	r3, [r7, #29]
    f94e:	b17b      	cbz	r3, f970 <nrfx_spim_uninit+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f950:	2301      	movs	r3, #1
    f952:	2764      	movs	r7, #100	; 0x64
    f954:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f956:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    f95a:	b923      	cbnz	r3, f966 <nrfx_spim_uninit+0x3a>
    f95c:	2001      	movs	r0, #1
    f95e:	f001 fefc 	bl	1175a <nrfx_busy_wait>
    f962:	3f01      	subs	r7, #1
    f964:	d1f7      	bne.n	f956 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    f966:	2324      	movs	r3, #36	; 0x24
    f968:	2200      	movs	r2, #0
    f96a:	fb03 5306 	mla	r3, r3, r6, r5
    f96e:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    f970:	2300      	movs	r3, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f972:	2102      	movs	r1, #2
    f974:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return p_reg->PSEL.SCK;
    f978:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    f97c:	4b17      	ldr	r3, [pc, #92]	; (f9dc <nrfx_spim_uninit+0xb0>)
    *p_pin = pin_number & 0x1F;
    f97e:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f982:	3280      	adds	r2, #128	; 0x80
    f984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return p_reg->PSEL.MISO;
    f988:	f8d4 2510 	ldr.w	r2, [r4, #1296]	; 0x510
    nrf_spim_disable(p_spim);

    nrf_gpio_cfg_default(nrf_spim_sck_pin_get(p_spim));

    uint32_t miso_pin = nrf_spim_miso_pin_get(p_spim);
    if (miso_pin != NRF_SPIM_PIN_NOT_CONNECTED)
    f98c:	1c50      	adds	r0, r2, #1
    *p_pin = pin_number & 0x1F;
    f98e:	bf1e      	ittt	ne
    f990:	f002 021f 	andne.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f994:	3280      	addne	r2, #128	; 0x80
    f996:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
    return p_reg->PSEL.MOSI;
    f99a:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    {
        nrf_gpio_cfg_default(miso_pin);
    }

    uint32_t mosi_pin = nrf_spim_mosi_pin_get(p_spim);
    if (mosi_pin != NRF_SPIM_PIN_NOT_CONNECTED)
    f99e:	1c51      	adds	r1, r2, #1
    f9a0:	bf1f      	itttt	ne
    f9a2:	2102      	movne	r1, #2
    *p_pin = pin_number & 0x1F;
    f9a4:	f002 021f 	andne.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f9a8:	3280      	addne	r2, #128	; 0x80
    f9aa:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
    {
        nrf_gpio_cfg_default(mosi_pin);
    }

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f9ae:	2224      	movs	r2, #36	; 0x24
    f9b0:	fb02 5206 	mla	r2, r2, r6, r5
    f9b4:	7fd2      	ldrb	r2, [r2, #31]
    f9b6:	2aff      	cmp	r2, #255	; 0xff
    f9b8:	bf1f      	itttt	ne
    f9ba:	2102      	movne	r1, #2
    *p_pin = pin_number & 0x1F;
    f9bc:	f002 021f 	andne.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f9c0:	3280      	addne	r2, #128	; 0x80
    f9c2:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    f9c6:	2324      	movs	r3, #36	; 0x24
    f9c8:	fb03 5506 	mla	r5, r3, r6, r5
    f9cc:	2300      	movs	r3, #0
    f9ce:	772b      	strb	r3, [r5, #28]
}
    f9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9d2:	bf00      	nop
    f9d4:	2001061c 	.word	0x2001061c
    f9d8:	00080152 	.word	0x00080152
    f9dc:	40842500 	.word	0x40842500

0000f9e0 <nrfx_spim_xfer>:
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    f9e0:	2324      	movs	r3, #36	; 0x24
{
    f9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f9e6:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->transfer_in_progress)
    f9e8:	4e43      	ldr	r6, [pc, #268]	; (faf8 <nrfx_spim_xfer+0x118>)
    f9ea:	436b      	muls	r3, r5
{
    f9ec:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
    f9ee:	18f2      	adds	r2, r6, r3
{
    f9f0:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    f9f2:	7f51      	ldrb	r1, [r2, #29]
{
    f9f4:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    f9f6:	2900      	cmp	r1, #0
    f9f8:	d17b      	bne.n	faf2 <nrfx_spim_xfer+0x112>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    f9fa:	58f3      	ldr	r3, [r6, r3]
    f9fc:	b123      	cbz	r3, fa08 <nrfx_spim_xfer+0x28>
    f9fe:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    fa02:	bf04      	itt	eq
    fa04:	2301      	moveq	r3, #1
    fa06:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    fa08:	f04f 0c24 	mov.w	ip, #36	; 0x24
    fa0c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    fa10:	fb0c 6c05 	mla	ip, ip, r5, r6
    fa14:	f10c 080c 	add.w	r8, ip, #12
    fa18:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fa1c:	f89c 301f 	ldrb.w	r3, [ip, #31]
    fa20:	2bff      	cmp	r3, #255	; 0xff
    fa22:	d008      	beq.n	fa36 <nrfx_spim_xfer+0x56>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
    fa24:	f003 021f 	and.w	r2, r3, #31
    fa28:	2301      	movs	r3, #1
    fa2a:	f89c 101e 	ldrb.w	r1, [ip, #30]
    fa2e:	4093      	lsls	r3, r2
    fa30:	4a32      	ldr	r2, [pc, #200]	; (fafc <nrfx_spim_xfer+0x11c>)
    fa32:	b1b1      	cbz	r1, fa62 <nrfx_spim_xfer+0x82>
    p_reg->OUTSET = set_mask;
    fa34:	6093      	str	r3, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fa36:	6839      	ldr	r1, [r7, #0]
    fa38:	b121      	cbz	r1, fa44 <nrfx_spim_xfer+0x64>
    fa3a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    fa3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fa42:	d106      	bne.n	fa52 <nrfx_spim_xfer+0x72>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    fa44:	68ba      	ldr	r2, [r7, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fa46:	b172      	cbz	r2, fa66 <nrfx_spim_xfer+0x86>
    fa48:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    fa4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fa50:	d009      	beq.n	fa66 <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
    fa52:	2324      	movs	r3, #36	; 0x24
    fa54:	fb03 6505 	mla	r5, r3, r5, r6
    fa58:	2300      	movs	r3, #0
        return err_code;
    fa5a:	4829      	ldr	r0, [pc, #164]	; (fb00 <nrfx_spim_xfer+0x120>)
        p_cb->transfer_in_progress = false;
    fa5c:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    fa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->OUTCLR = clr_mask;
    fa62:	60d3      	str	r3, [r2, #12]
    fa64:	e7e7      	b.n	fa36 <nrfx_spim_xfer+0x56>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    fa66:	f8de 3000 	ldr.w	r3, [lr]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    fa6a:	6878      	ldr	r0, [r7, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fa6c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fa70:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    fa74:	68f9      	ldr	r1, [r7, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fa76:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fa7a:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    fa7c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fa80:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    fa84:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    fa88:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    fa8c:	bf18      	it	ne
    fa8e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    fa90:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    fa94:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    fa98:	bf18      	it	ne
    fa9a:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    fa9c:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    faa0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    faa4:	bf04      	itt	eq
    faa6:	2201      	moveq	r2, #1
    faa8:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
    faaa:	2224      	movs	r2, #36	; 0x24
    faac:	436a      	muls	r2, r5
    faae:	58b2      	ldr	r2, [r6, r2]
    fab0:	b9b2      	cbnz	r2, fae0 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    fab2:	b919      	cbnz	r1, fabc <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fab4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    fab8:	2a00      	cmp	r2, #0
    faba:	d0fb      	beq.n	fab4 <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fabc:	2324      	movs	r3, #36	; 0x24
    fabe:	fb03 6505 	mla	r5, r3, r5, r6
    fac2:	7feb      	ldrb	r3, [r5, #31]
    fac4:	2bff      	cmp	r3, #255	; 0xff
    fac6:	d007      	beq.n	fad8 <nrfx_spim_xfer+0xf8>
                if (p_cb->ss_active_high)
    fac8:	f003 021f 	and.w	r2, r3, #31
    facc:	2301      	movs	r3, #1
    face:	7fa9      	ldrb	r1, [r5, #30]
    fad0:	4093      	lsls	r3, r2
    fad2:	4a0a      	ldr	r2, [pc, #40]	; (fafc <nrfx_spim_xfer+0x11c>)
    fad4:	b111      	cbz	r1, fadc <nrfx_spim_xfer+0xfc>
    fad6:	60d3      	str	r3, [r2, #12]
    return err_code;
    fad8:	480a      	ldr	r0, [pc, #40]	; (fb04 <nrfx_spim_xfer+0x124>)
    fada:	e7c0      	b.n	fa5e <nrfx_spim_xfer+0x7e>
    p_reg->OUTSET = set_mask;
    fadc:	6093      	str	r3, [r2, #8]
    fade:	e7fb      	b.n	fad8 <nrfx_spim_xfer+0xf8>
    if (!enable)
    fae0:	2240      	movs	r2, #64	; 0x40
    fae2:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
    fae6:	bf14      	ite	ne
    fae8:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    faec:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    faf0:	e7f2      	b.n	fad8 <nrfx_spim_xfer+0xf8>
        return err_code;
    faf2:	4805      	ldr	r0, [pc, #20]	; (fb08 <nrfx_spim_xfer+0x128>)
    faf4:	e7b3      	b.n	fa5e <nrfx_spim_xfer+0x7e>
    faf6:	bf00      	nop
    faf8:	2001061c 	.word	0x2001061c
    fafc:	40842500 	.word	0x40842500
    fb00:	0bad000a 	.word	0x0bad000a
    fb04:	0bad0000 	.word	0x0bad0000
    fb08:	0bad000b 	.word	0x0bad000b

0000fb0c <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb0c:	4b0f      	ldr	r3, [pc, #60]	; (fb4c <nrfx_spim_3_irq_handler+0x40>)
    fb0e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    fb12:	b1ca      	cbz	r2, fb48 <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb14:	2200      	movs	r2, #0
    fb16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    fb1a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fb1e:	4b0c      	ldr	r3, [pc, #48]	; (fb50 <nrfx_spim_3_irq_handler+0x44>)
    fb20:	7fda      	ldrb	r2, [r3, #31]
    fb22:	2aff      	cmp	r2, #255	; 0xff
    fb24:	d007      	beq.n	fb36 <nrfx_spim_3_irq_handler+0x2a>
            if (p_cb->ss_active_high)
    fb26:	f002 011f 	and.w	r1, r2, #31
    fb2a:	2201      	movs	r2, #1
    fb2c:	7f98      	ldrb	r0, [r3, #30]
    fb2e:	408a      	lsls	r2, r1
    fb30:	4908      	ldr	r1, [pc, #32]	; (fb54 <nrfx_spim_3_irq_handler+0x48>)
    fb32:	b138      	cbz	r0, fb44 <nrfx_spim_3_irq_handler+0x38>
    p_reg->OUTCLR = clr_mask;
    fb34:	60ca      	str	r2, [r1, #12]
    p_cb->transfer_in_progress = false;
    fb36:	2200      	movs	r2, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    fb38:	4807      	ldr	r0, [pc, #28]	; (fb58 <nrfx_spim_3_irq_handler+0x4c>)
    p_cb->transfer_in_progress = false;
    fb3a:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    fb3c:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    fb3e:	e9d3 2100 	ldrd	r2, r1, [r3]
    fb42:	4710      	bx	r2
    p_reg->OUTSET = set_mask;
    fb44:	608a      	str	r2, [r1, #8]
    fb46:	e7f6      	b.n	fb36 <nrfx_spim_3_irq_handler+0x2a>

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    fb48:	4770      	bx	lr
    fb4a:	bf00      	nop
    fb4c:	4000b000 	.word	0x4000b000
    fb50:	2001061c 	.word	0x2001061c
    fb54:	40842500 	.word	0x40842500
    fb58:	20010624 	.word	0x20010624

0000fb5c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fb5e:	4b11      	ldr	r3, [pc, #68]	; (fba4 <z_sys_init_run_level+0x48>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    fb60:	4f11      	ldr	r7, [pc, #68]	; (fba8 <z_sys_init_run_level+0x4c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fb62:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    fb66:	3001      	adds	r0, #1
    fb68:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    fb6c:	42ae      	cmp	r6, r5
    fb6e:	d800      	bhi.n	fb72 <z_sys_init_run_level+0x16>
		}
	}
}
    fb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    fb72:	e9d5 3400 	ldrd	r3, r4, [r5]
    fb76:	4620      	mov	r0, r4
    fb78:	4798      	blx	r3
    fb7a:	b180      	cbz	r0, fb9e <z_sys_init_run_level+0x42>
    fb7c:	b17c      	cbz	r4, fb9e <z_sys_init_run_level+0x42>
				(dev - __device_start));
    fb7e:	4b0b      	ldr	r3, [pc, #44]	; (fbac <z_sys_init_run_level+0x50>)
    fb80:	1be4      	subs	r4, r4, r7
    fb82:	10e4      	asrs	r4, r4, #3
    fb84:	435c      	muls	r4, r3

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    fb86:	2301      	movs	r3, #1
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    fb88:	4a09      	ldr	r2, [pc, #36]	; (fbb0 <z_sys_init_run_level+0x54>)
    fb8a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    fb8c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    fb90:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    fb94:	fa03 f404 	lsl.w	r4, r3, r4
    fb98:	4304      	orrs	r4, r0
    fb9a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fb9e:	3508      	adds	r5, #8
    fba0:	e7e4      	b.n	fb6c <z_sys_init_run_level+0x10>
    fba2:	bf00      	nop
    fba4:	00011e94 	.word	0x00011e94
    fba8:	2001034c 	.word	0x2001034c
    fbac:	aaaaaaab 	.word	0xaaaaaaab
    fbb0:	2001040c 	.word	0x2001040c

0000fbb4 <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
    fbb4:	4a03      	ldr	r2, [pc, #12]	; (fbc4 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    fbb6:	4b04      	ldr	r3, [pc, #16]	; (fbc8 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    fbb8:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    fbba:	1a9b      	subs	r3, r3, r2
}
    fbbc:	4803      	ldr	r0, [pc, #12]	; (fbcc <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    fbbe:	10db      	asrs	r3, r3, #3
}
    fbc0:	4358      	muls	r0, r3
    fbc2:	4770      	bx	lr
    fbc4:	2001034c 	.word	0x2001034c
    fbc8:	2001040c 	.word	0x2001040c
    fbcc:	aaaaaaab 	.word	0xaaaaaaab

0000fbd0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    fbd0:	4b09      	ldr	r3, [pc, #36]	; (fbf8 <z_device_ready+0x28>)
    fbd2:	1ac3      	subs	r3, r0, r3
    fbd4:	4809      	ldr	r0, [pc, #36]	; (fbfc <z_device_ready+0x2c>)
    fbd6:	10db      	asrs	r3, r3, #3
    fbd8:	4358      	muls	r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    fbda:	4b09      	ldr	r3, [pc, #36]	; (fc00 <z_device_ready+0x30>)
    fbdc:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    fbde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    fbe2:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    fbe4:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    fbe8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    fbec:	4210      	tst	r0, r2
}
    fbee:	bf0c      	ite	eq
    fbf0:	4618      	moveq	r0, r3
    fbf2:	2000      	movne	r0, #0
    fbf4:	4770      	bx	lr
    fbf6:	bf00      	nop
    fbf8:	2001034c 	.word	0x2001034c
    fbfc:	aaaaaaab 	.word	0xaaaaaaab
    fc00:	2001040c 	.word	0x2001040c

0000fc04 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    fc04:	4911      	ldr	r1, [pc, #68]	; (fc4c <z_impl_device_get_binding+0x48>)
{
    fc06:	b570      	push	{r4, r5, r6, lr}
    fc08:	4605      	mov	r5, r0
    fc0a:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    fc0c:	4c10      	ldr	r4, [pc, #64]	; (fc50 <z_impl_device_get_binding+0x4c>)
    fc0e:	428c      	cmp	r4, r1
    fc10:	d104      	bne.n	fc1c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    fc12:	4c0f      	ldr	r4, [pc, #60]	; (fc50 <z_impl_device_get_binding+0x4c>)
    fc14:	42b4      	cmp	r4, r6
    fc16:	d10a      	bne.n	fc2e <z_impl_device_get_binding+0x2a>
	return NULL;
    fc18:	2400      	movs	r4, #0
    fc1a:	e014      	b.n	fc46 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    fc1c:	4620      	mov	r0, r4
    fc1e:	f7ff ffd7 	bl	fbd0 <z_device_ready>
    fc22:	b110      	cbz	r0, fc2a <z_impl_device_get_binding+0x26>
    fc24:	6823      	ldr	r3, [r4, #0]
    fc26:	42ab      	cmp	r3, r5
    fc28:	d00d      	beq.n	fc46 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    fc2a:	3418      	adds	r4, #24
    fc2c:	e7ef      	b.n	fc0e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    fc2e:	4620      	mov	r0, r4
    fc30:	f7ff ffce 	bl	fbd0 <z_device_ready>
    fc34:	b908      	cbnz	r0, fc3a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    fc36:	3418      	adds	r4, #24
    fc38:	e7ec      	b.n	fc14 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    fc3a:	6821      	ldr	r1, [r4, #0]
    fc3c:	4628      	mov	r0, r5
    fc3e:	f001 fb51 	bl	112e4 <strcmp>
    fc42:	2800      	cmp	r0, #0
    fc44:	d1f7      	bne.n	fc36 <z_impl_device_get_binding+0x32>
}
    fc46:	4620      	mov	r0, r4
    fc48:	bd70      	pop	{r4, r5, r6, pc}
    fc4a:	bf00      	nop
    fc4c:	2001040c 	.word	0x2001040c
    fc50:	2001034c 	.word	0x2001034c

0000fc54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fc54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fc58:	4605      	mov	r5, r0
    fc5a:	460f      	mov	r7, r1
    fc5c:	f04f 0320 	mov.w	r3, #32
    fc60:	f3ef 8911 	mrs	r9, BASEPRI
    fc64:	f383 8811 	msr	BASEPRI, r3
    fc68:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    fc6c:	f000 fc7a 	bl	10564 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    fc70:	2301      	movs	r3, #1
    fc72:	4606      	mov	r6, r0
    fc74:	f04f 0000 	mov.w	r0, #0
    fc78:	2200      	movs	r2, #0
    fc7a:	f363 0007 	bfi	r0, r3, #0, #8
    fc7e:	4c25      	ldr	r4, [pc, #148]	; (fd14 <z_fatal_error+0xc0>)
    fc80:	4b25      	ldr	r3, [pc, #148]	; (fd18 <z_fatal_error+0xc4>)
    fc82:	2d04      	cmp	r5, #4
    fc84:	eba4 0403 	sub.w	r4, r4, r3
    fc88:	bf98      	it	ls
    fc8a:	4b24      	ldrls	r3, [pc, #144]	; (fd1c <z_fatal_error+0xc8>)
    fc8c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fc90:	bf94      	ite	ls
    fc92:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    fc96:	4b22      	ldrhi	r3, [pc, #136]	; (fd20 <z_fatal_error+0xcc>)
    fc98:	9200      	str	r2, [sp, #0]
    fc9a:	f364 108f 	bfi	r0, r4, #6, #10
    fc9e:	462a      	mov	r2, r5
    fca0:	4920      	ldr	r1, [pc, #128]	; (fd24 <z_fatal_error+0xd0>)
    fca2:	f001 fa06 	bl	110b2 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    fca6:	b16f      	cbz	r7, fcc4 <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    fca8:	69fb      	ldr	r3, [r7, #28]
    fcaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    fcae:	b14b      	cbz	r3, fcc4 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
    fcb0:	f04f 0000 	mov.w	r0, #0
    fcb4:	2301      	movs	r3, #1
    fcb6:	f363 0007 	bfi	r0, r3, #0, #8
    fcba:	f364 108f 	bfi	r0, r4, #6, #10
    fcbe:	491a      	ldr	r1, [pc, #104]	; (fd28 <z_fatal_error+0xd4>)
    fcc0:	f001 f9f7 	bl	110b2 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    fcc4:	f04f 0800 	mov.w	r8, #0
    fcc8:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
    fcca:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
    fccc:	f363 0807 	bfi	r8, r3, #0, #8
    fcd0:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    fcd4:	f001 fe16 	bl	11904 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    fcd8:	b1d0      	cbz	r0, fd10 <z_fatal_error+0xbc>
    fcda:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    fcdc:	4b13      	ldr	r3, [pc, #76]	; (fd2c <z_fatal_error+0xd8>)
    fcde:	2a00      	cmp	r2, #0
    fce0:	bf08      	it	eq
    fce2:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    fce4:	f001 f9f8 	bl	110d8 <log_strdup>
    fce8:	4632      	mov	r2, r6
    fcea:	4603      	mov	r3, r0
    fcec:	4910      	ldr	r1, [pc, #64]	; (fd30 <z_fatal_error+0xdc>)
    fcee:	4640      	mov	r0, r8
    fcf0:	f001 f9df 	bl	110b2 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    fcf4:	4639      	mov	r1, r7
    fcf6:	4628      	mov	r0, r5
    fcf8:	f7ff fc16 	bl	f528 <k_sys_fatal_error_handler>
	__asm__ volatile(
    fcfc:	f389 8811 	msr	BASEPRI, r9
    fd00:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    fd04:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    fd06:	b003      	add	sp, #12
    fd08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fd0c:	f7fe bba0 	b.w	e450 <z_impl_k_thread_abort>
		thread_name = "unknown";
    fd10:	4806      	ldr	r0, [pc, #24]	; (fd2c <z_fatal_error+0xd8>)
    fd12:	e7e7      	b.n	fce4 <z_fatal_error+0x90>
    fd14:	00011c54 	.word	0x00011c54
    fd18:	00011c34 	.word	0x00011c34
    fd1c:	00011eac 	.word	0x00011eac
    fd20:	0001297c 	.word	0x0001297c
    fd24:	00012992 	.word	0x00012992
    fd28:	000129ba 	.word	0x000129ba
    fd2c:	0001298a 	.word	0x0001298a
    fd30:	000129db 	.word	0x000129db

0000fd34 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    fd34:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    fd36:	4d0b      	ldr	r5, [pc, #44]	; (fd64 <idle+0x30>)
	__asm__ volatile(
    fd38:	f04f 0220 	mov.w	r2, #32
    fd3c:	f3ef 8311 	mrs	r3, BASEPRI
    fd40:	f382 8811 	msr	BASEPRI, r2
    fd44:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    fd48:	f001 fdf4 	bl	11934 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    fd4c:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
    fd4e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    fd50:	2802      	cmp	r0, #2
    fd52:	bfd8      	it	le
    fd54:	4608      	movle	r0, r1
    fd56:	f001 fdfd 	bl	11954 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    fd5a:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
    fd5c:	f7fd ffcc 	bl	dcf8 <arch_cpu_idle>
    fd60:	e7ea      	b.n	fd38 <idle+0x4>
    fd62:	bf00      	nop
    fd64:	20010640 	.word	0x20010640

0000fd68 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    fd68:	4802      	ldr	r0, [pc, #8]	; (fd74 <z_bss_zero+0xc>)
    fd6a:	4a03      	ldr	r2, [pc, #12]	; (fd78 <z_bss_zero+0x10>)
    fd6c:	2100      	movs	r1, #0
    fd6e:	1a12      	subs	r2, r2, r0
    fd70:	f001 bafe 	b.w	11370 <memset>
    fd74:	20010428 	.word	0x20010428
    fd78:	20010ea8 	.word	0x20010ea8

0000fd7c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    fd7c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    fd7e:	4806      	ldr	r0, [pc, #24]	; (fd98 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    fd80:	4a06      	ldr	r2, [pc, #24]	; (fd9c <z_data_copy+0x20>)
    fd82:	4907      	ldr	r1, [pc, #28]	; (fda0 <z_data_copy+0x24>)
    fd84:	1a12      	subs	r2, r2, r0
    fd86:	f001 fac9 	bl	1131c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fd8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    fd8e:	4a05      	ldr	r2, [pc, #20]	; (fda4 <z_data_copy+0x28>)
    fd90:	4905      	ldr	r1, [pc, #20]	; (fda8 <z_data_copy+0x2c>)
    fd92:	4806      	ldr	r0, [pc, #24]	; (fdac <z_data_copy+0x30>)
    fd94:	f001 bac2 	b.w	1131c <memcpy>
    fd98:	20010000 	.word	0x20010000
    fd9c:	20010424 	.word	0x20010424
    fda0:	00012a34 	.word	0x00012a34
    fda4:	00000000 	.word	0x00000000
    fda8:	00012a34 	.word	0x00012a34
    fdac:	20010000 	.word	0x20010000

0000fdb0 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    fdb0:	2201      	movs	r2, #1
{
    fdb2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    fdb4:	4b0b      	ldr	r3, [pc, #44]	; (fde4 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    fdb6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    fdb8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    fdba:	f7ff fecf 	bl	fb5c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    fdbe:	4a0a      	ldr	r2, [pc, #40]	; (fde8 <bg_thread_main+0x38>)
    fdc0:	490a      	ldr	r1, [pc, #40]	; (fdec <bg_thread_main+0x3c>)
    fdc2:	480b      	ldr	r0, [pc, #44]	; (fdf0 <bg_thread_main+0x40>)
    fdc4:	f000 ffd1 	bl	10d6a <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    fdc8:	2003      	movs	r0, #3
    fdca:	f7ff fec7 	bl	fb5c <z_sys_init_run_level>

	z_init_static_threads();
    fdce:	f000 fc47 	bl	10660 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    fdd2:	f7fc feb5 	bl	cb40 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    fdd6:	4a07      	ldr	r2, [pc, #28]	; (fdf4 <bg_thread_main+0x44>)
    fdd8:	7b13      	ldrb	r3, [r2, #12]
    fdda:	f023 0301 	bic.w	r3, r3, #1
    fdde:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    fde0:	bd08      	pop	{r3, pc}
    fde2:	bf00      	nop
    fde4:	20010ea5 	.word	0x20010ea5
    fde8:	00012931 	.word	0x00012931
    fdec:	000129f3 	.word	0x000129f3
    fdf0:	000129ff 	.word	0x000129ff
    fdf4:	200104a8 	.word	0x200104a8

0000fdf8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    fdf8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    fdfc:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    fdfe:	f7fd f947 	bl	d090 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    fe02:	4b34      	ldr	r3, [pc, #208]	; (fed4 <z_cstart+0xdc>)
	uint32_t msp =
    fe04:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    fe08:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    fe0c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe10:	2400      	movs	r4, #0
    fe12:	23e0      	movs	r3, #224	; 0xe0
    fe14:	4d30      	ldr	r5, [pc, #192]	; (fed8 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fe16:	f04f 0b01 	mov.w	fp, #1
    fe1a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    fe1e:	77ec      	strb	r4, [r5, #31]
    fe20:	762c      	strb	r4, [r5, #24]
    fe22:	766c      	strb	r4, [r5, #25]
    fe24:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    fe26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    fe28:	4e2c      	ldr	r6, [pc, #176]	; (fedc <z_cstart+0xe4>)
    fe2a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    fe2e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    fe30:	f7fe fad6 	bl	e3e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    fe34:	f7fd ff5a 	bl	dcec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    fe38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe3c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    fe3e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    fe40:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    fe44:	4d26      	ldr	r5, [pc, #152]	; (fee0 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    fe46:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    fe4a:	ab06      	add	r3, sp, #24
    fe4c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    fe4e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    fe50:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    fe54:	f7ff fe82 	bl	fb5c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    fe58:	2001      	movs	r0, #1
    fe5a:	f7ff fe7f 	bl	fb5c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fe5e:	f8df 8098 	ldr.w	r8, [pc, #152]	; fef8 <z_cstart+0x100>
	z_sched_init();
    fe62:	f000 fb07 	bl	10474 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fe66:	4b1f      	ldr	r3, [pc, #124]	; (fee4 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    fe68:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fe6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fe6e:	491e      	ldr	r1, [pc, #120]	; (fee8 <z_cstart+0xf0>)
    fe70:	9305      	str	r3, [sp, #20]
    fe72:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    fe76:	4643      	mov	r3, r8
    fe78:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fe7c:	9400      	str	r4, [sp, #0]
    fe7e:	4630      	mov	r0, r6
    fe80:	f000 fbc0 	bl	10604 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fe84:	7b73      	ldrb	r3, [r6, #13]
    fe86:	4682      	mov	sl, r0
    fe88:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    fe8c:	4630      	mov	r0, r6
    fe8e:	7373      	strb	r3, [r6, #13]
    fe90:	f001 fca7 	bl	117e2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    fe94:	230f      	movs	r3, #15
    fe96:	4f15      	ldr	r7, [pc, #84]	; (feec <z_cstart+0xf4>)
    fe98:	e9cd 4302 	strd	r4, r3, [sp, #8]
    fe9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    fea0:	4b13      	ldr	r3, [pc, #76]	; (fef0 <z_cstart+0xf8>)
    fea2:	4914      	ldr	r1, [pc, #80]	; (fef4 <z_cstart+0xfc>)
    fea4:	e9cd b404 	strd	fp, r4, [sp, #16]
    fea8:	e9cd 4400 	strd	r4, r4, [sp]
    feac:	4638      	mov	r0, r7
    feae:	f000 fba9 	bl	10604 <z_setup_new_thread>
    feb2:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    feb4:	60ef      	str	r7, [r5, #12]
    feb6:	f023 0304 	bic.w	r3, r3, #4
    feba:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    febc:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
    fec0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    fec2:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
    fec6:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    feca:	4642      	mov	r2, r8
    fecc:	4651      	mov	r1, sl
    fece:	4630      	mov	r0, r6
    fed0:	f7fd fef2 	bl	dcb8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    fed4:	200113e8 	.word	0x200113e8
    fed8:	e000ed00 	.word	0xe000ed00
    fedc:	200104a8 	.word	0x200104a8
    fee0:	20010640 	.word	0x20010640
    fee4:	00012a29 	.word	0x00012a29
    fee8:	20010ea8 	.word	0x20010ea8
    feec:	20010428 	.word	0x20010428
    fef0:	0000fd35 	.word	0x0000fd35
    fef4:	200112a8 	.word	0x200112a8
    fef8:	0000fdb1 	.word	0x0000fdb1

0000fefc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    fefc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    fefe:	4b0e      	ldr	r3, [pc, #56]	; (ff38 <init_mem_slab_module+0x3c>)
    ff00:	4c0e      	ldr	r4, [pc, #56]	; (ff3c <init_mem_slab_module+0x40>)
    ff02:	42a3      	cmp	r3, r4
    ff04:	d301      	bcc.n	ff0a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    ff06:	2000      	movs	r0, #0
	return rc;
}
    ff08:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ff0a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    ff0e:	ea41 0200 	orr.w	r2, r1, r0
    ff12:	f012 0203 	ands.w	r2, r2, #3
    ff16:	d10b      	bne.n	ff30 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    ff18:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    ff1a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ff1c:	42aa      	cmp	r2, r5
    ff1e:	d101      	bne.n	ff24 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    ff20:	331c      	adds	r3, #28
    ff22:	e7ee      	b.n	ff02 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    ff24:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ff26:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    ff28:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    ff2a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    ff2c:	4401      	add	r1, r0
    ff2e:	e7f5      	b.n	ff1c <init_mem_slab_module+0x20>
		return -EINVAL;
    ff30:	f06f 0015 	mvn.w	r0, #21
	return rc;
    ff34:	e7e8      	b.n	ff08 <init_mem_slab_module+0xc>
    ff36:	bf00      	nop
    ff38:	20010414 	.word	0x20010414
    ff3c:	20010414 	.word	0x20010414

0000ff40 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    ff40:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    ff42:	4c08      	ldr	r4, [pc, #32]	; (ff64 <z_reset_time_slice+0x24>)
    ff44:	6823      	ldr	r3, [r4, #0]
    ff46:	b15b      	cbz	r3, ff60 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    ff48:	f7fd fdc6 	bl	dad8 <z_clock_elapsed>
    ff4c:	6823      	ldr	r3, [r4, #0]
    ff4e:	4a06      	ldr	r2, [pc, #24]	; (ff68 <z_reset_time_slice+0x28>)
    ff50:	4418      	add	r0, r3
    ff52:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ff54:	2100      	movs	r1, #0
	}
}
    ff56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    ff5a:	4618      	mov	r0, r3
    ff5c:	f001 bcfa 	b.w	11954 <z_set_timeout_expiry>
}
    ff60:	bd10      	pop	{r4, pc}
    ff62:	bf00      	nop
    ff64:	20010678 	.word	0x20010678
    ff68:	20010640 	.word	0x20010640

0000ff6c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff6e:	460d      	mov	r5, r1
    ff70:	f04f 0320 	mov.w	r3, #32
    ff74:	f3ef 8411 	mrs	r4, BASEPRI
    ff78:	f383 8811 	msr	BASEPRI, r3
    ff7c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    ff80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ff84:	f240 36e7 	movw	r6, #999	; 0x3e7
    ff88:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    ff8a:	2200      	movs	r2, #0
    ff8c:	fbe1 6700 	umlal	r6, r7, r1, r0
    ff90:	4b09      	ldr	r3, [pc, #36]	; (ffb8 <k_sched_time_slice_set+0x4c>)
    ff92:	4630      	mov	r0, r6
    ff94:	611a      	str	r2, [r3, #16]
    ff96:	4639      	mov	r1, r7
    ff98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff9c:	2300      	movs	r3, #0
    ff9e:	f7fc f94d 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    ffa2:	4b06      	ldr	r3, [pc, #24]	; (ffbc <k_sched_time_slice_set+0x50>)
    ffa4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    ffa6:	4b06      	ldr	r3, [pc, #24]	; (ffc0 <k_sched_time_slice_set+0x54>)
    ffa8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    ffaa:	f7ff ffc9 	bl	ff40 <z_reset_time_slice>
	__asm__ volatile(
    ffae:	f384 8811 	msr	BASEPRI, r4
    ffb2:	f3bf 8f6f 	isb	sy
	}
}
    ffb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffb8:	20010640 	.word	0x20010640
    ffbc:	20010678 	.word	0x20010678
    ffc0:	20010674 	.word	0x20010674

0000ffc4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ffc4:	b949      	cbnz	r1, ffda <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ffc6:	f3ef 8005 	mrs	r0, IPSR
    ffca:	b930      	cbnz	r0, ffda <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    ffcc:	4b05      	ldr	r3, [pc, #20]	; (ffe4 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    ffce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ffd0:	689b      	ldr	r3, [r3, #8]
    ffd2:	429a      	cmp	r2, r3
    ffd4:	d001      	beq.n	ffda <z_reschedule+0x16>
	ret = arch_swap(key);
    ffd6:	f7fd bdb3 	b.w	db40 <arch_swap>
    ffda:	f381 8811 	msr	BASEPRI, r1
    ffde:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    ffe2:	4770      	bx	lr
    ffe4:	20010640 	.word	0x20010640

0000ffe8 <k_sched_lock>:
	__asm__ volatile(
    ffe8:	f04f 0320 	mov.w	r3, #32
    ffec:	f3ef 8111 	mrs	r1, BASEPRI
    fff0:	f383 8811 	msr	BASEPRI, r3
    fff4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    fff8:	4b04      	ldr	r3, [pc, #16]	; (1000c <k_sched_lock+0x24>)
    fffa:	689a      	ldr	r2, [r3, #8]
    fffc:	7bd3      	ldrb	r3, [r2, #15]
    fffe:	3b01      	subs	r3, #1
   10000:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10002:	f381 8811 	msr	BASEPRI, r1
   10006:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1000a:	4770      	bx	lr
   1000c:	20010640 	.word	0x20010640

00010010 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   10010:	4b09      	ldr	r3, [pc, #36]	; (10038 <z_priq_dumb_remove+0x28>)
   10012:	f103 0228 	add.w	r2, r3, #40	; 0x28
   10016:	4282      	cmp	r2, r0
   10018:	d105      	bne.n	10026 <z_priq_dumb_remove+0x16>
   1001a:	689b      	ldr	r3, [r3, #8]
   1001c:	428b      	cmp	r3, r1
   1001e:	d102      	bne.n	10026 <z_priq_dumb_remove+0x16>
   10020:	7b4b      	ldrb	r3, [r1, #13]
   10022:	06db      	lsls	r3, r3, #27
   10024:	d106      	bne.n	10034 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10026:	e9d1 3200 	ldrd	r3, r2, [r1]
   1002a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1002c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1002e:	2300      	movs	r3, #0
	node->prev = NULL;
   10030:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10034:	4770      	bx	lr
   10036:	bf00      	nop
   10038:	20010640 	.word	0x20010640

0001003c <update_cache>:
{
   1003c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1003e:	4c10      	ldr	r4, [pc, #64]	; (10080 <update_cache+0x44>)
{
   10040:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   10042:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10046:	f001 fbc6 	bl	117d6 <z_priq_dumb_best>
   1004a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1004c:	68a3      	ldr	r3, [r4, #8]
   1004e:	7b59      	ldrb	r1, [r3, #13]
   10050:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   10052:	bf44      	itt	mi
   10054:	f041 0108 	orrmi.w	r1, r1, #8
   10058:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1005a:	b905      	cbnz	r5, 1005e <update_cache+0x22>
   1005c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1005e:	b94e      	cbnz	r6, 10074 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   10060:	7b5a      	ldrb	r2, [r3, #13]
   10062:	06d2      	lsls	r2, r2, #27
   10064:	d106      	bne.n	10074 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10066:	69aa      	ldr	r2, [r5, #24]
   10068:	b922      	cbnz	r2, 10074 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1006a:	89da      	ldrh	r2, [r3, #14]
   1006c:	2a7f      	cmp	r2, #127	; 0x7f
   1006e:	d901      	bls.n	10074 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   10070:	6263      	str	r3, [r4, #36]	; 0x24
}
   10072:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   10074:	42ab      	cmp	r3, r5
   10076:	d001      	beq.n	1007c <update_cache+0x40>
			z_reset_time_slice();
   10078:	f7ff ff62 	bl	ff40 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1007c:	6265      	str	r5, [r4, #36]	; 0x24
}
   1007e:	e7f8      	b.n	10072 <update_cache+0x36>
   10080:	20010640 	.word	0x20010640

00010084 <k_sched_unlock>:
{
   10084:	b510      	push	{r4, lr}
	__asm__ volatile(
   10086:	f04f 0320 	mov.w	r3, #32
   1008a:	f3ef 8411 	mrs	r4, BASEPRI
   1008e:	f383 8811 	msr	BASEPRI, r3
   10092:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   10096:	4b08      	ldr	r3, [pc, #32]	; (100b8 <k_sched_unlock+0x34>)
		update_cache(0);
   10098:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1009a:	689a      	ldr	r2, [r3, #8]
   1009c:	7bd3      	ldrb	r3, [r2, #15]
   1009e:	3301      	adds	r3, #1
   100a0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   100a2:	f7ff ffcb 	bl	1003c <update_cache>
	__asm__ volatile(
   100a6:	f384 8811 	msr	BASEPRI, r4
   100aa:	f3bf 8f6f 	isb	sy
}
   100ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   100b2:	f001 bb79 	b.w	117a8 <z_reschedule_unlocked>
   100b6:	bf00      	nop
   100b8:	20010640 	.word	0x20010640

000100bc <ready_thread>:
{
   100bc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   100be:	7b43      	ldrb	r3, [r0, #13]
   100c0:	06db      	lsls	r3, r3, #27
   100c2:	d127      	bne.n	10114 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   100c4:	6983      	ldr	r3, [r0, #24]
   100c6:	bb2b      	cbnz	r3, 10114 <ready_thread+0x58>
	return list->head == list;
   100c8:	4a13      	ldr	r2, [pc, #76]	; (10118 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   100ca:	f102 0128 	add.w	r1, r2, #40	; 0x28
   100ce:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   100d2:	428b      	cmp	r3, r1
   100d4:	d018      	beq.n	10108 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   100d6:	b1bb      	cbz	r3, 10108 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   100d8:	f990 500e 	ldrsb.w	r5, [r0, #14]
   100dc:	f993 600e 	ldrsb.w	r6, [r3, #14]
   100e0:	42ae      	cmp	r6, r5
   100e2:	dd0c      	ble.n	100fe <ready_thread+0x42>
	node->prev = successor->prev;
   100e4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   100e6:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   100ea:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   100ec:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   100ee:	7b43      	ldrb	r3, [r0, #13]
   100f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   100f4:	7343      	strb	r3, [r0, #13]
}
   100f6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   100f8:	2000      	movs	r0, #0
   100fa:	f7ff bf9f 	b.w	1003c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   100fe:	429c      	cmp	r4, r3
   10100:	d002      	beq.n	10108 <ready_thread+0x4c>
   10102:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10104:	2b00      	cmp	r3, #0
   10106:	d1e9      	bne.n	100dc <ready_thread+0x20>
	node->prev = list->tail;
   10108:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1010c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1010e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   10110:	62d0      	str	r0, [r2, #44]	; 0x2c
   10112:	e7ec      	b.n	100ee <ready_thread+0x32>
}
   10114:	bc70      	pop	{r4, r5, r6}
   10116:	4770      	bx	lr
   10118:	20010640 	.word	0x20010640

0001011c <z_sched_start>:
{
   1011c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1011e:	f04f 0320 	mov.w	r3, #32
   10122:	f3ef 8411 	mrs	r4, BASEPRI
   10126:	f383 8811 	msr	BASEPRI, r3
   1012a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1012e:	7b43      	ldrb	r3, [r0, #13]
   10130:	0759      	lsls	r1, r3, #29
   10132:	d404      	bmi.n	1013e <z_sched_start+0x22>
	__asm__ volatile(
   10134:	f384 8811 	msr	BASEPRI, r4
   10138:	f3bf 8f6f 	isb	sy
}
   1013c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1013e:	f023 0304 	bic.w	r3, r3, #4
   10142:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   10144:	f7ff ffba 	bl	100bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   10148:	4621      	mov	r1, r4
}
   1014a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1014e:	4801      	ldr	r0, [pc, #4]	; (10154 <z_sched_start+0x38>)
   10150:	f7ff bf38 	b.w	ffc4 <z_reschedule>
   10154:	20010ea6 	.word	0x20010ea6

00010158 <move_thread_to_end_of_prio_q>:
{
   10158:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1015a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1015e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10160:	2b00      	cmp	r3, #0
   10162:	da03      	bge.n	1016c <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   10164:	4601      	mov	r1, r0
   10166:	4816      	ldr	r0, [pc, #88]	; (101c0 <move_thread_to_end_of_prio_q+0x68>)
   10168:	f7ff ff52 	bl	10010 <z_priq_dumb_remove>
	return list->head == list;
   1016c:	4a15      	ldr	r2, [pc, #84]	; (101c4 <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1016e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10172:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   10176:	428b      	cmp	r3, r1
   10178:	d01c      	beq.n	101b4 <move_thread_to_end_of_prio_q+0x5c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1017a:	b1db      	cbz	r3, 101b4 <move_thread_to_end_of_prio_q+0x5c>
	if (thread_1->base.prio < thread_2->base.prio) {
   1017c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   10180:	f993 600e 	ldrsb.w	r6, [r3, #14]
   10184:	42ae      	cmp	r6, r5
   10186:	dd10      	ble.n	101aa <move_thread_to_end_of_prio_q+0x52>
	node->prev = successor->prev;
   10188:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1018a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1018e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10190:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   10192:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   10194:	6890      	ldr	r0, [r2, #8]
   10196:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1019a:	7363      	strb	r3, [r4, #13]
   1019c:	1b03      	subs	r3, r0, r4
   1019e:	4258      	negs	r0, r3
   101a0:	4158      	adcs	r0, r3
}
   101a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   101a6:	f7ff bf49 	b.w	1003c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   101aa:	4298      	cmp	r0, r3
   101ac:	d002      	beq.n	101b4 <move_thread_to_end_of_prio_q+0x5c>
   101ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   101b0:	2b00      	cmp	r3, #0
   101b2:	d1e5      	bne.n	10180 <move_thread_to_end_of_prio_q+0x28>
	node->prev = list->tail;
   101b4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   101b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   101ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   101bc:	62d4      	str	r4, [r2, #44]	; 0x2c
   101be:	e7e8      	b.n	10192 <move_thread_to_end_of_prio_q+0x3a>
   101c0:	20010668 	.word	0x20010668
   101c4:	20010640 	.word	0x20010640

000101c8 <z_time_slice>:
{
   101c8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   101ca:	f04f 0320 	mov.w	r3, #32
   101ce:	f3ef 8411 	mrs	r4, BASEPRI
   101d2:	f383 8811 	msr	BASEPRI, r3
   101d6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   101da:	4a17      	ldr	r2, [pc, #92]	; (10238 <z_time_slice+0x70>)
   101dc:	4917      	ldr	r1, [pc, #92]	; (1023c <z_time_slice+0x74>)
   101de:	6893      	ldr	r3, [r2, #8]
   101e0:	680d      	ldr	r5, [r1, #0]
   101e2:	42ab      	cmp	r3, r5
   101e4:	4615      	mov	r5, r2
   101e6:	d106      	bne.n	101f6 <z_time_slice+0x2e>
			z_reset_time_slice();
   101e8:	f7ff feaa 	bl	ff40 <z_reset_time_slice>
	__asm__ volatile(
   101ec:	f384 8811 	msr	BASEPRI, r4
   101f0:	f3bf 8f6f 	isb	sy
}
   101f4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   101f6:	2600      	movs	r6, #0
   101f8:	600e      	str	r6, [r1, #0]
	if (slice_time && sliceable(_current)) {
   101fa:	4911      	ldr	r1, [pc, #68]	; (10240 <z_time_slice+0x78>)
   101fc:	6809      	ldr	r1, [r1, #0]
   101fe:	b1c1      	cbz	r1, 10232 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10200:	89d9      	ldrh	r1, [r3, #14]
   10202:	297f      	cmp	r1, #127	; 0x7f
   10204:	d815      	bhi.n	10232 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   10206:	7b59      	ldrb	r1, [r3, #13]
   10208:	06c9      	lsls	r1, r1, #27
   1020a:	d112      	bne.n	10232 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1020c:	490d      	ldr	r1, [pc, #52]	; (10244 <z_time_slice+0x7c>)
   1020e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   10212:	6809      	ldr	r1, [r1, #0]
   10214:	428e      	cmp	r6, r1
   10216:	db0c      	blt.n	10232 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10218:	490b      	ldr	r1, [pc, #44]	; (10248 <z_time_slice+0x80>)
   1021a:	428b      	cmp	r3, r1
   1021c:	d009      	beq.n	10232 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1021e:	6911      	ldr	r1, [r2, #16]
   10220:	4281      	cmp	r1, r0
   10222:	dc03      	bgt.n	1022c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   10224:	4618      	mov	r0, r3
   10226:	f7ff ff97 	bl	10158 <move_thread_to_end_of_prio_q>
   1022a:	e7dd      	b.n	101e8 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1022c:	1a09      	subs	r1, r1, r0
   1022e:	6111      	str	r1, [r2, #16]
   10230:	e7dc      	b.n	101ec <z_time_slice+0x24>
		_current_cpu->slice_ticks = 0;
   10232:	2300      	movs	r3, #0
   10234:	612b      	str	r3, [r5, #16]
   10236:	e7d9      	b.n	101ec <z_time_slice+0x24>
   10238:	20010640 	.word	0x20010640
   1023c:	20010670 	.word	0x20010670
   10240:	20010678 	.word	0x20010678
   10244:	20010674 	.word	0x20010674
   10248:	20010428 	.word	0x20010428

0001024c <z_impl_k_thread_suspend>:
{
   1024c:	b570      	push	{r4, r5, r6, lr}
   1024e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   10250:	3018      	adds	r0, #24
   10252:	f001 fb59 	bl	11908 <z_abort_timeout>
	__asm__ volatile(
   10256:	f04f 0320 	mov.w	r3, #32
   1025a:	f3ef 8611 	mrs	r6, BASEPRI
   1025e:	f383 8811 	msr	BASEPRI, r3
   10262:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   10266:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1026a:	2b00      	cmp	r3, #0
   1026c:	da07      	bge.n	1027e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1026e:	4621      	mov	r1, r4
   10270:	480e      	ldr	r0, [pc, #56]	; (102ac <z_impl_k_thread_suspend+0x60>)
   10272:	f7ff fecd 	bl	10010 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10276:	7b63      	ldrb	r3, [r4, #13]
   10278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1027c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1027e:	4d0c      	ldr	r5, [pc, #48]	; (102b0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10280:	7b63      	ldrb	r3, [r4, #13]
   10282:	68a8      	ldr	r0, [r5, #8]
   10284:	f043 0310 	orr.w	r3, r3, #16
   10288:	7363      	strb	r3, [r4, #13]
   1028a:	1b03      	subs	r3, r0, r4
   1028c:	4258      	negs	r0, r3
   1028e:	4158      	adcs	r0, r3
   10290:	f7ff fed4 	bl	1003c <update_cache>
	__asm__ volatile(
   10294:	f386 8811 	msr	BASEPRI, r6
   10298:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1029c:	68ab      	ldr	r3, [r5, #8]
   1029e:	42a3      	cmp	r3, r4
   102a0:	d103      	bne.n	102aa <z_impl_k_thread_suspend+0x5e>
}
   102a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   102a6:	f001 ba7f 	b.w	117a8 <z_reschedule_unlocked>
}
   102aa:	bd70      	pop	{r4, r5, r6, pc}
   102ac:	20010668 	.word	0x20010668
   102b0:	20010640 	.word	0x20010640

000102b4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   102b4:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   102b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102ba:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   102bc:	b103      	cbz	r3, 102c0 <z_thread_single_abort+0xc>
		thread->fn_abort();
   102be:	4798      	blx	r3
   102c0:	f104 0018 	add.w	r0, r4, #24
   102c4:	f001 fb20 	bl	11908 <z_abort_timeout>
	__asm__ volatile(
   102c8:	f04f 0320 	mov.w	r3, #32
   102cc:	f3ef 8611 	mrs	r6, BASEPRI
   102d0:	f383 8811 	msr	BASEPRI, r3
   102d4:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   102d8:	7b63      	ldrb	r3, [r4, #13]
   102da:	06d8      	lsls	r0, r3, #27
   102dc:	d123      	bne.n	10326 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   102de:	69a2      	ldr	r2, [r4, #24]
   102e0:	bb0a      	cbnz	r2, 10326 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   102e2:	0619      	lsls	r1, r3, #24
   102e4:	d507      	bpl.n	102f6 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   102e6:	4621      	mov	r1, r4
   102e8:	481e      	ldr	r0, [pc, #120]	; (10364 <z_thread_single_abort+0xb0>)
   102ea:	f7ff fe91 	bl	10010 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   102ee:	7b63      	ldrb	r3, [r4, #13]
   102f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   102f4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   102f6:	4b1c      	ldr	r3, [pc, #112]	; (10368 <z_thread_single_abort+0xb4>)
   102f8:	6898      	ldr	r0, [r3, #8]
   102fa:	1b02      	subs	r2, r0, r4
   102fc:	4250      	negs	r0, r2
   102fe:	4150      	adcs	r0, r2
   10300:	f7ff fe9c 	bl	1003c <update_cache>
			waiter->base.pended_on = NULL;
   10304:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   10306:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10308:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1030c:	f043 0308 	orr.w	r3, r3, #8
   10310:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   10312:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10314:	4545      	cmp	r5, r8
   10316:	d000      	beq.n	1031a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   10318:	b995      	cbnz	r5, 10340 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1031a:	f386 8811 	msr	BASEPRI, r6
   1031e:	f3bf 8f6f 	isb	sy
}
   10322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   10326:	079b      	lsls	r3, r3, #30
   10328:	d5ec      	bpl.n	10304 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1032a:	4621      	mov	r1, r4
   1032c:	68a0      	ldr	r0, [r4, #8]
   1032e:	f7ff fe6f 	bl	10010 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10332:	7b63      	ldrb	r3, [r4, #13]
   10334:	f023 0302 	bic.w	r3, r3, #2
   10338:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1033a:	2300      	movs	r3, #0
   1033c:	60a3      	str	r3, [r4, #8]
   1033e:	e7e1      	b.n	10304 <z_thread_single_abort+0x50>
   10340:	f105 0018 	add.w	r0, r5, #24
   10344:	f001 fae0 	bl	11908 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   10348:	68a8      	ldr	r0, [r5, #8]
   1034a:	4629      	mov	r1, r5
   1034c:	f7ff fe60 	bl	10010 <z_priq_dumb_remove>
   10350:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   10352:	60af      	str	r7, [r5, #8]
   10354:	f023 0302 	bic.w	r3, r3, #2
   10358:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1035a:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1035c:	4628      	mov	r0, r5
   1035e:	f7ff fead 	bl	100bc <ready_thread>
   10362:	e7d6      	b.n	10312 <z_thread_single_abort+0x5e>
   10364:	20010668 	.word	0x20010668
   10368:	20010640 	.word	0x20010640

0001036c <unready_thread>:
{
   1036c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1036e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   10372:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10374:	2b00      	cmp	r3, #0
   10376:	da07      	bge.n	10388 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   10378:	4601      	mov	r1, r0
   1037a:	4808      	ldr	r0, [pc, #32]	; (1039c <unready_thread+0x30>)
   1037c:	f7ff fe48 	bl	10010 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10380:	7b63      	ldrb	r3, [r4, #13]
   10382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10386:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   10388:	4b05      	ldr	r3, [pc, #20]	; (103a0 <unready_thread+0x34>)
   1038a:	6898      	ldr	r0, [r3, #8]
   1038c:	1b03      	subs	r3, r0, r4
   1038e:	4258      	negs	r0, r3
   10390:	4158      	adcs	r0, r3
}
   10392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   10396:	f7ff be51 	b.w	1003c <update_cache>
   1039a:	bf00      	nop
   1039c:	20010668 	.word	0x20010668
   103a0:	20010640 	.word	0x20010640

000103a4 <pend>:
{
   103a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103a8:	4606      	mov	r6, r0
   103aa:	4614      	mov	r4, r2
   103ac:	461d      	mov	r5, r3
	__asm__ volatile(
   103ae:	f04f 0320 	mov.w	r3, #32
   103b2:	f3ef 8711 	mrs	r7, BASEPRI
   103b6:	f383 8811 	msr	BASEPRI, r3
   103ba:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   103be:	f001 fa40 	bl	11842 <add_to_waitq_locked>
	__asm__ volatile(
   103c2:	f387 8811 	msr	BASEPRI, r7
   103c6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   103ca:	1c6b      	adds	r3, r5, #1
   103cc:	bf08      	it	eq
   103ce:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   103d2:	d008      	beq.n	103e6 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   103d4:	4622      	mov	r2, r4
   103d6:	462b      	mov	r3, r5
   103d8:	f106 0018 	add.w	r0, r6, #24
   103dc:	4903      	ldr	r1, [pc, #12]	; (103ec <pend+0x48>)
}
   103de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   103e2:	f000 b9e7 	b.w	107b4 <z_add_timeout>
   103e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103ea:	bf00      	nop
   103ec:	00011803 	.word	0x00011803

000103f0 <z_pend_curr>:
{
   103f0:	b510      	push	{r4, lr}
   103f2:	460c      	mov	r4, r1
	pending_current = _current;
   103f4:	4b06      	ldr	r3, [pc, #24]	; (10410 <z_pend_curr+0x20>)
{
   103f6:	4611      	mov	r1, r2
	pending_current = _current;
   103f8:	6898      	ldr	r0, [r3, #8]
   103fa:	4b06      	ldr	r3, [pc, #24]	; (10414 <z_pend_curr+0x24>)
   103fc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   103fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10402:	f7ff ffcf 	bl	103a4 <pend>
   10406:	4620      	mov	r0, r4
}
   10408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1040c:	f7fd bb98 	b.w	db40 <arch_swap>
   10410:	20010640 	.word	0x20010640
   10414:	20010670 	.word	0x20010670

00010418 <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   10418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1041a:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1041c:	f001 fab4 	bl	11988 <z_tick_get_32>
   10420:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   10422:	f04f 0320 	mov.w	r3, #32
   10426:	f3ef 8711 	mrs	r7, BASEPRI
   1042a:	f383 8811 	msr	BASEPRI, r3
   1042e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   10432:	4d0d      	ldr	r5, [pc, #52]	; (10468 <z_tick_sleep.part.21+0x50>)
   10434:	4b0d      	ldr	r3, [pc, #52]	; (1046c <z_tick_sleep.part.21+0x54>)
   10436:	68a8      	ldr	r0, [r5, #8]
   10438:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1043a:	f7ff ff97 	bl	1036c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1043e:	68a8      	ldr	r0, [r5, #8]
   10440:	490b      	ldr	r1, [pc, #44]	; (10470 <z_tick_sleep.part.21+0x58>)
   10442:	4632      	mov	r2, r6
   10444:	17f3      	asrs	r3, r6, #31
   10446:	3018      	adds	r0, #24
   10448:	f000 f9b4 	bl	107b4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1044c:	68aa      	ldr	r2, [r5, #8]
   1044e:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10450:	7b53      	ldrb	r3, [r2, #13]
   10452:	f043 0310 	orr.w	r3, r3, #16
   10456:	7353      	strb	r3, [r2, #13]
   10458:	f7fd fb72 	bl	db40 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1045c:	f001 fa94 	bl	11988 <z_tick_get_32>
   10460:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   10462:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10468:	20010640 	.word	0x20010640
   1046c:	20010670 	.word	0x20010670
   10470:	00011803 	.word	0x00011803

00010474 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   10474:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   10476:	4b04      	ldr	r3, [pc, #16]	; (10488 <z_sched_init+0x14>)
   10478:	4608      	mov	r0, r1
   1047a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1047e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   10482:	f7ff bd73 	b.w	ff6c <k_sched_time_slice_set>
   10486:	bf00      	nop
   10488:	20010640 	.word	0x20010640

0001048c <z_impl_k_yield>:
{
   1048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1048e:	4c23      	ldr	r4, [pc, #140]	; (1051c <z_impl_k_yield+0x90>)
   10490:	4b23      	ldr	r3, [pc, #140]	; (10520 <z_impl_k_yield+0x94>)
   10492:	68a2      	ldr	r2, [r4, #8]
   10494:	429a      	cmp	r2, r3
   10496:	d029      	beq.n	104ec <z_impl_k_yield+0x60>
   10498:	f04f 0320 	mov.w	r3, #32
   1049c:	f3ef 8611 	mrs	r6, BASEPRI
   104a0:	f383 8811 	msr	BASEPRI, r3
   104a4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   104a8:	f104 0528 	add.w	r5, r4, #40	; 0x28
   104ac:	68a1      	ldr	r1, [r4, #8]
   104ae:	4628      	mov	r0, r5
   104b0:	f7ff fdae 	bl	10010 <z_priq_dumb_remove>
	return list->head == list;
   104b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   104b6:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   104b8:	42aa      	cmp	r2, r5
   104ba:	d028      	beq.n	1050e <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   104bc:	b33a      	cbz	r2, 1050e <z_impl_k_yield+0x82>
   104be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   104c0:	f993 100e 	ldrsb.w	r1, [r3, #14]
   104c4:	f992 700e 	ldrsb.w	r7, [r2, #14]
   104c8:	428f      	cmp	r7, r1
   104ca:	dd1b      	ble.n	10504 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   104cc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   104ce:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   104d2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   104d4:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   104d6:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   104d8:	2001      	movs	r0, #1
   104da:	f062 027f 	orn	r2, r2, #127	; 0x7f
   104de:	735a      	strb	r2, [r3, #13]
   104e0:	f7ff fdac 	bl	1003c <update_cache>
	__asm__ volatile(
   104e4:	f386 8811 	msr	BASEPRI, r6
   104e8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   104ec:	f04f 0320 	mov.w	r3, #32
   104f0:	f3ef 8011 	mrs	r0, BASEPRI
   104f4:	f383 8811 	msr	BASEPRI, r3
   104f8:	f3bf 8f6f 	isb	sy
}
   104fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10500:	f7fd bb1e 	b.w	db40 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   10504:	4282      	cmp	r2, r0
   10506:	d002      	beq.n	1050e <z_impl_k_yield+0x82>
   10508:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1050a:	2a00      	cmp	r2, #0
   1050c:	d1da      	bne.n	104c4 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1050e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   10510:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   10512:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   10514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10516:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10518:	62e3      	str	r3, [r4, #44]	; 0x2c
   1051a:	e7dc      	b.n	104d6 <z_impl_k_yield+0x4a>
   1051c:	20010640 	.word	0x20010640
   10520:	20010428 	.word	0x20010428

00010524 <z_impl_k_sleep>:
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10524:	3101      	adds	r1, #1
   10526:	bf08      	it	eq
   10528:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1052c:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1052e:	d106      	bne.n	1053e <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
   10530:	4b0b      	ldr	r3, [pc, #44]	; (10560 <z_impl_k_sleep+0x3c>)
   10532:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10534:	f7ff fe8a 	bl	1024c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   10538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1053c:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1053e:	4604      	mov	r4, r0
	if (ticks == 0) {
   10540:	b948      	cbnz	r0, 10556 <z_impl_k_sleep+0x32>
	z_impl_k_yield();
   10542:	f7ff ffa3 	bl	1048c <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   10546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1054a:	fb84 3400 	smull	r3, r4, r4, r0
   1054e:	0bd8      	lsrs	r0, r3, #15
   10550:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   10554:	e7f2      	b.n	1053c <z_impl_k_sleep+0x18>
   10556:	f7ff ff5f 	bl	10418 <z_tick_sleep.part.21>
   1055a:	4604      	mov	r4, r0
   1055c:	e7f3      	b.n	10546 <z_impl_k_sleep+0x22>
   1055e:	bf00      	nop
   10560:	20010640 	.word	0x20010640

00010564 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   10564:	4b01      	ldr	r3, [pc, #4]	; (1056c <z_impl_k_current_get+0x8>)
   10566:	6898      	ldr	r0, [r3, #8]
   10568:	4770      	bx	lr
   1056a:	bf00      	nop
   1056c:	20010640 	.word	0x20010640

00010570 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10570:	b538      	push	{r3, r4, r5, lr}
   10572:	4604      	mov	r4, r0
   10574:	f04f 0320 	mov.w	r3, #32
   10578:	f3ef 8511 	mrs	r5, BASEPRI
   1057c:	f383 8811 	msr	BASEPRI, r3
   10580:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   10584:	f001 f985 	bl	11892 <z_unpend_first_thread>

	if (thread != NULL) {
   10588:	b148      	cbz	r0, 1059e <z_impl_k_sem_give+0x2e>
   1058a:	2200      	movs	r2, #0
   1058c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1058e:	f001 f928 	bl	117e2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10592:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   10594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10598:	4804      	ldr	r0, [pc, #16]	; (105ac <z_impl_k_sem_give+0x3c>)
   1059a:	f7ff bd13 	b.w	ffc4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1059e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   105a2:	429a      	cmp	r2, r3
   105a4:	bf18      	it	ne
   105a6:	3301      	addne	r3, #1
   105a8:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   105aa:	e7f2      	b.n	10592 <z_impl_k_sem_give+0x22>
   105ac:	20010ea6 	.word	0x20010ea6

000105b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   105b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   105b2:	4614      	mov	r4, r2
   105b4:	461d      	mov	r5, r3
   105b6:	f04f 0320 	mov.w	r3, #32
   105ba:	f3ef 8111 	mrs	r1, BASEPRI
   105be:	f383 8811 	msr	BASEPRI, r3
   105c2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   105c6:	6883      	ldr	r3, [r0, #8]
   105c8:	b143      	cbz	r3, 105dc <z_impl_k_sem_take+0x2c>
		sem->count--;
   105ca:	3b01      	subs	r3, #1
   105cc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   105ce:	f381 8811 	msr	BASEPRI, r1
   105d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   105d6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   105d8:	b003      	add	sp, #12
   105da:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   105dc:	ea54 0305 	orrs.w	r3, r4, r5
   105e0:	d106      	bne.n	105f0 <z_impl_k_sem_take+0x40>
   105e2:	f381 8811 	msr	BASEPRI, r1
   105e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   105ea:	f06f 000f 	mvn.w	r0, #15
		goto out;
   105ee:	e7f3      	b.n	105d8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   105f0:	4602      	mov	r2, r0
   105f2:	e9cd 4500 	strd	r4, r5, [sp]
   105f6:	4802      	ldr	r0, [pc, #8]	; (10600 <z_impl_k_sem_take+0x50>)
   105f8:	f7ff fefa 	bl	103f0 <z_pend_curr>
	return ret;
   105fc:	e7ec      	b.n	105d8 <z_impl_k_sem_take+0x28>
   105fe:	bf00      	nop
   10600:	20010ea6 	.word	0x20010ea6

00010604 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10604:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   10606:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1060a:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   1060c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   10610:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   10612:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   10614:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10616:	2504      	movs	r5, #4
   10618:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   1061a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1061c:	3207      	adds	r2, #7
	thread_base->prio = priority;
   1061e:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   10620:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10622:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   10626:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   1062a:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1062c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1062e:	73c5      	strb	r5, [r0, #15]
	node->prev = NULL;
   10630:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.delta = delta;
   10634:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10636:	9202      	str	r2, [sp, #8]
   10638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1063a:	9201      	str	r2, [sp, #4]
   1063c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1063e:	9200      	str	r2, [sp, #0]
   10640:	4632      	mov	r2, r6
   10642:	f7fd fb1d 	bl	dc80 <arch_new_thread>
	if (!_current) {
   10646:	4b05      	ldr	r3, [pc, #20]	; (1065c <z_setup_new_thread+0x58>)
	new_thread->fn_abort = NULL;
   10648:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1064c:	689b      	ldr	r3, [r3, #8]
   1064e:	b103      	cbz	r3, 10652 <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
   10650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   10652:	4630      	mov	r0, r6
   10654:	6763      	str	r3, [r4, #116]	; 0x74
   10656:	b005      	add	sp, #20
   10658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1065a:	bf00      	nop
   1065c:	20010640 	.word	0x20010640

00010660 <z_init_static_threads>:
{
   10660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   10664:	4e2a      	ldr	r6, [pc, #168]	; (10710 <z_init_static_threads+0xb0>)
   10666:	4d2b      	ldr	r5, [pc, #172]	; (10714 <z_init_static_threads+0xb4>)
   10668:	46b0      	mov	r8, r6
{
   1066a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1066c:	42b5      	cmp	r5, r6
   1066e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   10672:	d310      	bcc.n	10696 <z_init_static_threads+0x36>
	k_sched_lock();
   10674:	f7ff fcb8 	bl	ffe8 <k_sched_lock>
   10678:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1067c:	f240 36e7 	movw	r6, #999	; 0x3e7
   10680:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   10682:	4c24      	ldr	r4, [pc, #144]	; (10714 <z_init_static_threads+0xb4>)
   10684:	f8df a090 	ldr.w	sl, [pc, #144]	; 10718 <z_init_static_threads+0xb8>
   10688:	4544      	cmp	r4, r8
   1068a:	d321      	bcc.n	106d0 <z_init_static_threads+0x70>
}
   1068c:	b006      	add	sp, #24
   1068e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   10692:	f7ff bcf7 	b.w	10084 <k_sched_unlock>
		z_setup_new_thread(
   10696:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1069a:	9305      	str	r3, [sp, #20]
   1069c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   106a0:	9304      	str	r3, [sp, #16]
   106a2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   106a6:	9303      	str	r3, [sp, #12]
   106a8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   106ac:	9302      	str	r3, [sp, #8]
   106ae:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   106b2:	9301      	str	r3, [sp, #4]
   106b4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   106b8:	9300      	str	r3, [sp, #0]
   106ba:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   106be:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   106c2:	f7ff ff9f 	bl	10604 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   106c6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   106ca:	65dd      	str	r5, [r3, #92]	; 0x5c
   106cc:	4625      	mov	r5, r4
   106ce:	e7cd      	b.n	1066c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   106d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   106d2:	1c5a      	adds	r2, r3, #1
   106d4:	d00d      	beq.n	106f2 <z_init_static_threads+0x92>
   106d6:	4630      	mov	r0, r6
   106d8:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   106da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   106de:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   106e2:	42b9      	cmp	r1, r7
   106e4:	bf08      	it	eq
   106e6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   106e8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   106ea:	d104      	bne.n	106f6 <z_init_static_threads+0x96>
	z_sched_start(thread);
   106ec:	4628      	mov	r0, r5
   106ee:	f7ff fd15 	bl	1011c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   106f2:	3430      	adds	r4, #48	; 0x30
   106f4:	e7c8      	b.n	10688 <z_init_static_threads+0x28>
   106f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106fa:	2300      	movs	r3, #0
   106fc:	f7fb fd9e 	bl	c23c <__aeabi_uldivmod>
   10700:	4602      	mov	r2, r0
   10702:	460b      	mov	r3, r1
   10704:	f105 0018 	add.w	r0, r5, #24
   10708:	4651      	mov	r1, sl
   1070a:	f000 f853 	bl	107b4 <z_add_timeout>
   1070e:	e7f0      	b.n	106f2 <z_init_static_threads+0x92>
   10710:	20010414 	.word	0x20010414
   10714:	20010414 	.word	0x20010414
   10718:	00011803 	.word	0x00011803

0001071c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1071c:	4b03      	ldr	r3, [pc, #12]	; (1072c <elapsed+0x10>)
   1071e:	681b      	ldr	r3, [r3, #0]
   10720:	b90b      	cbnz	r3, 10726 <elapsed+0xa>
   10722:	f7fd b9d9 	b.w	dad8 <z_clock_elapsed>
}
   10726:	2000      	movs	r0, #0
   10728:	4770      	bx	lr
   1072a:	bf00      	nop
   1072c:	2001067c 	.word	0x2001067c

00010730 <remove_timeout>:
{
   10730:	b530      	push	{r4, r5, lr}
   10732:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10734:	b168      	cbz	r0, 10752 <remove_timeout+0x22>
   10736:	4a0a      	ldr	r2, [pc, #40]	; (10760 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   10738:	6852      	ldr	r2, [r2, #4]
   1073a:	4290      	cmp	r0, r2
   1073c:	d009      	beq.n	10752 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1073e:	b143      	cbz	r3, 10752 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   10740:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   10744:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   10748:	1912      	adds	r2, r2, r4
   1074a:	eb45 0101 	adc.w	r1, r5, r1
   1074e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   10752:	6842      	ldr	r2, [r0, #4]
   10754:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   10756:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10758:	2300      	movs	r3, #0
	node->prev = NULL;
   1075a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1075e:	bd30      	pop	{r4, r5, pc}
   10760:	20010344 	.word	0x20010344

00010764 <next_timeout>:

static int32_t next_timeout(void)
{
   10764:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   10766:	4b11      	ldr	r3, [pc, #68]	; (107ac <next_timeout+0x48>)
   10768:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1076a:	429c      	cmp	r4, r3
   1076c:	bf08      	it	eq
   1076e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   10770:	f7ff ffd4 	bl	1071c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   10774:	b1b4      	cbz	r4, 107a4 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   10776:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1077a:	1a14      	subs	r4, r2, r0
   1077c:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   10780:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   10784:	f175 0300 	sbcs.w	r3, r5, #0
   10788:	da0c      	bge.n	107a4 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1078a:	2c00      	cmp	r4, #0
   1078c:	f175 0300 	sbcs.w	r3, r5, #0
   10790:	4620      	mov	r0, r4
   10792:	da00      	bge.n	10796 <next_timeout+0x32>
   10794:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   10796:	4b06      	ldr	r3, [pc, #24]	; (107b0 <next_timeout+0x4c>)
   10798:	691b      	ldr	r3, [r3, #16]
   1079a:	b113      	cbz	r3, 107a2 <next_timeout+0x3e>
   1079c:	4298      	cmp	r0, r3
   1079e:	bfa8      	it	ge
   107a0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   107a2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   107a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   107a8:	e7f5      	b.n	10796 <next_timeout+0x32>
   107aa:	bf00      	nop
   107ac:	20010344 	.word	0x20010344
   107b0:	20010640 	.word	0x20010640

000107b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   107b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107b8:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   107ba:	1c59      	adds	r1, r3, #1
   107bc:	bf08      	it	eq
   107be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   107c2:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   107c4:	d06e      	beq.n	108a4 <z_add_timeout+0xf0>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   107c6:	1c54      	adds	r4, r2, #1
   107c8:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   107cc:	f06f 0301 	mvn.w	r3, #1
   107d0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   107d4:	ebb3 0804 	subs.w	r8, r3, r4
   107d8:	eb6b 0905 	sbc.w	r9, fp, r5
   107dc:	f1b8 0f00 	cmp.w	r8, #0
   107e0:	f179 0300 	sbcs.w	r3, r9, #0
   107e4:	db0f      	blt.n	10806 <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   107e6:	f7ff ff99 	bl	1071c <elapsed>
   107ea:	f06f 0301 	mvn.w	r3, #1
   107ee:	4a34      	ldr	r2, [pc, #208]	; (108c0 <z_add_timeout+0x10c>)
   107f0:	e9d2 1c00 	ldrd	r1, ip, [r2]
   107f4:	1a5b      	subs	r3, r3, r1
   107f6:	eb6b 020c 	sbc.w	r2, fp, ip
   107fa:	1b1e      	subs	r6, r3, r4
   107fc:	eb62 0705 	sbc.w	r7, r2, r5
   10800:	1a34      	subs	r4, r6, r0
   10802:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10806:	9b01      	ldr	r3, [sp, #4]
   10808:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1080c:	f04f 0320 	mov.w	r3, #32
   10810:	f3ef 8611 	mrs	r6, BASEPRI
   10814:	f383 8811 	msr	BASEPRI, r3
   10818:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1081c:	f7ff ff7e 	bl	1071c <elapsed>
	ticks = MAX(1, ticks);
   10820:	2c01      	cmp	r4, #1
   10822:	f175 0300 	sbcs.w	r3, r5, #0
   10826:	4621      	mov	r1, r4
   10828:	bfb8      	it	lt
   1082a:	2101      	movlt	r1, #1
   1082c:	462a      	mov	r2, r5
   1082e:	bfb8      	it	lt
   10830:	2200      	movlt	r2, #0
	return list->head == list;
   10832:	4b24      	ldr	r3, [pc, #144]	; (108c4 <z_add_timeout+0x110>)
		to->dticks = ticks + elapsed();
   10834:	180c      	adds	r4, r1, r0
   10836:	eb42 75e0 	adc.w	r5, r2, r0, asr #31
   1083a:	681a      	ldr	r2, [r3, #0]
   1083c:	e9ca 4504 	strd	r4, r5, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10840:	429a      	cmp	r2, r3
   10842:	d001      	beq.n	10848 <z_add_timeout+0x94>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10844:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   10846:	b952      	cbnz	r2, 1085e <z_add_timeout+0xaa>
	node->prev = list->tail;
   10848:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1084a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1084e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   10852:	685a      	ldr	r2, [r3, #4]
   10854:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   10858:	f8c3 a004 	str.w	sl, [r3, #4]
   1085c:	e014      	b.n	10888 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   1085e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   10862:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   10866:	4544      	cmp	r4, r8
   10868:	eb75 0109 	sbcs.w	r1, r5, r9
   1086c:	da1d      	bge.n	108aa <z_add_timeout+0xf6>
				t->dticks -= to->dticks;
   1086e:	ebb8 0004 	subs.w	r0, r8, r4
   10872:	eb69 0105 	sbc.w	r1, r9, r5
   10876:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1087a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1087c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   10880:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   10884:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   10888:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1088a:	429a      	cmp	r2, r3
   1088c:	d006      	beq.n	1089c <z_add_timeout+0xe8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1088e:	4592      	cmp	sl, r2
   10890:	d104      	bne.n	1089c <z_add_timeout+0xe8>
			z_clock_set_timeout(next_timeout(), false);
   10892:	f7ff ff67 	bl	10764 <next_timeout>
   10896:	2100      	movs	r1, #0
   10898:	f7fd f8b8 	bl	da0c <z_clock_set_timeout>
	__asm__ volatile(
   1089c:	f386 8811 	msr	BASEPRI, r6
   108a0:	f3bf 8f6f 	isb	sy
		}
	}
}
   108a4:	b003      	add	sp, #12
   108a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   108aa:	ebb4 0008 	subs.w	r0, r4, r8
   108ae:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   108b2:	42ba      	cmp	r2, r7
   108b4:	e9ca 0104 	strd	r0, r1, [sl, #16]
   108b8:	d0c6      	beq.n	10848 <z_add_timeout+0x94>
   108ba:	6812      	ldr	r2, [r2, #0]
   108bc:	e7c3      	b.n	10846 <z_add_timeout+0x92>
   108be:	bf00      	nop
   108c0:	20010528 	.word	0x20010528
   108c4:	20010344 	.word	0x20010344

000108c8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   108c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108cc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   108ce:	f7ff fc7b 	bl	101c8 <z_time_slice>
	__asm__ volatile(
   108d2:	f04f 0320 	mov.w	r3, #32
   108d6:	f3ef 8511 	mrs	r5, BASEPRI
   108da:	f383 8811 	msr	BASEPRI, r3
   108de:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   108e2:	4b2c      	ldr	r3, [pc, #176]	; (10994 <z_clock_announce+0xcc>)
   108e4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 10998 <z_clock_announce+0xd0>
   108e8:	4698      	mov	r8, r3
   108ea:	46cb      	mov	fp, r9
	return list->head == list;
   108ec:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1099c <z_clock_announce+0xd4>
   108f0:	601c      	str	r4, [r3, #0]
   108f2:	f8d8 c000 	ldr.w	ip, [r8]
   108f6:	f8da 4000 	ldr.w	r4, [sl]
   108fa:	4666      	mov	r6, ip
   108fc:	e9d9 2300 	ldrd	r2, r3, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10900:	4554      	cmp	r4, sl
   10902:	e9cd 2300 	strd	r2, r3, [sp]
   10906:	ea4f 77e6 	mov.w	r7, r6, asr #31
   1090a:	d00c      	beq.n	10926 <z_clock_announce+0x5e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1090c:	b15c      	cbz	r4, 10926 <z_clock_announce+0x5e>
   1090e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   10912:	458c      	cmp	ip, r1
   10914:	eb77 0302 	sbcs.w	r3, r7, r2
   10918:	da1b      	bge.n	10952 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1091a:	ebb1 000c 	subs.w	r0, r1, ip
   1091e:	eb62 0107 	sbc.w	r1, r2, r7
   10922:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   10926:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10928:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   1092a:	f8c8 4000 	str.w	r4, [r8]
	curr_tick += announce_remaining;
   1092e:	18f2      	adds	r2, r6, r3
   10930:	9b01      	ldr	r3, [sp, #4]
   10932:	eb47 0303 	adc.w	r3, r7, r3
   10936:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
   1093a:	f7ff ff13 	bl	10764 <next_timeout>
   1093e:	4621      	mov	r1, r4
   10940:	f7fd f864 	bl	da0c <z_clock_set_timeout>
	__asm__ volatile(
   10944:	f385 8811 	msr	BASEPRI, r5
   10948:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1094c:	b003      	add	sp, #12
   1094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   10952:	2200      	movs	r2, #0
		curr_tick += dt;
   10954:	e9dd 6700 	ldrd	r6, r7, [sp]
		t->dticks = 0;
   10958:	2300      	movs	r3, #0
		curr_tick += dt;
   1095a:	1876      	adds	r6, r6, r1
		announce_remaining -= dt;
   1095c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   10960:	eb47 77e1 	adc.w	r7, r7, r1, asr #31
		announce_remaining -= dt;
   10964:	f8c8 0000 	str.w	r0, [r8]
		t->dticks = 0;
   10968:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1096c:	4620      	mov	r0, r4
		curr_tick += dt;
   1096e:	e9c9 6700 	strd	r6, r7, [r9]
		remove_timeout(t);
   10972:	f7ff fedd 	bl	10730 <remove_timeout>
   10976:	f385 8811 	msr	BASEPRI, r5
   1097a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1097e:	68a3      	ldr	r3, [r4, #8]
   10980:	4798      	blx	r3
	__asm__ volatile(
   10982:	f04f 0320 	mov.w	r3, #32
   10986:	f3ef 8511 	mrs	r5, BASEPRI
   1098a:	f383 8811 	msr	BASEPRI, r3
   1098e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   10992:	e7ae      	b.n	108f2 <z_clock_announce+0x2a>
   10994:	2001067c 	.word	0x2001067c
   10998:	20010528 	.word	0x20010528
   1099c:	20010344 	.word	0x20010344

000109a0 <z_tick_get>:

int64_t z_tick_get(void)
{
   109a0:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   109a4:	f04f 0320 	mov.w	r3, #32
   109a8:	f3ef 8411 	mrs	r4, BASEPRI
   109ac:	f383 8811 	msr	BASEPRI, r3
   109b0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   109b4:	f7fd f890 	bl	dad8 <z_clock_elapsed>
   109b8:	4b07      	ldr	r3, [pc, #28]	; (109d8 <z_tick_get+0x38>)
   109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   109be:	eb12 0b00 	adds.w	fp, r2, r0
   109c2:	f143 0c00 	adc.w	ip, r3, #0
   109c6:	4658      	mov	r0, fp
   109c8:	4661      	mov	r1, ip
	__asm__ volatile(
   109ca:	f384 8811 	msr	BASEPRI, r4
   109ce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   109d2:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   109d6:	bf00      	nop
   109d8:	20010528 	.word	0x20010528

000109dc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   109dc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   109de:	4c06      	ldr	r4, [pc, #24]	; (109f8 <statics_init+0x1c>)
   109e0:	4d06      	ldr	r5, [pc, #24]	; (109fc <statics_init+0x20>)
   109e2:	42ac      	cmp	r4, r5
   109e4:	d301      	bcc.n	109ea <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   109e6:	2000      	movs	r0, #0
   109e8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   109ea:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   109ee:	4620      	mov	r0, r4
   109f0:	f000 ffce 	bl	11990 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   109f4:	3414      	adds	r4, #20
   109f6:	e7f4      	b.n	109e2 <statics_init+0x6>
   109f8:	20010414 	.word	0x20010414
   109fc:	20010414 	.word	0x20010414

00010a00 <spi_flash_at45_write_protection>:
}
   10a00:	2000      	movs	r0, #0
   10a02:	4770      	bx	lr

00010a04 <spi_flash_at45_pages_layout>:
	*layout = &get_dev_config(dev)->pages_layout;
   10a04:	6843      	ldr	r3, [r0, #4]
   10a06:	3318      	adds	r3, #24
   10a08:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   10a0a:	2301      	movs	r3, #1
   10a0c:	6013      	str	r3, [r2, #0]
}
   10a0e:	4770      	bx	lr

00010a10 <release>:
	k_sem_give(&get_dev_data(dev)->lock);
   10a10:	68c0      	ldr	r0, [r0, #12]
   10a12:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   10a14:	f7ff bdac 	b.w	10570 <z_impl_k_sem_give>

00010a18 <acquire>:
	k_sem_take(&get_dev_data(dev)->lock, K_FOREVER);
   10a18:	68c0      	ldr	r0, [r0, #12]
   10a1a:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
   10a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a24:	f7ff bdc4 	b.w	105b0 <z_impl_k_sem_take>

00010a28 <spi_write>:
 * @note This function is an helper function calling spi_transceive.
 */
static inline int spi_write(const struct device *dev,
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
   10a28:	b410      	push	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   10a2a:	6883      	ldr	r3, [r0, #8]
   10a2c:	681c      	ldr	r4, [r3, #0]
   10a2e:	2300      	movs	r3, #0
   10a30:	46a4      	mov	ip, r4
	return spi_transceive(dev, config, tx_bufs, NULL);
}
   10a32:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   10a34:	4760      	bx	ip

00010a36 <spi_flash_at45_pm_control>:
{
   10a36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct spi_flash_at45_data *dev_data = get_dev_data(dev);
   10a3a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   10a3e:	2901      	cmp	r1, #1
{
   10a40:	461d      	mov	r5, r3
   10a42:	4604      	mov	r4, r0
   10a44:	4616      	mov	r6, r2
   10a46:	f8d9 3020 	ldr.w	r3, [r9, #32]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   10a4a:	d12d      	bne.n	10aa8 <spi_flash_at45_pm_control+0x72>
		uint32_t new_state = *((const uint32_t *)context);
   10a4c:	6817      	ldr	r7, [r2, #0]
		if (new_state != dev_data->pm_state) {
   10a4e:	429f      	cmp	r7, r3
   10a50:	d016      	beq.n	10a80 <spi_flash_at45_pm_control+0x4a>
			switch (new_state) {
   10a52:	1e7b      	subs	r3, r7, #1
	const struct spi_flash_at45_config *dev_config = get_dev_config(dev);
   10a54:	f8d0 8004 	ldr.w	r8, [r0, #4]
			switch (new_state) {
   10a58:	2b04      	cmp	r3, #4
   10a5a:	d827      	bhi.n	10aac <spi_flash_at45_pm_control+0x76>
   10a5c:	e8df f003 	tbb	[pc, r3]
   10a60:	26191903 	.word	0x26191903
   10a64:	19          	.byte	0x19
   10a65:	00          	.byte	0x00
				acquire(dev);
   10a66:	f7ff ffd7 	bl	10a18 <acquire>
				send_cmd_op(dev, CMD_EXIT_DPD,
   10a6a:	21ab      	movs	r1, #171	; 0xab
   10a6c:	f8b8 202e 	ldrh.w	r2, [r8, #46]	; 0x2e
				send_cmd_op(dev,
   10a70:	4620      	mov	r0, r4
   10a72:	f7fb fe55 	bl	c720 <send_cmd_op>
				release(dev);
   10a76:	4620      	mov	r0, r4
   10a78:	f7ff ffca 	bl	10a10 <release>
			dev_data->pm_state = new_state;
   10a7c:	f8c9 7020 	str.w	r7, [r9, #32]
	if (cb) {
   10a80:	b1bd      	cbz	r5, 10ab2 <spi_flash_at45_pm_control+0x7c>
		cb(dev, err, context, arg);
   10a82:	4620      	mov	r0, r4
   10a84:	9b08      	ldr	r3, [sp, #32]
   10a86:	4632      	mov	r2, r6
   10a88:	2100      	movs	r1, #0
   10a8a:	47a8      	blx	r5
	return err;
   10a8c:	2000      	movs	r0, #0
}
   10a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				acquire(dev);
   10a92:	f7ff ffc1 	bl	10a18 <acquire>
				send_cmd_op(dev,
   10a96:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   10a9a:	f8b8 202c 	ldrh.w	r2, [r8, #44]	; 0x2c
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	bf14      	ite	ne
   10aa2:	2179      	movne	r1, #121	; 0x79
   10aa4:	21b9      	moveq	r1, #185	; 0xb9
   10aa6:	e7e3      	b.n	10a70 <spi_flash_at45_pm_control+0x3a>
		*((uint32_t *)context) = dev_data->pm_state;
   10aa8:	6013      	str	r3, [r2, #0]
   10aaa:	e7e9      	b.n	10a80 <spi_flash_at45_pm_control+0x4a>
				return -ENOTSUP;
   10aac:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10ab0:	e7ed      	b.n	10a8e <spi_flash_at45_pm_control+0x58>
	return err;
   10ab2:	4628      	mov	r0, r5
   10ab4:	e7eb      	b.n	10a8e <spi_flash_at45_pm_control+0x58>

00010ab6 <gpio_pin_set.constprop.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   10ab6:	2301      	movs	r3, #1
   10ab8:	fa03 f101 	lsl.w	r1, r3, r1
   10abc:	68c3      	ldr	r3, [r0, #12]
   10abe:	681b      	ldr	r3, [r3, #0]
   10ac0:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
   10ac2:	6883      	ldr	r3, [r0, #8]
   10ac4:	bf0c      	ite	eq
   10ac6:	68db      	ldreq	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   10ac8:	691b      	ldrne	r3, [r3, #16]
   10aca:	4718      	bx	r3

00010acc <gpio_pin_configure.constprop.1>:
static inline int gpio_pin_configure(const struct device *port,
   10acc:	b538      	push	{r3, r4, r5, lr}
   10ace:	460d      	mov	r5, r1
	struct gpio_driver_data *data =
   10ad0:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   10ad2:	6883      	ldr	r3, [r0, #8]
   10ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
   10ad8:	681b      	ldr	r3, [r3, #0]
   10ada:	4798      	blx	r3
	if (ret != 0) {
   10adc:	b930      	cbnz	r0, 10aec <gpio_pin_configure.constprop.1+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10ade:	2301      	movs	r3, #1
   10ae0:	fa03 f105 	lsl.w	r1, r3, r5
   10ae4:	6823      	ldr	r3, [r4, #0]
   10ae6:	ea23 0301 	bic.w	r3, r3, r1
   10aea:	6023      	str	r3, [r4, #0]
}
   10aec:	bd38      	pop	{r3, r4, r5, pc}

00010aee <flash_read.constprop.5>:
static inline int flash_read(const struct device * dev, off_t offset, void * data, size_t len)
   10aee:	b410      	push	{r4}
   10af0:	4613      	mov	r3, r2
	return api->read(dev, offset, data, len);
   10af2:	6882      	ldr	r2, [r0, #8]
   10af4:	6814      	ldr	r4, [r2, #0]
   10af6:	460a      	mov	r2, r1
   10af8:	46a4      	mov	ip, r4
   10afa:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
}
   10afe:	bc10      	pop	{r4}
   10b00:	4760      	bx	ip

00010b02 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   10b02:	b160      	cbz	r0, 10b1e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10b04:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10b06:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   10b0a:	2b01      	cmp	r3, #1
   10b0c:	d003      	beq.n	10b16 <sys_notify_validate+0x14>
   10b0e:	2b03      	cmp	r3, #3
   10b10:	d105      	bne.n	10b1e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   10b12:	6803      	ldr	r3, [r0, #0]
   10b14:	b11b      	cbz	r3, 10b1e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   10b16:	2300      	movs	r3, #0
   10b18:	6083      	str	r3, [r0, #8]
   10b1a:	4618      	mov	r0, r3
   10b1c:	4770      	bx	lr
		return -EINVAL;
   10b1e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   10b22:	4770      	bx	lr

00010b24 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10b24:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   10b26:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   10b28:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10b2c:	2a03      	cmp	r2, #3
   10b2e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   10b32:	6081      	str	r1, [r0, #8]
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   10b34:	bf0c      	ite	eq
   10b36:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   10b38:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10b3a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10b3c:	4770      	bx	lr

00010b3e <arch_printk_char_out>:
}
   10b3e:	2000      	movs	r0, #0
   10b40:	4770      	bx	lr

00010b42 <z_vprintk>:
{
   10b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   10b46:	2500      	movs	r5, #0
{
   10b48:	4606      	mov	r6, r0
   10b4a:	460f      	mov	r7, r1
   10b4c:	461c      	mov	r4, r3
	int min_width = -1;
   10b4e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   10b52:	46a8      	mov	r8, r5
{
   10b54:	b087      	sub	sp, #28
   10b56:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   10b5a:	f04f 0a00 	mov.w	sl, #0
					break;
   10b5e:	e007      	b.n	10b70 <z_vprintk+0x2e>
		if (!might_format) {
   10b60:	f1ba 0f00 	cmp.w	sl, #0
   10b64:	d10b      	bne.n	10b7e <z_vprintk+0x3c>
			if (*fmt != '%') {
   10b66:	2825      	cmp	r0, #37	; 0x25
   10b68:	f000 80f0 	beq.w	10d4c <z_vprintk+0x20a>
				out((int)*fmt, ctx);
   10b6c:	4639      	mov	r1, r7
   10b6e:	47b0      	blx	r6
	while (*fmt) {
   10b70:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   10b74:	2800      	cmp	r0, #0
   10b76:	d1f3      	bne.n	10b60 <z_vprintk+0x1e>
}
   10b78:	b007      	add	sp, #28
   10b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   10b7e:	2864      	cmp	r0, #100	; 0x64
   10b80:	d06c      	beq.n	10c5c <z_vprintk+0x11a>
   10b82:	d81a      	bhi.n	10bba <z_vprintk+0x78>
   10b84:	2839      	cmp	r0, #57	; 0x39
   10b86:	d80a      	bhi.n	10b9e <z_vprintk+0x5c>
   10b88:	2831      	cmp	r0, #49	; 0x31
   10b8a:	d25e      	bcs.n	10c4a <z_vprintk+0x108>
   10b8c:	282d      	cmp	r0, #45	; 0x2d
   10b8e:	f000 80e4 	beq.w	10d5a <z_vprintk+0x218>
   10b92:	2830      	cmp	r0, #48	; 0x30
   10b94:	d04a      	beq.n	10c2c <z_vprintk+0xea>
   10b96:	2825      	cmp	r0, #37	; 0x25
   10b98:	d107      	bne.n	10baa <z_vprintk+0x68>
				out((int)'%', ctx);
   10b9a:	4639      	mov	r1, r7
   10b9c:	e00b      	b.n	10bb6 <z_vprintk+0x74>
			switch (*fmt) {
   10b9e:	2858      	cmp	r0, #88	; 0x58
   10ba0:	f000 80a5 	beq.w	10cee <z_vprintk+0x1ac>
   10ba4:	2863      	cmp	r0, #99	; 0x63
   10ba6:	f000 80cd 	beq.w	10d44 <z_vprintk+0x202>
					out((int)'%', ctx);
   10baa:	4639      	mov	r1, r7
   10bac:	2025      	movs	r0, #37	; 0x25
   10bae:	47b0      	blx	r6
					out((int)*fmt, ctx);
   10bb0:	4639      	mov	r1, r7
   10bb2:	f89b 0000 	ldrb.w	r0, [fp]
   10bb6:	47b0      	blx	r6
   10bb8:	e7cf      	b.n	10b5a <z_vprintk+0x18>
			switch (*fmt) {
   10bba:	2870      	cmp	r0, #112	; 0x70
   10bbc:	f000 808d 	beq.w	10cda <z_vprintk+0x198>
   10bc0:	d80d      	bhi.n	10bde <z_vprintk+0x9c>
   10bc2:	2869      	cmp	r0, #105	; 0x69
   10bc4:	d04a      	beq.n	10c5c <z_vprintk+0x11a>
   10bc6:	286c      	cmp	r0, #108	; 0x6c
   10bc8:	d103      	bne.n	10bd2 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   10bca:	2d6c      	cmp	r5, #108	; 0x6c
   10bcc:	d12a      	bne.n	10c24 <z_vprintk+0xe2>
					length_mod = 'L';
   10bce:	254c      	movs	r5, #76	; 0x4c
   10bd0:	e7ce      	b.n	10b70 <z_vprintk+0x2e>
			switch (*fmt) {
   10bd2:	2868      	cmp	r0, #104	; 0x68
   10bd4:	d1e9      	bne.n	10baa <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   10bd6:	2d68      	cmp	r5, #104	; 0x68
   10bd8:	d124      	bne.n	10c24 <z_vprintk+0xe2>
					length_mod = 'H';
   10bda:	2548      	movs	r5, #72	; 0x48
   10bdc:	e7c8      	b.n	10b70 <z_vprintk+0x2e>
			switch (*fmt) {
   10bde:	2875      	cmp	r0, #117	; 0x75
   10be0:	d03c      	beq.n	10c5c <z_vprintk+0x11a>
   10be2:	d81b      	bhi.n	10c1c <z_vprintk+0xda>
   10be4:	2873      	cmp	r0, #115	; 0x73
   10be6:	d1e0      	bne.n	10baa <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   10be8:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   10bec:	469a      	mov	sl, r3
   10bee:	4652      	mov	r2, sl
   10bf0:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10bf4:	2800      	cmp	r0, #0
   10bf6:	f040 80a0 	bne.w	10d3a <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
   10bfa:	f1b8 0f03 	cmp.w	r8, #3
   10bfe:	f040 80b2 	bne.w	10d66 <z_vprintk+0x224>
					int remaining = min_width - (s - start);
   10c02:	eba2 0a03 	sub.w	sl, r2, r3
   10c06:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
   10c0a:	f1ba 0f00 	cmp.w	sl, #0
   10c0e:	dda4      	ble.n	10b5a <z_vprintk+0x18>
						out(' ', ctx);
   10c10:	4639      	mov	r1, r7
   10c12:	2020      	movs	r0, #32
   10c14:	47b0      	blx	r6
   10c16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   10c1a:	e7f6      	b.n	10c0a <z_vprintk+0xc8>
			switch (*fmt) {
   10c1c:	2878      	cmp	r0, #120	; 0x78
   10c1e:	d066      	beq.n	10cee <z_vprintk+0x1ac>
   10c20:	287a      	cmp	r0, #122	; 0x7a
   10c22:	d1c2      	bne.n	10baa <z_vprintk+0x68>
				} else if (length_mod == 0) {
   10c24:	2d00      	cmp	r5, #0
   10c26:	d1c0      	bne.n	10baa <z_vprintk+0x68>
   10c28:	4605      	mov	r5, r0
   10c2a:	e7a1      	b.n	10b70 <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
   10c2c:	f1b9 0f00 	cmp.w	r9, #0
   10c30:	da0e      	bge.n	10c50 <z_vprintk+0x10e>
   10c32:	f1b8 0f00 	cmp.w	r8, #0
   10c36:	f000 8093 	beq.w	10d60 <z_vprintk+0x21e>
					min_width = *fmt - '0';
   10c3a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   10c3e:	f1b8 0f00 	cmp.w	r8, #0
   10c42:	bf08      	it	eq
   10c44:	f04f 0802 	moveq.w	r8, #2
   10c48:	e792      	b.n	10b70 <z_vprintk+0x2e>
				if (min_width < 0) {
   10c4a:	f1b9 0f00 	cmp.w	r9, #0
   10c4e:	dbf4      	blt.n	10c3a <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   10c50:	230a      	movs	r3, #10
   10c52:	fb03 0909 	mla	r9, r3, r9, r0
   10c56:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   10c5a:	e7f0      	b.n	10c3e <z_vprintk+0xfc>
				if (length_mod == 'z') {
   10c5c:	2d7a      	cmp	r5, #122	; 0x7a
   10c5e:	d106      	bne.n	10c6e <z_vprintk+0x12c>
					d = va_arg(ap, long);
   10c60:	46a2      	mov	sl, r4
   10c62:	f85a 2b04 	ldr.w	r2, [sl], #4
   10c66:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   10c68:	2875      	cmp	r0, #117	; 0x75
   10c6a:	d125      	bne.n	10cb8 <z_vprintk+0x176>
   10c6c:	e00f      	b.n	10c8e <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
   10c6e:	2d6c      	cmp	r5, #108	; 0x6c
   10c70:	d0f6      	beq.n	10c60 <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   10c72:	2d4c      	cmp	r5, #76	; 0x4c
   10c74:	d105      	bne.n	10c82 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
   10c76:	3407      	adds	r4, #7
   10c78:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
   10c7c:	e8fa 2302 	ldrd	r2, r3, [sl], #8
   10c80:	e7f2      	b.n	10c68 <z_vprintk+0x126>
				} else if (*fmt == 'u') {
   10c82:	2875      	cmp	r0, #117	; 0x75
   10c84:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
   10c88:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
   10c8a:	d114      	bne.n	10cb6 <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
   10c8c:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   10c8e:	f1b8 0103 	subs.w	r1, r8, #3
   10c92:	bf18      	it	ne
   10c94:	2101      	movne	r1, #1
   10c96:	f1b8 0f01 	cmp.w	r8, #1
   10c9a:	bf0c      	ite	eq
   10c9c:	2030      	moveq	r0, #48	; 0x30
   10c9e:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   10ca0:	9101      	str	r1, [sp, #4]
   10ca2:	210a      	movs	r1, #10
   10ca4:	e9cd 0902 	strd	r0, r9, [sp, #8]
   10ca8:	9100      	str	r1, [sp, #0]
   10caa:	4630      	mov	r0, r6
   10cac:	4639      	mov	r1, r7
   10cae:	f7fc f867 	bl	cd80 <print_digits.part.0>
   10cb2:	4654      	mov	r4, sl
   10cb4:	e751      	b.n	10b5a <z_vprintk+0x18>
					d = va_arg(ap, int);
   10cb6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   10cb8:	2a00      	cmp	r2, #0
   10cba:	f173 0100 	sbcs.w	r1, r3, #0
   10cbe:	dae6      	bge.n	10c8e <z_vprintk+0x14c>
					out((int)'-', ctx);
   10cc0:	4639      	mov	r1, r7
   10cc2:	202d      	movs	r0, #45	; 0x2d
   10cc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10cc8:	47b0      	blx	r6
					d = -d;
   10cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10cce:	4252      	negs	r2, r2
   10cd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   10cd4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   10cd8:	e7d9      	b.n	10c8e <z_vprintk+0x14c>
				out('0', ctx);
   10cda:	4639      	mov	r1, r7
   10cdc:	2030      	movs	r0, #48	; 0x30
   10cde:	47b0      	blx	r6
				out('x', ctx);
   10ce0:	4639      	mov	r1, r7
   10ce2:	2078      	movs	r0, #120	; 0x78
   10ce4:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
   10ce6:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   10cea:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   10cee:	f89b 3000 	ldrb.w	r3, [fp]
   10cf2:	2b70      	cmp	r3, #112	; 0x70
   10cf4:	d103      	bne.n	10cfe <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
   10cf6:	f854 2b04 	ldr.w	r2, [r4], #4
   10cfa:	2300      	movs	r3, #0
   10cfc:	e00a      	b.n	10d14 <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
   10cfe:	2d6c      	cmp	r5, #108	; 0x6c
   10d00:	d0f9      	beq.n	10cf6 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
   10d02:	2d4c      	cmp	r5, #76	; 0x4c
   10d04:	d1f7      	bne.n	10cf6 <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
   10d06:	3407      	adds	r4, #7
   10d08:	f024 0307 	bic.w	r3, r4, #7
   10d0c:	461c      	mov	r4, r3
   10d0e:	685b      	ldr	r3, [r3, #4]
   10d10:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   10d14:	f1b8 0103 	subs.w	r1, r8, #3
   10d18:	bf18      	it	ne
   10d1a:	2101      	movne	r1, #1
   10d1c:	f1b8 0f01 	cmp.w	r8, #1
   10d20:	bf0c      	ite	eq
   10d22:	2030      	moveq	r0, #48	; 0x30
   10d24:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   10d26:	9101      	str	r1, [sp, #4]
   10d28:	2110      	movs	r1, #16
   10d2a:	e9cd 0902 	strd	r0, r9, [sp, #8]
   10d2e:	9100      	str	r1, [sp, #0]
   10d30:	4630      	mov	r0, r6
   10d32:	4639      	mov	r1, r7
   10d34:	f7fc f824 	bl	cd80 <print_digits.part.0>
   10d38:	e70f      	b.n	10b5a <z_vprintk+0x18>
					out((int)(*s++), ctx);
   10d3a:	4639      	mov	r1, r7
   10d3c:	9304      	str	r3, [sp, #16]
   10d3e:	47b0      	blx	r6
   10d40:	9b04      	ldr	r3, [sp, #16]
   10d42:	e754      	b.n	10bee <z_vprintk+0xac>
				out(c, ctx);
   10d44:	4639      	mov	r1, r7
   10d46:	f854 0b04 	ldr.w	r0, [r4], #4
   10d4a:	e734      	b.n	10bb6 <z_vprintk+0x74>
				length_mod = 0;
   10d4c:	4655      	mov	r5, sl
				padding = PAD_NONE;
   10d4e:	46d0      	mov	r8, sl
				min_width = -1;
   10d50:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   10d54:	f04f 0a01 	mov.w	sl, #1
   10d58:	e70a      	b.n	10b70 <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
   10d5a:	f04f 0803 	mov.w	r8, #3
   10d5e:	e707      	b.n	10b70 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   10d60:	f04f 0801 	mov.w	r8, #1
   10d64:	e704      	b.n	10b70 <z_vprintk+0x2e>
			might_format = 0;
   10d66:	4682      	mov	sl, r0
   10d68:	e702      	b.n	10b70 <z_vprintk+0x2e>

00010d6a <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   10d6a:	b40f      	push	{r0, r1, r2, r3}
   10d6c:	b507      	push	{r0, r1, r2, lr}
   10d6e:	a904      	add	r1, sp, #16
   10d70:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   10d74:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   10d76:	f7fc f853 	bl	ce20 <vprintk>
	}
	va_end(ap);
}
   10d7a:	b003      	add	sp, #12
   10d7c:	f85d eb04 	ldr.w	lr, [sp], #4
   10d80:	b004      	add	sp, #16
   10d82:	4770      	bx	lr

00010d84 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10d84:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   10d86:	f013 0307 	ands.w	r3, r3, #7
   10d8a:	d105      	bne.n	10d98 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   10d8c:	6803      	ldr	r3, [r0, #0]
   10d8e:	2b00      	cmp	r3, #0
		evt = EVT_START;
   10d90:	bf0c      	ite	eq
   10d92:	2000      	moveq	r0, #0
   10d94:	2003      	movne	r0, #3
   10d96:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   10d98:	2b02      	cmp	r3, #2
   10d9a:	d105      	bne.n	10da8 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   10d9c:	8b43      	ldrh	r3, [r0, #26]
   10d9e:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   10da0:	bf14      	ite	ne
   10da2:	2000      	movne	r0, #0
   10da4:	2004      	moveq	r0, #4
   10da6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   10da8:	2b01      	cmp	r3, #1
   10daa:	d105      	bne.n	10db8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   10dac:	6803      	ldr	r3, [r0, #0]
   10dae:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   10db0:	bf0c      	ite	eq
   10db2:	2000      	moveq	r0, #0
   10db4:	2005      	movne	r0, #5
   10db6:	4770      	bx	lr
	int evt = EVT_NOP;
   10db8:	2000      	movs	r0, #0
}
   10dba:	4770      	bx	lr

00010dbc <notify_one>:
{
   10dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dc0:	460d      	mov	r5, r1
   10dc2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10dc4:	4619      	mov	r1, r3
   10dc6:	1d28      	adds	r0, r5, #4
{
   10dc8:	4690      	mov	r8, r2
   10dca:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10dcc:	f7ff feaa 	bl	10b24 <sys_notify_finalize>
	if (cb) {
   10dd0:	4604      	mov	r4, r0
   10dd2:	b138      	cbz	r0, 10de4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   10dd4:	4633      	mov	r3, r6
   10dd6:	4642      	mov	r2, r8
   10dd8:	4629      	mov	r1, r5
   10dda:	4638      	mov	r0, r7
   10ddc:	46a4      	mov	ip, r4
}
   10dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   10de2:	4760      	bx	ip
}
   10de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010de8 <transition_complete>:
{
   10de8:	b410      	push	{r4}
	__asm__ volatile(
   10dea:	f04f 0420 	mov.w	r4, #32
   10dee:	f3ef 8211 	mrs	r2, BASEPRI
   10df2:	f384 8811 	msr	BASEPRI, r4
   10df6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10dfa:	6141      	str	r1, [r0, #20]
}
   10dfc:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   10dfe:	2101      	movs	r1, #1
   10e00:	f7fc b81c 	b.w	ce3c <process_event>

00010e04 <validate_args>:
{
   10e04:	b510      	push	{r4, lr}
   10e06:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   10e08:	b140      	cbz	r0, 10e1c <validate_args+0x18>
   10e0a:	b139      	cbz	r1, 10e1c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   10e0c:	1d08      	adds	r0, r1, #4
   10e0e:	f7ff fe78 	bl	10b02 <sys_notify_validate>
	if ((rv == 0)
   10e12:	b928      	cbnz	r0, 10e20 <validate_args+0x1c>
	    && ((cli->notify.flags
   10e14:	68a3      	ldr	r3, [r4, #8]
   10e16:	f033 0303 	bics.w	r3, r3, #3
   10e1a:	d001      	beq.n	10e20 <validate_args+0x1c>
		rv = -EINVAL;
   10e1c:	f06f 0015 	mvn.w	r0, #21
}
   10e20:	bd10      	pop	{r4, pc}

00010e22 <onoff_manager_init>:
{
   10e22:	b538      	push	{r3, r4, r5, lr}
   10e24:	460c      	mov	r4, r1
	if ((mgr == NULL)
   10e26:	4605      	mov	r5, r0
   10e28:	b158      	cbz	r0, 10e42 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10e2a:	b151      	cbz	r1, 10e42 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   10e2c:	680b      	ldr	r3, [r1, #0]
   10e2e:	b143      	cbz	r3, 10e42 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   10e30:	684b      	ldr	r3, [r1, #4]
   10e32:	b133      	cbz	r3, 10e42 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10e34:	221c      	movs	r2, #28
   10e36:	2100      	movs	r1, #0
   10e38:	f000 fa9a 	bl	11370 <memset>
	return 0;
   10e3c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10e3e:	612c      	str	r4, [r5, #16]
}
   10e40:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10e42:	f06f 0015 	mvn.w	r0, #21
   10e46:	e7fb      	b.n	10e40 <onoff_manager_init+0x1e>

00010e48 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10e48:	b570      	push	{r4, r5, r6, lr}
   10e4a:	4604      	mov	r4, r0
   10e4c:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10e4e:	f7ff ffd9 	bl	10e04 <validate_args>

	if (rv < 0) {
   10e52:	1e06      	subs	r6, r0, #0
   10e54:	db31      	blt.n	10eba <onoff_request+0x72>
   10e56:	f04f 0320 	mov.w	r3, #32
   10e5a:	f3ef 8111 	mrs	r1, BASEPRI
   10e5e:	f383 8811 	msr	BASEPRI, r3
   10e62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10e66:	f64f 76ff 	movw	r6, #65535	; 0xffff
   10e6a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10e6c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   10e6e:	42b3      	cmp	r3, r6
   10e70:	f000 0207 	and.w	r2, r0, #7
   10e74:	d02e      	beq.n	10ed4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10e76:	2a02      	cmp	r2, #2
   10e78:	d10e      	bne.n	10e98 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10e7a:	3301      	adds	r3, #1
   10e7c:	8363      	strh	r3, [r4, #26]
	rv = state;
   10e7e:	4616      	mov	r6, r2
		notify = true;
   10e80:	2301      	movs	r3, #1
	__asm__ volatile(
   10e82:	f381 8811 	msr	BASEPRI, r1
   10e86:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10e8a:	b1b3      	cbz	r3, 10eba <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   10e8c:	2300      	movs	r3, #0
   10e8e:	4629      	mov	r1, r5
   10e90:	4620      	mov	r0, r4
   10e92:	f7ff ff93 	bl	10dbc <notify_one>
   10e96:	e010      	b.n	10eba <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   10e98:	0783      	lsls	r3, r0, #30
   10e9a:	d001      	beq.n	10ea0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   10e9c:	2a06      	cmp	r2, #6
   10e9e:	d10e      	bne.n	10ebe <onoff_request+0x76>
	parent->next = child;
   10ea0:	2300      	movs	r3, #0
   10ea2:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10ea4:	6863      	ldr	r3, [r4, #4]
   10ea6:	b993      	cbnz	r3, 10ece <onoff_request+0x86>
	list->head = node;
   10ea8:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
   10eac:	4616      	mov	r6, r2
   10eae:	b962      	cbnz	r2, 10eca <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   10eb0:	460a      	mov	r2, r1
   10eb2:	4620      	mov	r0, r4
   10eb4:	2102      	movs	r1, #2
   10eb6:	f7fb ffc1 	bl	ce3c <process_event>
		}
	}

	return rv;
}
   10eba:	4630      	mov	r0, r6
   10ebc:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   10ebe:	2a05      	cmp	r2, #5
   10ec0:	bf0c      	ite	eq
   10ec2:	f06f 0622 	mvneq.w	r6, #34	; 0x22
   10ec6:	f06f 0604 	mvnne.w	r6, #4
   10eca:	2300      	movs	r3, #0
   10ecc:	e7d9      	b.n	10e82 <onoff_request+0x3a>
	parent->next = child;
   10ece:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10ed0:	6065      	str	r5, [r4, #4]
   10ed2:	e7eb      	b.n	10eac <onoff_request+0x64>
		rv = -EAGAIN;
   10ed4:	f06f 060a 	mvn.w	r6, #10
   10ed8:	e7f7      	b.n	10eca <onoff_request+0x82>

00010eda <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10eda:	4604      	mov	r4, r0
   10edc:	b508      	push	{r3, lr}
   10ede:	4608      	mov	r0, r1
   10ee0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   10ee2:	461a      	mov	r2, r3
   10ee4:	47a0      	blx	r4
	return z_impl_k_current_get();
   10ee6:	f7ff fb3d 	bl	10564 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   10eea:	f7fd fab1 	bl	e450 <z_impl_k_thread_abort>

00010eee <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10eee:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10ef0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   10ef8:	bf2c      	ite	cs
   10efa:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   10efe:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   10f02:	4770      	bx	lr

00010f04 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10f04:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   10f08:	6880      	ldr	r0, [r0, #8]
   10f0a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   10f0e:	bf2c      	ite	cs
   10f10:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   10f14:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   10f18:	4770      	bx	lr

00010f1a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   10f1a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   10f1c:	2201      	movs	r2, #1
   10f1e:	f7ff ffe6 	bl	10eee <chunk_field>
}
   10f22:	0840      	lsrs	r0, r0, #1
   10f24:	bd08      	pop	{r3, pc}

00010f26 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10f26:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10f28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10f30:	d308      	bcc.n	10f44 <set_chunk_used+0x1e>
		if (used) {
   10f32:	684b      	ldr	r3, [r1, #4]
   10f34:	b11a      	cbz	r2, 10f3e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   10f36:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   10f3a:	604b      	str	r3, [r1, #4]
   10f3c:	4770      	bx	lr
   10f3e:	f023 0301 	bic.w	r3, r3, #1
   10f42:	e7fa      	b.n	10f3a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   10f44:	884b      	ldrh	r3, [r1, #2]
   10f46:	b11a      	cbz	r2, 10f50 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   10f48:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   10f4c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   10f4e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   10f50:	f023 0301 	bic.w	r3, r3, #1
   10f54:	e7fa      	b.n	10f4c <set_chunk_used+0x26>

00010f56 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10f56:	0053      	lsls	r3, r2, #1
   10f58:	2201      	movs	r2, #1
   10f5a:	f7ff bfd3 	b.w	10f04 <chunk_set>

00010f5e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   10f5e:	6883      	ldr	r3, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   10f60:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   10f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10f66:	bf2c      	ite	cs
   10f68:	2302      	movcs	r3, #2
   10f6a:	2301      	movcc	r3, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   10f6c:	1ac0      	subs	r0, r0, r3
	return 31 - __builtin_clz(usable_sz);
   10f6e:	fab0 f080 	clz	r0, r0
}
   10f72:	f1c0 001f 	rsb	r0, r0, #31
   10f76:	4770      	bx	lr

00010f78 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   10f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f7c:	4604      	mov	r4, r0
   10f7e:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   10f80:	f7ff ffcb 	bl	10f1a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   10f84:	68a3      	ldr	r3, [r4, #8]
   10f86:	4601      	mov	r1, r0
   10f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10f8c:	d301      	bcc.n	10f92 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   10f8e:	2801      	cmp	r0, #1
   10f90:	d035      	beq.n	10ffe <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   10f92:	4620      	mov	r0, r4
   10f94:	f7ff ffe3 	bl	10f5e <bucket_idx>
	if (b->next == 0) {
   10f98:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   10f9c:	6916      	ldr	r6, [r2, #16]
   10f9e:	b99e      	cbnz	r6, 10fc8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   10fa0:	2301      	movs	r3, #1
   10fa2:	fa03 f000 	lsl.w	r0, r3, r0
   10fa6:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   10fa8:	4629      	mov	r1, r5
   10faa:	4303      	orrs	r3, r0
   10fac:	60e3      	str	r3, [r4, #12]
   10fae:	4620      	mov	r0, r4
		b->next = c;
   10fb0:	6115      	str	r5, [r2, #16]
   10fb2:	462b      	mov	r3, r5
   10fb4:	2202      	movs	r2, #2
   10fb6:	f7ff ffa5 	bl	10f04 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10fba:	2203      	movs	r2, #3
   10fbc:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   10fbe:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   10fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10fc4:	f7ff bf9e 	b.w	10f04 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   10fc8:	2202      	movs	r2, #2
   10fca:	4631      	mov	r1, r6
   10fcc:	4620      	mov	r0, r4
   10fce:	f7ff ff8e 	bl	10eee <chunk_field>
   10fd2:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   10fd4:	4603      	mov	r3, r0
   10fd6:	2202      	movs	r2, #2
   10fd8:	4629      	mov	r1, r5
   10fda:	4620      	mov	r0, r4
   10fdc:	f7ff ff92 	bl	10f04 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10fe0:	4633      	mov	r3, r6
   10fe2:	2203      	movs	r2, #3
   10fe4:	4629      	mov	r1, r5
   10fe6:	4620      	mov	r0, r4
   10fe8:	f7ff ff8c 	bl	10f04 <chunk_set>
   10fec:	2203      	movs	r2, #3
   10fee:	4639      	mov	r1, r7
   10ff0:	462b      	mov	r3, r5
   10ff2:	4620      	mov	r0, r4
   10ff4:	f7ff ff86 	bl	10f04 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   10ff8:	2202      	movs	r2, #2
   10ffa:	4631      	mov	r1, r6
   10ffc:	e7df      	b.n	10fbe <free_list_add+0x46>
   10ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011002 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   11002:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11008:	bf2c      	ite	cs
   1100a:	2508      	movcs	r5, #8
   1100c:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1100e:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   11010:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   11012:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11014:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11016:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11018:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1101c:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   11020:	1b2d      	subs	r5, r5, r4
   11022:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   11024:	6004      	str	r4, [r0, #0]
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   11026:	4629      	mov	r1, r5
	h->chunk0_hdr_area = 0;
   11028:	e9c4 2300 	strd	r2, r3, [r4]
	h->avail_buckets = 0;
   1102c:	e9c4 5202 	strd	r5, r2, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   11030:	4620      	mov	r0, r4
   11032:	f7ff ff94 	bl	10f5e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   11036:	4613      	mov	r3, r2
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11038:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1103a:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1103c:	1c47      	adds	r7, r0, #1
   1103e:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   11040:	f104 0110 	add.w	r1, r4, #16
   11044:	42bb      	cmp	r3, r7
   11046:	db29      	blt.n	1109c <sys_heap_init+0x9a>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   11048:	4632      	mov	r2, r6
   1104a:	4620      	mov	r0, r4
   1104c:	2100      	movs	r1, #0
   1104e:	f7ff ff82 	bl	10f56 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   11052:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   11054:	4620      	mov	r0, r4
   11056:	2201      	movs	r2, #1
   11058:	2100      	movs	r1, #0
   1105a:	f7ff ff64 	bl	10f26 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1105e:	463a      	mov	r2, r7
   11060:	4631      	mov	r1, r6
   11062:	f7ff ff78 	bl	10f56 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   11066:	4633      	mov	r3, r6
   11068:	4631      	mov	r1, r6
   1106a:	4620      	mov	r0, r4
   1106c:	2200      	movs	r2, #0
   1106e:	f7ff ff49 	bl	10f04 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   11072:	4629      	mov	r1, r5
   11074:	4620      	mov	r0, r4
   11076:	2200      	movs	r2, #0
   11078:	f7ff ff6d 	bl	10f56 <set_chunk_size>
   1107c:	463b      	mov	r3, r7
   1107e:	4629      	mov	r1, r5
   11080:	4620      	mov	r0, r4
   11082:	2200      	movs	r2, #0
   11084:	f7ff ff3e 	bl	10f04 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   11088:	4629      	mov	r1, r5
   1108a:	4620      	mov	r0, r4
   1108c:	2201      	movs	r2, #1
   1108e:	f7ff ff4a 	bl	10f26 <set_chunk_used>

	free_list_add(h, chunk0_size);
   11092:	4631      	mov	r1, r6
}
   11094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   11098:	f7ff bf6e 	b.w	10f78 <free_list_add>
		h->buckets[i].next = 0;
   1109c:	f841 2b04 	str.w	r2, [r1], #4
	for (int i = 0; i < nb_buckets; i++) {
   110a0:	3301      	adds	r3, #1
   110a2:	e7cf      	b.n	11044 <sys_heap_init+0x42>

000110a4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_SPI_FLASH_EN25, 1);
GEN_ABSOLUTE_SYM(CONFIG_SPI_FLASH_EN25_USE_READ_MODIFY_WRITE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SPI_FLASH_EN25_INIT_PRIORITY, 80);

GEN_ABS_SYM_END
   110a4:	4770      	bx	lr

000110a6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   110a6:	f7fe baa7 	b.w	f5f8 <SystemInit>

000110aa <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   110aa:	f7fc bd2f 	b.w	db0c <z_timer_cycle_get_32>

000110ae <dummy_timestamp>:
   110ae:	2000      	movs	r0, #0
   110b0:	4770      	bx	lr

000110b2 <log_string_sync>:
{
   110b2:	b40e      	push	{r1, r2, r3}
   110b4:	b503      	push	{r0, r1, lr}
   110b6:	aa03      	add	r2, sp, #12
   110b8:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   110bc:	2300      	movs	r3, #0
	va_start(ap, fmt);
   110be:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   110c0:	f7fb ffb8 	bl	d034 <log_generic>
}
   110c4:	b002      	add	sp, #8
   110c6:	f85d eb04 	ldr.w	lr, [sp], #4
   110ca:	b003      	add	sp, #12
   110cc:	4770      	bx	lr

000110ce <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   110ce:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   110d0:	f7fc f812 	bl	d0f8 <log_init>
	}

	return 0;
}
   110d4:	2000      	movs	r0, #0
   110d6:	bd08      	pop	{r3, pc}

000110d8 <log_strdup>:
}
   110d8:	4770      	bx	lr

000110da <out_func>:
{
   110da:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   110dc:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   110e0:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   110e2:	6852      	ldr	r2, [r2, #4]
   110e4:	2101      	movs	r1, #1
   110e6:	a801      	add	r0, sp, #4
   110e8:	4798      	blx	r3
}
   110ea:	2000      	movs	r0, #0
   110ec:	b003      	add	sp, #12
   110ee:	f85d fb04 	ldr.w	pc, [sp], #4

000110f2 <buffer_write>:
{
   110f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110f4:	4606      	mov	r6, r0
   110f6:	460d      	mov	r5, r1
   110f8:	4614      	mov	r4, r2
   110fa:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   110fc:	4621      	mov	r1, r4
   110fe:	4628      	mov	r0, r5
   11100:	463a      	mov	r2, r7
   11102:	47b0      	blx	r6
	} while (len != 0);
   11104:	1a24      	subs	r4, r4, r0
		buf += processed;
   11106:	4405      	add	r5, r0
	} while (len != 0);
   11108:	d1f8      	bne.n	110fc <buffer_write+0xa>
}
   1110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001110c <log_output_flush>:
		     log_output->control_block->offset,
   1110c:	6842      	ldr	r2, [r0, #4]
{
   1110e:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   11110:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   11114:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   11116:	6881      	ldr	r1, [r0, #8]
   11118:	6800      	ldr	r0, [r0, #0]
   1111a:	f7ff ffea 	bl	110f2 <buffer_write>
	log_output->control_block->offset = 0;
   1111e:	2200      	movs	r2, #0
   11120:	6863      	ldr	r3, [r4, #4]
   11122:	601a      	str	r2, [r3, #0]
}
   11124:	bd10      	pop	{r4, pc}

00011126 <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(const struct device *dev)
{
   11126:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   11128:	f7fc fa22 	bl	d570 <sys_pm_create_device_list>
	return 0;
}
   1112c:	2000      	movs	r0, #0
   1112e:	bd08      	pop	{r3, pc}

00011130 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11130:	230c      	movs	r3, #12
   11132:	68c2      	ldr	r2, [r0, #12]
   11134:	b2c9      	uxtb	r1, r1
   11136:	fb01 2303 	mla	r3, r1, r3, r2
   1113a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1113c:	f000 0007 	and.w	r0, r0, #7
   11140:	4770      	bx	lr

00011142 <set_off_state>:
	__asm__ volatile(
   11142:	f04f 0320 	mov.w	r3, #32
   11146:	f3ef 8211 	mrs	r2, BASEPRI
   1114a:	f383 8811 	msr	BASEPRI, r3
   1114e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11152:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11154:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   11158:	d001      	beq.n	1115e <set_off_state+0x1c>
   1115a:	428b      	cmp	r3, r1
   1115c:	d107      	bne.n	1116e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1115e:	2301      	movs	r3, #1
   11160:	6003      	str	r3, [r0, #0]
	int err = 0;
   11162:	2000      	movs	r0, #0
	__asm__ volatile(
   11164:	f382 8811 	msr	BASEPRI, r2
   11168:	f3bf 8f6f 	isb	sy
}
   1116c:	4770      	bx	lr
		err = -EPERM;
   1116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11172:	e7f7      	b.n	11164 <set_off_state+0x22>

00011174 <set_starting_state>:
{
   11174:	b510      	push	{r4, lr}
	__asm__ volatile(
   11176:	f04f 0320 	mov.w	r3, #32
   1117a:	f3ef 8211 	mrs	r2, BASEPRI
   1117e:	f383 8811 	msr	BASEPRI, r3
   11182:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11186:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11188:	f003 0407 	and.w	r4, r3, #7
   1118c:	2c01      	cmp	r4, #1
   1118e:	d106      	bne.n	1119e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   11190:	6001      	str	r1, [r0, #0]
	int err = 0;
   11192:	2000      	movs	r0, #0
	__asm__ volatile(
   11194:	f382 8811 	msr	BASEPRI, r2
   11198:	f3bf 8f6f 	isb	sy
}
   1119c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1119e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   111a2:	428b      	cmp	r3, r1
		err = -EBUSY;
   111a4:	bf14      	ite	ne
   111a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   111aa:	f06f 000f 	mvneq.w	r0, #15
   111ae:	e7f1      	b.n	11194 <set_starting_state+0x20>

000111b0 <set_on_state>:
	__asm__ volatile(
   111b0:	f04f 0320 	mov.w	r3, #32
   111b4:	f3ef 8211 	mrs	r2, BASEPRI
   111b8:	f383 8811 	msr	BASEPRI, r3
   111bc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   111c0:	6803      	ldr	r3, [r0, #0]
   111c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   111c6:	f043 0302 	orr.w	r3, r3, #2
   111ca:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   111cc:	f382 8811 	msr	BASEPRI, r2
   111d0:	f3bf 8f6f 	isb	sy
}
   111d4:	4770      	bx	lr

000111d6 <onoff_started_callback>:
	return &data->mgr[type];
   111d6:	68c3      	ldr	r3, [r0, #12]
	notify(mgr, 0);
   111d8:	201c      	movs	r0, #28
{
   111da:	b410      	push	{r4}
	return &data->mgr[type];
   111dc:	b2cc      	uxtb	r4, r1
	notify(mgr, 0);
   111de:	fb04 3000 	mla	r0, r4, r0, r3
   111e2:	2100      	movs	r1, #0
}
   111e4:	bc10      	pop	{r4}
	notify(mgr, 0);
   111e6:	4710      	bx	r2

000111e8 <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   111e8:	4610      	mov	r0, r2
   111ea:	f7ff b9c1 	b.w	10570 <z_impl_k_sem_give>

000111ee <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   111ee:	2000      	movs	r0, #0
   111f0:	f7fe ba4c 	b.w	f68c <nrfx_clock_stop>

000111f4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   111f4:	2000      	movs	r0, #0
   111f6:	f7fe ba17 	b.w	f628 <nrfx_clock_start>

000111fa <api_stop>:
{
   111fa:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   111fc:	240c      	movs	r4, #12
   111fe:	b2c9      	uxtb	r1, r1
   11200:	434c      	muls	r4, r1
{
   11202:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   11204:	68c0      	ldr	r0, [r0, #12]
   11206:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1120a:	2180      	movs	r1, #128	; 0x80
   1120c:	4418      	add	r0, r3
   1120e:	f7ff ff98 	bl	11142 <set_off_state>
	if (err < 0) {
   11212:	2800      	cmp	r0, #0
   11214:	db04      	blt.n	11220 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   11216:	6869      	ldr	r1, [r5, #4]
   11218:	440c      	add	r4, r1
   1121a:	6863      	ldr	r3, [r4, #4]
   1121c:	4798      	blx	r3
	return 0;
   1121e:	2000      	movs	r0, #0
}
   11220:	bd38      	pop	{r3, r4, r5, pc}

00011222 <api_start>:
{
   11222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   11224:	240c      	movs	r4, #12
   11226:	b2c9      	uxtb	r1, r1
   11228:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1122a:	68c5      	ldr	r5, [r0, #12]
{
   1122c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1122e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   11232:	2180      	movs	r1, #128	; 0x80
   11234:	4428      	add	r0, r5
{
   11236:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   11238:	f7ff ff9c 	bl	11174 <set_starting_state>
	if (err < 0) {
   1123c:	2800      	cmp	r0, #0
   1123e:	db08      	blt.n	11252 <api_start+0x30>
	subdata->cb = data->cb;
   11240:	687b      	ldr	r3, [r7, #4]
   11242:	4425      	add	r5, r4
   11244:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   11246:	68bb      	ldr	r3, [r7, #8]
   11248:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   1124a:	6873      	ldr	r3, [r6, #4]
   1124c:	591b      	ldr	r3, [r3, r4]
   1124e:	4798      	blx	r3
	return 0;
   11250:	2000      	movs	r0, #0
}
   11252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011254 <z_clock_device_ctrl>:
int __weak z_clock_device_ctrl(const struct device *device,
			       uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
   11254:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11258:	4770      	bx	lr

0001125a <z_clock_isr>:
}
   1125a:	4770      	bx	lr

0001125c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1125c:	4770      	bx	lr

0001125e <spm_request_read>:
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   1125e:	b510      	push	{r4, lr}
   11260:	b40f      	push	{r0, r1, r2, r3}
   11262:	f7fe fec1 	bl	ffe8 <k_sched_lock>
   11266:	bc0f      	pop	{r0, r1, r2, r3}
   11268:	f7f6 fec2 	bl	7ff0 <spm_request_read_nse>
   1126c:	b40f      	push	{r0, r1, r2, r3}
   1126e:	f7fe ff09 	bl	10084 <k_sched_unlock>
   11272:	bc0f      	pop	{r0, r1, r2, r3}
   11274:	bd10      	pop	{r4, pc}

00011276 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   11276:	2100      	movs	r1, #0
   11278:	2001      	movs	r0, #1
   1127a:	f7fc bd55 	b.w	dd28 <z_arm_fatal_error>

0001127e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1127e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   11280:	f383 880b 	msr	PSPLIM, r3
}
   11284:	4770      	bx	lr

00011286 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   11286:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   11288:	6800      	ldr	r0, [r0, #0]
   1128a:	f7fc bd4d 	b.w	dd28 <z_arm_fatal_error>

0001128e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1128e:	b508      	push	{r3, lr}
	handler();
   11290:	f7fc fd9a 	bl	ddc8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   11294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   11298:	f7fd b8ae 	b.w	e3f8 <z_arm_exc_exit>

0001129c <mpu_configure_region>:
{
   1129c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1129e:	684b      	ldr	r3, [r1, #4]
{
   112a0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   112a2:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   112a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   112a8:	890d      	ldrh	r5, [r1, #8]
   112aa:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   112ac:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   112ae:	f024 041f 	bic.w	r4, r4, #31
   112b2:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   112b4:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   112b8:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   112ba:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   112be:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   112c2:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   112c4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   112c8:	9303      	str	r3, [sp, #12]
   112ca:	f7fd f92f 	bl	e52c <region_allocate_and_init>
}
   112ce:	b005      	add	sp, #20
   112d0:	bd30      	pop	{r4, r5, pc}

000112d2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   112d2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   112d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   112da:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   112dc:	bf08      	it	eq
   112de:	f06f 0015 	mvneq.w	r0, #21
   112e2:	4770      	bx	lr

000112e4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   112e4:	3801      	subs	r0, #1
   112e6:	3901      	subs	r1, #1
   112e8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   112ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   112f0:	4293      	cmp	r3, r2
   112f2:	d101      	bne.n	112f8 <strcmp+0x14>
   112f4:	2b00      	cmp	r3, #0
   112f6:	d1f7      	bne.n	112e8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   112f8:	1a98      	subs	r0, r3, r2
   112fa:	4770      	bx	lr

000112fc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   112fc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   112fe:	b15a      	cbz	r2, 11318 <memcmp+0x1c>
   11300:	3901      	subs	r1, #1
   11302:	1884      	adds	r4, r0, r2
   11304:	f810 2b01 	ldrb.w	r2, [r0], #1
   11308:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1130c:	42a0      	cmp	r0, r4
   1130e:	d001      	beq.n	11314 <memcmp+0x18>
   11310:	429a      	cmp	r2, r3
   11312:	d0f7      	beq.n	11304 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   11314:	1ad0      	subs	r0, r2, r3
}
   11316:	bd10      	pop	{r4, pc}
		return 0;
   11318:	4610      	mov	r0, r2
   1131a:	e7fc      	b.n	11316 <memcmp+0x1a>

0001131c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1131c:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1131e:	ea81 0400 	eor.w	r4, r1, r0
   11322:	07a5      	lsls	r5, r4, #30
   11324:	4603      	mov	r3, r0
   11326:	d00b      	beq.n	11340 <memcpy+0x24>
   11328:	3b01      	subs	r3, #1
   1132a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1132c:	4291      	cmp	r1, r2
   1132e:	d11a      	bne.n	11366 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   11330:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   11332:	2a00      	cmp	r2, #0
   11334:	d0fc      	beq.n	11330 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   11336:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1133a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1133c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   11340:	079c      	lsls	r4, r3, #30
   11342:	d1f6      	bne.n	11332 <memcpy+0x16>
   11344:	0895      	lsrs	r5, r2, #2
   11346:	00ac      	lsls	r4, r5, #2
   11348:	1f1e      	subs	r6, r3, #4
   1134a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1134c:	42b9      	cmp	r1, r7
   1134e:	d105      	bne.n	1135c <memcpy+0x40>
   11350:	f06f 0603 	mvn.w	r6, #3
   11354:	4423      	add	r3, r4
   11356:	fb06 2205 	mla	r2, r6, r5, r2
   1135a:	e7e5      	b.n	11328 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1135c:	f851 cb04 	ldr.w	ip, [r1], #4
   11360:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   11364:	e7f2      	b.n	1134c <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   11366:	f811 4b01 	ldrb.w	r4, [r1], #1
   1136a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1136e:	e7dd      	b.n	1132c <memcpy+0x10>

00011370 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   11370:	4603      	mov	r3, r0
{
   11372:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   11374:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   11376:	079c      	lsls	r4, r3, #30
   11378:	d110      	bne.n	1139c <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1137a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1137e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   11382:	0894      	lsrs	r4, r2, #2
   11384:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   11388:	42b3      	cmp	r3, r6
   1138a:	d10d      	bne.n	113a8 <memset+0x38>
   1138c:	f06f 0503 	mvn.w	r5, #3
   11390:	fb05 2404 	mla	r4, r5, r4, r2
   11394:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   11396:	42a3      	cmp	r3, r4
   11398:	d109      	bne.n	113ae <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1139a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1139c:	2a00      	cmp	r2, #0
   1139e:	d0fc      	beq.n	1139a <memset+0x2a>
		*(d_byte++) = c_byte;
   113a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   113a4:	3a01      	subs	r2, #1
   113a6:	e7e6      	b.n	11376 <memset+0x6>
		*(d_word++) = c_word;
   113a8:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   113ac:	e7ec      	b.n	11388 <memset+0x18>
		*(d_byte++) = c_byte;
   113ae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   113b2:	e7f0      	b.n	11396 <memset+0x26>

000113b4 <_stdout_hook_default>:
}
   113b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   113b8:	4770      	bx	lr

000113ba <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113ba:	6843      	ldr	r3, [r0, #4]
}
   113bc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113be:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   113c0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   113c2:	600b      	str	r3, [r1, #0]
}
   113c4:	4770      	bx	lr

000113c6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113c6:	6843      	ldr	r3, [r0, #4]
   113c8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   113ca:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   113cc:	4042      	eors	r2, r0
   113ce:	400a      	ands	r2, r1
   113d0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   113d2:	605a      	str	r2, [r3, #4]
}
   113d4:	2000      	movs	r0, #0
   113d6:	4770      	bx	lr

000113d8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113d8:	6843      	ldr	r3, [r0, #4]
}
   113da:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113dc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   113de:	6099      	str	r1, [r3, #8]
}
   113e0:	4770      	bx	lr

000113e2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113e2:	6843      	ldr	r3, [r0, #4]
}
   113e4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113e6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   113e8:	60d9      	str	r1, [r3, #12]
}
   113ea:	4770      	bx	lr

000113ec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113ec:	6843      	ldr	r3, [r0, #4]
}
   113ee:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   113f0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   113f2:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   113f4:	4059      	eors	r1, r3
    p_reg->OUT = value;
   113f6:	6051      	str	r1, [r2, #4]
}
   113f8:	4770      	bx	lr

000113fa <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   113fa:	68c3      	ldr	r3, [r0, #12]
{
   113fc:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   113fe:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11400:	b158      	cbz	r0, 1141a <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11402:	2400      	movs	r4, #0
   11404:	4281      	cmp	r1, r0
   11406:	d113      	bne.n	11430 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   11408:	6808      	ldr	r0, [r1, #0]
   1140a:	b95c      	cbnz	r4, 11424 <gpio_nrfx_manage_callback+0x2a>
   1140c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1140e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   11410:	42a1      	cmp	r1, r4
   11412:	d100      	bne.n	11416 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   11414:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11416:	2000      	movs	r0, #0
   11418:	6008      	str	r0, [r1, #0]
	if (set) {
   1141a:	b972      	cbnz	r2, 1143a <gpio_nrfx_manage_callback+0x40>
	return 0;
   1141c:	2000      	movs	r0, #0
}
   1141e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11420:	4628      	mov	r0, r5
   11422:	e7ef      	b.n	11404 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   11424:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11426:	6898      	ldr	r0, [r3, #8]
   11428:	4281      	cmp	r1, r0
	list->tail = node;
   1142a:	bf08      	it	eq
   1142c:	609c      	streq	r4, [r3, #8]
   1142e:	e7f2      	b.n	11416 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11430:	6805      	ldr	r5, [r0, #0]
	return node->next;
   11432:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11434:	2d00      	cmp	r5, #0
   11436:	d1f3      	bne.n	11420 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   11438:	b13a      	cbz	r2, 1144a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1143a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1143c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1143e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   11440:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   11442:	2800      	cmp	r0, #0
   11444:	d1ea      	bne.n	1141c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   11446:	6099      	str	r1, [r3, #8]
   11448:	e7e9      	b.n	1141e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1144a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1144e:	e7e6      	b.n	1141e <gpio_nrfx_manage_callback+0x24>

00011450 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11450:	2301      	movs	r3, #1
   11452:	fa03 f101 	lsl.w	r1, r3, r1
   11456:	68c3      	ldr	r3, [r0, #12]
   11458:	681b      	ldr	r3, [r3, #0]
   1145a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1145c:	bf18      	it	ne
   1145e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   11462:	b112      	cbz	r2, 1146a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   11464:	6883      	ldr	r3, [r0, #8]
   11466:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11468:	4718      	bx	r3
   1146a:	6883      	ldr	r3, [r0, #8]
   1146c:	691b      	ldr	r3, [r3, #16]
   1146e:	e7fb      	b.n	11468 <gpio_pin_set+0x18>

00011470 <_spi_context_cs_control.isra.5>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   11470:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   11472:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   11474:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   11476:	b1fd      	cbz	r5, 114b8 <_spi_context_cs_control.isra.5+0x48>
   11478:	68ab      	ldr	r3, [r5, #8]
   1147a:	b1eb      	cbz	r3, 114b8 <_spi_context_cs_control.isra.5+0x48>
   1147c:	6818      	ldr	r0, [r3, #0]
   1147e:	b1d8      	cbz	r0, 114b8 <_spi_context_cs_control.isra.5+0x48>
		if (on) {
   11480:	b151      	cbz	r1, 11498 <_spi_context_cs_control.isra.5+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   11482:	7a19      	ldrb	r1, [r3, #8]
   11484:	2201      	movs	r2, #1
   11486:	f7ff ffe3 	bl	11450 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   1148a:	6823      	ldr	r3, [r4, #0]
   1148c:	689b      	ldr	r3, [r3, #8]
   1148e:	6858      	ldr	r0, [r3, #4]
}
   11490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   11494:	f000 ba34 	b.w	11900 <z_impl_k_busy_wait>
			if (!force_off &&
   11498:	b912      	cbnz	r2, 114a0 <_spi_context_cs_control.isra.5+0x30>
   1149a:	88aa      	ldrh	r2, [r5, #4]
   1149c:	0492      	lsls	r2, r2, #18
   1149e:	d40b      	bmi.n	114b8 <_spi_context_cs_control.isra.5+0x48>
			k_busy_wait(ctx->config->cs->delay);
   114a0:	6858      	ldr	r0, [r3, #4]
   114a2:	f000 fa2d 	bl	11900 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   114a6:	6823      	ldr	r3, [r4, #0]
   114a8:	2200      	movs	r2, #0
   114aa:	689b      	ldr	r3, [r3, #8]
   114ac:	7a19      	ldrb	r1, [r3, #8]
   114ae:	6818      	ldr	r0, [r3, #0]
}
   114b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   114b4:	f7ff bfcc 	b.w	11450 <gpio_pin_set>
}
   114b8:	bd38      	pop	{r3, r4, r5, pc}

000114ba <spi_context_unlock_unconditionally>:
{
   114ba:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   114bc:	2201      	movs	r2, #1
   114be:	2100      	movs	r1, #0
{
   114c0:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   114c2:	f7ff ffd5 	bl	11470 <_spi_context_cs_control.isra.5>
	if (!k_sem_count_get(&ctx->lock)) {
   114c6:	68e3      	ldr	r3, [r4, #12]
   114c8:	b923      	cbnz	r3, 114d4 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   114ca:	1d20      	adds	r0, r4, #4
}
   114cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114d0:	f7ff b84e 	b.w	10570 <z_impl_k_sem_give>
   114d4:	bd10      	pop	{r4, pc}

000114d6 <spim_nrfx_pm_control>:

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
static int spim_nrfx_pm_control(const struct device *dev,
				uint32_t ctrl_command,
				void *context, device_pm_cb cb, void *arg)
{
   114d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
   114da:	68c7      	ldr	r7, [r0, #12]
	const struct spi_nrfx_config *config = get_dev_config(dev);

	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   114dc:	2901      	cmp	r1, #1
{
   114de:	4699      	mov	r9, r3
   114e0:	4605      	mov	r5, r0
   114e2:	4616      	mov	r6, r2
   114e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   114e6:	d126      	bne.n	11536 <spim_nrfx_pm_control+0x60>
		uint32_t new_state = *((const uint32_t *)context);
   114e8:	f8d2 8000 	ldr.w	r8, [r2]

		if (new_state != data->pm_state) {
   114ec:	4598      	cmp	r8, r3
   114ee:	d010      	beq.n	11512 <spim_nrfx_pm_control+0x3c>
			switch (new_state) {
   114f0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   114f4:	2a04      	cmp	r2, #4
   114f6:	d820      	bhi.n	1153a <spim_nrfx_pm_control+0x64>
   114f8:	e8df f002 	tbb	[pc, r2]
   114fc:	1f171703 	.word	0x1f171703
   11500:	17          	.byte	0x17
   11501:	00          	.byte	0x00
			case DEVICE_PM_ACTIVE_STATE:
				ret = init_spim(dev);
   11502:	f7fd fb77 	bl	ebf4 <init_spim>
				/* Force reconfiguration before next transfer */
				data->ctx.config = NULL;
   11506:	2300      	movs	r3, #0
				break;

			default:
				ret = -ENOTSUP;
			}
			if (!ret) {
   11508:	4604      	mov	r4, r0
				data->ctx.config = NULL;
   1150a:	603b      	str	r3, [r7, #0]
			if (!ret) {
   1150c:	b910      	cbnz	r0, 11514 <spim_nrfx_pm_control+0x3e>
				data->pm_state = new_state;
   1150e:	f8c7 8054 	str.w	r8, [r7, #84]	; 0x54
	int ret = 0;
   11512:	2400      	movs	r4, #0
	} else {
		__ASSERT_NO_MSG(ctrl_command == DEVICE_PM_GET_POWER_STATE);
		*((uint32_t *)context) = data->pm_state;
	}

	if (cb) {
   11514:	f1b9 0f00 	cmp.w	r9, #0
   11518:	d004      	beq.n	11524 <spim_nrfx_pm_control+0x4e>
		cb(dev, ret, context, arg);
   1151a:	9b08      	ldr	r3, [sp, #32]
   1151c:	4632      	mov	r2, r6
   1151e:	4621      	mov	r1, r4
   11520:	4628      	mov	r0, r5
   11522:	47c8      	blx	r9
	}

	return ret;
}
   11524:	4620      	mov	r0, r4
   11526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (data->pm_state == DEVICE_PM_ACTIVE_STATE) {
   1152a:	2b01      	cmp	r3, #1
   1152c:	d1ef      	bne.n	1150e <spim_nrfx_pm_control+0x38>
					nrfx_spim_uninit(&config->spim);
   1152e:	6840      	ldr	r0, [r0, #4]
   11530:	f7fe f9fc 	bl	f92c <nrfx_spim_uninit>
			if (!ret) {
   11534:	e7eb      	b.n	1150e <spim_nrfx_pm_control+0x38>
		*((uint32_t *)context) = data->pm_state;
   11536:	6013      	str	r3, [r2, #0]
   11538:	e7eb      	b.n	11512 <spim_nrfx_pm_control+0x3c>
				ret = -ENOTSUP;
   1153a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1153e:	e7e9      	b.n	11514 <spim_nrfx_pm_control+0x3e>

00011540 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   11540:	b510      	push	{r4, lr}
   11542:	4604      	mov	r4, r0
   11544:	2200      	movs	r2, #0
   11546:	200b      	movs	r0, #11
   11548:	2101      	movs	r1, #1
   1154a:	f7fc fb81 	bl	dc50 <z_arm_irq_priority_set>
   1154e:	4620      	mov	r0, r4
   11550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11554:	f7fd bb4e 	b.w	ebf4 <init_spim>

00011558 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   11558:	68c0      	ldr	r0, [r0, #12]
{
   1155a:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1155c:	6803      	ldr	r3, [r0, #0]
   1155e:	428b      	cmp	r3, r1
   11560:	d106      	bne.n	11570 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   11562:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
   11566:	b934      	cbnz	r4, 11576 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   11568:	f7ff ffa7 	bl	114ba <spi_context_unlock_unconditionally>
	return 0;
   1156c:	4620      	mov	r0, r4
}
   1156e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11570:	f06f 0015 	mvn.w	r0, #21
   11574:	e7fb      	b.n	1156e <spi_nrfx_release+0x16>
		return -EBUSY;
   11576:	f06f 000f 	mvn.w	r0, #15
   1157a:	e7f8      	b.n	1156e <spi_nrfx_release+0x16>

0001157c <flash_nrf_write_protection>:
}
   1157c:	2000      	movs	r0, #0
   1157e:	4770      	bx	lr

00011580 <is_regular_addr_valid>:
{
   11580:	b538      	push	{r3, r4, r5, lr}
   11582:	4604      	mov	r4, r0
   11584:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   11586:	f000 f8f5 	bl	11774 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1158a:	4284      	cmp	r4, r0
   1158c:	d209      	bcs.n	115a2 <is_regular_addr_valid+0x22>
   1158e:	2c00      	cmp	r4, #0
   11590:	db07      	blt.n	115a2 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   11592:	42a8      	cmp	r0, r5
   11594:	d305      	bcc.n	115a2 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   11596:	442c      	add	r4, r5
	    len > flash_size ||
   11598:	4284      	cmp	r4, r0
   1159a:	bf8c      	ite	hi
   1159c:	2000      	movhi	r0, #0
   1159e:	2001      	movls	r0, #1
}
   115a0:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   115a2:	2000      	movs	r0, #0
   115a4:	e7fc      	b.n	115a0 <is_regular_addr_valid+0x20>

000115a6 <flash_nrf_read>:
{
   115a6:	b570      	push	{r4, r5, r6, lr}
   115a8:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   115aa:	4619      	mov	r1, r3
   115ac:	4628      	mov	r0, r5
{
   115ae:	4616      	mov	r6, r2
   115b0:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   115b2:	f7ff ffe5 	bl	11580 <is_regular_addr_valid>
   115b6:	b170      	cbz	r0, 115d6 <flash_nrf_read+0x30>
	if (!len) {
   115b8:	b184      	cbz	r4, 115dc <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   115ba:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
		return spm_request_read(data, addr, len);
   115be:	4622      	mov	r2, r4
   115c0:	4629      	mov	r1, r5
   115c2:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   115c4:	da03      	bge.n	115ce <flash_nrf_read+0x28>
}
   115c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   115ca:	f7ff be48 	b.w	1125e <spm_request_read>
	memcpy(data, (void *)addr, len);
   115ce:	f7ff fea5 	bl	1131c <memcpy>
	return 0;
   115d2:	2000      	movs	r0, #0
}
   115d4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   115d6:	f06f 0015 	mvn.w	r0, #21
   115da:	e7fb      	b.n	115d4 <flash_nrf_read+0x2e>
		return 0;
   115dc:	4620      	mov	r0, r4
   115de:	e7f9      	b.n	115d4 <flash_nrf_read+0x2e>

000115e0 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   115e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   115e4:	461d      	mov	r5, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   115e6:	6883      	ldr	r3, [r0, #8]
{
   115e8:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   115ea:	695b      	ldr	r3, [r3, #20]
   115ec:	4669      	mov	r1, sp
{
   115ee:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   115f0:	aa01      	add	r2, sp, #4
   115f2:	4798      	blx	r3

	while (layout_size--) {
   115f4:	e9dd 1200 	ldrd	r1, r2, [sp]
   115f8:	2300      	movs	r3, #0
	off_t end = 0;
   115fa:	4618      	mov	r0, r3
	off_t group_offs = 0;
   115fc:	469e      	mov	lr, r3
	size_t page_count = 0;
   115fe:	469c      	mov	ip, r3
   11600:	3a01      	subs	r2, #1
	while (layout_size--) {
   11602:	1c57      	adds	r7, r2, #1
   11604:	d102      	bne.n	1160c <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   11606:	f06f 0015 	mvn.w	r0, #21
   1160a:	e01a      	b.n	11642 <flash_get_page_info+0x62>
		if (use_addr) {
   1160c:	f8d1 8000 	ldr.w	r8, [r1]
   11610:	b1d6      	cbz	r6, 11648 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   11612:	684f      	ldr	r7, [r1, #4]
   11614:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   11618:	42a0      	cmp	r0, r4
   1161a:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   1161e:	dd18      	ble.n	11652 <flash_get_page_info+0x72>
   11620:	9201      	str	r2, [sp, #4]
   11622:	b103      	cbz	r3, 11626 <flash_get_page_info+0x46>
   11624:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   11626:	9b00      	ldr	r3, [sp, #0]
   11628:	685b      	ldr	r3, [r3, #4]
   1162a:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   1162c:	b176      	cbz	r6, 1164c <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   1162e:	eba4 040e 	sub.w	r4, r4, lr
   11632:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   11636:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   11638:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   1163c:	4464      	add	r4, ip
			info->start_offset = group_offs +
   1163e:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   11640:	60ac      	str	r4, [r5, #8]
}
   11642:	b002      	add	sp, #8
   11644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   11648:	4440      	add	r0, r8
   1164a:	e7e5      	b.n	11618 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   1164c:	eba4 040c 	sub.w	r4, r4, ip
   11650:	e7f1      	b.n	11636 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   11652:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   11654:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   11656:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   1165a:	3108      	adds	r1, #8
   1165c:	2301      	movs	r3, #1
   1165e:	463a      	mov	r2, r7
   11660:	e7cf      	b.n	11602 <flash_get_page_info+0x22>

00011662 <z_impl_flash_get_page_info_by_idx>:

int z_impl_flash_get_page_info_by_idx(const struct device *dev,
				      uint32_t page_index,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, page_index, false, info);
   11662:	4613      	mov	r3, r2
   11664:	2200      	movs	r2, #0
   11666:	f7ff bfbb 	b.w	115e0 <flash_get_page_info>

0001166a <z_impl_flash_get_page_count>:
}

size_t z_impl_flash_get_page_count(const struct device *dev)
{
   1166a:	b513      	push	{r0, r1, r4, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	size_t count = 0;

	api->page_layout(dev, &layout, &layout_size);
   1166c:	6883      	ldr	r3, [r0, #8]
   1166e:	aa01      	add	r2, sp, #4
   11670:	695b      	ldr	r3, [r3, #20]
   11672:	4669      	mov	r1, sp
   11674:	4798      	blx	r3

	while (layout_size--) {
   11676:	e9dd 1200 	ldrd	r1, r2, [sp]
   1167a:	2300      	movs	r3, #0
	size_t count = 0;
   1167c:	4618      	mov	r0, r3
	while (layout_size--) {
   1167e:	4293      	cmp	r3, r2
   11680:	d101      	bne.n	11686 <z_impl_flash_get_page_count+0x1c>
		count += layout->pages_count;
		layout++;
	}

	return count;
}
   11682:	b002      	add	sp, #8
   11684:	bd10      	pop	{r4, pc}
		count += layout->pages_count;
   11686:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
   1168a:	3301      	adds	r3, #1
   1168c:	4420      	add	r0, r4
		layout++;
   1168e:	e7f6      	b.n	1167e <z_impl_flash_get_page_count+0x14>

00011690 <uarte_nrfx_config_get>:
{
   11690:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   11692:	68c3      	ldr	r3, [r0, #12]
   11694:	3304      	adds	r3, #4
   11696:	e893 0003 	ldmia.w	r3, {r0, r1}
   1169a:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1169e:	2000      	movs	r0, #0
   116a0:	4770      	bx	lr

000116a2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   116a2:	6843      	ldr	r3, [r0, #4]
   116a4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   116a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   116aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   116ae:	4770      	bx	lr

000116b0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   116b0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   116b2:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   116b4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   116b6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   116ba:	b148      	cbz	r0, 116d0 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   116bc:	2000      	movs	r0, #0
	*c = data->rx_data;
   116be:	7d12      	ldrb	r2, [r2, #20]
   116c0:	700a      	strb	r2, [r1, #0]
   116c2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   116c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   116ca:	2201      	movs	r2, #1
   116cc:	601a      	str	r2, [r3, #0]
	return 0;
   116ce:	4770      	bx	lr
		return -1;
   116d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   116d4:	4770      	bx	lr

000116d6 <uarte_nrfx_poll_out>:
{
   116d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   116da:	6843      	ldr	r3, [r0, #4]
{
   116dc:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   116e0:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   116e2:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   116e4:	f000 f906 	bl	118f4 <k_is_in_isr>
   116e8:	bb98      	cbnz	r0, 11752 <uarte_nrfx_poll_out+0x7c>
   116ea:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   116ec:	f04f 0801 	mov.w	r8, #1
   116f0:	f106 070c 	add.w	r7, r6, #12
   116f4:	e8d7 3fef 	ldaex	r3, [r7]
   116f8:	2b00      	cmp	r3, #0
   116fa:	d103      	bne.n	11704 <uarte_nrfx_poll_out+0x2e>
   116fc:	e8c7 8fe2 	stlex	r2, r8, [r7]
   11700:	2a00      	cmp	r2, #0
   11702:	d1f7      	bne.n	116f4 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   11704:	d007      	beq.n	11716 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   11706:	2021      	movs	r0, #33	; 0x21
   11708:	2100      	movs	r1, #0
   1170a:	3d01      	subs	r5, #1
   1170c:	f7fe ff0a 	bl	10524 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   11710:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11714:	d1ee      	bne.n	116f4 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11716:	2300      	movs	r3, #0
   11718:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1171c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11720:	f10d 0307 	add.w	r3, sp, #7
   11724:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11728:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1172a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   1172e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11732:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11734:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   11738:	b923      	cbnz	r3, 11744 <uarte_nrfx_poll_out+0x6e>
   1173a:	2001      	movs	r0, #1
   1173c:	f000 f80d 	bl	1175a <nrfx_busy_wait>
   11740:	3d01      	subs	r5, #1
   11742:	d1f7      	bne.n	11734 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11744:	2301      	movs	r3, #1
   11746:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   11748:	2300      	movs	r3, #0
   1174a:	60f3      	str	r3, [r6, #12]
}
   1174c:	b002      	add	sp, #8
   1174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   11752:	2301      	movs	r3, #1
   11754:	60f3      	str	r3, [r6, #12]
   11756:	e7de      	b.n	11716 <uarte_nrfx_poll_out+0x40>

00011758 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11758:	4700      	bx	r0

0001175a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1175a:	f000 b8d1 	b.w	11900 <z_impl_k_busy_wait>

0001175e <nrfx_clock_enable>:
{
   1175e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   11760:	2005      	movs	r0, #5
   11762:	f7fc fa67 	bl	dc34 <arch_irq_is_enabled>
   11766:	b920      	cbnz	r0, 11772 <nrfx_clock_enable+0x14>
}
   11768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1176c:	2005      	movs	r0, #5
   1176e:	f7fc ba3d 	b.w	dbec <arch_irq_enable>
   11772:	bd08      	pop	{r3, pc}

00011774 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   11774:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   11778:	4770      	bx	lr

0001177a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1177a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1177e:	4770      	bx	lr

00011780 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   11780:	f44f 7080 	mov.w	r0, #256	; 0x100
   11784:	4770      	bx	lr

00011786 <device_pm_control_nop>:
			  void *unused_context,
			  device_pm_cb cb,
			  void *unused_arg)
{
	return -ENOTSUP;
}
   11786:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1178a:	4770      	bx	lr

0001178c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1178c:	f7ff bd66 	b.w	1125c <z_clock_idle_exit>

00011790 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11790:	4603      	mov	r3, r0
   11792:	b920      	cbnz	r0, 1179e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11794:	f3ef 8205 	mrs	r2, IPSR
   11798:	b90a      	cbnz	r2, 1179e <z_reschedule_irqlock+0xe>
   1179a:	f7fc b9d1 	b.w	db40 <arch_swap>
   1179e:	f383 8811 	msr	BASEPRI, r3
   117a2:	f3bf 8f6f 	isb	sy
}
   117a6:	4770      	bx	lr

000117a8 <z_reschedule_unlocked>:
	__asm__ volatile(
   117a8:	f04f 0320 	mov.w	r3, #32
   117ac:	f3ef 8011 	mrs	r0, BASEPRI
   117b0:	f383 8811 	msr	BASEPRI, r3
   117b4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   117b8:	f7ff bfea 	b.w	11790 <z_reschedule_irqlock>

000117bc <unpend_thread_no_timeout>:
{
   117bc:	b510      	push	{r4, lr}
   117be:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   117c0:	4601      	mov	r1, r0
   117c2:	6880      	ldr	r0, [r0, #8]
   117c4:	f7fe fc24 	bl	10010 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   117c8:	7b63      	ldrb	r3, [r4, #13]
   117ca:	f023 0302 	bic.w	r3, r3, #2
   117ce:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   117d0:	2300      	movs	r3, #0
   117d2:	60a3      	str	r3, [r4, #8]
}
   117d4:	bd10      	pop	{r4, pc}

000117d6 <z_priq_dumb_best>:
	return list->head == list;
   117d6:	6803      	ldr	r3, [r0, #0]
}
   117d8:	4298      	cmp	r0, r3
   117da:	bf14      	ite	ne
   117dc:	4618      	movne	r0, r3
   117de:	2000      	moveq	r0, #0
   117e0:	4770      	bx	lr

000117e2 <z_ready_thread>:
{
   117e2:	b510      	push	{r4, lr}
   117e4:	f04f 0320 	mov.w	r3, #32
   117e8:	f3ef 8411 	mrs	r4, BASEPRI
   117ec:	f383 8811 	msr	BASEPRI, r3
   117f0:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   117f4:	f7fe fc62 	bl	100bc <ready_thread>
	__asm__ volatile(
   117f8:	f384 8811 	msr	BASEPRI, r4
   117fc:	f3bf 8f6f 	isb	sy
}
   11800:	bd10      	pop	{r4, pc}

00011802 <z_thread_timeout>:
{
   11802:	b570      	push	{r4, r5, r6, lr}
   11804:	4604      	mov	r4, r0
	__asm__ volatile(
   11806:	f04f 0320 	mov.w	r3, #32
   1180a:	f3ef 8611 	mrs	r6, BASEPRI
   1180e:	f383 8811 	msr	BASEPRI, r3
   11812:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   11816:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1181a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   1181e:	b113      	cbz	r3, 11826 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   11820:	4628      	mov	r0, r5
   11822:	f7ff ffcb 	bl	117bc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   11826:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   1182a:	4628      	mov	r0, r5
   1182c:	f023 0314 	bic.w	r3, r3, #20
   11830:	f804 3c0b 	strb.w	r3, [r4, #-11]
   11834:	f7fe fc42 	bl	100bc <ready_thread>
	__asm__ volatile(
   11838:	f386 8811 	msr	BASEPRI, r6
   1183c:	f3bf 8f6f 	isb	sy
}
   11840:	bd70      	pop	{r4, r5, r6, pc}

00011842 <add_to_waitq_locked>:
{
   11842:	b538      	push	{r3, r4, r5, lr}
   11844:	4604      	mov	r4, r0
   11846:	460d      	mov	r5, r1
	unready_thread(thread);
   11848:	f7fe fd90 	bl	1036c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1184c:	7b63      	ldrb	r3, [r4, #13]
   1184e:	f043 0302 	orr.w	r3, r3, #2
   11852:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11854:	b17d      	cbz	r5, 11876 <add_to_waitq_locked+0x34>
   11856:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   11858:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1185a:	429d      	cmp	r5, r3
   1185c:	d012      	beq.n	11884 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1185e:	b18b      	cbz	r3, 11884 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   11860:	f994 200e 	ldrsb.w	r2, [r4, #14]
   11864:	f993 100e 	ldrsb.w	r1, [r3, #14]
   11868:	4291      	cmp	r1, r2
   1186a:	dd05      	ble.n	11878 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   1186c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1186e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   11872:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11874:	605c      	str	r4, [r3, #4]
}
   11876:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   11878:	6869      	ldr	r1, [r5, #4]
   1187a:	428b      	cmp	r3, r1
   1187c:	d002      	beq.n	11884 <add_to_waitq_locked+0x42>
   1187e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11880:	2b00      	cmp	r3, #0
   11882:	d1ef      	bne.n	11864 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   11884:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   11886:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   11888:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1188a:	686b      	ldr	r3, [r5, #4]
   1188c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1188e:	606c      	str	r4, [r5, #4]
}
   11890:	e7f1      	b.n	11876 <add_to_waitq_locked+0x34>

00011892 <z_unpend_first_thread>:
{
   11892:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11894:	f04f 0320 	mov.w	r3, #32
   11898:	f3ef 8211 	mrs	r2, BASEPRI
   1189c:	f383 8811 	msr	BASEPRI, r3
   118a0:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   118a4:	f7ff ff97 	bl	117d6 <z_priq_dumb_best>
   118a8:	4604      	mov	r4, r0
	__asm__ volatile(
   118aa:	f382 8811 	msr	BASEPRI, r2
   118ae:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   118b2:	b188      	cbz	r0, 118d8 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   118b4:	f04f 0320 	mov.w	r3, #32
   118b8:	f3ef 8511 	mrs	r5, BASEPRI
   118bc:	f383 8811 	msr	BASEPRI, r3
   118c0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   118c4:	f7ff ff7a 	bl	117bc <unpend_thread_no_timeout>
	__asm__ volatile(
   118c8:	f385 8811 	msr	BASEPRI, r5
   118cc:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   118d0:	f104 0018 	add.w	r0, r4, #24
   118d4:	f000 f818 	bl	11908 <z_abort_timeout>
}
   118d8:	4620      	mov	r0, r4
   118da:	bd38      	pop	{r3, r4, r5, pc}

000118dc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   118dc:	b13a      	cbz	r2, 118ee <z_impl_k_sem_init+0x12>
   118de:	428a      	cmp	r2, r1
   118e0:	d305      	bcc.n	118ee <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   118e2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   118e6:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   118ea:	2000      	movs	r0, #0
   118ec:	4770      	bx	lr
		return -EINVAL;
   118ee:	f06f 0015 	mvn.w	r0, #21
}
   118f2:	4770      	bx	lr

000118f4 <k_is_in_isr>:
   118f4:	f3ef 8005 	mrs	r0, IPSR
}
   118f8:	3000      	adds	r0, #0
   118fa:	bf18      	it	ne
   118fc:	2001      	movne	r0, #1
   118fe:	4770      	bx	lr

00011900 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   11900:	f7fb bb8e 	b.w	d020 <arch_busy_wait>

00011904 <k_thread_name_get>:
}
   11904:	2000      	movs	r0, #0
   11906:	4770      	bx	lr

00011908 <z_abort_timeout>:
{
   11908:	b510      	push	{r4, lr}
	__asm__ volatile(
   1190a:	f04f 0220 	mov.w	r2, #32
   1190e:	f3ef 8411 	mrs	r4, BASEPRI
   11912:	f382 8811 	msr	BASEPRI, r2
   11916:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1191a:	6803      	ldr	r3, [r0, #0]
   1191c:	b13b      	cbz	r3, 1192e <z_abort_timeout+0x26>
			remove_timeout(to);
   1191e:	f7fe ff07 	bl	10730 <remove_timeout>
			ret = 0;
   11922:	2000      	movs	r0, #0
	__asm__ volatile(
   11924:	f384 8811 	msr	BASEPRI, r4
   11928:	f3bf 8f6f 	isb	sy
}
   1192c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1192e:	f06f 0015 	mvn.w	r0, #21
   11932:	e7f7      	b.n	11924 <z_abort_timeout+0x1c>

00011934 <z_get_next_timeout_expiry>:
{
   11934:	b510      	push	{r4, lr}
	__asm__ volatile(
   11936:	f04f 0320 	mov.w	r3, #32
   1193a:	f3ef 8411 	mrs	r4, BASEPRI
   1193e:	f383 8811 	msr	BASEPRI, r3
   11942:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   11946:	f7fe ff0d 	bl	10764 <next_timeout>
	__asm__ volatile(
   1194a:	f384 8811 	msr	BASEPRI, r4
   1194e:	f3bf 8f6f 	isb	sy
}
   11952:	bd10      	pop	{r4, pc}

00011954 <z_set_timeout_expiry>:
{
   11954:	b570      	push	{r4, r5, r6, lr}
   11956:	4604      	mov	r4, r0
   11958:	460e      	mov	r6, r1
	__asm__ volatile(
   1195a:	f04f 0320 	mov.w	r3, #32
   1195e:	f3ef 8511 	mrs	r5, BASEPRI
   11962:	f383 8811 	msr	BASEPRI, r3
   11966:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1196a:	f7fe fefb 	bl	10764 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1196e:	2801      	cmp	r0, #1
   11970:	dd05      	ble.n	1197e <z_set_timeout_expiry+0x2a>
   11972:	42a0      	cmp	r0, r4
   11974:	dd03      	ble.n	1197e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   11976:	4631      	mov	r1, r6
   11978:	4620      	mov	r0, r4
   1197a:	f7fc f847 	bl	da0c <z_clock_set_timeout>
	__asm__ volatile(
   1197e:	f385 8811 	msr	BASEPRI, r5
   11982:	f3bf 8f6f 	isb	sy
}
   11986:	bd70      	pop	{r4, r5, r6, pc}

00011988 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   11988:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1198a:	f7ff f809 	bl	109a0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1198e:	bd08      	pop	{r3, pc}

00011990 <k_heap_init>:
{
   11990:	b410      	push	{r4}
   11992:	f100 040c 	add.w	r4, r0, #12
   11996:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1199a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1199c:	f7ff bb31 	b.w	11002 <sys_heap_init>

000119a0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   119a0:	4770      	bx	lr
